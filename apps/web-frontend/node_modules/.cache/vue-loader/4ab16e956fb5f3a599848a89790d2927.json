{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/CircularButton.vue?vue&type=style&index=0&id=6c6e8cbe&scoped=true&lang=css&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/CircularButton.vue","mtime":1756885034407},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/css-loader/dist/cjs.js","mtime":1756885033612},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1756885034208},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/postcss-loader/src/index.js","mtime":1756885034000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1756885033541},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1756885034208}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNpcmN1bGFyLWJ1dHRvbiB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9Cgo="},{"version":3,"sources":["CircularButton.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqQA;AACA;AACA;AACA;AACA","file":"CircularButton.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"circular-button no-select\">\n    <svg\n      @touchstart=\"handleMouseDown\" @touchend=\"handleMouseUp\"\n      @mousedown=\"handleMouseDown\" @mouseup=\"handleMouseUp\"\n      :width=\"svgSize\"\n      :height=\"svgSize\"\n      :viewBox=\"'0 0 ' + svgSize + ' ' + svgSize\"\n      style=\"cursor: pointer;\"\n    >\n      <!-- 背景圆圈 -->\n      <circle\n        :cx=\"svgSize / 2\"\n        :cy=\"svgSize / 2\"\n        :r=\"radius\"\n        fill=\"none\"\n        stroke=\"rgba(255, 255, 255, 0.5)\"\n        :stroke-width=\"strokeWidth\"\n      />\n      <!-- 红色进度条（长按时显示） -->\n       <circle\n        v-if=\"isLongPress\"\n        :cx=\"svgSize / 2\"\n        :cy=\"svgSize / 2\"\n        :r=\"radius\"\n        fill=\"none\"\n        stroke=\"rgba(255, 0, 0, 0.7)\"\n        :stroke-width=\"strokeWidth\"\n        :stroke-dasharray=\"circumference\"\n        :stroke-dashoffset=\"circumference * (1 - longPressProgress)\"\n        stroke-linecap=\"round\"\n        :transform=\"'rotate(-90 ' + svgSize / 2 + ' ' + svgSize / 2 + ')'\"\n      />\n      <!-- 进度条 -->\n      <circle\n        :cx=\"svgSize / 2\"\n        :cy=\"svgSize / 2\"\n        :r=\"radius\"\n        fill=\"none\"\n        stroke=\"rgba(0, 255, 0, 0.7)\"\n        :stroke-width=\"strokeWidth\"\n        :stroke-dasharray=\"circumference\"\n        :stroke-dashoffset=\"circumference * (1 - progress)\"\n        stroke-linecap=\"round\"\n        :transform=\"'rotate(-90 ' + svgSize / 2 + ' ' + svgSize / 2 + ')'\"\n      />\n      <!-- 按钮文本 -->\n      <text\n        :x=\"svgSize / 2\"\n        :y=\"svgSize / 2\"\n        fill=\"rgba(255, 255, 255, 0.7)\"\n        :font-size=\"fontSize\"\n        text-anchor=\"middle\"\n        alignment-baseline=\"central\"\n      >\n        {{ progressText }}\n      </text>\n\n      <image\n        :x=\"svgSize / 2\" \n        :y=\"svgSize / 2\"\n        v-if=\"!isClicked\"\n        xlink:href=\"@/assets/images/svg/ui/media record.svg\"\n        width=\"20px\" height=\"20px\"\n        style=\"transform: translate(-8px, -10px);\"\n      />\n\n    </svg>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      progress: 0,\n      // circumference: 339.292,\n      radius: 30, // 圆的半径\n      strokeWidth: 7, // 圆环的线宽\n      CaptureExpTime: 1,\n      animationDuration: 1, // 动画时长为1000毫秒（1秒）\n      animationStartTime: 0, // 动画开始时间\n      isClicked: false,\n\n      longPressThreshold: 1000,\n      longPressTimer: null,\n      PressTimestamp: 0,\n\n      isLongPress: false,\n      longPressProgress: 0,\n\n      MainCameraConnect: false,\n      isProcessing: false, // 新增状态变量，表示是否正在处理\n\n      isButtonDisabled: false, // 拍摄按钮是否禁用\n    };\n  },\n  created() {\n    this.$bus.$on('ExposureCompleted', this.overProgress);\n    this.$bus.$on('SetExpTime',this.SetDuration);\n    this.$bus.$on('CameraInExposuring',this.setInProgress);\n    this.$bus.$on('MainCameraConnected', this.MainCameraConnected);\n    this.$bus.$on('disableCaptureButton', this.disableCaptureButton);\n  },\n  mounted() {\n    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'getCaptureStatus');\n  },\n  computed: {\n    svgSize() {\n      // SVG的大小应该足够包含圆形按钮及其边框\n      return this.radius * 2 + this.strokeWidth * 2;\n    },\n    circumference() {\n      // 计算圆周长\n      return 2 * Math.PI * this.radius;\n    },\n    progressText() {\n      return this.isClicked ? `${(this.progress * 100).toFixed(0)}%` : '';\n    },\n    fontSize() {\n      // 字体大小可以根据按钮的大小动态计算\n      return this.radius / 3; // 示例比例\n    },\n  },\n  methods: {\n    handleMouseDown() {\n      if (this.isButtonDisabled) {\n        return; \n      }\n      this.mousePressTimestamp = Date.now();\n      if (this.isClicked) {\n        this.startLongPressAnimation();\n        this.longPressTimer = setTimeout(() => {\n          if (Date.now() - this.mousePressTimestamp >= this.longPressThreshold) {\n            // 处理长按逻辑\n            cancelAnimationFrame(this.animationRequest);\n            this.resetProgress();\n          }\n        }, this.longPressThreshold);\n      }\n    },\n\n    handleMouseUp() {\n      clearTimeout(this.longPressTimer);\n\n      cancelAnimationFrame(this.longPressAnimationRequest);\n      this.isLongPress = false;\n      this.longPressProgress = 0;\n\n      const elapsed = Date.now() - this.mousePressTimestamp;\n      if (elapsed < this.longPressThreshold) {\n        // 处理点击逻辑\n        if(this.MainCameraConnect) {\n          this.animateProgress();\n        } else {\n          this.$bus.$emit('showMsgBox', 'Please connect the camera first.', 'error');\n        }\n      }\n    },\n\n    animateProgress() {\n      if (this.isClicked) return; // 如果已点击，则退出方法\n      console.log('执行点按，触发拍摄');\n      this.animationDuration = this.CaptureExpTime;\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'takeExposure:'+this.animationDuration);\n      this.$bus.$emit('SendConsoleLogMsg', 'Take Exposure:'+this.animationDuration, 'info');\n      this.isClicked = true;\n      const startTime = performance.now();\n      const animate = (currentTime) => {\n        const elapsedTime = currentTime - startTime;\n        this.progress = elapsedTime / (this.animationDuration / 0.99);\n\n        if (this.progress < 0.99) {\n          this.animationRequest = requestAnimationFrame(animate);\n        } else {\n          this.progress = 0.99;\n          cancelAnimationFrame(this.animationRequest);\n        }\n      };\n      if (this.animationRequest) {\n        cancelAnimationFrame(this.animationRequest);\n      }\n      this.animationRequest = requestAnimationFrame(animate);\n    },\n\n    overProgress() {\n      this.progress = 1;\n      cancelAnimationFrame(this.animationRequest);\n      // 延时2秒后重置进度\n      setTimeout(() => {\n        this.resetProgress();\n      }, 2000);\n    },\n\n    resetProgress() {\n      this.progress = 0;\n      this.isClicked = false;\n    },\n\n    SetDuration(time) {\n      this.CaptureExpTime = time;\n    },\n\n    startLongPressAnimation() {\n      console.log('执行长按，触发终止拍摄');\n      this.isLongPress = true;\n      const startTime = performance.now();\n      const animate = (currentTime) => {\n        const elapsedTime = currentTime - startTime;\n        this.longPressProgress = elapsedTime / this.longPressThreshold;\n\n        if (this.longPressProgress < 1) {\n          this.longPressAnimationRequest = requestAnimationFrame(animate);\n        } else {\n          this.longPressProgress = 1;\n          cancelAnimationFrame(this.longPressAnimationRequest);\n          this.$bus.$emit('AppSendMessage', 'Vue_Command', 'abortExposure');\n          this.$bus.$emit('SendConsoleLogMsg', 'Abort Exposure', 'info');\n          // 延时2秒后重置进度\n          setTimeout(() => {\n            this.resetlongPressProgress();\n          }, 1000);\n        }\n      };\n\n      this.longPressAnimationRequest = requestAnimationFrame(animate);\n    },\n\n    resetlongPressProgress() {\n      this.longPressProgress = 0;\n      this.isLongPress = false;\n    },\n\n    setInProgress(state) {\n      if(state === 'True'){\n        this.progress = 0.99;\n        this.isClicked = true;\n      } else {\n        this.progress = 0;\n        this.isClicked = false;\n      }\n    },\n\n    MainCameraConnected(num) {\n      if(num === 0){\n        this.MainCameraConnect = false;\n      } else {\n        this.MainCameraConnect = true;\n      }\n      console.log('MainCamera is Connected: ', num);\n    },\n\n    disableCaptureButton(status) {\n      this.isButtonDisabled = status;\n    },\n\n  },\n};\n</script>\n\n<style scoped>\n.circular-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n</style>\n\n\n"]}]}