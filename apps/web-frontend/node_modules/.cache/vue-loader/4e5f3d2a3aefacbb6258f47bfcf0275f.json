{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Histogram.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Histogram.vue","mtime":1750829368290},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGVjaGFydHMgZnJvbSAnZWNoYXJ0cyc7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0JhckNoYXJ0JywKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY29udGFpbmVyTWF4V2lkdGg6IDE5MCwKICAgICAgYmFyRGF0YTogW10sICAvLyDnpLrkvovmlbDmja4KICAgICAgeEF4aXNfbWluOiAwLAogICAgICB4QXhpc19tYXg6IDY1NTM1LAoKICAgICAgaGlzdG9ncmFtX21pbjogMCwKICAgICAgaGlzdG9ncmFtX21heDogNjU1MzUsCiAgICB9OwogIH0sCiAgbW91bnRlZCgpIHsKCiAgfSwKICBjcmVhdGVkKCkgewogICAgLy8gdGhpcy4kYnVzLiRvbignSW5pdENoYXJ0JywgdGhpcy5zZXRNYXhXaWR0aCk7CiAgICB0aGlzLiRidXMuJG9uKCdzaG93SGlzdG9ncmFtJywgdGhpcy5hZGREYXRhVG9DaGFydCk7CiAgICB0aGlzLiRidXMuJG9uKCd1cGRhdGVIaXN0b2dyYW1XaWR0aCcsIHRoaXMuaW5pdENoYXJ0KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXRDaGFydChXaWR0aCkgewogICAgICB0aGlzLmNvbnRhaW5lck1heFdpZHRoID0gV2lkdGggLSAxMDsKICAgICAgY29uc3QgY2hhcnREb20gPSB0aGlzLiRyZWZzLmJhcmNoYXJ0OwogICAgICBjaGFydERvbS5zdHlsZS53aWR0aCA9IHRoaXMuY29udGFpbmVyTWF4V2lkdGggKyAncHgnOwogICAgICB0aGlzLm15Q2hhcnQgPSBlY2hhcnRzLmluaXQoY2hhcnREb20pOwogICAgICB0aGlzLnJlbmRlckNoYXJ0KHRoaXMueEF4aXNfbWluLCB0aGlzLnhBeGlzX21heCk7CiAgICB9LAoKICAgIHJlbmRlckNoYXJ0KHhfbWluLCB4X21heCkgewogICAgICAvLyDlpoLmnpzmsqHmnInmlbDmja7vvIzliJnpgIDlh7oKICAgICAgaWYgKHRoaXMuYmFyRGF0YS5sZW5ndGggPT09IDApIHJldHVybjsKICAgICAgCiAgICAgIGNvbnN0IHlBeGlzTWF4ID0gTWF0aC5tYXgoLi4udGhpcy5iYXJEYXRhLmZsYXRNYXAoY2hhbm5lbCA9PiAKICAgICAgICBjaGFubmVsLm1hcChpdGVtID0+IGl0ZW1bMV0pCiAgICAgICkpOyAgLy8g6I635Y+W5omA5pyJ6YCa6YGT5Lit55qEeei9tOacgOWkp+WAvAogICAgICAKICAgICAgY29uc3Qgb3B0aW9uID0gewogICAgICAgIGdyaWQ6IHsKICAgICAgICAgIGxlZnQ6ICctMSUnLAogICAgICAgICAgcmlnaHQ6ICcxJScsCiAgICAgICAgICBib3R0b206ICcwJScsCiAgICAgICAgICB0b3A6ICcwJScsCiAgICAgICAgICBjb250YWluTGFiZWw6IHRydWUKICAgICAgICB9LAogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICB0eXBlOiAndmFsdWUnLAogICAgICAgICAgbWluOiB4X21pbiwKICAgICAgICAgIG1heDogeF9tYXgsCiAgICAgICAgICBheGlzTGluZTogewogICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgYXhpc0xhYmVsOiBudWxsLAogICAgICAgICAgc3BsaXRMaW5lOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB5QXhpczogewogICAgICAgICAgdHlwZTogJ3ZhbHVlJywKICAgICAgICAgIG1heDogeUF4aXNNYXgsCiAgICAgICAgICBheGlzTGluZTogewogICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgYXhpc0xhYmVsOiBudWxsLAogICAgICAgICAgc3BsaXRMaW5lOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFtdCiAgICAgIH07CgogICAgICAvLyDmoLnmja7lrp7pmYXpgJrpgZPmlbDph4/liJvlu7rns7vliJcKICAgICAgY29uc3QgY29sb3JzID0gWydyZ2JhKDAsMTIwLDIxMiwwLjcpJywgJ3JnYmEoNTEsMjE4LDEyMSwwLjcpJywgJ3JnYmEoMjU1LDAsMCwwLjcpJ107CiAgICAgIAogICAgICAvLyDngbDluqblm77lkozlvanoibLlm77kvb/nlKjkuI3lkIznmoTpopzoibLmlrnmoYgKICAgICAgaWYgKHRoaXMuYmFyRGF0YS5sZW5ndGggPT09IDEpIHsKICAgICAgICAvLyDngbDluqblm77lj6rmnInkuIDkuKrpgJrpgZPvvIzkvb/nlKjnmb3oibIKICAgICAgICBvcHRpb24uc2VyaWVzLnB1c2goewogICAgICAgICAgZGF0YTogdGhpcy5iYXJEYXRhWzBdLAogICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwwLjcpJwogICAgICAgICAgfSwKICAgICAgICAgIHN5bWJvbFNpemU6IDAKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyDlvanoibLlm77mnInlpJrkuKrpgJrpgZPvvIzkvb/nlKjmoIflh4ZSR0LpopzoibIKICAgICAgICBmb3IgKGxldCBjaGFubmVsID0gMDsgY2hhbm5lbCA8IHRoaXMuYmFyRGF0YS5sZW5ndGg7IGNoYW5uZWwrKykgewogICAgICAgICAgb3B0aW9uLnNlcmllcy5wdXNoKHsKICAgICAgICAgICAgZGF0YTogdGhpcy5iYXJEYXRhW2NoYW5uZWxdLAogICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICAgIGNvbG9yOiBjb2xvcnNbY2hhbm5lbCAlIGNvbG9ycy5sZW5ndGhdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN5bWJvbFNpemU6IDAKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8g5re75Yqg5pyA5bCP5ZKM5pyA5aSn5YC855qE5Z6C55u057q/CiAgICAgIG9wdGlvbi5zZXJpZXMucHVzaCh7CiAgICAgICAgZGF0YTogW1t0aGlzLmhpc3RvZ3JhbV9taW4sIDBdLCBbdGhpcy5oaXN0b2dyYW1fbWluLCB5QXhpc01heF1dLAogICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICB0eXBlOiAnZGFzaGVkJywKICAgICAgICAgIHdpZHRoOiAxCiAgICAgICAgfSwKICAgICAgICBzeW1ib2xTaXplOiAwCiAgICAgIH0pOwoKICAgICAgb3B0aW9uLnNlcmllcy5wdXNoKHsKICAgICAgICBkYXRhOiBbW3RoaXMuaGlzdG9ncmFtX21heCwgMF0sIFt0aGlzLmhpc3RvZ3JhbV9tYXgsIHlBeGlzTWF4XV0sCiAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgIGxpbmVTdHlsZTogewogICAgICAgICAgY29sb3I6ICdyZWQnLAogICAgICAgICAgdHlwZTogJ2Rhc2hlZCcsCiAgICAgICAgICB3aWR0aDogMQogICAgICAgIH0sCiAgICAgICAgc3ltYm9sU2l6ZTogMAogICAgICB9KTsKCiAgICAgIHRoaXMubXlDaGFydC5zZXRPcHRpb24ob3B0aW9uKTsKICAgIH0sCgogICAgYWRkRGF0YVRvQ2hhcnQoaGlzdG9ncmFtRGF0YSkgewogICAgICB0aGlzLmNsZWFyQmFyRGF0YSgpOwogICAgICBjb25zb2xlLmxvZygi5b2T5YmN55u05pa55Zu+5pWw5o2u6ZW/5bqmOiIsIGhpc3RvZ3JhbURhdGEubGVuZ3RoKTsKICAgICAgCiAgICAgIC8vIOWIpOaWreaYr+eBsOW6puWbvui/mOaYr+W9qeiJsuWbvgogICAgICAvLyDlpoLmnpzmmK/nroDljZXmlbDnu4Qo6ZW/5bqm5b6I5aSnKe+8jOWImeS4uueBsOW6puWbvgogICAgICAvLyDlpoLmnpzmmK/mlbDnu4TnmoTmlbDnu4Qo6ZW/5bqm5Li6MynvvIzliJnkuLrlvanoibLlm74KICAgICAgCiAgICAgIAogICAgICAvLyDlpITnkIbngbDluqblm74gLSDljZXkuIDmlbDnu4TvvIzplb/luqblvojlpKcKICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGhpc3RvZ3JhbURhdGFbMF0pKSB7CiAgICAgICAgY29uc3QgZm9ybWF0dGVkRGF0YSA9IFtdOwogICAgICAgIAogICAgICAgIC8vIOi9rOaNouS4ultpbmRleCwgdmFsdWVd5qC85byP77yM5LuF5L+d55WZ6Z2e6Zu254K55ZKM5q+PMTbkuKrngrnnmoTph4fmoLfngrkKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhpc3RvZ3JhbURhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmIChoaXN0b2dyYW1EYXRhW2ldID4gMCB8fCBpICUgMTYgPT09IDApIHsKICAgICAgICAgICAgZm9ybWF0dGVkRGF0YS5wdXNoKFtpLCBoaXN0b2dyYW1EYXRhW2ldXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHRoaXMuYmFyRGF0YS5wdXNoKGZvcm1hdHRlZERhdGEpOwogICAgICAgIAogICAgICB9IGVsc2UgeyAvLyDlpITnkIblvanoibLlm74gLSDkuInpgJrpgZPmlbDnu4QKICAgICAgICAvLyDpgY3ljoZSR0LkuInkuKrpgJrpgZMKICAgICAgICBmb3IgKGxldCBjaGFubmVsID0gMDsgY2hhbm5lbCA8IGhpc3RvZ3JhbURhdGEubGVuZ3RoOyBjaGFubmVsKyspIHsKICAgICAgICAgIGNvbnN0IGNoYW5uZWxEYXRhID0gaGlzdG9ncmFtRGF0YVtjaGFubmVsXTsKICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZERhdGEgPSBbXTsKICAgICAgICAgIAogICAgICAgICAgLy8g6L2s5o2i5Li6W2luZGV4LCB2YWx1ZV3moLzlvI/vvIzku4Xkv53nlZnpnZ7pm7bngrnlkozmr48xNuS4queCueeahOmHh+agt+eCuQogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFubmVsRGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoY2hhbm5lbERhdGFbaV0gPiAwIHx8IGkgJSAxNiA9PT0gMCkgewogICAgICAgICAgICAgIGZvcm1hdHRlZERhdGEucHVzaChbaSwgY2hhbm5lbERhdGFbaV1dKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgCiAgICAgICAgICB0aGlzLmJhckRhdGEucHVzaChmb3JtYXR0ZWREYXRhKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgCiAgICAgIC8vIOWPkemAgeS/oeaBrwogICAgICBjb25zb2xlLmxvZygi5pyJ5pWI5pWw5o2u6IyD5Zu0OiIsIHRoaXMuaGlzdG9ncmFtX21pbiwgIi0iLCB0aGlzLmhpc3RvZ3JhbV9tYXgpOwogICAgICAvLyB0aGlzLiRidXMuJGVtaXQoJ0F1dG9IaXN0b2dyYW1OdW0nLCB0aGlzLmhpc3RvZ3JhbV9taW4sIHRoaXMuaGlzdG9ncmFtX21heCk7CiAgICAgIHRoaXMucmVuZGVyQ2hhcnQodGhpcy54QXhpc19taW4sIHRoaXMueEF4aXNfbWF4KTsKICAgIH0sCgogICAgY2xlYXJCYXJEYXRhKCkgewogICAgICB0aGlzLmJhckRhdGEgPSBbXTsgIC8vIOa4heepuuaVsOaNrgogICAgICB0aGlzLnJlbmRlckNoYXJ0KHRoaXMueEF4aXNfbWluLCB0aGlzLnhBeGlzX21heCk7ICAvLyDph43mlrDmuLLmn5Plm77ooagKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Chart-Histogram.vue"],"names":[],"mappings":";;;;;;;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Chart-Histogram.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div ref=\"barchart\" :style=\"{ width: containerMaxWidth + 'px', height: 80 + 'px' }\" class=\"barchart-panel\"></div>\n  </div>\n</template>\n\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'BarChart',\n  data() {\n    return {\n      containerMaxWidth: 190,\n      barData: [],  // 示例数据\n      xAxis_min: 0,\n      xAxis_max: 65535,\n\n      histogram_min: 0,\n      histogram_max: 65535,\n    };\n  },\n  mounted() {\n\n  },\n  created() {\n    // this.$bus.$on('InitChart', this.setMaxWidth);\n    this.$bus.$on('showHistogram', this.addDataToChart);\n    this.$bus.$on('updateHistogramWidth', this.initChart);\n  },\n  methods: {\n    initChart(Width) {\n      this.containerMaxWidth = Width - 10;\n      const chartDom = this.$refs.barchart;\n      chartDom.style.width = this.containerMaxWidth + 'px';\n      this.myChart = echarts.init(chartDom);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n\n    renderChart(x_min, x_max) {\n      // 如果没有数据，则退出\n      if (this.barData.length === 0) return;\n      \n      const yAxisMax = Math.max(...this.barData.flatMap(channel => \n        channel.map(item => item[1])\n      ));  // 获取所有通道中的y轴最大值\n      \n      const option = {\n        grid: {\n          left: '-1%',\n          right: '1%',\n          bottom: '0%',\n          top: '0%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'value',\n          min: x_min,\n          max: x_max,\n          axisLine: {\n            lineStyle: {\n              color: 'white'\n            }\n          },\n          axisLabel: null,\n          splitLine: {\n            show: false\n          }\n        },\n        yAxis: {\n          type: 'value',\n          max: yAxisMax,\n          axisLine: {\n            lineStyle: {\n              color: 'white'\n            }\n          },\n          axisLabel: null,\n          splitLine: {\n            show: false\n          }\n        },\n        series: []\n      };\n\n      // 根据实际通道数量创建系列\n      const colors = ['rgba(0,120,212,0.7)', 'rgba(51,218,121,0.7)', 'rgba(255,0,0,0.7)'];\n      \n      // 灰度图和彩色图使用不同的颜色方案\n      if (this.barData.length === 1) {\n        // 灰度图只有一个通道，使用白色\n        option.series.push({\n          data: this.barData[0],\n          type: 'line',\n          itemStyle: {\n            color: 'rgba(255,255,255,0.7)'\n          },\n          symbolSize: 0\n        });\n      } else {\n        // 彩色图有多个通道，使用标准RGB颜色\n        for (let channel = 0; channel < this.barData.length; channel++) {\n          option.series.push({\n            data: this.barData[channel],\n            type: 'line',\n            itemStyle: {\n              color: colors[channel % colors.length]\n            },\n            symbolSize: 0\n          });\n        }\n      }\n\n      // 添加最小和最大值的垂直线\n      option.series.push({\n        data: [[this.histogram_min, 0], [this.histogram_min, yAxisMax]],\n        type: 'line',\n        lineStyle: {\n          color: 'blue',\n          type: 'dashed',\n          width: 1\n        },\n        symbolSize: 0\n      });\n\n      option.series.push({\n        data: [[this.histogram_max, 0], [this.histogram_max, yAxisMax]],\n        type: 'line',\n        lineStyle: {\n          color: 'red',\n          type: 'dashed',\n          width: 1\n        },\n        symbolSize: 0\n      });\n\n      this.myChart.setOption(option);\n    },\n\n    addDataToChart(histogramData) {\n      this.clearBarData();\n      console.log(\"当前直方图数据长度:\", histogramData.length);\n      \n      // 判断是灰度图还是彩色图\n      // 如果是简单数组(长度很大)，则为灰度图\n      // 如果是数组的数组(长度为3)，则为彩色图\n      \n      \n      // 处理灰度图 - 单一数组，长度很大\n      if (!Array.isArray(histogramData[0])) {\n        const formattedData = [];\n        \n        // 转换为[index, value]格式，仅保留非零点和每16个点的采样点\n        for (let i = 0; i < histogramData.length; i++) {\n          if (histogramData[i] > 0 || i % 16 === 0) {\n            formattedData.push([i, histogramData[i]]);\n          }\n        }\n        \n        this.barData.push(formattedData);\n        \n      } else { // 处理彩色图 - 三通道数组\n        // 遍历RGB三个通道\n        for (let channel = 0; channel < histogramData.length; channel++) {\n          const channelData = histogramData[channel];\n          const formattedData = [];\n          \n          // 转换为[index, value]格式，仅保留非零点和每16个点的采样点\n          for (let i = 0; i < channelData.length; i++) {\n            if (channelData[i] > 0 || i % 16 === 0) {\n              formattedData.push([i, channelData[i]]);\n            }\n          }\n          \n          this.barData.push(formattedData);\n        }\n      }\n      \n      // 发送信息\n      console.log(\"有效数据范围:\", this.histogram_min, \"-\", this.histogram_max);\n      // this.$bus.$emit('AutoHistogramNum', this.histogram_min, this.histogram_max);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n\n    clearBarData() {\n      this.barData = [];  // 清空数据\n      this.renderChart(this.xAxis_min, this.xAxis_max);  // 重新渲染图表\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n.barchart-panel {\n  background-color: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(5px);\n  border-radius: 5px;\n  box-sizing: border-box;\n  /* border: 1px solid rgba(255, 255, 255, 0.8); */\n}\n</style>\n"]}]}