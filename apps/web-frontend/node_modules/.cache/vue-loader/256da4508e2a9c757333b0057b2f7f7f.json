{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Dial-Knob.vue?vue&type=style&index=0&id=07729b55&scoped=true&lang=css&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Dial-Knob.vue","mtime":1756885034407},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/css-loader/dist/cjs.js","mtime":1756885033612},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1756885034208},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/postcss-loader/src/index.js","mtime":1756885034000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1756885033541},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1756885034208}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouRGlhbC1Lbm9iLVJlY3QgewogIHdpZHRoOiAyMDBweDsKICBoZWlnaHQ6IDYwcHg7CgogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBjdXJzb3I6IHBvaW50ZXI7CiAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgLyogb3ZlcmZsb3c6IGhpZGRlbjsgKi8KICAKICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiDorr7nva5ib3gtc2l6aW5n5Li6Ym9yZGVyLWJveCAqLwp9CgouaW5kaWNhdG9yIHsKICB3aWR0aDogMTBweDsKICBoZWlnaHQ6IDgwcHg7CiAgYm9yZGVyLXJhZGl1czogMXB4OwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDUwJTsKICBsZWZ0OiB2YXIoLS1wb3NpdGlvblgpOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOwogIAogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNzUsIDE1NSwgMjUwLCAwLjUpOwogIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTsKICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTsKICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9Cgouc2Vjb25kLWluZGljYXRvciB7CiAgd2lkdGg6IDEwcHg7CiAgaGVpZ2h0OiA4MHB4OwogIGJvcmRlci1yYWRpdXM6IDFweDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiA1MCU7CiAgbGVmdDogdmFyKC0tc2Vjb25kUG9zaXRpb25YKTsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsKICAKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMCwgMCwgMC41KTsKICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7CiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDVweCk7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKfQoKLmluZGljYXRvcjphY3RpdmU6YWN0aXZlIHsKICB3aWR0aDogMnB4OwogIGhlaWdodDogODBweDsKICBib3JkZXItcmFkaXVzOiAxcHg7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogNTAlOwogIGxlZnQ6IHZhcigtLXBvc2l0aW9uWCk7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CiAgCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg3NSwgMTU1LCAyNTAsIDEpOwogIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTsKICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTsKICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9CgoKLnNlY29uZC1pbmRpY2F0b3I6YWN0aXZlIHsKICB3aWR0aDogMnB4OwogIGhlaWdodDogODBweDsKICBib3JkZXItcmFkaXVzOiAxcHg7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogNTAlOwogIGxlZnQ6IHZhcigtLXNlY29uZFBvc2l0aW9uWCk7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CiAgCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDAsIDAsIDEpOwogIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTsKICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTsKICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9Cg=="},{"version":3,"sources":["Dial-Knob.vue"],"names":[],"mappingsfile":"Dial-Knob.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"Dial-Knob-Rect\" :style=\"{ '--positionX': positionX + 'px', '--secondPositionX': secondPositionX + 'px', top: top + 'px', left: left + 'px', width: width + 'px', height: height + 'px' }\">\n    <div class=\"indicator\" @mousedown=\"startDrag\" @mouseup=\"stopDrag\" @touchstart=\"startDragMobile\" @touchmove=\"onDragMobile\" @touchend=\"stopDragMobile\"></div>\n    <div class=\"second-indicator\" @mousedown=\"startSecondDrag\" @mouseup=\"stopSecondDrag\" @touchstart=\"startSecondDragMobile\" @touchmove=\"onSecondDragMobile\" @touchend=\"stopSecondDragMobile\"></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      top: 5, // 初始位置的垂直坐标\n      left: 5, // 初始位置的水平坐标\n      width: 190, // 初始宽度\n      height: 80, // 初始高度\n\n      DialWidth: 1,\n      \n      positionX: 0,\n      dragging: false,\n      startPositionX: 0,\n      \n      // 新滑块的数据\n      secondPositionX: 190,\n      secondDragging: false,\n      secondStartPositionX: 65535,\n    };\n  },\n  created() {\n    this.$bus.$on('toggleHistogramPanel', this.setMaxWidth);\n    this.$bus.$on('ChangeDialPosition', this.ChangeDialPosition);\n  },\n  mounted() {\n    window.addEventListener('resize', this.setMaxWidth);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.setMaxWidth);\n  },\n  methods: {\n    setMaxWidth() {\n      const Width = window.innerWidth;\n      this.width = Math.min(Width - 350, 490);\n    },\n    startDrag(event) {\n      event.preventDefault(); // 阻止默认触摸事件\n      this.dragging = true;\n      this.startPositionX = event.clientX - this.positionX;\n      document.addEventListener(\"mousemove\", this.onDrag);\n      document.addEventListener(\"mouseup\", this.stopDrag);\n    },\n    onDrag(event) {\n      if (this.dragging) {\n        const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n        const newPositionX = clientX - this.startPositionX;\n\n        // 确保滑块在组件范围内\n        this.positionX = Math.max(0, Math.min(newPositionX, this.secondPositionX));\n        this.positionX = Math.max(0, Math.min(newPositionX, this.width - this.DialWidth));\n\n        if (this.secondPositionX - this.positionX < this.DialWidth) {\n          this.secondPositionX = this.positionX + this.DialWidth;\n        }\n\n        // console.log(\"Width:\", this.width, \"PositionX:\", this.positionX, \"SecondPositionX:\", this.secondPositionX);\n      }\n    },\n    stopDrag() {\n      this.dragging = false;\n      document.removeEventListener(\"mousemove\", this.onDrag);\n      document.removeEventListener(\"mouseup\", this.stopDrag);\n      \n      const HistMin = this.mappedWidth(this.positionX);\n      const HistMax = this.mappedWidth(this.secondPositionX);\n      console.log(\"Hist Num:\", HistMin, HistMax, \"(16-bit range)\");\n      this.$bus.$emit('HandleHistogramNum', HistMin, HistMax);\n    },\n\n    startDragMobile(event) {\n      event.preventDefault();\n      this.dragging = true;\n      this.startPositionX = event.touches[0].clientX - this.positionX;\n      document.addEventListener(\"touchmove\", this.onDragMobile);\n      document.addEventListener(\"touchend\", this.stopDragMobile);\n    },\n    onDragMobile(event) {\n      if (this.dragging) {\n        const clientX = event.touches[0].clientX;\n        const newPositionX = clientX - this.startPositionX;\n        // 确保滑块在组件范围内\n        this.positionX = Math.max(0, Math.min(newPositionX, this.secondPositionX));\n        this.positionX = Math.max(0, Math.min(newPositionX, this.width - this.DialWidth));\n\n        if (this.secondPositionX - this.positionX < this.DialWidth) {\n          this.secondPositionX = this.positionX + this.DialWidth;\n        }\n\n        // console.log(\"Width:\", this.width, \"PositionX:\", this.positionX, \"SecondPositionX:\", this.secondPositionX);\n      }\n    },\n    stopDragMobile() {\n      this.dragging = false;\n      document.removeEventListener(\"touchmove\", this.onDragMobile);\n      document.removeEventListener(\"touchend\", this.stopDragMobile);\n\n      const HistMin = this.mappedWidth(this.positionX);\n      const HistMax = this.mappedWidth(this.secondPositionX);\n      console.log(\"Hist Num:\", HistMin, HistMax, \"(16-bit range)\");\n      this.$bus.$emit('HandleHistogramNum', HistMin, HistMax);\n    },\n    \n    // 新滑块的方法\n    startSecondDrag(event) {\n      event.preventDefault(); // 阻止默认触摸事件\n      this.secondDragging = true;\n      this.secondStartPositionX = event.clientX - this.secondPositionX;\n      document.addEventListener(\"mousemove\", this.onSecondDrag);\n      document.addEventListener(\"mouseup\", this.stopSecondDrag);\n    },\n    onSecondDrag(event) {\n      if (this.secondDragging) {\n        const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n        const newSecondPositionX = clientX - this.secondStartPositionX;\n        \n        // 关键修复：更新正确的变量，使用一次赋值\n        this.secondPositionX = Math.max(this.positionX + this.DialWidth, \n                                  Math.min(newSecondPositionX, this.width));\n        \n        // 保持最小间距\n        if (this.secondPositionX - this.positionX < this.DialWidth) {\n          this.positionX = this.secondPositionX - this.DialWidth;\n        }\n      }\n    },\n    stopSecondDrag() {\n      this.secondDragging = false;\n      document.removeEventListener(\"mousemove\", this.onSecondDrag);\n      document.removeEventListener(\"mouseup\", this.stopSecondDrag);\n      \n      const HistMin = this.mappedWidth(this.positionX);\n      const HistMax = this.mappedWidth(this.secondPositionX);\n      console.log(\"Hist Num:\", HistMin, HistMax, \"(16-bit range)\");\n      this.$bus.$emit('HandleHistogramNum', HistMin, HistMax);\n    },\n\n    startSecondDragMobile(event) {\n      event.preventDefault();\n      this.secondDragging = true;\n      this.secondStartPositionX = event.touches[0].clientX - this.secondPositionX;\n      document.addEventListener(\"touchmove\", this.onSecondDragMobile);\n      document.addEventListener(\"touchend\", this.stopSecondDragMobile);\n    },\n    onSecondDragMobile(event) {\n      if (this.secondDragging) {\n        const clientX = event.touches[0].clientX;\n        const newSecondPositionX = clientX - this.secondStartPositionX;\n        // 确保滑块在组件范围内\n        this.secondPositionX = Math.max(this.positionX, Math.min(newSecondPositionX, this.width));\n        this.secondPositionX = Math.max(this.DialWidth, Math.min(newSecondPositionX, this.width));\n\n        if (this.secondPositionX - this.positionX < this.DialWidth) {\n          this.positionX = this.secondPositionX - this.DialWidth;\n        }\n\n        // console.log(\"Width:\", this.width, \"PositionX:\", this.positionX, \"SecondPositionX:\", this.secondPositionX);\n      }\n    },\n    stopSecondDragMobile() {\n      this.secondDragging = false;\n      document.removeEventListener(\"touchmove\", this.onSecondDragMobile);\n      document.removeEventListener(\"touchend\", this.stopSecondDragMobile);\n\n      const HistMin = this.mappedWidth(this.positionX);\n      const HistMax = this.mappedWidth(this.secondPositionX);\n      console.log(\"Hist Num:\", HistMin, HistMax, \"(16-bit range)\");\n      this.$bus.$emit('HandleHistogramNum', HistMin, HistMax);\n    },\n\n    ChangeDialPosition(min, max) {\n      this.positionX = Math.round((min / 65535) * this.width);\n      this.secondPositionX = Math.round((max / 65535) * this.width);\n    },\n    \n    mappedWidth(position) {\n      // 映射原始的 width 到 0-65535 的范围(16位)\n      return Math.round((position / this.width) * 65535);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.Dial-Knob-Rect {\n  width: 200px;\n  height: 60px;\n\n  position: relative;\n  cursor: pointer;\n  user-select: none;\n  /* overflow: hidden; */\n  \n  background-color: transparent;\n  box-sizing: border-box; /* 设置box-sizing为border-box */\n}\n\n.indicator {\n  width: 10px;\n  height: 80px;\n  border-radius: 1px;\n  position: absolute;\n  top: 50%;\n  left: var(--positionX);\n  transform: translate(-50%, -50%);\n  \n  background-color: rgba(75, 155, 250, 0.5);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  backdrop-filter: blur(5px);\n  box-sizing: border-box;\n}\n\n.second-indicator {\n  width: 10px;\n  height: 80px;\n  border-radius: 1px;\n  position: absolute;\n  top: 50%;\n  left: var(--secondPositionX);\n  transform: translate(-50%, -50%);\n  \n  background-color: rgba(255, 0, 0, 0.5);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  backdrop-filter: blur(5px);\n  box-sizing: border-box;\n}\n\n.indicator:active:active {\n  width: 2px;\n  height: 80px;\n  border-radius: 1px;\n  position: absolute;\n  top: 50%;\n  left: var(--positionX);\n  transform: translate(-50%, -50%);\n  \n  background-color: rgba(75, 155, 250, 1);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  backdrop-filter: blur(5px);\n  box-sizing: border-box;\n}\n\n\n.second-indicator:active {\n  width: 2px;\n  height: 80px;\n  border-radius: 1px;\n  position: absolute;\n  top: 50%;\n  left: var(--secondPositionX);\n  transform: translate(-50%, -50%);\n  \n  background-color: rgba(255, 0, 0, 1);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  backdrop-filter: blur(5px);\n  box-sizing: border-box;\n}\n</style>\n\n"]}]}