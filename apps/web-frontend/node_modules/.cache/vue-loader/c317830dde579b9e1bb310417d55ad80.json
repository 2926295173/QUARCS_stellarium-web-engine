{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/AutomaticPolarAlignmentCalibration.vue?vue&type=style&index=0&id=615a9af8&scoped=true&lang=css&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/AutomaticPolarAlignmentCalibration.vue","mtime":1752460692487},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/css-loader/dist/cjs.js","mtime":1707125446000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1707125450000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/postcss-loader/src/index.js","mtime":1707125450000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AutomaticPolarAlignmentCalibration.vue"],"names":[],"mappingskxfile":"AutomaticPolarAlignmentCalibration.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"mount-status-display\" v-show=\"visible\" :class=\"{ 'fullscreen': isFullscreen }\">\n      <!-- 日志显示区域，可缩放 -->\n      <div class=\"log-section\" :class=\"{ 'expanded': isLogExpanded }\" @click=\"toggleLogExpansion\">\n        <div class=\"log-header\">\n          <span class=\"log-title\">{{ $t('Current Log Info') }}</span>\n          <div class=\"header-controls\">\n            <v-icon class=\"expand-icon\" :class=\"{ 'rotated': isLogExpanded }\">\n              mdi-chevron-up\n            </v-icon>\n            <v-icon class=\"close-icon\" @click.stop=\"closeComponent\">\n              mdi-close\n            </v-icon>\n          </div>\n        </div>\n        <div class=\"log-content\" ref=\"logContent\">\n          <div class=\"log-item\" v-for=\"(log, index) in logs\" :key=\"index\" :class=\"log.level\">\n            <span class=\"log-time\">{{ formatTime(log.timestamp) }}</span>\n            <span class=\"log-message\">{{ log.message }}</span>\n          </div>\n        </div>\n      </div>\n  \n      <!-- 下方左右图像区域 -->\n      <div class=\"image-section\">\n        <!-- 左侧：赤道仪图像区域 -->\n        <div class=\"mount-image-container\">\n          <div class=\"mount-image-title\">{{ $t('Mount Direction') }}</div>\n          <div class=\"mount-image-content\">\n            <!-- 赤道仪图像背景 -->\n            <div class=\"mount-background\">\n              <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 200 200\">\n                <!-- 赤道仪基座 -->\n                <circle cx=\"100\" cy=\"100\" r=\"80\" fill=\"none\" stroke=\"#444\" stroke-width=\"2\" />\n                <circle cx=\"100\" cy=\"100\" r=\"60\" fill=\"none\" stroke=\"#666\" stroke-width=\"1\" />\n                \n                <!-- 赤道仪主体 -->\n                <rect x=\"90\" y=\"40\" width=\"20\" height=\"120\" fill=\"#555\" stroke=\"#777\" stroke-width=\"1\" rx=\"5\" />\n                \n                <!-- 望远镜管 -->\n                <rect x=\"85\" y=\"45\" width=\"30\" height=\"10\" fill=\"#333\" stroke=\"#555\" stroke-width=\"1\" rx=\"2\" />\n                \n                <!-- 中心点 -->\n                <circle cx=\"100\" cy=\"100\" r=\"5\" fill=\"#888\" />\n                \n                <!-- 方向标识 -->\n                <text x=\"100\" y=\"25\" text-anchor=\"middle\" fill=\"#aaa\" font-size=\"12\">N</text>\n                <text x=\"100\" y=\"185\" text-anchor=\"middle\" fill=\"#aaa\" font-size=\"12\">S</text>\n                <text x=\"25\" y=\"105\" text-anchor=\"middle\" fill=\"#aaa\" font-size=\"12\">E</text>\n                <text x=\"175\" y=\"105\" text-anchor=\"middle\" fill=\"#aaa\" font-size=\"12\">W</text>\n              </svg>\n            </div>\n            \n            <!-- 动态箭头 -->\n            <div class=\"direction-arrow\" :style=\"arrowStyle\" v-if=\"showArrow\">\n              <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\">\n                <path d=\"M20 5 L30 25 L10 25 Z\" fill=\"#ff6b6b\" stroke=\"#ff4444\" stroke-width=\"1\" />\n              </svg>\n            </div>\n          </div>\n          \n          <!-- 当前位置信息 -->\n          <div class=\"mount-info\">\n            <div class=\"info-item\">\n              <span class=\"info-label\">RA:</span>\n              <span class=\"info-value\">{{ currentRA }}</span>\n            </div>\n            <div class=\"info-item\">\n              <span class=\"info-label\">DEC:</span>\n              <span class=\"info-value\">{{ currentDEC }}</span>\n            </div>\n          </div>\n        </div>\n  \n        <!-- 右侧：相机视场显示区域 -->\n        <div class=\"camera-field-container\">\n          <div class=\"camera-field-title\">{{ $t('Camera Field of View') }}</div>\n          <div class=\"camera-field-content\">\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 300 300\" ref=\"cameraField\">\n              <!-- 背景网格 -->\n              <defs>\n                <pattern id=\"grid\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n                  <path d=\"M 20 0 L 0 0 0 20\" fill=\"none\" stroke=\"#333\" stroke-width=\"0.5\"/>\n                </pattern>\n              </defs>\n              <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n              \n              <!-- 目标位置（固定） -->\n              <circle \n                :cx=\"targetPosition.x\" \n                :cy=\"targetPosition.y\" \n                r=\"8\" \n                fill=\"none\" \n                stroke=\"#00ff00\" \n                stroke-width=\"2\"\n              />\n              <text \n                :x=\"targetPosition.x\" \n                :y=\"targetPosition.y - 15\" \n                text-anchor=\"middle\" \n                fill=\"#00ff00\" \n                font-size=\"12\"\n              >\n                {{ $t('Target') }}\n              </text>\n              \n              <!-- 当前位置（动态更新） -->\n              <circle \n                :cx=\"currentPosition.x\" \n                :cy=\"currentPosition.y\" \n                r=\"6\" \n                fill=\"#ff6b6b\" \n                stroke=\"#ff4444\" \n                stroke-width=\"2\"\n              />\n              <text \n                :x=\"currentPosition.x\" \n                :y=\"currentPosition.y - 15\" \n                text-anchor=\"middle\" \n                fill=\"#ff6b6b\" \n                font-size=\"12\"\n              >\n                {{ $t('Current') }}\n              </text>\n              \n              <!-- 连接线 -->\n              <line \n                :x1=\"targetPosition.x\" \n                :y1=\"targetPosition.y\" \n                :x2=\"currentPosition.x\" \n                :y2=\"currentPosition.y\" \n                stroke=\"#ffff00\" \n                stroke-width=\"1\" \n                stroke-dasharray=\"5,5\"\n              />\n              \n              <!-- 视场框 -->\n              <rect \n                :x=\"fieldOfView.x\" \n                :y=\"fieldOfView.y\" \n                :width=\"fieldOfView.width\" \n                :height=\"fieldOfView.height\" \n                fill=\"none\" \n                stroke=\"#4a90e2\" \n                stroke-width=\"2\" \n                stroke-dasharray=\"3,3\"\n              />\n            </svg>\n          </div>\n          \n          <!-- 位置信息 -->\n          <div class=\"position-info\">\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('Target') }}:</span>\n              <span class=\"info-value\">RA {{ targetRA }} DEC {{ targetDEC }}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('Current') }}:</span>\n              <span class=\"info-value\">RA {{ currentRA }} DEC {{ currentDEC }}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('Distance') }}:</span>\n              <span class=\"info-value\">{{ calculateDistance() }}°</span>\n            </div>\n          </div>\n          \n          <!-- 校准进度和偏转结果 -->\n          <div class=\"calibration-info\">\n            <div class=\"calibration-header\">\n              <span class=\"calibration-title\">{{ $t('Polar Alignment Calibration') }}</span>\n              <button class=\"reset-btn\" @click=\"resetCalibration\" :disabled=\"calibrationPoints.length === 0\">\n                {{ $t('Reset') }}\n              </button>\n            </div>\n            \n            <div class=\"calibration-progress\">\n              <div class=\"progress-item\" v-for=\"(point, index) in 3\" :key=\"index\" \n                   :class=\"{ 'completed': index < calibrationPoints.length, 'current': index === currentCalibrationStep }\">\n                <span class=\"progress-number\">{{ index + 1 }}</span>\n                <span class=\"progress-label\">{{ $t('Point') }} {{ index + 1 }}</span>\n                <span class=\"progress-coords\" v-if=\"calibrationPoints[index]\">\n                  RA {{ formatRA(calibrationPoints[index].ra) }} DEC {{ formatDEC(calibrationPoints[index].dec) }}\n                </span>\n              </div>\n            </div>\n            \n            <div class=\"offset-results\" v-if=\"isCalibrationComplete\">\n              <div class=\"offset-title\">{{ $t('Polar Axis Offset') }}</div>\n              <div class=\"offset-item\">\n                <span class=\"offset-label\">{{ $t('Azimuth') }}:</span>\n                <span class=\"offset-value\" :class=\"{ 'high-offset': Math.abs(polarAxisOffset.azimuth) > 5 }\">\n                  {{ polarAxisOffset.azimuth.toFixed(2) }}°\n                </span>\n              </div>\n              <div class=\"offset-item\">\n                <span class=\"offset-label\">{{ $t('Altitude') }}:</span>\n                <span class=\"offset-value\" :class=\"{ 'high-offset': Math.abs(polarAxisOffset.altitude) > 5 }\">\n                  {{ polarAxisOffset.altitude.toFixed(2) }}°\n                </span>\n              </div>\n              <div class=\"offset-recommendation\">\n                <div v-if=\"Math.abs(polarAxisOffset.azimuth) > 5 || Math.abs(polarAxisOffset.altitude) > 5\" \n                     class=\"recommendation warning\">\n                  {{ $t('Polar axis adjustment needed') }}\n                </div>\n                <div v-else class=\"recommendation success\">\n                  {{ $t('Polar axis alignment is good') }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: 'MountStatusDisplay',\n    props: {\n      // 控制组件显示/隐藏\n      visible: {\n        type: Boolean,\n        default: false\n      },\n      // 是否全屏模式\n      fullscreen: {\n        type: Boolean,\n        default: false\n      },\n      // 自动开始校准\n      autoStart: {\n        type: Boolean,\n        default: false\n      },\n      // 外部传入的校准点数据\n      externalPoints: {\n        type: Array,\n        default: () => []\n      }\n    },\n    data() {\n      return {\n        isLogExpanded: false,\n        showArrow: false,\n        \n        // 日志数据\n        logs: [\n          { timestamp: Date.now(), message: '系统启动完成', level: 'info' },\n          { timestamp: Date.now() - 5000, message: '正在连接赤道仪...', level: 'warning' },\n          { timestamp: Date.now() - 10000, message: '赤道仪连接成功', level: 'success' },\n          { timestamp: Date.now() - 15000, message: '开始校准', level: 'info' },\n        ],\n        \n        // 极轴校准相关数据\n        calibrationPoints: [],  // 存储三个校准点\n        currentCalibrationStep: 0,  // 当前校准步骤 (0-2)\n        polarAxisOffset: {  // 极轴偏转量\n          azimuth: 0,      // 方位角偏转（度）\n          altitude: 0      // 高度角偏转（度）\n        },\n        isCalibrationComplete: false,  // 校准是否完成\n        \n        // 当前位置（从服务器接收）\n        currentRA: '12h 34m 56s',\n        currentDEC: '+45° 12\\' 34\"',\n        \n        // 目标位置（固定）\n        targetRA: '12h 30m 00s',\n        targetDEC: '+45° 00\\' 00\"',\n        \n        // 移动方向\n        moveDirection: { x: 0, y: 0 },\n        \n        // 视场设置\n        fieldOfView: {\n          x: 100,\n          y: 100,\n          width: 100,\n          height: 80\n        },\n        \n        // 位置计算\n        targetPosition: { x: 150, y: 150 },\n        currentPosition: { x: 120, y: 180 },\n      }\n    },\n    \n    computed: {\n      arrowStyle() {\n        if (!this.showArrow) return { display: 'none' };\n        \n        const angle = Math.atan2(this.moveDirection.y, this.moveDirection.x) * 180 / Math.PI;\n        const centerX = 100;\n        const centerY = 100;\n        const radius = 90;\n        \n        const x = centerX + Math.cos(angle * Math.PI / 180) * radius;\n        const y = centerY + Math.sin(angle * Math.PI / 180) * radius;\n        \n        return {\n          position: 'absolute',\n          left: `${x - 20}px`,\n          top: `${y - 20}px`,\n          transform: `rotate(${angle}deg)`,\n          animation: 'arrowPulse 1s ease-in-out infinite'\n        };\n      },\n      \n      isFullscreen() {\n        return this.fullscreen;\n      }\n    },\n    \n    watch: {\n      // 监听外部传入的校准点\n      externalPoints: {\n        handler(newPoints) {\n          if (newPoints && newPoints.length > 0) {\n            this.resetCalibration();\n            newPoints.forEach(point => {\n              if (point.ra !== undefined && point.dec !== undefined) {\n                this.addCalibrationPoint(point.ra, point.dec);\n              }\n            });\n          }\n        },\n        deep: true,\n        immediate: true\n      },\n      \n      // 监听显示状态变化\n      visible(newVal) {\n        if (newVal && this.autoStart) {\n          this.startAutoCalibration();\n        }\n      }\n    },\n    \n    mounted() {\n      // 监听事件总线上的各种事件\n      this.$bus.$on('updateCurrentPosition', this.updatePosition);\n      this.$bus.$on('addCalibrationPoint', this.handleAddCalibrationPoint);\n      this.$bus.$on('resetCalibration', this.resetCalibration);\n      this.$bus.$on('showPolarAlignment', this.show);\n      this.$bus.$on('hidePolarAlignment', this.hide);\n      this.$bus.$on('togglePolarAlignment', this.toggle);\n      this.$bus.$on('updateMountPosition', this.updateMountPosition);\n      this.$bus.$on('updateTargetPosition', this.updateTargetPosition);\n      \n      this.initializeWebSocket();\n      this.startLogUpdater();\n      \n      // 添加演示数据（用于测试）\n      setTimeout(() => {\n        if (this.autoStart) {\n          this.addTestCalibrationPoints();\n        }\n      }, 3000);\n    },\n    \n    methods: {\n      // 切换日志展开/收缩\n      toggleLogExpansion() {\n        this.isLogExpanded = !this.isLogExpanded;\n        this.$nextTick(() => {\n          if (this.isLogExpanded) {\n            this.$refs.logContent.scrollTop = this.$refs.logContent.scrollHeight;\n          }\n        });\n      },\n      \n      // 格式化时间\n      formatTime(timestamp) {\n        const date = new Date(timestamp);\n        return date.toLocaleTimeString('zh-CN', { \n          hour12: false, \n          hour: '2-digit', \n          minute: '2-digit', \n          second: '2-digit' \n        });\n      },\n      \n      // 添加日志\n      addLog(message, level = 'info') {\n        this.logs.unshift({\n          timestamp: Date.now(),\n          message: message,\n          level: level\n        });\n        \n        // 限制日志数量\n        if (this.logs.length > 100) {\n          this.logs = this.logs.slice(0, 100);\n        }\n        \n        // 自动滚动到最新日志\n        this.$nextTick(() => {\n          if (this.$refs.logContent) {\n            this.$refs.logContent.scrollTop = 0;\n          }\n        });\n      },\n      \n      // 初始化WebSocket连接\n      initializeWebSocket() {\n        // 这里应该连接到您的WebSocket服务器\n        // 示例代码：\n        /*\n        this.ws = new WebSocket('ws://your-server:port');\n        this.ws.onmessage = (event) => {\n          const data = JSON.parse(event.data);\n          if (data.type === 'position') {\n            this.updatePosition(data.ra, data.dec);\n          } else if (data.type === 'log') {\n            this.addLog(data.message, data.level);\n          }\n        };\n        */\n        \n        // 模拟数据更新\n        setInterval(() => {\n          this.simulatePositionUpdate();\n        }, 2000);\n      },\n      \n      // 模拟位置更新\n      simulatePositionUpdate() {\n        const randomRA = Math.random() * 24;\n        const randomDEC = (Math.random() - 0.5) * 180;\n        \n        this.updatePosition(randomRA, randomDEC);\n        this.addLog(`位置更新: RA ${randomRA.toFixed(2)}h, DEC ${randomDEC.toFixed(2)}°`, 'info');\n      },\n      \n      // 更新位置\n      updatePosition(ra, dec) {\n        this.currentRA = this.formatRA(ra);\n        this.currentDEC = this.formatDEC(dec);\n        \n        // 更新视场中的当前位置\n        this.currentPosition = this.convertToScreenCoordinates(ra, dec);\n        \n        // 更新移动方向\n        this.updateMoveDirection();\n      },\n      \n      // 格式化RA坐标\n      formatRA(ra) {\n        const hours = Math.floor(ra);\n        const minutes = Math.floor((ra - hours) * 60);\n        const seconds = Math.floor(((ra - hours) * 60 - minutes) * 60);\n        return `${hours}h ${minutes}m ${seconds}s`;\n      },\n      \n      // 格式化DEC坐标\n      formatDEC(dec) {\n        const sign = dec >= 0 ? '+' : '-';\n        const absDec = Math.abs(dec);\n        const degrees = Math.floor(absDec);\n        const minutes = Math.floor((absDec - degrees) * 60);\n        const seconds = Math.floor(((absDec - degrees) * 60 - minutes) * 60);\n        return `${sign}${degrees}° ${minutes}' ${seconds}\"`;\n      },\n      \n      // 转换为屏幕坐标\n      convertToScreenCoordinates(ra, dec) {\n        // 这里需要根据您的实际坐标系统进行转换\n        // 这只是一个示例实现\n        const x = 150 + (ra - 12) * 10;\n        const y = 150 - dec * 2;\n        return { x, y };\n      },\n      \n      // 更新移动方向\n      updateMoveDirection() {\n        const dx = this.targetPosition.x - this.currentPosition.x;\n        const dy = this.targetPosition.y - this.currentPosition.y;\n        \n        if (Math.abs(dx) > 5 || Math.abs(dy) > 5) {\n          this.moveDirection = { x: dx, y: dy };\n          this.showArrow = true;\n        } else {\n          this.showArrow = false;\n        }\n      },\n      \n      // 计算距离\n      calculateDistance() {\n        const dx = this.targetPosition.x - this.currentPosition.x;\n        const dy = this.targetPosition.y - this.currentPosition.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        return (distance * 0.1).toFixed(2); // 转换为角度单位\n      },\n      \n      // 启动日志更新器\n      startLogUpdater() {\n        // 模拟定期日志更新\n        setInterval(() => {\n          if (Math.random() < 0.3) {\n            const messages = [\n              '正在调整赤道仪位置...',\n              '图像对焦中...',\n              '天体跟踪正常',\n              '检测到轻微抖动',\n              '位置校准完成'\n            ];\n            const levels = ['info', 'warning', 'success'];\n            const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n            const randomLevel = levels[Math.floor(Math.random() * levels.length)];\n            this.addLog(randomMessage, randomLevel);\n          }\n        }, 3000);\n      },\n      \n      // 添加校准点\n      addCalibrationPoint(ra, dec) {\n        if (this.calibrationPoints.length < 3) {\n          const point = {\n            ra: ra,  // 赤经（小时）\n            dec: dec,  // 赤纬（度）\n            timestamp: Date.now()\n          };\n          \n          this.calibrationPoints.push(point);\n          this.currentCalibrationStep = this.calibrationPoints.length - 1;\n          \n          this.addLog(`添加校准点 ${this.calibrationPoints.length}: RA=${this.formatRA(ra)}, DEC=${this.formatDEC(dec)}`, 'info');\n          \n          // 通过事件总线发送校准点添加事件\n          this.$bus.$emit('calibrationPointAdded', {\n            point: point,\n            stepIndex: this.calibrationPoints.length - 1,\n            totalSteps: 3\n          });\n          \n          // 如果收集到三个点，开始计算偏转\n          if (this.calibrationPoints.length === 3) {\n            this.calculatePolarAxisOffset();\n          }\n        }\n      },\n      \n      // 计算极轴偏转量\n      calculatePolarAxisOffset() {\n        if (this.calibrationPoints.length !== 3) {\n          this.addLog('需要三个校准点才能计算偏转', 'warning');\n          return;\n        }\n        \n        this.addLog('开始计算极轴偏转...', 'info');\n        \n        try {\n          // 将三个赤经赤纬坐标转换为笛卡尔坐标\n          const cartesianPoints = this.calibrationPoints.map(point => \n            this.sphericalToCartesian(point.ra, point.dec)\n          );\n          \n          // 计算三点定圆\n          const circleCenter = this.calculateCircleCenter(cartesianPoints);\n          \n          // 计算极轴偏转角度\n          const offset = this.calculateOffsetFromCircleCenter(circleCenter);\n          \n          this.polarAxisOffset = offset;\n          this.isCalibrationComplete = true;\n          \n          this.addLog(`极轴偏转计算完成: 方位角=${offset.azimuth.toFixed(2)}°, 高度角=${offset.altitude.toFixed(2)}°`, 'success');\n          \n          // 发送偏转结果到父组件\n          this.$emit('polar-axis-offset-calculated', offset);\n          \n          // 通过事件总线发送校准完成事件\n          this.$bus.$emit('polarAlignmentComplete', {\n            offset: offset,\n            points: this.calibrationPoints,\n            timestamp: Date.now()\n          });\n          \n        } catch (error) {\n          this.addLog(`计算偏转时发生错误: ${error.message}`, 'error');\n        }\n      },\n      \n      // 球面坐标转笛卡尔坐标\n      sphericalToCartesian(ra, dec) {\n        const raRad = ra * Math.PI / 12;  // 赤经转弧度 (小时到弧度)\n        const decRad = dec * Math.PI / 180;  // 赤纬转弧度\n        \n        return {\n          x: Math.cos(decRad) * Math.cos(raRad),\n          y: Math.cos(decRad) * Math.sin(raRad),\n          z: Math.sin(decRad)\n        };\n      },\n      \n      // 计算三点定圆的圆心\n      calculateCircleCenter(points) {\n        const [p1, p2, p3] = points;\n        \n        // 计算两个向量\n        const v1 = {\n          x: p2.x - p1.x,\n          y: p2.y - p1.y,\n          z: p2.z - p1.z\n        };\n        \n        const v2 = {\n          x: p3.x - p1.x,\n          y: p3.y - p1.y,\n          z: p3.z - p1.z\n        };\n        \n        // 计算法向量（叉积）\n        const normal = {\n          x: v1.y * v2.z - v1.z * v2.y,\n          y: v1.z * v2.x - v1.x * v2.z,\n          z: v1.x * v2.y - v1.y * v2.x\n        };\n        \n        // 归一化法向量\n        const normalMag = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\n        if (normalMag === 0) {\n          throw new Error('三点共线，无法计算圆心');\n        }\n        \n        return {\n          x: normal.x / normalMag,\n          y: normal.y / normalMag,\n          z: normal.z / normalMag\n        };\n      },\n      \n      // 根据圆心计算偏转角度\n      calculateOffsetFromCircleCenter(center) {\n        // 理论上，如果极轴对准正确，圆心应该指向天球北极 (0, 0, 1)\n        // 偏转角度就是实际圆心与理论位置的差异\n        \n        // 计算方位角偏转（绕z轴）\n        const azimuth = Math.atan2(center.y, center.x) * 180 / Math.PI;\n        \n        // 计算高度角偏转\n        const altitude = Math.asin(center.z) * 180 / Math.PI - 90;  // 相对于地平面的偏转\n        \n        return {\n          azimuth: azimuth,\n          altitude: altitude\n        };\n      },\n      \n              // 重置校准数据\n        resetCalibration() {\n          this.calibrationPoints = [];\n          this.currentCalibrationStep = 0;\n          this.polarAxisOffset = { azimuth: 0, altitude: 0 };\n          this.isCalibrationComplete = false;\n          this.addLog('校准数据已重置', 'info');\n          \n          // 通过事件总线发送重置事件\n          this.$bus.$emit('calibrationReset', {\n            timestamp: Date.now()\n          });\n        },\n      \n             // 获取当前校准状态\n       getCalibrationStatus() {\n         return {\n           step: this.currentCalibrationStep,\n           totalSteps: 3,\n           points: this.calibrationPoints,\n           offset: this.polarAxisOffset,\n           isComplete: this.isCalibrationComplete\n         };\n       },\n       \n       // 添加测试校准点（用于演示）\n       addTestCalibrationPoints() {\n         // 模拟三个校准点，间隔一定时间添加\n         const testPoints = [\n           { ra: 12.5, dec: 45.0 },  // 第一个点\n           { ra: 13.2, dec: 46.5 },  // 第二个点\n           { ra: 11.8, dec: 43.2 }   // 第三个点\n         ];\n         \n         testPoints.forEach((point, index) => {\n           setTimeout(() => {\n             this.addCalibrationPoint(point.ra, point.dec);\n           }, index * 2000);\n         });\n       },\n       \n               // 手动添加校准点的接口方法\n        addCalibrationPointManually(raHours, decDegrees) {\n          this.addCalibrationPoint(raHours, decDegrees);\n        },\n        \n        // 处理来自事件总线的添加校准点事件\n        handleAddCalibrationPoint(data) {\n          if (data && data.ra !== undefined && data.dec !== undefined) {\n            this.addCalibrationPoint(data.ra, data.dec);\n          }\n        },\n        \n        // 更新赤道仪位置（来自事件总线）\n        updateMountPosition(data) {\n          if (data && data.ra !== undefined && data.dec !== undefined) {\n            this.currentRA = this.formatRA(data.ra);\n            this.currentDEC = this.formatDEC(data.dec);\n            this.currentPosition = this.convertToScreenCoordinates(data.ra, data.dec);\n            this.updateMoveDirection();\n          }\n        },\n        \n        // 更新目标位置（来自事件总线）\n        updateTargetPosition(data) {\n          if (data && data.ra !== undefined && data.dec !== undefined) {\n            this.targetRA = this.formatRA(data.ra);\n            this.targetDEC = this.formatDEC(data.dec);\n            this.targetPosition = this.convertToScreenCoordinates(data.ra, data.dec);\n            this.updateMoveDirection();\n          }\n        },\n        \n        // 关闭组件\n        closeComponent() {\n          this.$emit('close');\n        },\n        \n        // 开始自动校准\n        startAutoCalibration() {\n          if (this.autoStart) {\n            this.addLog('开始自动校准流程', 'info');\n            this.addTestCalibrationPoints();\n          }\n        },\n        \n        // 显示组件\n        show() {\n          this.$emit('update:visible', true);\n        },\n        \n        // 隐藏组件\n        hide() {\n          this.$emit('update:visible', false);\n        },\n        \n        // 切换显示状态\n        toggle() {\n          this.$emit('update:visible', !this.visible);\n        },\n        \n        // 设置全屏模式\n        setFullscreen(fullscreen) {\n          this.$emit('update:fullscreen', fullscreen);\n        },\n        \n        // 获取组件状态\n        getComponentStatus() {\n          return {\n            visible: this.visible,\n            fullscreen: this.isFullscreen,\n            calibration: this.getCalibrationStatus()\n          };\n        }\n    },\n    \n    beforeDestroy() {\n      // 清理WebSocket连接\n      if (this.ws) {\n        this.ws.close();\n      }\n      \n      // 清理事件总线监听器\n      this.$bus.$off('updateCurrentPosition', this.updatePosition);\n      this.$bus.$off('addCalibrationPoint', this.handleAddCalibrationPoint);\n      this.$bus.$off('resetCalibration', this.resetCalibration);\n      this.$bus.$off('showPolarAlignment', this.show);\n      this.$bus.$off('hidePolarAlignment', this.hide);\n      this.$bus.$off('togglePolarAlignment', this.toggle);\n      this.$bus.$off('updateMountPosition', this.updateMountPosition);\n      this.$bus.$off('updateTargetPosition', this.updateTargetPosition);\n    }\n  }\n  </script>\n  \n  <style scoped>\n  .mount-status-display {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 50vh;\n    background: rgba(0, 0, 0, 0.8);\n    backdrop-filter: blur(10px);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n    z-index: 1000;\n    font-family: 'Arial', sans-serif;\n    transition: all 0.3s ease;\n  }\n  \n  .mount-status-display.fullscreen {\n    height: 100vh;\n    border-bottom: none;\n  }\n  \n  /* 日志区域样式 */\n  .log-section {\n    height: 40%;\n    background: rgba(20, 20, 20, 0.9);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n    transition: height 0.3s ease;\n    cursor: pointer;\n  }\n  \n  .log-section.expanded {\n    height: 70%;\n  }\n  \n  .log-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 16px;\n    background: rgba(40, 40, 40, 0.8);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .header-controls {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n  \n  .log-title {\n    color: rgba(255, 255, 255, 0.9);\n    font-size: 14px;\n    font-weight: 500;\n  }\n  \n  .expand-icon {\n    color: rgba(255, 255, 255, 0.6);\n    transition: transform 0.3s ease;\n    cursor: pointer;\n  }\n  \n  .expand-icon.rotated {\n    transform: rotate(180deg);\n  }\n  \n  .close-icon {\n    color: rgba(255, 255, 255, 0.6);\n    cursor: pointer;\n    padding: 4px;\n    border-radius: 4px;\n    transition: all 0.3s ease;\n  }\n  \n  .close-icon:hover {\n    color: rgba(255, 255, 255, 0.9);\n    background: rgba(255, 255, 255, 0.1);\n  }\n  \n  .log-content {\n    height: calc(100% - 40px);\n    overflow-y: auto;\n    padding: 8px;\n  }\n  \n  .log-item {\n    display: flex;\n    align-items: center;\n    margin-bottom: 4px;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 12px;\n    background: rgba(40, 40, 40, 0.5);\n  }\n  \n  .log-item.info {\n    border-left: 3px solid #4a90e2;\n  }\n  \n  .log-item.warning {\n    border-left: 3px solid #f5a623;\n  }\n  \n  .log-item.success {\n    border-left: 3px solid #7ed321;\n  }\n  \n  .log-item.error {\n    border-left: 3px solid #d0021b;\n  }\n  \n  .log-time {\n    color: rgba(255, 255, 255, 0.6);\n    margin-right: 12px;\n    min-width: 80px;\n  }\n  \n  .log-message {\n    color: rgba(255, 255, 255, 0.9);\n    flex: 1;\n  }\n  \n  /* 图像区域样式 */\n  .image-section {\n    height: 60%;\n    display: flex;\n    gap: 1px;\n  }\n  \n  .mount-image-container,\n  .camera-field-container {\n    flex: 1;\n    background: rgba(30, 30, 30, 0.9);\n    border-radius: 8px;\n    margin: 8px;\n    padding: 12px;\n    display: flex;\n    flex-direction: column;\n  }\n  \n  .mount-image-title,\n  .camera-field-title {\n    color: rgba(255, 255, 255, 0.9);\n    font-size: 14px;\n    font-weight: 500;\n    margin-bottom: 12px;\n    text-align: center;\n    padding-bottom: 8px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .mount-image-content,\n  .camera-field-content {\n    flex: 1;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: rgba(20, 20, 20, 0.8);\n    border-radius: 6px;\n    overflow: hidden;\n  }\n  \n  .mount-background {\n    width: 200px;\n    height: 200px;\n    position: relative;\n  }\n  \n  .direction-arrow {\n    position: absolute;\n    z-index: 10;\n  }\n  \n  @keyframes arrowPulse {\n    0%, 100% { opacity: 1; transform: scale(1); }\n    50% { opacity: 0.7; transform: scale(1.1); }\n  }\n  \n  .mount-info,\n  .position-info {\n    margin-top: 12px;\n    padding: 8px;\n    background: rgba(40, 40, 40, 0.6);\n    border-radius: 4px;\n  }\n  \n  .info-item,\n  .info-row {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 4px;\n    font-size: 12px;\n  }\n  \n  .info-label {\n    color: rgba(255, 255, 255, 0.7);\n    font-weight: 500;\n  }\n  \n  .info-value {\n    color: rgba(255, 255, 255, 0.9);\n    font-family: monospace;\n  }\n  \n  /* 滚动条样式 */\n  .log-content::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  .log-content::-webkit-scrollbar-track {\n    background: rgba(40, 40, 40, 0.3);\n  }\n  \n  .log-content::-webkit-scrollbar-thumb {\n    background: rgba(255, 255, 255, 0.3);\n    border-radius: 3px;\n  }\n  \n  .log-content::-webkit-scrollbar-thumb:hover {\n    background: rgba(255, 255, 255, 0.5);\n  }\n  \n  /* 校准信息样式 */\n  .calibration-info {\n    margin-top: 12px;\n    padding: 12px;\n    background: rgba(40, 40, 40, 0.8);\n    border-radius: 6px;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .calibration-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 12px;\n    padding-bottom: 8px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .calibration-title {\n    color: rgba(255, 255, 255, 0.9);\n    font-size: 14px;\n    font-weight: 500;\n  }\n  \n  .reset-btn {\n    padding: 4px 8px;\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 4px;\n    color: rgba(255, 255, 255, 0.8);\n    font-size: 12px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n  }\n  \n  .reset-btn:hover:not(:disabled) {\n    background: rgba(255, 255, 255, 0.2);\n    border-color: rgba(255, 255, 255, 0.3);\n  }\n  \n  .reset-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n  \n  .calibration-progress {\n    margin-bottom: 12px;\n  }\n  \n  .progress-item {\n    display: flex;\n    align-items: center;\n    margin-bottom: 8px;\n    padding: 6px 8px;\n    border-radius: 4px;\n    background: rgba(30, 30, 30, 0.5);\n    transition: all 0.3s ease;\n  }\n  \n  .progress-item.completed {\n    background: rgba(126, 211, 33, 0.2);\n    border-left: 3px solid #7ed321;\n  }\n  \n  .progress-item.current {\n    background: rgba(74, 144, 226, 0.2);\n    border-left: 3px solid #4a90e2;\n  }\n  \n  .progress-number {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: 20px;\n    height: 20px;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 50%;\n    color: rgba(255, 255, 255, 0.8);\n    font-size: 11px;\n    margin-right: 8px;\n  }\n  \n  .progress-item.completed .progress-number {\n    background: #7ed321;\n    color: white;\n  }\n  \n  .progress-item.current .progress-number {\n    background: #4a90e2;\n    color: white;\n  }\n  \n  .progress-label {\n    color: rgba(255, 255, 255, 0.8);\n    font-size: 12px;\n    margin-right: 8px;\n    min-width: 50px;\n  }\n  \n  .progress-coords {\n    color: rgba(255, 255, 255, 0.6);\n    font-size: 11px;\n    font-family: monospace;\n  }\n  \n  .offset-results {\n    background: rgba(50, 50, 50, 0.5);\n    border-radius: 4px;\n    padding: 12px;\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .offset-title {\n    color: rgba(255, 255, 255, 0.9);\n    font-size: 13px;\n    font-weight: 500;\n    margin-bottom: 8px;\n    text-align: center;\n  }\n  \n  .offset-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 6px;\n    font-size: 12px;\n  }\n  \n  .offset-label {\n    color: rgba(255, 255, 255, 0.7);\n  }\n  \n  .offset-value {\n    color: rgba(255, 255, 255, 0.9);\n    font-family: monospace;\n    font-weight: 500;\n  }\n  \n  .offset-value.high-offset {\n    color: #f5a623;\n  }\n  \n  .offset-recommendation {\n    margin-top: 8px;\n    padding: 6px 8px;\n    border-radius: 4px;\n    text-align: center;\n    font-size: 12px;\n  }\n  \n  .recommendation.warning {\n    background: rgba(245, 166, 35, 0.2);\n    border: 1px solid rgba(245, 166, 35, 0.5);\n    color: #f5a623;\n  }\n  \n  .recommendation.success {\n    background: rgba(126, 211, 33, 0.2);\n    border: 1px solid rgba(126, 211, 33, 0.5);\n    color: #7ed321;\n  }\n  \n  /* 响应式设计 */\n  @media (max-width: 768px) {\n    .image-section {\n      flex-direction: column;\n    }\n    \n    .mount-image-container,\n    .camera-field-container {\n      margin: 4px;\n      padding: 8px;\n    }\n    \n    .mount-image-title,\n    .camera-field-title {\n      font-size: 12px;\n    }\n    \n    .calibration-info {\n      padding: 8px;\n    }\n    \n    .calibration-header {\n      flex-direction: column;\n      gap: 8px;\n    }\n    \n    .progress-item {\n      flex-direction: column;\n      align-items: flex-start;\n      gap: 4px;\n    }\n    \n    .progress-coords {\n      margin-left: 28px;\n    }\n  }\n  </style>\n\n  <!-- \n    # 极轴校准组件事件总线使用示例\n\n    ## 概述\n    极轴校准组件现在支持通过事件总线 (`this.$bus`) 来进行数据更新和通信。\n\n    ## 发送事件到组件\n\n    ### 1. 显示/隐藏组件\n    ```javascript\n    // 显示极轴校准界面\n    this.$bus.$emit('showPolarAlignment');\n\n    // 隐藏极轴校准界面\n    this.$bus.$emit('hidePolarAlignment');\n\n    // 切换显示状态\n    this.$bus.$emit('togglePolarAlignment');\n    ```\n\n    ### 2. 添加校准点\n    ```javascript\n    // 添加一个校准点\n    this.$bus.$emit('addCalibrationPoint', {\n    ra: 12.5,   // 赤经（小时）\n    dec: 45.0   // 赤纬（度）\n    });\n\n    // 批量添加多个校准点\n    const points = [\n    { ra: 12.5, dec: 45.0 },\n    { ra: 13.2, dec: 46.5 },\n    { ra: 11.8, dec: 43.2 }\n    ];\n\n    points.forEach(point => {\n    this.$bus.$emit('addCalibrationPoint', point);\n    });\n    ```\n\n    ### 3. 重置校准\n    ```javascript\n    // 重置校准数据\n    this.$bus.$emit('resetCalibration');\n    ```\n\n    ### 4. 更新位置信息\n    ```javascript\n    // 更新当前赤道仪位置\n    this.$bus.$emit('updateMountPosition', {\n    ra: 12.5,   // 赤经（小时）\n    dec: 45.0   // 赤纬（度）\n    });\n\n    // 更新目标位置\n    this.$bus.$emit('updateTargetPosition', {\n    ra: 12.3,   // 赤经（小时）\n    dec: 45.2   // 赤纬（度）\n    });\n\n    // 更新当前位置（原有方法）\n    this.$bus.$emit('updateCurrentPosition', {\n    ra: 12.4,   // 赤经（小时）\n    dec: 45.1   // 赤纬（度）\n    });\n    ```\n\n    ## 监听组件事件\n\n    ### 1. 监听校准完成事件\n    ```javascript\n    // 在组件的mounted生命周期中监听\n    mounted() {\n    this.$bus.$on('polarAlignmentComplete', this.handleCalibrationComplete);\n    this.$bus.$on('calibrationPointAdded', this.handlePointAdded);\n    this.$bus.$on('calibrationReset', this.handleCalibrationReset);\n    },\n\n    methods: {\n    handleCalibrationComplete(data) {\n        console.log('极轴校准完成:', data);\n        console.log('方位角偏转:', data.offset.azimuth, '度');\n        console.log('高度角偏转:', data.offset.altitude, '度');\n        \n        // 判断是否需要调整\n        if (Math.abs(data.offset.azimuth) > 5 || Math.abs(data.offset.altitude) > 5) {\n        this.showNotification('极轴偏转较大，建议调整！', 'warning');\n        } else {\n        this.showNotification('极轴校准正常', 'success');\n        }\n    },\n    \n    handlePointAdded(data) {\n        console.log('校准点已添加:', data);\n        console.log('当前步骤:', data.stepIndex + 1, '/', data.totalSteps);\n        \n        // 更新进度条\n        this.updateCalibrationProgress(data.stepIndex + 1, data.totalSteps);\n    },\n    \n    handleCalibrationReset(data) {\n        console.log('校准已重置:', data);\n        this.resetProgressBar();\n    }\n    },\n\n    beforeDestroy() {\n    // 清理事件监听器\n    this.$bus.$off('polarAlignmentComplete', this.handleCalibrationComplete);\n    this.$bus.$off('calibrationPointAdded', this.handlePointAdded);\n    this.$bus.$off('calibrationReset', this.handleCalibrationReset);\n    }\n    ```\n\n    ## 完整使用示例\n\n    ### 示例1: 天文设备控制器\n    ```javascript\n    // 天文设备控制器组件\n    export default {\n    name: 'TelescopeController',\n    data() {\n        return {\n        currentRA: 0,\n        currentDEC: 0,\n        targetRA: 0,\n        targetDEC: 0,\n        calibrationStep: 0,\n        isCalibrating: false\n        }\n    },\n    \n    mounted() {\n        // 监听校准相关事件\n        this.$bus.$on('polarAlignmentComplete', this.onCalibrationComplete);\n        this.$bus.$on('calibrationPointAdded', this.onPointAdded);\n        \n        // 模拟位置更新\n        this.startPositionUpdater();\n    },\n    \n    methods: {\n        // 开始极轴校准\n        startPolarAlignment() {\n        this.isCalibrating = true;\n        this.calibrationStep = 0;\n        \n        // 显示校准界面\n        this.$bus.$emit('showPolarAlignment');\n        \n        // 重置校准数据\n        this.$bus.$emit('resetCalibration');\n        \n        // 开始收集校准点\n        this.collectCalibrationPoints();\n        },\n        \n        // 收集校准点\n        collectCalibrationPoints() {\n        const points = [\n            { ra: 12.5, dec: 45.0 },\n            { ra: 13.2, dec: 46.5 },\n            { ra: 11.8, dec: 43.2 }\n        ];\n        \n        points.forEach((point, index) => {\n            setTimeout(() => {\n            this.$bus.$emit('addCalibrationPoint', point);\n            }, index * 2000);\n        });\n        },\n        \n        // 处理校准完成\n        onCalibrationComplete(data) {\n        this.isCalibrating = false;\n        \n        // 保存偏转结果\n        this.saveCalibrationResult(data.offset);\n        \n        // 隐藏校准界面\n        setTimeout(() => {\n            this.$bus.$emit('hidePolarAlignment');\n        }, 3000);\n        },\n        \n        // 处理校准点添加\n        onPointAdded(data) {\n        this.calibrationStep = data.stepIndex + 1;\n        console.log(`校准进度: ${this.calibrationStep}/3`);\n        },\n        \n        // 开始位置更新器\n        startPositionUpdater() {\n        setInterval(() => {\n            // 模拟位置变化\n            this.currentRA += Math.random() * 0.01 - 0.005;\n            this.currentDEC += Math.random() * 0.01 - 0.005;\n            \n            // 发送位置更新\n            this.$bus.$emit('updateMountPosition', {\n            ra: this.currentRA,\n            dec: this.currentDEC\n            });\n        }, 1000);\n        },\n        \n        // 保存校准结果\n        saveCalibrationResult(offset) {\n        // 保存到本地存储或发送到服务器\n        localStorage.setItem('polarAxisOffset', JSON.stringify(offset));\n        \n        // 显示结果通知\n        this.showNotification(`极轴校准完成: 方位角${offset.azimuth.toFixed(2)}°, 高度角${offset.altitude.toFixed(2)}°`);\n        }\n    },\n    \n    beforeDestroy() {\n        this.$bus.$off('polarAlignmentComplete', this.onCalibrationComplete);\n        this.$bus.$off('calibrationPointAdded', this.onPointAdded);\n    }\n    }\n    ```\n\n    ### 示例2: 简单的校准触发器\n    ```javascript\n    // 简单的校准触发器\n    export default {\n    name: 'CalibrationTrigger',\n    \n    methods: {\n        // 快速校准\n        quickCalibration() {\n        // 使用预设的校准点\n        const presetPoints = [\n            { ra: 12.5, dec: 45.0 },\n            { ra: 13.2, dec: 46.5 },\n            { ra: 11.8, dec: 43.2 }\n        ];\n        \n        // 显示校准界面\n        this.$bus.$emit('showPolarAlignment');\n        \n        // 重置并添加校准点\n        this.$bus.$emit('resetCalibration');\n        \n        presetPoints.forEach((point, index) => {\n            setTimeout(() => {\n            this.$bus.$emit('addCalibrationPoint', point);\n            }, index * 1000);\n        });\n        },\n        \n        // 手动添加校准点\n        addCurrentPosition() {\n        // 获取当前望远镜位置（这里是模拟数据）\n        const currentPos = this.getCurrentTelescopePosition();\n        \n        this.$bus.$emit('addCalibrationPoint', {\n            ra: currentPos.ra,\n            dec: currentPos.dec\n        });\n        }\n    }\n    }\n    ```\n\n    ## 事件总线事件列表\n\n    ### 发送到组件的事件\n    | 事件名 | 参数 | 说明 |\n    |--------|------|------|\n    | `showPolarAlignment` | - | 显示极轴校准界面 |\n    | `hidePolarAlignment` | - | 隐藏极轴校准界面 |\n    | `togglePolarAlignment` | - | 切换显示状态 |\n    | `addCalibrationPoint` | `{ra, dec}` | 添加校准点 |\n    | `resetCalibration` | - | 重置校准数据 |\n    | `updateMountPosition` | `{ra, dec}` | 更新赤道仪位置 |\n    | `updateTargetPosition` | `{ra, dec}` | 更新目标位置 |\n    | `updateCurrentPosition` | `{ra, dec}` | 更新当前位置 |\n\n    ### 组件发送的事件\n    | 事件名 | 参数 | 说明 |\n    |--------|------|------|\n    | `polarAlignmentComplete` | `{offset, points, timestamp}` | 极轴校准完成 |\n    | `calibrationPointAdded` | `{point, stepIndex, totalSteps}` | 校准点已添加 |\n    | `calibrationReset` | `{timestamp}` | 校准已重置 |\n\n    ## 注意事项\n\n    1. 记得在组件销毁前清理事件监听器，避免内存泄漏\n    2. 事件总线是全局的，注意事件名称的唯一性\n    3. 传递的数据格式要保持一致\n    4. 合理使用事件总线，避免过度依赖导致代码难以维护\n  -->"]}]}