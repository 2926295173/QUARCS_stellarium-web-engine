{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Focus.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Focus.vue","mtime":1760075043417},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1756885033541},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1756885034172},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1756885033526},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1756885033541},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1756885034208}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Chart-Focus.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Chart-Focus.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div\n      ref=\"linechart\"\n      :style=\"{ width: containerMaxWidth + 'px', height: 80 + 'px' }\"\n      class=\"linechart-panel\"\n      @mousedown=\"startDrag\"\n      @mousemove=\"dragging\"\n      @mouseup=\"endDrag\"\n      @touchstart=\"startDrag\"\n      @touchmove=\"dragging\"\n      @touchend=\"endDrag\"\n    ></div>\n    \n    <!-- 对焦结果状态框 -->\n    <div class=\"focus-result-panel\" v-if=\"quadraticResult.show\">\n      <div class=\"panel-header\">\n        <div class=\"header-left\">\n          <div class=\"status-icon\" :class=\"{ 'success': !isHorizontalFit(), 'warning': isHorizontalFit() }\">\n            <i v-if=\"!isHorizontalFit()\" class=\"icon-check\">✓</i>\n            <i v-else class=\"icon-warning\">⚠</i>\n          </div>\n          <div class=\"panel-title\">对焦状态</div>\n        </div>\n        <div class=\"close-button\" @click=\"closePanel\">\n          <i class=\"icon-close\">×</i>\n        </div>\n      </div>\n      <div class=\"panel-content\">\n        <div class=\"status-row\">\n          <span class=\"label\">最佳位置</span>\n          <span class=\"value\" :class=\"{ 'error': isHorizontalFit() }\">{{ getBestPositionDisplay() }}</span>\n        </div>\n        <div class=\"status-row\">\n          <span class=\"label\">最小HFR</span>\n          <span class=\"value\">{{ quadraticResult.minHFR }}</span>\n        </div>\n        <div class=\"status-row\">\n          <span class=\"label\">数据点数</span>\n          <span class=\"value\">{{ validDataPointCount }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'LineChart',\n  data() {\n    return {\n      containerMaxWidth: 150,\n      chartData1: [],\n      chartData2: [],\n      chartData3: [],\n      chartData4: [], // 异常点数据\n      xAxis_min: 0,\n      xAxis_max: 6000,\n      yAxis_min: 0,\n      yAxis_max: 30,\n      range: 4,\n      currentX: 0,\n      HFRMax: 0,\n      isDragging: false,\n      startX: 0,\n      deltaX: 0,\n      x_min: -60000,\n      x_max: 60000,\n      quadraticResult: {\n        show: false,\n        a: 0,\n        b: 0,\n        c: 0,\n        bestPosition: 0,\n        minHFR: 0\n      },\n      logger: null // 统一日志记录器\n    };\n  },\n  computed: {\n    validDataPointCount() {\n      // 过滤掉异常数据点（位置为0或负数，HFR为0或负数）\n      return this.chartData1.filter(point => \n        point[0] > 0 && point[1] > 0\n      ).length;\n    },\n    \n    // 获取清理后的数据点（去除异常点）\n    cleanDataPoints() {\n      return this.unifiedOutlierDetection(this.chartData1);\n    },\n    \n    // 获取异常点数据\n    outlierDataPoints() {\n      const cleanData = this.unifiedOutlierDetection(this.chartData1);\n      return this.chartData1.filter(point => \n        !cleanData.some(cleanPoint => \n          cleanPoint[0] === point[0] && cleanPoint[1] === point[1]\n        )\n      );\n    }\n  },\n  mounted() {\n    // 初始化logger\n    this.initLogger();\n    \n    // 在开发环境下运行测试\n    if (process.env.NODE_ENV === 'development') {\n      // 延迟执行测试，确保组件完全初始化\n      setTimeout(() => {\n        this.logger.info('Chart-Focus.vue | 开发环境：运行二次曲线拟合测试');\n        this.testQuadraticFitting();\n      }, 1000);\n    }\n  },\n  created() {\n    this.$bus.$on('FocusPosition', this.changeRange_x);\n    // this.$bus.$on('UpdateHFR', this.UpdateHFR);\n    this.$bus.$on('fitQuadraticCurve', this.fitQuadraticCurve);\n    this.$bus.$on('fitQuadraticCurve_minPoint', this.fitQuadraticCurve_minPoint);\n\n    this.$bus.$on('ClearfitQuadraticCurve', this.clearChartData2);\n    this.$bus.$on('ClearAllData', this.ClearAllData);\n    this.$bus.$on('ClearFineData', this.ClearFineData);\n    this.$bus.$on('updateFocusChartWidth', this.initChart);\n    this.$bus.$on('addData_Point', this.addData_Point);\n    this.$bus.$on('addMinPointData_Point', this.addMinPointData_Point);\n    this.$bus.$on('addLineData_Point', this.addLineData_Point);\n    this.$bus.$on('setFocusChartRange', this.setFocusChartRange);\n  },\n  methods: {\n    // 初始化logger\n    initLogger() {\n      this.logger = {\n        info: (message, ...args) => {\n          console.log(`[INFO] ${message}`, ...args);\n        },\n        warn: (message, ...args) => {\n          console.warn(`[WARN] ${message}`, ...args);\n        },\n        error: (message, ...args) => {\n          console.error(`[ERROR] ${message}`, ...args);\n        },\n        debug: (message, ...args) => {\n          if (process.env.NODE_ENV === 'development') {\n            console.debug(`[DEBUG] ${message}`, ...args);\n          }\n        }\n      };\n    },\n    \n    // 验证拟合系数的有效性\n    validateFitCoefficients(a, b, c) {\n      // 检查是否为有效数值\n      if (!isFinite(a) || !isFinite(b) || !isFinite(c)) {\n        this.logger.warn('拟合系数包含无效值 (NaN/Infinity)');\n        return false;\n      }\n      \n      // 检查是否为水平线拟合\n      if (Math.abs(a) < 1e-6 && Math.abs(b) < 1e-6) {\n        this.logger.warn('检测到水平线拟合 (a≈0, b≈0)');\n        return false;\n      }\n      \n      // 检查二次项系数是否过小\n      if (Math.abs(a) < 1e-10) {\n        this.logger.warn('二次项系数过小，可能是直线拟合');\n        return false;\n      }\n      \n      return true;\n    },\n    \n    // 统一的前后端异常点检测算法\n    // 与后端C++算法保持一致\n    unifiedOutlierDetection(dataPoints) {\n      if (dataPoints.length < 4) {\n        return dataPoints;\n      }\n      \n      this.logger.info('Chart-Focus.vue | 开始统一异常点检测，数据点数量:', dataPoints.length);\n      \n      // 第一步：基于HFR统计分布的IQR方法（与后端一致）\n      const cleanData = this.removeOutliersByIQR(dataPoints);\n      \n      // 第二步：如果数据点仍然足够，进行二次拟合残差分析\n      if (cleanData.length >= 4) {\n        const residualCleanData = this.removeOutliersByResidual(cleanData);\n        \n        // 选择保留更多数据点的方法\n        if (residualCleanData.length >= 3) {\n          this.logger.info('Chart-Focus.vue | 使用残差分析方法，保留', residualCleanData.length, '个数据点');\n          return residualCleanData;\n        }\n      }\n      \n      this.logger.info('Chart-Focus.vue | 使用IQR方法，保留', cleanData.length, '个数据点');\n      return cleanData;\n    },\n    \n    // 验证前后端拟合结果一致性\n    validateFitConsistency(backendCoefficients, frontendCoefficients) {\n      const tolerance = 1e-6; // 允许的误差范围\n      \n      const aDiff = Math.abs(backendCoefficients.a - frontendCoefficients.a);\n      const bDiff = Math.abs(backendCoefficients.b - frontendCoefficients.b);\n      const cDiff = Math.abs(backendCoefficients.c - frontendCoefficients.c);\n      \n      this.logger.info('Chart-Focus.vue | 拟合系数对比:', {\n        backend: backendCoefficients,\n        frontend: frontendCoefficients,\n        differences: { a: aDiff, b: bDiff, c: cDiff }\n      });\n      \n      const isConsistent = aDiff < tolerance && bDiff < tolerance && cDiff < tolerance;\n      \n      if (isConsistent) {\n        this.logger.info('Chart-Focus.vue | 前后端拟合结果一致');\n      } else {\n        this.logger.warn('Chart-Focus.vue | 前后端拟合结果不一致，可能存在算法差异');\n      }\n      \n      return isConsistent;\n    },\n    \n    // 关闭面板\n    closePanel() {\n      this.quadraticResult.show = false;\n    },\n    \n    // 检查是否为水平线拟合\n    isHorizontalFit() {\n      const a = parseFloat(this.quadraticResult.a);\n      const b = parseFloat(this.quadraticResult.b);\n      return Math.abs(a) < 1e-6 && Math.abs(b) < 1e-6;\n    },\n    \n    // 获取最佳位置显示文本\n    getBestPositionDisplay() {\n      // 检查是否为水平线拟合（a和b都接近0）\n      const a = parseFloat(this.quadraticResult.a);\n      const b = parseFloat(this.quadraticResult.b);\n      \n      this.logger.debug('Chart-Focus.vue | 检查最佳位置显示:', { a, b, bestPosition: this.quadraticResult.bestPosition });\n      \n      // 如果a和b都接近0，说明是水平线，没有最佳位置\n      if (this.isHorizontalFit()) {\n        this.logger.warn('Chart-Focus.vue | 检测到水平线拟合，显示\"未找到最佳位置\"');\n        return \"未找到最佳位置\";\n      }\n      \n      // 否则显示具体的最佳位置数值\n      return this.quadraticResult.bestPosition;\n    },\n    \n    initChart(Width) {\n      this.containerMaxWidth = Width - 95;\n      const chartDom = this.$refs.linechart;\n      chartDom.style.width = this.containerMaxWidth + 'px';\n      this.myChart = echarts.init(chartDom);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    startDrag(event) {\n      this.isDragging = true;\n      // 兼容鼠标事件和触摸事件\n      if (event.touches && event.touches.length > 0) {\n        this.startX = event.touches[0].clientX;\n      } else {\n        this.startX = event.clientX;\n      }\n    },\n    dragging(event) {\n      if (this.isDragging) {\n        // 兼容鼠标事件和触摸事件\n        let clientX;\n        if (event.touches && event.touches.length > 0) {\n          clientX = event.touches[0].clientX;\n        } else {\n          clientX = event.clientX;\n        }\n        \n        this.deltaX = (clientX - this.startX) * 10;\n        this.startX = clientX;\n        this.xAxis_min -= this.deltaX;\n        this.xAxis_max -= this.deltaX;\n        this.renderChart(this.xAxis_min, this.xAxis_max);\n      }\n    },\n    endDrag() {\n      this.isDragging = false;\n      this.deltaX = 0;\n      // this.$bus.$emit('setTargetPosition', (this.xAxis_min + this.xAxis_max) / 2);\n    },\n    renderChart(lowerBound, upperBound) {\n      // 计算Y轴最大值，包括所有数据\n      let allYValues = [];\n      if (this.chartData1.length > 0) allYValues = allYValues.concat(this.chartData1.map(item => item[1]));\n      if (this.chartData2.length > 0) allYValues = allYValues.concat(this.chartData2.map(item => item[1]));\n      if (this.chartData3.length > 0) allYValues = allYValues.concat(this.chartData3.map(item => item[1]));\n      if (this.chartData4.length > 0) allYValues = allYValues.concat(this.chartData4.map(item => item[1]));\n      \n      const y_max = allYValues.length > 0 ? Math.max(...allYValues) * 1.2 : this.yAxis_max;\n      const y_min = allYValues.length > 0 ? Math.min(...allYValues) * 0.8 : this.yAxis_min;\n      \n      this.logger.debug('Chart-Focus.vue | 渲染图表:', {\n        lowerBound, upperBound, y_min, y_max,\n        data1: this.chartData1.length,\n        data2: this.chartData2.length,\n        data3: this.chartData3.length\n      });\n      \n      const option = {\n        grid: {\n          left: '0%',\n          right: '2%',\n          bottom: '0%',\n          top: '10%',\n          containLabel: true\n        },\n        xAxis: {\n          min: lowerBound,\n          max: upperBound,\n          axisLine: {\n            lineStyle: {\n              color: 'rgba(200, 200, 200, 0.5)'  // x轴线颜色\n            }\n          },\n          axisLabel: {\n            color: 'white',\n            fontSize: 5\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: 'rgba(128, 128, 128, 0.5)', \n              width: 1,\n              type: 'solid'\n            }\n          }\n        },\n        yAxis: {\n          min: y_min,\n          max: y_max,\n          axisLine: {\n            lineStyle: {\n              color: 'rgba(200, 200, 200, 0.5)'  // y轴线颜色\n            }\n          },\n          axisLabel: {\n            color: 'white',\n            fontSize: 5\n          },\n          splitNumber: 3,\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: 'rgba(128, 128, 128, 0.5)',\n              width: 1,\n              type: 'solid'\n            }\n          }\n        },\n        series: [\n          {\n            name: 'HFR',\n            type: 'scatter',\n            data: this.chartData1,\n            itemStyle: {\n              color: 'red',\n              borderColor: 'white',\n              borderWidth: 1\n            },\n            symbolSize: 8\n          },\n          {\n            name: 'QuadraticCurve',\n            type: 'line',\n            data: this.chartData2,\n            itemStyle: {\n              color: 'yellow'\n            },\n            lineStyle: {\n              width: 3,\n              type: 'solid'\n            },\n            symbolSize: 0,\n            smooth: false\n          },\n          {\n            name: 'minPoint',\n            type: 'scatter',\n            data: this.chartData3,\n            itemStyle: {\n              color: 'rgba(75, 155, 250, 0.7)'\n            },\n            symbolSize: 4\n          },\n          {\n            name: 'xMinLine',\n            type: 'line',\n            data: [\n              [this.x_min, this.yAxis_min],\n              [this.x_min, y_max]\n            ],\n            lineStyle: {\n              color: 'red',\n              width: 1\n            },\n            symbol: 'none'\n          },\n          {\n            name: 'xMaxLine',\n            type: 'line',\n            data: [\n              [this.x_max, this.yAxis_min],\n              [this.x_max, y_max]\n            ],\n            lineStyle: {\n              color: 'red',\n              width: 1\n            },\n            symbol: 'none'\n          },\n          {\n            name: 'currentPosition',\n            type: 'line',\n            data: [\n              [this.currentX, this.yAxis_min],\n              [this.currentX, y_max]\n            ],\n            lineStyle: {\n              color: 'green',\n              width: 1\n            },\n            symbol: 'none'\n          },\n          {\n            name: 'Outliers',\n            type: 'scatter',\n            data: this.chartData4,\n            itemStyle: {\n              color: 'rgba(255, 0, 255, 0.8)',\n              borderColor: 'white',\n              borderWidth: 2\n            },\n            symbolSize: 12,\n            symbol: 'diamond'\n          }\n        ]\n      };\n      this.myChart.setOption(option);\n    },\n    addData_Point(x,y) {\n      this.logger.info('Chart-Focus.vue | 添加数据点:', { x, y });\n      \n      // 过滤HFR大于等于100的数据点\n      if (y >= 100) {\n        this.logger.warn('Chart-Focus.vue | HFR值过大(>=100)，忽略此数据点:', { x, y });\n        return;\n      }\n      \n      const newDataPoint = [x, y];\n      const existingPointIndex = this.chartData1.findIndex(point => point[0] === newDataPoint[0]);\n      if (existingPointIndex !== -1) {\n        // If the x value already exists, update the y value\n        if (newDataPoint[1] == 0 || newDataPoint[1] == this.chartData1[existingPointIndex][1]) {\n          this.logger.debug('Chart-Focus.vue | 跳过重复数据点:', newDataPoint);\n          return;\n        }\n        this.chartData1[existingPointIndex] = newDataPoint;\n        this.logger.info('Chart-Focus.vue | 更新现有数据点:', newDataPoint);\n      } else {\n        // If the x value does not exist, add the new data point\n        this.chartData1.push(newDataPoint);\n        this.logger.info('Chart-Focus.vue | 添加新数据点:', newDataPoint);\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 当前数据点总数:', this.chartData1.length);\n      this.logger.debug('Chart-Focus.vue | 所有数据点:', this.chartData1);\n      \n      // 更新异常点数据\n      this.updateOutlierData();\n      \n      // 如果已经有拟合结果，重新生成曲线\n      if (this.quadraticResult.show) {\n        const a = parseFloat(this.quadraticResult.a);\n        const b = parseFloat(this.quadraticResult.b);\n        const c = parseFloat(this.quadraticResult.c);\n        const bestPosition = parseFloat(this.quadraticResult.bestPosition);\n        \n        if (Math.abs(a) < 1e-10) {\n          // 线性拟合\n          this.logger.info('Chart-Focus.vue | 数据点更新，重新生成线性拟合曲线');\n          this.generateLinearCurve(b, c, bestPosition);\n        } else {\n          // 二次拟合\n          this.logger.info('Chart-Focus.vue | 数据点更新，重新生成二次拟合曲线');\n          this.generateQuadraticCurve(a, b, c, bestPosition);\n        }\n      } else {\n        this.renderChart(this.xAxis_min, this.xAxis_max);\n      }\n    },\n    // 绘制折线\n    addLineData_Point(dataList) {\n      this.chartData2 = dataList;\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    addMinPointData_Point(x,y) {\n      const newDataPoint = [x, y];\n      this.chartData3.push(newDataPoint);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    // 更改显示的x轴范围\n    changeRange_x(current, target) {\n      const newCurrentX = Number(current);\n      \n      // 只有当位置真正发生变化时才更新\n      if (Math.abs(newCurrentX - this.currentX) > 1) {\n        this.currentX = newCurrentX;\n        \n        // 检查是否需要调整X轴范围\n        const newXAxisMin = newCurrentX - 3000;\n        const newXAxisMax = newCurrentX + 3000;\n        \n        // 只有当新位置超出当前显示范围时才调整X轴范围\n        if (newCurrentX < this.xAxis_min + 1000 || newCurrentX > this.xAxis_max - 1000) {\n          this.xAxis_min = newXAxisMin;\n          this.xAxis_max = newXAxisMax;\n          this.logger.debug(\"Chart-Focus.vue | 调整X轴范围:\", newCurrentX, this.xAxis_min, this.xAxis_max);\n          this.renderChart(this.xAxis_min, this.xAxis_max);\n        } else {\n          // 只更新绿色线位置，不重新渲染整个图表\n          this.updateCurrentPositionLine();\n        }\n      }\n    },\n    \n    // 只更新当前绿色位置线，不重新渲染整个图表\n    updateCurrentPositionLine() {\n      if (this.myChart) {\n        // 计算Y轴最大值\n        let allYValues = [];\n        if (this.chartData1.length > 0) allYValues = allYValues.concat(this.chartData1.map(item => item[1]));\n        if (this.chartData2.length > 0) allYValues = allYValues.concat(this.chartData2.map(item => item[1]));\n        if (this.chartData3.length > 0) allYValues = allYValues.concat(this.chartData3.map(item => item[1]));\n        \n        const y_max = allYValues.length > 0 ? Math.max(...allYValues) * 1.2 : this.yAxis_max;\n        const y_min = allYValues.length > 0 ? Math.min(...allYValues) * 0.8 : this.yAxis_min;\n        \n        // 只更新currentPosition系列\n        this.myChart.setOption({\n          series: [{\n            name: 'currentPosition',\n            type: 'line',\n            data: [\n              [this.currentX, y_min],\n              [this.currentX, y_max]\n            ],\n            lineStyle: {\n              color: 'green',\n              width: 1\n            },\n            symbol: 'none'\n          }]\n        }, false); // false表示不重新渲染，只更新数据\n      }\n    },\n\n    // 清除数据\n    clearChartData1() {\n      this.chartData1 = [];\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    clearChartData2() {\n      this.chartData2 = [];\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    ClearAllData() {\n      // 清空所有数据，包括精调数据点\n      this.chartData1 = [];\n      this.chartData2 = [];\n      this.chartData3 = [];\n      this.chartData4 = [];\n      this.quadraticResult.show = false;\n      this.yAxis_max = 30;\n      this.HFRMax = 15;\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    \n    // 清空精调数据（在精调开始时调用）\n    ClearFineData() {\n      this.logger.info('Chart-Focus.vue | 清空精调数据');\n      this.chartData1 = [];\n      this.chartData2 = [];\n      this.chartData3 = [];\n      this.chartData4 = [];\n      this.quadraticResult.show = false;\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    \n    // 更新异常点数据\n    updateOutlierData() {\n      if (this.chartData1.length >= 4) {\n        this.chartData4 = this.outlierDataPoints;\n        this.logger.debug('Chart-Focus.vue | 更新异常点数据，异常点数量:', this.chartData4.length);\n      } else {\n        this.chartData4 = [];\n      }\n    },\n    // 切换显示范围\n    RangeSwitch() {\n      if (this.range === 4) {\n        this.range = 2;\n        this.yAxis_min = -2;\n        this.yAxis_max = 2;\n      } else if (this.range === 2) {\n        this.range = 1;\n        this.yAxis_min = -1;\n        this.yAxis_max = 1;\n      } else if (this.range === 1) {\n        this.range = 4;\n        this.yAxis_min = -4;\n        this.yAxis_max = 4;\n      }\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    // 更新HFR\n    // UpdateHFR(HFR) {\n    //   const newDataPoint = [this.currentX, HFR];\n    //   this.addData_Point(newDataPoint);\n    //   // console.log(\"QHYCCD | UpdateHFR:\", newDataPoint);\n    //   // this.$bus.$emit('SendConsoleLogMsg', 'UpdateHFR:' + newDataPoint, 'info');\n    //   this.renderChart(this.xAxis_min, this.xAxis_max);\n    // },\n    // 拟合二次曲线\n    fitQuadraticCurve(dataString) {\n      this.logger.info('Chart-Focus.vue | 接收二次曲线数据:', dataString);\n      console.log('Chart-Focus.vue | 接收二次曲线数据:', dataString);\n      \n      const parts = dataString.split(':');\n      this.logger.info('Chart-Focus.vue | 解析后的数据部分:', parts);\n      console.log('Chart-Focus.vue | 解析后的数据部分:', parts);\n      \n      if (parts.length >= 6) {\n        const a = parseFloat(parts[1]);\n        const b = parseFloat(parts[2]);\n        const c = parseFloat(parts[3]);\n        const bestPosition = parseFloat(parts[4]);\n        const minHFR = parseFloat(parts[5]);\n        \n        this.logger.info('Chart-Focus.vue | 解析的数值:', { a, b, c, bestPosition, minHFR });\n        console.log('Chart-Focus.vue | 解析的数值:', { a, b, c, bestPosition, minHFR });\n        console.log('Chart-Focus.vue | 原始字符串部分:', parts);\n        \n        // 验证拟合系数的有效性\n        if (!this.validateFitCoefficients(a, b, c)) {\n          this.logger.warn('Chart-Focus.vue | 拟合系数无效，可能是水平线拟合');\n        }\n        \n        // 不再进行前端拟合计算，完全依赖后端提供的参数\n        this.logger.info('Chart-Focus.vue | 使用后端提供的拟合参数，不再进行前端拟合计算');\n        console.log('Chart-Focus.vue | 使用后端提供的拟合参数，不再进行前端拟合计算');\n        \n        // 验证参数是否合理\n        if (Math.abs(a) < 1e-10) {\n          this.logger.warn('Chart-Focus.vue | 警告：a系数接近0，这是线性拟合而不是二次拟合');\n          console.warn('Chart-Focus.vue | 警告：a系数接近0，这是线性拟合而不是二次拟合');\n          \n          // 对于线性拟合，我们需要特殊处理\n          this.generateLinearCurve(b, c, bestPosition);\n          \n          // 更新文本框显示（线性拟合）\n          this.quadraticResult.a = \"0.000000\"; // 显示为0\n          this.quadraticResult.b = b.toFixed(6);\n          this.quadraticResult.c = c.toFixed(6);\n          this.quadraticResult.bestPosition = \"线性拟合\";\n          this.quadraticResult.minHFR = minHFR.toFixed(3);\n          this.quadraticResult.show = true;\n          \n          return; // 直接返回，不执行二次曲线生成\n        }\n        \n        // 更新文本框显示\n        this.quadraticResult.a = a.toFixed(6);\n        this.quadraticResult.b = b.toFixed(6);\n        this.quadraticResult.c = c.toFixed(6);\n        this.quadraticResult.bestPosition = bestPosition.toFixed(2);\n        this.quadraticResult.minHFR = minHFR.toFixed(3);\n        this.quadraticResult.show = true;\n        \n        this.logger.info('Chart-Focus.vue | 文本框数据已更新:', this.quadraticResult);\n        \n        // 生成二次曲线数据点\n        this.generateQuadraticCurve(a, b, c, bestPosition);\n        \n        // 更新异常点数据\n        this.updateOutlierData();\n        \n        this.logger.info('Chart-Focus.vue | 二次拟合信息已更新:', this.quadraticResult);\n      } else {\n        this.logger.error('Chart-Focus.vue | 数据格式错误，部分数量不足:', parts.length);\n      }\n    },\n    \n    // 生成二次曲线数据点\n    generateQuadraticCurve(a, b, c, bestPosition) {\n      this.logger.info('Chart-Focus.vue | 开始生成二次曲线数据点:', { a, b, c, bestPosition });\n      \n      // 修正：后端发送的a、b、c系数是基于相对坐标的\n      // 需要找到数据点的最小位置作为偏移量，确保与后端算法一致\n      \n      // 从数据点中找到最小位置作为偏移量（修正：不使用bestPosition作为minPos）\n      let minPos = 0;\n      if (this.chartData1.length > 0) {\n        minPos = Math.min(...this.chartData1.map(point => point[0]));\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 坐标系统信息:');\n      this.logger.debug('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      this.logger.debug('Chart-Focus.vue | - 后端发送的最佳位置 (bestPosition):', bestPosition);\n      this.logger.debug('Chart-Focus.vue | - 拟合系数 a:', a, 'b:', b, 'c:', c);\n      \n      console.log('Chart-Focus.vue | 坐标系统信息:');\n      console.log('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      console.log('Chart-Focus.vue | - 后端发送的最佳位置 (bestPosition):', bestPosition);\n      console.log('Chart-Focus.vue | - 拟合系数 a:', a, 'b:', b, 'c:', c);\n      console.log('Chart-Focus.vue | - 当前数据点:', this.chartData1);\n      \n      // 验证最佳位置的计算是否正确\n      const expectedBestRelativePos = -b / (2 * a);\n      const expectedBestAbsolutePos = expectedBestRelativePos + minPos;\n      this.logger.debug('Chart-Focus.vue | - 计算的最佳相对位置:', expectedBestRelativePos);\n      this.logger.debug('Chart-Focus.vue | - 计算的最佳绝对位置:', expectedBestAbsolutePos);\n      this.logger.debug('Chart-Focus.vue | - 位置差异:', Math.abs(expectedBestAbsolutePos - bestPosition));\n      \n      const curveData = [];\n      \n      // 智能确定曲线生成范围\n      let startX, endX, stepSize;\n      \n      if (this.chartData1.length > 0) {\n        // 基于数据点范围生成曲线\n        const dataMinX = Math.min(...this.chartData1.map(point => point[0]));\n        const dataMaxX = Math.max(...this.chartData1.map(point => point[0]));\n        const dataRange = dataMaxX - dataMinX;\n        \n        // 扩展范围以确保曲线覆盖完整\n        const extension = Math.max(dataRange * 0.2, 1000); // 扩展20%或至少1000\n        startX = dataMinX - extension;\n        endX = dataMaxX + extension;\n        \n        // 根据数据范围调整步长\n        stepSize = Math.max(Math.floor(dataRange / 100), 20); // 至少100个点，步长至少20\n      } else {\n        // 如果没有数据点，使用默认范围\n        const range = 5000;\n        startX = bestPosition - range;\n        endX = bestPosition + range;\n        stepSize = 50;\n      }\n      \n      // 确保曲线覆盖当前X轴范围\n      startX = Math.min(startX, this.xAxis_min);\n      endX = Math.max(endX, this.xAxis_max);\n      \n      this.logger.debug('Chart-Focus.vue | 曲线生成范围:', startX, '到', endX, '步长:', stepSize);\n      \n      // 生成曲线数据点\n      for (let x = startX; x <= endX; x += stepSize) {\n        // 将绝对坐标转换为相对坐标进行计算（与后端算法一致）\n        const relativeX = x - minPos;\n        const y = a * relativeX * relativeX + b * relativeX + c;\n        \n        // 验证计算结果\n        if (isFinite(y) && y >= 0) {\n          curveData.push([x, y]);\n        } else {\n          this.logger.warn('Chart-Focus.vue | 警告：计算得到无效的Y值:', y, '在位置:', x, '相对位置:', relativeX);\n        }\n      }\n      \n      // 添加关键点：确保数据点位置在曲线上有精确的点\n      if (this.chartData1.length > 0) {\n        for (const point of this.chartData1) {\n          const x = point[0];\n          const relativeX = x - minPos;\n          const y = a * relativeX * relativeX + b * relativeX + c;\n          \n          if (isFinite(y) && y >= 0) {\n            // 检查是否已经存在这个点（避免重复）\n            const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - x) < stepSize / 2);\n            if (!exists) {\n              curveData.push([x, y]);\n            }\n          }\n        }\n        \n        // 添加最佳位置点及其附近的高精度点\n        const bestRelativeX = bestPosition - minPos;\n        const bestY = a * bestRelativeX * bestRelativeX + b * bestRelativeX + c;\n        if (isFinite(bestY) && bestY >= 0) {\n          const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - bestPosition) < stepSize / 2);\n          if (!exists) {\n            curveData.push([bestPosition, bestY]);\n          }\n          \n          // 在最佳位置附近添加更多高精度点\n          const fineRange = Math.max(stepSize * 2, 200); // 在最佳位置附近200范围内使用高精度\n          const fineStep = Math.max(stepSize / 10, 5);\n          for (let offset = -fineRange; offset <= fineRange; offset += fineStep) {\n            const x = bestPosition + offset;\n            if (x >= startX && x <= endX) {\n              const relativeX = x - minPos;\n              const y = a * relativeX * relativeX + b * relativeX + c;\n              if (isFinite(y) && y >= 0) {\n                const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - x) < fineStep / 2);\n                if (!exists) {\n                  curveData.push([x, y]);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      // 按X坐标排序\n      curveData.sort((a, b) => a[0] - b[0]);\n      \n      // 在数据点密集区域增加曲线密度\n      if (this.chartData1.length > 0) {\n        const enhancedCurveData = [];\n        const fineStepSize = Math.max(stepSize / 5, 5); // 在密集区域使用更小的步长\n        \n        for (let i = 0; i < curveData.length - 1; i++) {\n          const currentPoint = curveData[i];\n          const nextPoint = curveData[i + 1];\n          \n          enhancedCurveData.push(currentPoint);\n          \n          // 检查当前段是否包含数据点\n          const hasDataPoint = this.chartData1.some(point => \n            point[0] >= currentPoint[0] && point[0] <= nextPoint[0]\n          );\n          \n          // 如果包含数据点，在中间添加更多点\n          if (hasDataPoint && (nextPoint[0] - currentPoint[0]) > fineStepSize) {\n            const midPoints = Math.floor((nextPoint[0] - currentPoint[0]) / fineStepSize);\n            for (let j = 1; j < midPoints; j++) {\n              const x = currentPoint[0] + (j * fineStepSize);\n              const relativeX = x - minPos;\n              const y = a * relativeX * relativeX + b * relativeX + c;\n              if (isFinite(y) && y >= 0) {\n                enhancedCurveData.push([x, y]);\n              }\n            }\n          }\n        }\n        \n        // 添加最后一个点\n        if (curveData.length > 0) {\n          enhancedCurveData.push(curveData[curveData.length - 1]);\n        }\n        \n        // 更新曲线数据\n        curveData.length = 0;\n        curveData.push(...enhancedCurveData);\n      }\n      \n      // 添加关键点的验证\n      if (curveData.length > 0) {\n        // 验证最佳位置点的Y值\n        const bestPointY = a * (bestPosition - minPos) * (bestPosition - minPos) + b * (bestPosition - minPos) + c;\n        this.logger.debug('Chart-Focus.vue | 最佳位置点验证:');\n        this.logger.debug('Chart-Focus.vue | - 最佳位置:', bestPosition);\n        this.logger.debug('Chart-Focus.vue | - 最佳位置相对坐标:', bestPosition - minPos);\n        this.logger.debug('Chart-Focus.vue | - 最佳位置Y值:', bestPointY);\n        \n        // 验证数据点是否在曲线上\n        this.logger.debug('Chart-Focus.vue | 数据点与曲线对比:');\n        for (let i = 0; i < Math.min(this.chartData1.length, 5); i++) {\n          const point = this.chartData1[i];\n          const pointRelativeX = point[0] - minPos;\n          const pointY = a * pointRelativeX * pointRelativeX + b * pointRelativeX + c;\n          const actualY = point[1];\n          const diff = Math.abs(pointY - actualY);\n          this.logger.debug(`Chart-Focus.vue | - 点${i}: 位置=${point[0]}, 实际HFR=${actualY}, 曲线HFR=${pointY}, 差异=${diff}`);\n        }\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 生成的曲线数据点数量:', curveData.length);\n      this.logger.debug('Chart-Focus.vue | X轴范围:', startX, '到', endX);\n      this.logger.debug('Chart-Focus.vue | 前5个数据点:', curveData.slice(0, 5));\n      this.logger.debug('Chart-Focus.vue | 后5个数据点:', curveData.slice(-5));\n      \n      // 验证曲线形状\n      if (curveData.length > 0) {\n        const firstY = curveData[0][1];\n        const lastY = curveData[curveData.length - 1][1];\n        const middleIndex = Math.floor(curveData.length / 2);\n        const middleY = curveData[middleIndex][1];\n        \n        this.logger.debug('Chart-Focus.vue | 曲线形状验证 - 起始Y:', firstY, '中间Y:', middleY, '结束Y:', lastY);\n        \n        // 检查是否为有效的二次曲线（应该有最小值或最大值）\n        if (Math.abs(a) > 1e-10) {\n          const vertexX = -b / (2 * a) + minPos; // 顶点X坐标（转换回绝对坐标）\n          const vertexY = c - (b * b) / (4 * a); // 顶点Y坐标\n          this.logger.debug('Chart-Focus.vue | 二次曲线顶点位置:', vertexX, 'Y值:', vertexY);\n        }\n      }\n      \n      // 最终验证和清理曲线数据\n      const finalCurveData = curveData.filter(point => {\n        const [x, y] = point;\n        return isFinite(x) && isFinite(y) && y >= 0 && x >= startX && x <= endX;\n      });\n      \n      // 确保曲线数据按X坐标排序\n      finalCurveData.sort((a, b) => a[0] - b[0]);\n      \n      this.logger.debug('Chart-Focus.vue | 最终曲线数据验证:');\n      this.logger.debug('Chart-Focus.vue | - 原始数据点数量:', curveData.length);\n      this.logger.debug('Chart-Focus.vue | - 清理后数据点数量:', finalCurveData.length);\n      this.logger.debug('Chart-Focus.vue | - X轴范围:', finalCurveData.length > 0 ? `${finalCurveData[0][0]} 到 ${finalCurveData[finalCurveData.length - 1][0]}` : '无数据');\n      \n      this.chartData2 = finalCurveData;\n      this.logger.debug('Chart-Focus.vue | chartData2已更新，长度:', this.chartData2.length);\n      \n      // 调整X轴范围以显示完整曲线\n      if (finalCurveData.length > 0) {\n        this.xAxis_min = Math.min(this.xAxis_min, finalCurveData[0][0]);\n        this.xAxis_max = Math.max(this.xAxis_max, finalCurveData[finalCurveData.length - 1][0]);\n      }\n      \n      this.renderChart(this.xAxis_min, this.xAxis_max);\n      \n      this.logger.info('Chart-Focus.vue | 二次曲线数据点已生成并渲染完成');\n    },\n    \n    // 生成线性曲线数据点（当a=0时）\n    generateLinearCurve(b, c, bestPosition) {\n      this.logger.info('Chart-Focus.vue | 开始生成线性曲线数据点:', { b, c, bestPosition });\n      console.log('Chart-Focus.vue | 开始生成线性曲线数据点:', { b, c, bestPosition });\n      \n      // 对于线性拟合，我们需要找到数据点的最小位置作为偏移量\n      let minPos = 0;\n      if (this.chartData1.length > 0) {\n        minPos = Math.min(...this.chartData1.map(point => point[0]));\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 线性拟合坐标系统信息:');\n      this.logger.debug('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      this.logger.debug('Chart-Focus.vue | - 线性系数 b:', b, 'c:', c);\n      \n      console.log('Chart-Focus.vue | 线性拟合坐标系统信息:');\n      console.log('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      console.log('Chart-Focus.vue | - 线性系数 b:', b, 'c:', c);\n      \n      const curveData = [];\n      \n      // 智能确定曲线生成范围\n      let startX, endX, stepSize;\n      \n      if (this.chartData1.length > 0) {\n        // 基于数据点范围生成曲线\n        const dataMinX = Math.min(...this.chartData1.map(point => point[0]));\n        const dataMaxX = Math.max(...this.chartData1.map(point => point[0]));\n        const dataRange = dataMaxX - dataMinX;\n        \n        // 扩展范围以确保曲线覆盖完整\n        const extension = Math.max(dataRange * 0.2, 1000);\n        startX = dataMinX - extension;\n        endX = dataMaxX + extension;\n        \n        // 根据数据范围调整步长\n        stepSize = Math.max(Math.floor(dataRange / 100), 20);\n      } else {\n        // 如果没有数据点，使用默认范围\n        const range = 5000;\n        startX = bestPosition - range;\n        endX = bestPosition + range;\n        stepSize = 50;\n      }\n      \n      // 确保曲线覆盖当前X轴范围\n      startX = Math.min(startX, this.xAxis_min);\n      endX = Math.max(endX, this.xAxis_max);\n      \n      this.logger.debug('Chart-Focus.vue | 线性曲线生成范围:', startX, '到', endX, '步长:', stepSize);\n      \n      // 生成线性曲线数据点\n      for (let x = startX; x <= endX; x += stepSize) {\n        // 将绝对坐标转换为相对坐标进行计算\n        const relativeX = x - minPos;\n        const y = b * relativeX + c; // 线性方程：y = bx + c\n        \n        // 验证计算结果\n        if (isFinite(y) && y >= 0) {\n          curveData.push([x, y]);\n        } else {\n          this.logger.warn('Chart-Focus.vue | 警告：计算得到无效的Y值:', y, '在位置:', x, '相对位置:', relativeX);\n        }\n      }\n      \n      // 添加关键点：确保数据点位置在曲线上有精确的点\n      if (this.chartData1.length > 0) {\n        for (const point of this.chartData1) {\n          const x = point[0];\n          const relativeX = x - minPos;\n          const y = b * relativeX + c;\n          \n          if (isFinite(y) && y >= 0) {\n            // 检查是否已经存在这个点（避免重复）\n            const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - x) < stepSize / 2);\n            if (!exists) {\n              curveData.push([x, y]);\n            }\n          }\n        }\n      }\n      \n      // 按X坐标排序\n      curveData.sort((a, b) => a[0] - b[0]);\n      \n      // 最终验证和清理曲线数据\n      const finalCurveData = curveData.filter(point => {\n        const [x, y] = point;\n        return isFinite(x) && isFinite(y) && y >= 0 && x >= startX && x <= endX;\n      });\n      \n      this.logger.debug('Chart-Focus.vue | 线性曲线最终数据验证:');\n      this.logger.debug('Chart-Focus.vue | - 原始数据点数量:', curveData.length);\n      this.logger.debug('Chart-Focus.vue | - 清理后数据点数量:', finalCurveData.length);\n      \n      this.chartData2 = finalCurveData;\n      this.logger.debug('Chart-Focus.vue | chartData2已更新（线性拟合），长度:', this.chartData2.length);\n      \n      // 调整X轴范围以显示完整曲线\n      if (finalCurveData.length > 0) {\n        this.xAxis_min = Math.min(this.xAxis_min, finalCurveData[0][0]);\n        this.xAxis_max = Math.max(this.xAxis_max, finalCurveData[finalCurveData.length - 1][0]);\n      }\n      \n      this.renderChart(this.xAxis_min, this.xAxis_max);\n      \n      this.logger.info('Chart-Focus.vue | 线性曲线数据点已生成并渲染完成');\n    },\n    \n    // 拟合二次曲线最小点\n    fitQuadraticCurve_minPoint(dataString) {\n      this.logger.info('Chart-Focus.vue | 接收最小点数据:', dataString);\n      \n      const parts = dataString.split(':');\n      if (parts.length >= 3) {\n        const bestPosition = parseFloat(parts[1]);\n        const minHFR = parseFloat(parts[2]);\n        \n        // 更新文本框显示\n        this.quadraticResult.bestPosition = bestPosition.toFixed(2);\n        this.quadraticResult.minHFR = minHFR.toFixed(3);\n        this.quadraticResult.show = true;\n        \n        // 添加最小点到图表\n        this.chartData3 = [];\n        this.chartData3.push([bestPosition, minHFR]);\n        this.renderChart(this.xAxis_min, this.xAxis_max);\n        \n        this.logger.info('Chart-Focus.vue | 最小点信息已更新:', { bestPosition, minHFR });\n      }\n    },\n    setFocusChartRange(lowerBound, upperBound) {\n      this.x_min = lowerBound;\n      this.x_max = upperBound;\n    },\n    \n    // ==================== 异常点检测方法 ====================\n    \n    /**\n     * 智能异常点检测\n     * 使用多种方法检测并去除异常点\n     */\n    removeOutliers(dataPoints) {\n      if (dataPoints.length < 4) {\n        return dataPoints; // 数据点太少，不进行异常值检测\n      }\n      \n      this.logger.info('Chart-Focus.vue | 开始智能异常值检测，原始数据点数量:', dataPoints.length);\n      \n      // 方法1：基于二次曲线拟合的残差分析\n      const cleanData1 = this.removeOutliersByResidual(dataPoints);\n      \n      // 方法2：基于HFR统计分布的IQR方法\n      const cleanData2 = this.removeOutliersByIQR(dataPoints);\n      \n      // 方法3：基于位置分布的异常检测\n      const cleanData3 = this.removeOutliersByPosition(dataPoints);\n      \n      // 选择保留最多数据点的方法，但确保至少有3个数据点\n      let bestCleanData = cleanData1;\n      if (cleanData2.length > bestCleanData.length && cleanData2.length >= 3) {\n        bestCleanData = cleanData2;\n      }\n      if (cleanData3.length > bestCleanData.length && cleanData3.length >= 3) {\n        bestCleanData = cleanData3;\n      }\n      \n      // 如果所有方法都过滤得太严格，使用最宽松的方法\n      if (bestCleanData.length < 3) {\n        this.logger.warn('Chart-Focus.vue | 所有异常值检测方法都过于严格，使用最宽松的方法');\n        bestCleanData = cleanData2; // IQR方法相对宽松\n        if (bestCleanData.length < 3) {\n          bestCleanData = dataPoints; // 如果还是不够，返回原始数据\n        }\n      }\n      \n      this.logger.info('Chart-Focus.vue | 智能异常值检测完成: 原始数据', dataPoints.length, '个点，清理后', bestCleanData.length, '个点');\n      \n      return bestCleanData;\n    },\n    \n    /**\n     * 基于二次曲线拟合残差的异常值检测\n     * 注意：现在主要依赖后端拟合结果，此方法仅作为备用\n     */\n    removeOutliersByResidual(dataPoints) {\n      if (dataPoints.length < 4) {\n        return dataPoints; // 需要至少4个点才能进行二次拟合\n      }\n      \n      // 简化异常值检测：直接使用IQR方法，不再进行二次拟合\n      const preliminaryClean = this.removeOutliersByIQR(dataPoints);\n      if (preliminaryClean.length < 3) {\n        return dataPoints;\n      }\n      \n      // 不再进行前端拟合，直接返回IQR清理后的数据\n      this.logger.info('Chart-Focus.vue | 异常值检测：使用IQR方法，不再进行前端拟合');\n      return preliminaryClean;\n    },\n    \n    /**\n     * 基于HFR统计分布的IQR异常值检测\n     */\n    removeOutliersByIQR(dataPoints) {\n      // 计算HFR的统计信息\n      const hfrValues = dataPoints.map(point => point[1]);\n      \n      // 排序\n      const sortedHfrValues = [...hfrValues].sort((a, b) => a - b);\n      \n      // 计算四分位数\n      const n = sortedHfrValues.length;\n      const q1 = sortedHfrValues[Math.floor(n / 4)];\n      const q3 = sortedHfrValues[Math.floor(3 * n / 4)];\n      const iqr = q3 - q1;\n      \n      // 定义异常值边界（使用2倍IQR，比1.5倍更宽松）\n      const lowerBound = q1 - 2.0 * iqr;\n      const upperBound = q3 + 2.0 * iqr;\n      \n      // 过滤异常值\n      const cleanData = dataPoints.filter(point => \n        point[1] >= lowerBound && point[1] <= upperBound\n      );\n      \n      this.logger.info('Chart-Focus.vue | 基于IQR的异常值检测: 原始数据', dataPoints.length, '个点，清理后', cleanData.length, '个点');\n      \n      return cleanData;\n    },\n    \n    /**\n     * 基于位置分布的异常值检测\n     */\n    removeOutliersByPosition(dataPoints) {\n      if (dataPoints.length < 4) {\n        return dataPoints;\n      }\n      \n      // 按位置排序\n      const sortedData = [...dataPoints].sort((a, b) => a[0] - b[0]);\n      \n      // 计算相邻点之间的距离\n      const distances = [];\n      for (let i = 1; i < sortedData.length; i++) {\n        const dist = sortedData[i][0] - sortedData[i-1][0];\n        distances.push(dist);\n      }\n      \n      // 计算距离的统计信息\n      const sortedDistances = [...distances].sort((a, b) => a - b);\n      const n = sortedDistances.length;\n      const medianDistance = sortedDistances[Math.floor(n / 2)];\n      const q3 = sortedDistances[Math.floor(3 * n / 4)];\n      const threshold = q3 + 1.5 * (q3 - medianDistance);\n      \n      // 识别位置异常的点\n      const cleanData = [];\n      cleanData.push(sortedData[0]); // 第一个点总是保留\n      \n      for (let i = 1; i < sortedData.length; i++) {\n        const dist = sortedData[i][0] - sortedData[i-1][0];\n        if (dist <= threshold) {\n          cleanData.push(sortedData[i]);\n        } else {\n          // 检查是否是孤立点（前后距离都很大）\n          let isIsolated = true;\n          if (i > 1) {\n            const prevDist = sortedData[i-1][0] - sortedData[i-2][0];\n            if (prevDist <= threshold) isIsolated = false;\n          }\n          if (i < sortedData.length - 1) {\n            const nextDist = sortedData[i+1][0] - sortedData[i][0];\n            if (nextDist <= threshold) isIsolated = false;\n          }\n          \n          if (!isIsolated) {\n            cleanData.push(sortedData[i]);\n          }\n        }\n      }\n      \n      this.logger.info('Chart-Focus.vue | 基于位置的异常值检测: 原始数据', dataPoints.length, '个点，清理后', cleanData.length, '个点');\n      \n      return cleanData;\n    },\n    \n    /**\n     * 执行二次曲线拟合\n     * 注意：现在主要依赖后端拟合结果，此方法仅用于测试和调试\n     * 返回拟合系数 {a, b, c}\n     */\n    performQuadraticFit(dataPoints) {\n      if (dataPoints.length < 3) {\n        return null;\n      }\n      \n      this.logger.info('Chart-Focus.vue | 开始二次曲线拟合，数据点数量:', dataPoints.length);\n      \n      // 标准化坐标：将位置转换为相对坐标\n      const minPos = Math.min(...dataPoints.map(point => point[0]));\n      this.logger.debug('Chart-Focus.vue | 最小位置 (偏移量):', minPos);\n      \n      // 构建最小二乘法正规方程组\n      let sum_x4 = 0, sum_x3 = 0, sum_x2 = 0, sum_x = 0, sum_1 = 0;\n      let sum_x2y = 0, sum_xy = 0, sum_y = 0;\n      \n      for (const point of dataPoints) {\n        const x = point[0] - minPos; // 相对坐标\n        const y = point[1];\n        \n        const x2 = x * x;\n        const x3 = x2 * x;\n        const x4 = x3 * x;\n        \n        sum_x4 += x4;\n        sum_x3 += x3;\n        sum_x2 += x2;\n        sum_x += x;\n        sum_1 += 1;\n        \n        sum_x2y += x2 * y;\n        sum_xy += x * y;\n        sum_y += y;\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 拟合统计量:', {\n        sum_x4, sum_x3, sum_x2, sum_x, sum_1,\n        sum_x2y, sum_xy, sum_y\n      });\n      \n      // 构建系数矩阵和常数向量\n      const matrix = [\n        [sum_x4, sum_x3, sum_x2],\n        [sum_x3, sum_x2, sum_x],\n        [sum_x2, sum_x, sum_1]\n      ];\n      \n      const constants = [sum_x2y, sum_xy, sum_y];\n      \n      this.logger.debug('Chart-Focus.vue | 系数矩阵:', matrix);\n      this.logger.debug('Chart-Focus.vue | 常数向量:', constants);\n      \n      // 求解线性方程组（使用高斯消元法）\n      const coefficients = this.solveLinearSystem(matrix, constants);\n      if (!coefficients) {\n        this.logger.error('Chart-Focus.vue | 线性方程组求解失败');\n        return null;\n      }\n      \n      const result = {\n        a: coefficients[0],\n        b: coefficients[1],\n        c: coefficients[2]\n      };\n      \n      this.logger.info('Chart-Focus.vue | 拟合系数:', result);\n      \n      // 验证拟合结果\n      if (!isFinite(result.a) || !isFinite(result.b) || !isFinite(result.c)) {\n        this.logger.error('Chart-Focus.vue | 拟合系数包含无效值');\n        return null;\n      }\n      \n      // 检查是否为有效的二次曲线（a不为0）\n      if (Math.abs(result.a) < 1e-10) {\n        this.logger.warn('Chart-Focus.vue | 警告：二次项系数接近0，可能是直线拟合');\n      }\n      \n      return result;\n    },\n    \n    /**\n     * 求解3x3线性方程组\n     */\n    solveLinearSystem(matrix, constants) {\n      // 高斯消元法求解线性方程组\n      const augmented = [];\n      \n      // 构建增广矩阵\n      for (let i = 0; i < 3; i++) {\n        augmented[i] = [...matrix[i], constants[i]];\n      }\n      \n      // 前向消元\n      for (let i = 0; i < 3; i++) {\n        // 寻找主元\n        let maxRow = i;\n        for (let k = i + 1; k < 3; k++) {\n          if (Math.abs(augmented[k][i]) > Math.abs(augmented[maxRow][i])) {\n            maxRow = k;\n          }\n        }\n        \n        // 交换行\n        if (maxRow !== i) {\n          [augmented[i], augmented[maxRow]] = [augmented[maxRow], augmented[i]];\n        }\n        \n        // 检查主元是否为零\n        if (Math.abs(augmented[i][i]) < 1e-10) {\n          this.logger.error('Chart-Focus.vue | 线性方程组奇异，无法求解');\n          return null;\n        }\n        \n        // 消元\n        for (let k = i + 1; k < 3; k++) {\n          const factor = augmented[k][i] / augmented[i][i];\n          for (let j = i; j < 4; j++) {\n            augmented[k][j] -= factor * augmented[i][j];\n          }\n        }\n      }\n      \n      // 回代求解\n      const solution = [0, 0, 0];\n      for (let i = 2; i >= 0; i--) {\n        solution[i] = augmented[i][3];\n        for (let j = i + 1; j < 3; j++) {\n          solution[i] -= augmented[i][j] * solution[j];\n        }\n        solution[i] /= augmented[i][i];\n      }\n      \n      return solution;\n    },\n    \n    // ==================== 测试和调试方法 ====================\n    \n    /**\n     * 测试后端数据接收功能\n     * 模拟后端发送的拟合数据来测试前端处理\n     */\n    testBackendDataReception() {\n      this.logger.info('Chart-Focus.vue | 开始测试后端数据接收功能');\n      console.log('Chart-Focus.vue | 开始测试后端数据接收功能');\n      \n      // 模拟后端发送的数据格式\n      const testData = \"fitQuadraticCurve:0.000001:-0.02:5.0:15731.13:1.930\";\n      this.logger.info('Chart-Focus.vue | 模拟后端数据:', testData);\n      console.log('Chart-Focus.vue | 模拟后端数据:', testData);\n      \n      // 调用拟合方法\n      this.fitQuadraticCurve(testData);\n    },\n    \n    /**\n     * 测试二次曲线拟合功能\n     * 注意：现在主要依赖后端拟合结果，此方法仅用于测试前端拟合算法\n     * 使用模拟数据验证拟合算法是否正确\n     */\n    testQuadraticFitting() {\n      this.logger.info('Chart-Focus.vue | 开始测试二次曲线拟合功能');\n      \n      // 生成测试数据：y = 0.0001 * (x - 3000)^2 + 2.0\n      const testData = [];\n      for (let i = 0; i < 10; i++) {\n        const x = 2000 + i * 200; // 位置从2000到3800\n        const y = 0.0001 * Math.pow(x - 3000, 2) + 2.0 + (Math.random() - 0.5) * 0.2; // 添加噪声\n        testData.push([x, y]);\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 测试数据:', testData);\n      \n      // 执行拟合\n      const fitResult = this.performQuadraticFit(testData);\n      if (fitResult) {\n        this.logger.info('Chart-Focus.vue | 拟合结果:', fitResult);\n        \n        // 计算理论最佳位置（应该是3000）\n        const minPos = Math.min(...testData.map(point => point[0]));\n        const theoreticalBestPos = -fitResult.b / (2 * fitResult.a) + minPos;\n        this.logger.info('Chart-Focus.vue | 理论最佳位置:', theoreticalBestPos, '期望值: 3000');\n        \n        // 生成拟合曲线\n        this.generateQuadraticCurve(fitResult.a, fitResult.b, fitResult.c, theoreticalBestPos);\n        \n        this.logger.info('Chart-Focus.vue | 二次曲线拟合测试完成');\n      } else {\n        this.logger.error('Chart-Focus.vue | 二次曲线拟合测试失败');\n      }\n    },\n    \n  }\n}\n</script>\n\n<style scoped>\n.linechart-panel {\n  background-color: rgba(0, 0, 0, 0.0);\n  /* backdrop-filter: blur(5px); */\n  border-radius: 5px;\n  box-sizing: border-box;\n}\n\n.focus-result-panel {\n  position: fixed;\n  top: -200%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 300px;\n  background: linear-gradient(135deg, rgba(30, 30, 30, 0.95), rgba(45, 45, 45, 0.95));\n  border: 1px solid rgba(100, 100, 100, 0.3);\n  border-radius: 8px;\n  padding: 12px;\n  font-size: 12px;\n  color: #e0e0e0;\n  z-index: 1000;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(10px);\n  min-height: 60px;\n}\n\n.panel-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  padding-bottom: 6px;\n  border-bottom: 1px solid rgba(100, 100, 100, 0.2);\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n}\n\n.close-button {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  background-color: rgba(255, 255, 255, 0.1);\n  color: #b0b0b0;\n  font-size: 14px;\n  font-weight: bold;\n  transition: all 0.2s ease;\n}\n\n.close-button:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n  color: #ffffff;\n}\n\n.status-icon {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n  font-size: 12px;\n  font-weight: bold;\n}\n\n.status-icon.success {\n  background-color: rgba(76, 175, 80, 0.2);\n  color: #4caf50;\n  border: 1px solid rgba(76, 175, 80, 0.4);\n}\n\n.status-icon.warning {\n  background-color: rgba(255, 152, 0, 0.2);\n  color: #ff9800;\n  border: 1px solid rgba(255, 152, 0, 0.4);\n}\n\n.panel-title {\n  font-weight: 600;\n  color: #ffffff;\n  font-size: 13px;\n}\n\n.panel-content {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.status-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 2px 0;\n}\n\n.label {\n  color: #b0b0b0;\n  font-size: 11px;\n  font-weight: 500;\n}\n\n.value {\n  color: #ffffff;\n  font-size: 11px;\n  font-weight: 600;\n  font-family: 'Courier New', monospace;\n}\n\n.value.error {\n  color: #ff9800;\n  background: none;\n}\n\n.best-position {\n  margin-bottom: 2px;\n  color: #00ffff;\n  font-size: 9px;\n}\n\n.min-hfr {\n  color: #ff00ff;\n  font-size: 9px;\n}\n\n.fit-info {\n  color: #00ff00;\n  font-size: 8px;\n  margin-top: 2px;\n  font-style: italic;\n}\n</style>\n"]}]}