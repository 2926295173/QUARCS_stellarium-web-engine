{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Focus.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Focus.vue","mtime":1760160652007},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1756885033541},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1756885034172},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1756885033526},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1756885033541},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1756885034208}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Chart-Focus.vue"],"names":[],"mappingsfile":"Chart-Focus.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div\n      ref=\"linechart\"\n      :style=\"{ width: containerMaxWidth + 'px', height: 80 + 'px' }\"\n      class=\"linechart-panel\"\n      @mousedown=\"startDrag\"\n      @mousemove=\"dragging\"\n      @mouseup=\"endDrag\"\n      @touchstart=\"startDrag\"\n      @touchmove=\"dragging\"\n      @touchend=\"endDrag\"\n    ></div>\n    \n    <!-- 对焦结果状态框 -->\n    <div class=\"focus-result-panel\" v-if=\"quadraticResult.show\">\n      <div class=\"panel-header\">\n        <div class=\"header-left\">\n          <div class=\"status-icon\" :class=\"{ 'success': !isHorizontalFit(), 'warning': isHorizontalFit() }\">\n            <i v-if=\"!isHorizontalFit()\" class=\"icon-check\">✓</i>\n            <i v-else class=\"icon-warning\">⚠</i>\n          </div>\n          <div class=\"panel-title\">对焦状态</div>\n        </div>\n        <div class=\"close-button\" @click=\"closePanel\">\n          <i class=\"icon-close\">×</i>\n        </div>\n      </div>\n      <div class=\"panel-content\">\n        <div class=\"status-row\">\n          <span class=\"label\">最佳位置</span>\n          <span class=\"value\" :class=\"{ 'error': isHorizontalFit() }\">{{ getBestPositionDisplay() }}</span>\n        </div>\n        <div class=\"status-row\">\n          <span class=\"label\">最小HFR</span>\n          <span class=\"value\">{{ quadraticResult.minHFR }}</span>\n        </div>\n        <div class=\"status-row\">\n          <span class=\"label\">数据点数</span>\n          <span class=\"value\">{{ validDataPointCount }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'LineChart',\n  props: {\n    // 是否使用时间轴模式（也可通过总线 setFocusChartTimeMode 切换）\n    useTimeAxis: {\n      type: Boolean,\n      default: false\n    },\n    // 时间窗口长度（秒），仅在时间轴模式下生效\n    timeWindowSec: {\n      type: Number,\n      default: 60\n    }\n  },\n  data() {\n    return {\n      containerMaxWidth: 150,\n      // 非时间轴：散点数据（x 为电调位置）\n      chartData1_pos: [],\n      // 时间轴：散点数据（x 为时间戳）\n      chartData1_time: [],\n      chartData2: [],\n      chartData3: [],\n      chartData4: [], // 异常点数据\n      xAxis_min: 0,\n      xAxis_max: 6000,\n      yAxis_min: 0,\n      yAxis_max: 30,\n      range: 4,\n      currentX: 0,\n      HFRMax: 0,\n      isDragging: false,\n      startX: 0,\n      deltaX: 0,\n      x_min: -60000,\n      x_max: 60000,\n      // 时间轴模式\n      isTimeMode: false,\n      timeTicker: null,\n      // 可见性控制\n      isVisible: false,\n      ioObserver: null,\n      // 渲染调度\n      renderRafId: null,\n      renderScheduled: false,\n      pendingLowerBound: null,\n      pendingUpperBound: null,\n      // 调试日志开关\n      debugRenderLogs: false,\n      // 线条数据来源：若为 null 则使用 quadraticParams 动态采样\n      lineDataFromPoints: null,\n      quadraticParams: null, // { a,b,c,x0? }\n      // 二次拟合结果显示\n      quadraticResult: {\n        show: false,\n        a: '0.000000',\n        b: '0.000000',\n        c: '0.000000',\n        bestPosition: '0.00',\n        minHFR: '0.000'\n      },\n      // 日志记录器\n      logger: {\n        info: (msg, data) => console.log(msg, data || ''),\n        warn: (msg, data) => console.warn(msg, data || ''),\n        error: (msg, data) => console.error(msg, data || ''),\n        debug: (msg, data) => console.debug(msg, data || '')\n      }\n    };\n  },\n  computed: {\n    // 计算有效数据点数量\n    validDataPointCount() {\n      const currentData = this.isTimeMode ? this.chartData1_time : this.chartData1_pos;\n      return currentData.length;\n    },\n    // 计算异常点数据\n    outlierDataPoints() {\n      const currentData = this.isTimeMode ? this.chartData1_time : this.chartData1_pos;\n      if (currentData.length < 4) return [];\n      // 这里可以添加异常点检测逻辑，暂时返回空数组\n      return [];\n    }\n  },\n  mounted() {\n    // 根据可见性启动/停止时间推进\n    const el = this.$refs.linechart;\n    if (window && 'IntersectionObserver' in window && el) {\n      this.ioObserver = new IntersectionObserver((entries) => {\n        const e = entries[0];\n        this.isVisible = !!(e && e.isIntersecting);\n        this.updateTickerByVisibility();\n      }, { threshold: 0.01 });\n      this.ioObserver.observe(el);\n    } else {\n      // 回退：不可见性未知时视为可见\n      this.isVisible = true;\n    }\n    document.addEventListener('visibilitychange', this.updateTickerByVisibility);\n\n    // 初始化时间轴模式（由 prop 控制）\n    this.isTimeMode = !!this.useTimeAxis;\n    this.updateTickerByVisibility();\n  },\n  created() {\n    this.$bus.$on('FocusPosition', this.changeRange_x);\n    // this.$bus.$on('UpdateHFR', this.UpdateHFR);\n    this.$bus.$on('fitQuadraticCurve', this.fitQuadraticCurve);\n    this.$bus.$on('fitQuadraticCurve_minPoint', this.fitQuadraticCurve_minPoint);\n\n    this.$bus.$on('ClearfitQuadraticCurve', this.clearChartData2);\n    this.$bus.$on('ClearAllData', this.ClearAllData);\n    this.$bus.$on('ClearFineData', this.ClearFineData);\n    this.$bus.$on('updateFocusChartWidth', this.initChart);\n    this.$bus.$on('addData_Point', this.addData_Point);\n    this.$bus.$on('addMinPointData_Point', this.addMinPointData_Point);\n    this.$bus.$on('addLineData_Point', this.addLineData_Point);\n    this.$bus.$on('setFocusChartRange', this.setFocusChartRange);\n    // 新增：时间轴模式控制与点追加\n    this.$bus.$on('setFocusChartTimeMode', this.setTimeMode);\n    this.$bus.$on('addFwhmNow', this.addFwhmPointNow);\n\n  },\n  beforeDestroy() {\n    this.teardownBusAndTimers();\n  },\n  destroyed() {\n    this.teardownBusAndTimers();\n  },\n  methods: {\n    // 检查是否为水平拟合（线性拟合）\n    isHorizontalFit() {\n      return this.quadraticResult.a === \"0.000000\" || Math.abs(parseFloat(this.quadraticResult.a)) < 1e-10;\n    },\n    // 获取最佳位置显示文本\n    getBestPositionDisplay() {\n      if (this.isHorizontalFit()) {\n        return \"线性拟合\";\n      }\n      return this.quadraticResult.bestPosition;\n    },\n    // 关闭面板\n    closePanel() {\n      this.quadraticResult.show = false;\n    },\n    // 验证拟合系数的有效性\n    validateFitCoefficients(a, b, c) {\n      // 检查系数是否为有效数字\n      if (!isFinite(a) || !isFinite(b) || !isFinite(c)) {\n        return false;\n      }\n      // 检查是否为水平线拟合（a接近0）\n      if (Math.abs(a) < 1e-10) {\n        return false; // 水平线拟合\n      }\n      return true;\n    },\n    teardownBusAndTimers() {\n      this.$bus.$off('FocusPosition', this.changeRange_x);\n      this.$bus.$off('ClearfitQuadraticCurve', this.clearChartData2);\n      this.$bus.$off('ClearAllData', this.ClearAllData);\n      this.$bus.$off('updateFocusChartWidth', this.initChart);\n      this.$bus.$off('addData_Point', this.addData_Point);\n      this.$bus.$off('addMinPointData_Point', this.addMinPointData_Point);\n      this.$bus.$off('addLineData_Point', this.addLineData_Point);\n      this.$bus.$off('addQuadraticCurve', this.addLineData_Point);\n      this.$bus.$off('setFocusChartRange', this.setFocusChartRange);\n      this.$bus.$off('setFocusChartTimeMode', this.setTimeMode);\n      this.$bus.$off('addFwhmNow', this.addFwhmPointNow);\n      if (this.timeTicker) {\n        clearInterval(this.timeTicker);\n        this.timeTicker = null;\n      }\n      if (this.ioObserver) {\n        try { this.ioObserver.disconnect(); } catch (e) {}\n        this.ioObserver = null;\n      }\n      document.removeEventListener('visibilitychange', this.updateTickerByVisibility);\n    },\n    initChart(Width) {\n      this.containerMaxWidth = Width - 95;\n      const chartDom = this.$refs.linechart;\n      chartDom.style.width = this.containerMaxWidth + 'px';\n      this.myChart = echarts.init(chartDom);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    startDrag(event) {\n      if (this.isTimeMode) return; // 时间轴模式下禁用拖拽\n      this.isDragging = true;\n      const x = this.getClientX(event);\n      if (typeof x === 'number') this.startX = x;\n    },\n    dragging(event) {\n      if (this.isDragging && !this.isTimeMode) {\n        const x = this.getClientX(event);\n        if (typeof x !== 'number') return;\n        this.deltaX = (x - this.startX) * 10;\n        this.startX = x;\n        const windowWidth = this.xAxis_max - this.xAxis_min;\n        // 计算新的范围并做边界裁剪\n        let newMin = this.xAxis_min - this.deltaX;\n        const minAllowed = this.x_min;\n        const maxAllowed = this.x_max - windowWidth;\n        if (maxAllowed < minAllowed) {\n          // 安全处理：若设置不合理，回退到不移动\n          newMin = this.x_min;\n        } else {\n          newMin = Math.max(minAllowed, Math.min(maxAllowed, newMin));\n        }\n        this.xAxis_min = newMin;\n        this.xAxis_max = newMin + windowWidth;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n      }\n    },\n    getClientX(e) {\n      if (e && e.touches && e.touches.length) return e.touches[0].clientX;\n      if (e && e.changedTouches && e.changedTouches.length) return e.changedTouches[0].clientX;\n      if (typeof e.clientX === 'number') return e.clientX;\n      return undefined;\n    },\n    endDrag() {\n      this.isDragging = false;\n      this.deltaX = 0;\n      // this.$bus.$emit('setTargetPosition', (this.xAxis_min + this.xAxis_max) / 2);\n    },\n    scheduleRender(lowerBound, upperBound) {\n      this.pendingLowerBound = lowerBound;\n      this.pendingUpperBound = upperBound;\n      if (this.renderScheduled) return;\n      this.renderScheduled = true;\n      const cb = () => {\n        this.renderRafId = null;\n        this.renderScheduled = false;\n        this.renderChart(this.pendingLowerBound, this.pendingUpperBound);\n      };\n      if (typeof window !== 'undefined' && window.requestAnimationFrame) {\n        this.renderRafId = window.requestAnimationFrame(cb);\n      } else {\n        // 回退：无 rAF 时，使用微任务降低阻塞\n        Promise.resolve().then(cb);\n      }\n    },\n    renderChart(lowerBound, upperBound) {\n      const data1 = this.isTimeMode ? this.chartData1_time : this.chartData1_pos;\n      const y_max = data1.length > 0 ? Math.max(...data1.map(item => item[1])) * 2 : this.yAxis_max;\n      // 线数据：若传入系数，则根据当前视图范围动态采样，避免拖动后断裂或消失\n      let decData = [];\n      if (!this.isTimeMode) {\n        if (this.lineDataFromPoints && Array.isArray(this.lineDataFromPoints)) {\n          decData = this.lineDataFromPoints;\n        } else if (this.quadraticParams) {\n          const { a, b, c, x0 } = this.quadraticParams;\n          if (isFinite(a) && isFinite(b) && isFinite(c)) {\n            decData = this.generateQuadraticData(a, b, c, lowerBound, upperBound, isFinite(x0) ? x0 : 0);\n          }\n        } else {\n          decData = this.chartData2; // 兼容旧逻辑\n        }\n      }\n      \n      // 调试日志\n      if (this.debugRenderLogs && this.isTimeMode && data1.length > 0) {\n        console.log('Chart-Focus: renderChart (time mode)', {\n          dataPoints: data1.length,\n          latestPoint: data1[data1.length - 1],\n          y_max: y_max\n        });\n      }\n      const optionXAxis = this.isTimeMode\n        ? {\n            type: 'time',\n            min: Date.now() - this.timeWindowSec * 1000,\n            max: Date.now(),\n            axisLabel: {\n              color: 'white',\n              fontSize: 5,\n              formatter: function (value) {\n                const d = new Date(value);\n                const pad = (n) => (n < 10 ? '0' + n : '' + n);\n                return pad(d.getHours()) + ':' + pad(d.getMinutes()) + ':' + pad(d.getSeconds());\n              }\n            },\n            axisLine: { lineStyle: { color: 'rgba(200, 200, 200, 0.5)' } },\n            splitLine: {\n              show: true,\n              lineStyle: { color: 'rgba(128, 128, 128, 0.5)', width: 1, type: 'solid' }\n            }\n          }\n        : {\n            type: 'value',\n            min: lowerBound,\n            max: upperBound,\n            axisLine: { lineStyle: { color: 'rgba(200, 200, 200, 0.5)' } },\n            axisLabel: { color: 'white', fontSize: 5 },\n            splitLine: { show: true, lineStyle: { color: 'rgba(128, 128, 128, 0.5)', width: 1, type: 'solid' } }\n          };\n      const option = {\n        grid: {\n          left: '0%',\n          right: '2%',\n          bottom: '0%',\n          top: '10%',\n          containLabel: true\n        },\n        xAxis: optionXAxis,\n        yAxis: {\n          min: this.yAxis_min,\n          max: y_max,\n          axisLine: {\n            lineStyle: {\n              color: 'rgba(200, 200, 200, 0.5)'  // y轴线颜色\n            }\n          },\n          axisLabel: {\n            color: 'white',\n            fontSize: 5\n          },\n          splitNumber: 3,\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: 'rgba(128, 128, 128, 0.5)',\n              width: 1,\n              type: 'solid'\n            }\n          }\n        },\n        series: [\n          {\n            name: 'HFR',\n            type: 'scatter',\n            data: data1,\n            itemStyle: {\n              color: 'red',\n              borderColor: 'white',\n              borderWidth: 1\n            },\n            symbolSize: 8\n          },\n          !this.isTimeMode ? {\n            name: 'Dec',\n            type: 'line',\n            data: decData,\n            itemStyle: {\n              color: 'yellow'\n            },\n            lineStyle: {\n              width: 3,\n              type: 'solid'\n            },\n            symbolSize: 0\n          } : null,\n          !this.isTimeMode ? {\n            name: 'minPoint',\n            type: 'scatter',\n            data: this.chartData3,\n            itemStyle: {\n              color: 'rgba(75, 155, 250, 0.7)'\n            },\n            symbolSize: 4\n          } : null,\n          !this.isTimeMode ? {\n            name: 'xMinLine',\n            type: 'line',\n            data: [\n              [this.x_min, this.yAxis_min],\n              [this.x_min, y_max]\n            ],\n            lineStyle: {\n              color: 'red',\n              width: 1\n            },\n            symbol: 'none'\n          } : null,\n          !this.isTimeMode ? {\n            name: 'xMaxLine',\n            type: 'line',\n            data: [\n              [this.x_max, this.yAxis_min],\n              [this.x_max, y_max]\n            ],\n            lineStyle: {\n              color: 'red',\n              width: 1\n            },\n            symbol: 'none'\n          } : null,\n          !this.isTimeMode ? {\n            name: 'currentPosition',\n            type: 'line',\n            data: [\n              [this.currentX, this.yAxis_min],\n              [this.currentX, y_max]\n            ],\n            lineStyle: {\n              color: 'green',\n              width: 1\n            },\n            symbol: 'none'\n          } : null\n        ]\n      };\n      // 过滤掉为 null 的 series 项\n      option.series = option.series.filter(Boolean);\n      // 使用 lazyUpdate 降低同步开销\n      this.myChart.setOption(option, false, true);\n    },\n    // 追加一个以\"当前时间\"为 x 的 FWHM 点（时间轴模式）\n    addFwhmPointNow(fwhm) {\n      // 确保 fwhm 是数字\n      const fwhmNum = typeof fwhm === 'number' ? fwhm : parseFloat(fwhm);\n      if (isNaN(fwhmNum) || fwhmNum <= 0) {\n        console.warn('Chart-Focus: Invalid FWHM value:', fwhm);\n        return;\n      }\n      \n      const now = Date.now();\n      const point = [now, fwhmNum];\n      this.chartData1_time.push(point);\n      \n      console.log('Chart-Focus: addFwhmPointNow', {\n        fwhm: fwhmNum,\n        time: new Date(now).toLocaleTimeString(),\n        isTimeMode: this.isTimeMode,\n        dataLength: this.chartData1_time.length,\n        chartInitialized: !!this.myChart\n      });\n      \n      // 仅保留窗口期内的数据\n      const minTs = now - this.timeWindowSec * 1000;\n      this.chartData1_time = this.chartData1_time.filter(p => p[0] >= minTs);\n      \n      // 强制重新渲染\n      if (this.myChart) {\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n      } else {\n        console.warn('Chart-Focus: myChart not initialized yet');\n      }\n    },\n    // 开启/关闭时间轴模式\n    setTimeMode(flag) {\n      const enable = !!flag;\n      if (enable === this.isTimeMode) return;\n      this.isTimeMode = enable;\n      this.updateTickerByVisibility();\n      if (this.myChart) { this.myChart.clear(); }\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    stopTimeTicker() {\n      if (this.timeTicker) {\n        clearInterval(this.timeTicker);\n        this.timeTicker = null;\n      }\n    },\n    startTimeTicker() {\n      if (this.timeTicker) return;\n      this.timeTicker = setInterval(() => {\n        // 没有新点时也推动时间轴前进\n        if (this.myChart) {\n          this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        }\n      }, 1000);\n    },\n    updateTickerByVisibility() {\n      const docVisible = typeof document !== 'undefined' ? !document.hidden : true;\n      const shouldRun = this.isTimeMode && this.isVisible && docVisible;\n      if (shouldRun) this.startTimeTicker(); else this.stopTimeTicker();\n    },\n    addData_Point(x,y) {\n      this.logger.info('Chart-Focus.vue | 添加数据点:', { x, y });\n      \n      // 过滤HFR大于等于100的数据点\n      if (y >= 100) {\n        this.logger.warn('Chart-Focus.vue | HFR值过大(>=100)，忽略此数据点:', { x, y });\n        return;\n      }\n      \n      const newDataPoint = [x, y];\n      const existingPointIndex = this.chartData1_pos.findIndex(point => point[0] === newDataPoint[0]);\n      if (existingPointIndex !== -1) {\n        // If the x value already exists, update the y value\n        if (newDataPoint[1] == 0 || newDataPoint[1] == this.chartData1_pos[existingPointIndex][1]) return;\n        this.chartData1_pos[existingPointIndex] = newDataPoint;\n      } else {\n        // If the x value does not exist, add the new data point\n        this.chartData1_pos.push(newDataPoint);\n      }\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    // 绘制折线/二次曲线\n    addLineData_Point(dataOrA, b, c) {\n      // 兼容：如果传入的是点数组，直接使用\n      if (Array.isArray(dataOrA)) {\n        this.lineDataFromPoints = dataOrA;\n        this.quadraticParams = null;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        return;\n      }\n\n      // 若传入的是系数对象 { a, b, c }\n      if (dataOrA && typeof dataOrA === 'object' &&\n          (typeof dataOrA.a === 'number' || typeof dataOrA.a === 'string') &&\n          (typeof dataOrA.b === 'number' || typeof dataOrA.b === 'string') &&\n          (typeof dataOrA.c === 'number' || typeof dataOrA.c === 'string')) {\n        const aNum = typeof dataOrA.a === 'number' ? dataOrA.a : parseFloat(dataOrA.a);\n        const bNum = typeof dataOrA.b === 'number' ? dataOrA.b : parseFloat(dataOrA.b);\n        const cNum = typeof dataOrA.c === 'number' ? dataOrA.c : parseFloat(dataOrA.c);\n        if (!isFinite(aNum) || !isFinite(bNum) || !isFinite(cNum)) {\n          this.scheduleRender(this.xAxis_min, this.xAxis_max);\n          return;\n        }\n        const centerX = typeof dataOrA.x0 === 'number' ? dataOrA.x0 : (typeof dataOrA.x0 === 'string' ? parseFloat(dataOrA.x0) : 0);\n        this.quadraticParams = { a: aNum, b: bNum, c: cNum, x0: isFinite(centerX) ? centerX : 0 };\n        this.lineDataFromPoints = null;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        return;\n      }\n\n      // 或者以三个独立参数形式传入 a, b, c\n      if ((typeof dataOrA === 'number' || typeof dataOrA === 'string') &&\n          (typeof b === 'number' || typeof b === 'string') &&\n          (typeof c === 'number' || typeof c === 'string')) {\n        const aNum = typeof dataOrA === 'number' ? dataOrA : parseFloat(dataOrA);\n        const bNum = typeof b === 'number' ? b : parseFloat(b);\n        const cNum = typeof c === 'number' ? c : parseFloat(c);\n        if (!isFinite(aNum) || !isFinite(bNum) || !isFinite(cNum)) {\n          this.scheduleRender(this.xAxis_min, this.xAxis_max);\n          return;\n        }\n        this.quadraticParams = { a: aNum, b: bNum, c: cNum };\n        this.lineDataFromPoints = null;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        return;\n      }\n\n      // 其他非法输入：不处理，仅刷新现状\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    // 生成一元二次曲线采样点\n    generateQuadraticData(a, b, c, xMin, xMax, centerX = 0) {\n      const start = Number.isFinite(xMin) ? xMin : 0;\n      const end = Number.isFinite(xMax) ? xMax : 100;\n      const span = end - start;\n      const samples = Math.max(2, Math.min(400, Math.ceil(span / 50))); // 根据范围自适应采样密度\n      const step = span / samples || 1;\n      const data = [];\n      for (let x = start; x <= end; x += step) {\n        const t = x - centerX;\n        const y = a * t * t + b * t + c;\n        data.push([x, y]);\n      }\n      // 确保包含尾点\n      if (data.length === 0 || data[data.length - 1][0] < end) {\n        const tEnd = end - centerX;\n        const yEnd = a * tEnd * tEnd + b * tEnd + c;\n        data.push([end, yEnd]);\n      }\n      return data;\n    },\n    addMinPointData_Point(x,y) {\n      const newDataPoint = [x, y];\n      this.chartData3.push(newDataPoint);\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    // 更改显示的x轴范围\n    changeRange_x(current, target) {\n      this.xAxis_min = Number(current) - 3000;\n      this.xAxis_max = Number(current) + 3000;\n      this.currentX = current;\n      console.log(\"QHYCCD | changeRange_x:\", current, this.xAxis_min, this.xAxis_max);\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n\n    // 清除数据\n    clearChartData1() {\n      this.chartData1_pos = [];\n      this.chartData1_time = [];\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    clearChartData2() {\n      this.chartData2 = [];\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    ClearAllData() {\n      this.chartData1_pos = [];\n      this.chartData1_time = [];\n      this.chartData2 = [];\n      this.chartData3 = [];\n      this.chartData4 = [];\n      this.quadraticResult.show = false;\n      this.yAxis_max = 30;\n      this.HFRMax = 15;\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    \n    // 清空精调数据（在精调开始时调用）\n    ClearFineData() {\n      this.logger.info('Chart-Focus.vue | 清空精调数据');\n      this.chartData1_pos = [];\n      this.chartData1_time = [];\n      this.chartData2 = [];\n      this.chartData3 = [];\n      this.chartData4 = [];\n      this.quadraticResult.show = false;\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    \n    // 更新异常点数据\n    updateOutlierData() {\n      const currentData = this.isTimeMode ? this.chartData1_time : this.chartData1_pos;\n      if (currentData.length >= 4) {\n        this.chartData4 = this.outlierDataPoints;\n        this.logger.debug('Chart-Focus.vue | 更新异常点数据，异常点数量:', this.chartData4.length);\n      } else {\n        this.chartData4 = [];\n      }\n    },\n    // 切换显示范围\n    RangeSwitch() {\n      if (this.range === 4) {\n        this.range = 2;\n        this.yAxis_min = -2;\n        this.yAxis_max = 2;\n      } else if (this.range === 2) {\n        this.range = 1;\n        this.yAxis_min = -1;\n        this.yAxis_max = 1;\n      } else if (this.range === 1) {\n        this.range = 4;\n        this.yAxis_min = -4;\n        this.yAxis_max = 4;\n      }\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    // 更新HFR\n    // UpdateHFR(HFR) {\n    //   const newDataPoint = [this.currentX, HFR];\n    //   this.addData_Point(newDataPoint);\n    //   // console.log(\"QHYCCD | UpdateHFR:\", newDataPoint);\n    //   // this.$bus.$emit('SendConsoleLogMsg', 'UpdateHFR:' + newDataPoint, 'info');\n    //   this.renderChart(this.xAxis_min, this.xAxis_max);\n    // },\n    // 拟合二次曲线\n    fitQuadraticCurve(dataString) {\n      this.logger.info('Chart-Focus.vue | 接收二次曲线数据:', dataString);\n      console.log('Chart-Focus.vue | 接收二次曲线数据:', dataString);\n      \n      const parts = dataString.split(':');\n      this.logger.info('Chart-Focus.vue | 解析后的数据部分:', parts);\n      console.log('Chart-Focus.vue | 解析后的数据部分:', parts);\n      \n      if (parts.length >= 6) {\n        const a = parseFloat(parts[1]);\n        const b = parseFloat(parts[2]);\n        const c = parseFloat(parts[3]);\n        const bestPosition = parseFloat(parts[4]);\n        const minHFR = parseFloat(parts[5]);\n        \n        this.logger.info('Chart-Focus.vue | 解析的数值:', { a, b, c, bestPosition, minHFR });\n        console.log('Chart-Focus.vue | 解析的数值:', { a, b, c, bestPosition, minHFR });\n        console.log('Chart-Focus.vue | 原始字符串部分:', parts);\n        \n        // 验证拟合系数的有效性\n        if (!this.validateFitCoefficients(a, b, c)) {\n          this.logger.warn('Chart-Focus.vue | 拟合系数无效，可能是水平线拟合');\n        }\n        \n        // 不再进行前端拟合计算，完全依赖后端提供的参数\n        this.logger.info('Chart-Focus.vue | 使用后端提供的拟合参数，不再进行前端拟合计算');\n        console.log('Chart-Focus.vue | 使用后端提供的拟合参数，不再进行前端拟合计算');\n        \n        // 验证参数是否合理\n        if (Math.abs(a) < 1e-10) {\n          this.logger.warn('Chart-Focus.vue | 警告：a系数接近0，这是线性拟合而不是二次拟合');\n          console.warn('Chart-Focus.vue | 警告：a系数接近0，这是线性拟合而不是二次拟合');\n          \n          // 对于线性拟合，我们需要特殊处理\n          this.generateLinearCurve(b, c, bestPosition);\n          \n          // 更新文本框显示（线性拟合）\n          this.quadraticResult.a = \"0.000000\"; // 显示为0\n          this.quadraticResult.b = b.toFixed(6);\n          this.quadraticResult.c = c.toFixed(6);\n          this.quadraticResult.bestPosition = \"线性拟合\";\n          this.quadraticResult.minHFR = minHFR.toFixed(3);\n          this.quadraticResult.show = true;\n          \n          return; // 直接返回，不执行二次曲线生成\n        }\n        \n        // 更新文本框显示\n        this.quadraticResult.a = a.toFixed(6);\n        this.quadraticResult.b = b.toFixed(6);\n        this.quadraticResult.c = c.toFixed(6);\n        this.quadraticResult.bestPosition = bestPosition.toFixed(2);\n        this.quadraticResult.minHFR = minHFR.toFixed(3);\n        this.quadraticResult.show = true;\n        \n        this.logger.info('Chart-Focus.vue | 文本框数据已更新:', this.quadraticResult);\n        \n        // 生成二次曲线数据点\n        this.generateQuadraticCurve(a, b, c, bestPosition);\n        \n        // 更新异常点数据\n        this.updateOutlierData();\n        \n        this.logger.info('Chart-Focus.vue | 二次拟合信息已更新:', this.quadraticResult);\n      } else {\n        this.logger.error('Chart-Focus.vue | 数据格式错误，部分数量不足:', parts.length);\n      }\n    },\n    \n    // 生成二次曲线数据点\n    generateQuadraticCurve(a, b, c, bestPosition) {\n      this.logger.info('Chart-Focus.vue | 开始生成二次曲线数据点:', { a, b, c, bestPosition });\n      \n      // 修正：后端发送的a、b、c系数是基于相对坐标的\n      // 需要找到数据点的最小位置作为偏移量，确保与后端算法一致\n      \n      // 从数据点中找到最小位置作为偏移量（修正：不使用bestPosition作为minPos）\n      let minPos = 0;\n      if (this.chartData1_pos.length > 0) {\n        minPos = Math.min(...this.chartData1_pos.map(point => point[0]));\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 坐标系统信息:');\n      this.logger.debug('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      this.logger.debug('Chart-Focus.vue | - 后端发送的最佳位置 (bestPosition):', bestPosition);\n      this.logger.debug('Chart-Focus.vue | - 拟合系数 a:', a, 'b:', b, 'c:', c);\n      \n      console.log('Chart-Focus.vue | 坐标系统信息:');\n      console.log('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      console.log('Chart-Focus.vue | - 后端发送的最佳位置 (bestPosition):', bestPosition);\n      console.log('Chart-Focus.vue | - 拟合系数 a:', a, 'b:', b, 'c:', c);\n      console.log('Chart-Focus.vue | - 当前数据点:', this.chartData1_pos);\n      \n      // 验证最佳位置的计算是否正确\n      const expectedBestRelativePos = -b / (2 * a);\n      const expectedBestAbsolutePos = expectedBestRelativePos + minPos;\n      this.logger.debug('Chart-Focus.vue | - 计算的最佳相对位置:', expectedBestRelativePos);\n      this.logger.debug('Chart-Focus.vue | - 计算的最佳绝对位置:', expectedBestAbsolutePos);\n      this.logger.debug('Chart-Focus.vue | - 位置差异:', Math.abs(expectedBestAbsolutePos - bestPosition));\n      \n      const curveData = [];\n      \n      // 智能确定曲线生成范围\n      let startX, endX, stepSize;\n      \n      if (this.chartData1_pos.length > 0) {\n        // 基于数据点范围生成曲线\n        const dataMinX = Math.min(...this.chartData1_pos.map(point => point[0]));\n        const dataMaxX = Math.max(...this.chartData1_pos.map(point => point[0]));\n        const dataRange = dataMaxX - dataMinX;\n        \n        // 扩展范围以确保曲线覆盖完整\n        const extension = Math.max(dataRange * 0.2, 1000); // 扩展20%或至少1000\n        startX = dataMinX - extension;\n        endX = dataMaxX + extension;\n        \n        // 根据数据范围调整步长\n        stepSize = Math.max(Math.floor(dataRange / 100), 20); // 至少100个点，步长至少20\n      } else {\n        // 如果没有数据点，使用默认范围\n        const range = 5000;\n        startX = bestPosition - range;\n        endX = bestPosition + range;\n        stepSize = 50;\n      }\n      \n      // 确保曲线覆盖当前X轴范围\n      startX = Math.min(startX, this.xAxis_min);\n      endX = Math.max(endX, this.xAxis_max);\n      \n      this.logger.debug('Chart-Focus.vue | 曲线生成范围:', startX, '到', endX, '步长:', stepSize);\n      \n      // 生成曲线数据点\n      for (let x = startX; x <= endX; x += stepSize) {\n        // 将绝对坐标转换为相对坐标进行计算（与后端算法一致）\n        const relativeX = x - minPos;\n        const y = a * relativeX * relativeX + b * relativeX + c;\n        \n        // 验证计算结果\n        if (isFinite(y) && y >= 0) {\n          curveData.push([x, y]);\n        } else {\n          this.logger.warn('Chart-Focus.vue | 警告：计算得到无效的Y值:', y, '在位置:', x, '相对位置:', relativeX);\n        }\n      }\n      \n      // 添加关键点：确保数据点位置在曲线上有精确的点\n      if (this.chartData1_pos.length > 0) {\n        for (const point of this.chartData1_pos) {\n          const x = point[0];\n          const relativeX = x - minPos;\n          const y = a * relativeX * relativeX + b * relativeX + c;\n          \n          if (isFinite(y) && y >= 0) {\n            // 检查是否已经存在这个点（避免重复）\n            const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - x) < stepSize / 2);\n            if (!exists) {\n              curveData.push([x, y]);\n            }\n          }\n        }\n        \n        // 添加最佳位置点及其附近的高精度点\n        const bestRelativeX = bestPosition - minPos;\n        const bestY = a * bestRelativeX * bestRelativeX + b * bestRelativeX + c;\n        if (isFinite(bestY) && bestY >= 0) {\n          const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - bestPosition) < stepSize / 2);\n          if (!exists) {\n            curveData.push([bestPosition, bestY]);\n          }\n          \n          // 在最佳位置附近添加更多高精度点\n          const fineRange = Math.max(stepSize * 2, 200); // 在最佳位置附近200范围内使用高精度\n          const fineStep = Math.max(stepSize / 10, 5);\n          for (let offset = -fineRange; offset <= fineRange; offset += fineStep) {\n            const x = bestPosition + offset;\n            if (x >= startX && x <= endX) {\n              const relativeX = x - minPos;\n              const y = a * relativeX * relativeX + b * relativeX + c;\n              if (isFinite(y) && y >= 0) {\n                const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - x) < fineStep / 2);\n                if (!exists) {\n                  curveData.push([x, y]);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      // 按X坐标排序\n      curveData.sort((a, b) => a[0] - b[0]);\n      \n      // 在数据点密集区域增加曲线密度\n      if (this.chartData1_pos.length > 0) {\n        const enhancedCurveData = [];\n        const fineStepSize = Math.max(stepSize / 5, 5); // 在密集区域使用更小的步长\n        \n        for (let i = 0; i < curveData.length - 1; i++) {\n          const currentPoint = curveData[i];\n          const nextPoint = curveData[i + 1];\n          \n          enhancedCurveData.push(currentPoint);\n          \n          // 检查当前段是否包含数据点\n          const hasDataPoint = this.chartData1_pos.some(point => \n            point[0] >= currentPoint[0] && point[0] <= nextPoint[0]\n          );\n          \n          // 如果包含数据点，在中间添加更多点\n          if (hasDataPoint && (nextPoint[0] - currentPoint[0]) > fineStepSize) {\n            const midPoints = Math.floor((nextPoint[0] - currentPoint[0]) / fineStepSize);\n            for (let j = 1; j < midPoints; j++) {\n              const x = currentPoint[0] + (j * fineStepSize);\n              const relativeX = x - minPos;\n              const y = a * relativeX * relativeX + b * relativeX + c;\n              if (isFinite(y) && y >= 0) {\n                enhancedCurveData.push([x, y]);\n              }\n            }\n          }\n        }\n        \n        // 添加最后一个点\n        if (curveData.length > 0) {\n          enhancedCurveData.push(curveData[curveData.length - 1]);\n        }\n        \n        // 更新曲线数据\n        curveData.length = 0;\n        curveData.push(...enhancedCurveData);\n      }\n      \n      // 添加关键点的验证\n      if (curveData.length > 0) {\n        // 验证最佳位置点的Y值\n        const bestPointY = a * (bestPosition - minPos) * (bestPosition - minPos) + b * (bestPosition - minPos) + c;\n        this.logger.debug('Chart-Focus.vue | 最佳位置点验证:');\n        this.logger.debug('Chart-Focus.vue | - 最佳位置:', bestPosition);\n        this.logger.debug('Chart-Focus.vue | - 最佳位置相对坐标:', bestPosition - minPos);\n        this.logger.debug('Chart-Focus.vue | - 最佳位置Y值:', bestPointY);\n        \n        // 验证数据点是否在曲线上\n        this.logger.debug('Chart-Focus.vue | 数据点与曲线对比:');\n        for (let i = 0; i < Math.min(this.chartData1_pos.length, 5); i++) {\n          const point = this.chartData1_pos[i];\n          const pointRelativeX = point[0] - minPos;\n          const pointY = a * pointRelativeX * pointRelativeX + b * pointRelativeX + c;\n          const actualY = point[1];\n          const diff = Math.abs(pointY - actualY);\n          this.logger.debug(`Chart-Focus.vue | - 点${i}: 位置=${point[0]}, 实际HFR=${actualY}, 曲线HFR=${pointY}, 差异=${diff}`);\n        }\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 生成的曲线数据点数量:', curveData.length);\n      this.logger.debug('Chart-Focus.vue | X轴范围:', startX, '到', endX);\n      this.logger.debug('Chart-Focus.vue | 前5个数据点:', curveData.slice(0, 5));\n      this.logger.debug('Chart-Focus.vue | 后5个数据点:', curveData.slice(-5));\n      \n      // 验证曲线形状\n      if (curveData.length > 0) {\n        const firstY = curveData[0][1];\n        const lastY = curveData[curveData.length - 1][1];\n        const middleIndex = Math.floor(curveData.length / 2);\n        const middleY = curveData[middleIndex][1];\n        \n        this.logger.debug('Chart-Focus.vue | 曲线形状验证 - 起始Y:', firstY, '中间Y:', middleY, '结束Y:', lastY);\n        \n        // 检查是否为有效的二次曲线（应该有最小值或最大值）\n        if (Math.abs(a) > 1e-10) {\n          const vertexX = -b / (2 * a) + minPos; // 顶点X坐标（转换回绝对坐标）\n          const vertexY = c - (b * b) / (4 * a); // 顶点Y坐标\n          this.logger.debug('Chart-Focus.vue | 二次曲线顶点位置:', vertexX, 'Y值:', vertexY);\n        }\n      }\n      \n      // 最终验证和清理曲线数据\n      const finalCurveData = curveData.filter(point => {\n        const [x, y] = point;\n        return isFinite(x) && isFinite(y) && y >= 0 && x >= startX && x <= endX;\n      });\n      \n      // 确保曲线数据按X坐标排序\n      finalCurveData.sort((a, b) => a[0] - b[0]);\n      \n      this.logger.debug('Chart-Focus.vue | 最终曲线数据验证:');\n      this.logger.debug('Chart-Focus.vue | - 原始数据点数量:', curveData.length);\n      this.logger.debug('Chart-Focus.vue | - 清理后数据点数量:', finalCurveData.length);\n      this.logger.debug('Chart-Focus.vue | - X轴范围:', finalCurveData.length > 0 ? `${finalCurveData[0][0]} 到 ${finalCurveData[finalCurveData.length - 1][0]}` : '无数据');\n      \n      this.chartData2 = finalCurveData;\n      this.logger.debug('Chart-Focus.vue | chartData2已更新，长度:', this.chartData2.length);\n      \n      // 调整X轴范围以显示完整曲线\n      if (finalCurveData.length > 0) {\n        this.xAxis_min = Math.min(this.xAxis_min, finalCurveData[0][0]);\n        this.xAxis_max = Math.max(this.xAxis_max, finalCurveData[finalCurveData.length - 1][0]);\n      }\n      \n      this.renderChart(this.xAxis_min, this.xAxis_max);\n      \n      this.logger.info('Chart-Focus.vue | 二次曲线数据点已生成并渲染完成');\n    },\n    \n    // 生成线性曲线数据点（当a=0时）\n    generateLinearCurve(b, c, bestPosition) {\n      this.logger.info('Chart-Focus.vue | 开始生成线性曲线数据点:', { b, c, bestPosition });\n      console.log('Chart-Focus.vue | 开始生成线性曲线数据点:', { b, c, bestPosition });\n      \n      // 对于线性拟合，我们需要找到数据点的最小位置作为偏移量\n      let minPos = 0;\n      if (this.chartData1_pos.length > 0) {\n        minPos = Math.min(...this.chartData1_pos.map(point => point[0]));\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 线性拟合坐标系统信息:');\n      this.logger.debug('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      this.logger.debug('Chart-Focus.vue | - 线性系数 b:', b, 'c:', c);\n      \n      console.log('Chart-Focus.vue | 线性拟合坐标系统信息:');\n      console.log('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      console.log('Chart-Focus.vue | - 线性系数 b:', b, 'c:', c);\n      \n      const curveData = [];\n      \n      // 智能确定曲线生成范围\n      let startX, endX, stepSize;\n      \n      if (this.chartData1_pos.length > 0) {\n        // 基于数据点范围生成曲线\n        const dataMinX = Math.min(...this.chartData1_pos.map(point => point[0]));\n        const dataMaxX = Math.max(...this.chartData1_pos.map(point => point[0]));\n        const dataRange = dataMaxX - dataMinX;\n        \n        // 扩展范围以确保曲线覆盖完整\n        const extension = Math.max(dataRange * 0.2, 1000);\n        startX = dataMinX - extension;\n        endX = dataMaxX + extension;\n        \n        // 根据数据范围调整步长\n        stepSize = Math.max(Math.floor(dataRange / 100), 20);\n      } else {\n        // 如果没有数据点，使用默认范围\n        const range = 5000;\n        startX = bestPosition - range;\n        endX = bestPosition + range;\n        stepSize = 50;\n      }\n      \n      // 确保曲线覆盖当前X轴范围\n      startX = Math.min(startX, this.xAxis_min);\n      endX = Math.max(endX, this.xAxis_max);\n      \n      this.logger.debug('Chart-Focus.vue | 线性曲线生成范围:', startX, '到', endX, '步长:', stepSize);\n      \n      // 生成线性曲线数据点\n      for (let x = startX; x <= endX; x += stepSize) {\n        // 将绝对坐标转换为相对坐标进行计算\n        const relativeX = x - minPos;\n        const y = b * relativeX + c; // 线性方程：y = bx + c\n        \n        // 验证计算结果\n        if (isFinite(y) && y >= 0) {\n          curveData.push([x, y]);\n        } else {\n          this.logger.warn('Chart-Focus.vue | 警告：计算得到无效的Y值:', y, '在位置:', x, '相对位置:', relativeX);\n        }\n      }\n      \n      // 添加关键点：确保数据点位置在曲线上有精确的点\n      if (this.chartData1_pos.length > 0) {\n        for (const point of this.chartData1_pos) {\n          const x = point[0];\n          const relativeX = x - minPos;\n          const y = b * relativeX + c;\n          \n          if (isFinite(y) && y >= 0) {\n            // 检查是否已经存在这个点（避免重复）\n            const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - x) < stepSize / 2);\n            if (!exists) {\n              curveData.push([x, y]);\n            }\n          }\n        }\n      }\n      \n      // 按X坐标排序\n      curveData.sort((a, b) => a[0] - b[0]);\n      \n      // 最终验证和清理曲线数据\n      const finalCurveData = curveData.filter(point => {\n        const [x, y] = point;\n        return isFinite(x) && isFinite(y) && y >= 0 && x >= startX && x <= endX;\n      });\n      \n      this.logger.debug('Chart-Focus.vue | 线性曲线最终数据验证:');\n      this.logger.debug('Chart-Focus.vue | - 原始数据点数量:', curveData.length);\n      this.logger.debug('Chart-Focus.vue | - 清理后数据点数量:', finalCurveData.length);\n      \n      this.chartData2 = finalCurveData;\n      this.logger.debug('Chart-Focus.vue | chartData2已更新（线性拟合），长度:', this.chartData2.length);\n      \n      // 调整X轴范围以显示完整曲线\n      if (finalCurveData.length > 0) {\n        this.xAxis_min = Math.min(this.xAxis_min, finalCurveData[0][0]);\n        this.xAxis_max = Math.max(this.xAxis_max, finalCurveData[finalCurveData.length - 1][0]);\n      }\n      \n      this.renderChart(this.xAxis_min, this.xAxis_max);\n      \n      this.logger.info('Chart-Focus.vue | 线性曲线数据点已生成并渲染完成');\n    },\n    \n    // 拟合二次曲线最小点\n    fitQuadraticCurve_minPoint(dataString) {\n      this.logger.info('Chart-Focus.vue | 接收最小点数据:', dataString);\n      \n      const parts = dataString.split(':');\n      if (parts.length >= 3) {\n        const bestPosition = parseFloat(parts[1]);\n        const minHFR = parseFloat(parts[2]);\n        \n        // 更新文本框显示\n        this.quadraticResult.bestPosition = bestPosition.toFixed(2);\n        this.quadraticResult.minHFR = minHFR.toFixed(3);\n        this.quadraticResult.show = true;\n        \n        // 添加最小点到图表\n        this.chartData3 = [];\n        this.chartData3.push([bestPosition, minHFR]);\n        this.renderChart(this.xAxis_min, this.xAxis_max);\n        \n        this.logger.info('Chart-Focus.vue | 最小点信息已更新:', { bestPosition, minHFR });\n      }\n    },\n    setFocusChartRange(lowerBound, upperBound) {\n      this.x_min = lowerBound;\n      this.x_max = upperBound;\n    },\n    \n    // ==================== 异常点检测方法 ====================\n    \n    /**\n     * 智能异常点检测\n     * 使用多种方法检测并去除异常点\n     */\n    removeOutliers(dataPoints) {\n      if (dataPoints.length < 4) {\n        return dataPoints; // 数据点太少，不进行异常值检测\n      }\n      \n      this.logger.info('Chart-Focus.vue | 开始智能异常值检测，原始数据点数量:', dataPoints.length);\n      \n      // 方法1：基于二次曲线拟合的残差分析\n      const cleanData1 = this.removeOutliersByResidual(dataPoints);\n      \n      // 方法2：基于HFR统计分布的IQR方法\n      const cleanData2 = this.removeOutliersByIQR(dataPoints);\n      \n      // 方法3：基于位置分布的异常检测\n      const cleanData3 = this.removeOutliersByPosition(dataPoints);\n      \n      // 选择保留最多数据点的方法，但确保至少有3个数据点\n      let bestCleanData = cleanData1;\n      if (cleanData2.length > bestCleanData.length && cleanData2.length >= 3) {\n        bestCleanData = cleanData2;\n      }\n      if (cleanData3.length > bestCleanData.length && cleanData3.length >= 3) {\n        bestCleanData = cleanData3;\n      }\n      \n      // 如果所有方法都过滤得太严格，使用最宽松的方法\n      if (bestCleanData.length < 3) {\n        this.logger.warn('Chart-Focus.vue | 所有异常值检测方法都过于严格，使用最宽松的方法');\n        bestCleanData = cleanData2; // IQR方法相对宽松\n        if (bestCleanData.length < 3) {\n          bestCleanData = dataPoints; // 如果还是不够，返回原始数据\n        }\n      }\n      \n      this.logger.info('Chart-Focus.vue | 智能异常值检测完成: 原始数据', dataPoints.length, '个点，清理后', bestCleanData.length, '个点');\n      \n      return bestCleanData;\n    },\n    \n    /**\n     * 基于二次曲线拟合残差的异常值检测\n     * 注意：现在主要依赖后端拟合结果，此方法仅作为备用\n     */\n    removeOutliersByResidual(dataPoints) {\n      if (dataPoints.length < 4) {\n        return dataPoints; // 需要至少4个点才能进行二次拟合\n      }\n      \n      // 简化异常值检测：直接使用IQR方法，不再进行二次拟合\n      const preliminaryClean = this.removeOutliersByIQR(dataPoints);\n      if (preliminaryClean.length < 3) {\n        return dataPoints;\n      }\n      \n      // 不再进行前端拟合，直接返回IQR清理后的数据\n      this.logger.info('Chart-Focus.vue | 异常值检测：使用IQR方法，不再进行前端拟合');\n      return preliminaryClean;\n    },\n    \n    /**\n     * 基于HFR统计分布的IQR异常值检测\n     */\n    removeOutliersByIQR(dataPoints) {\n      // 计算HFR的统计信息\n      const hfrValues = dataPoints.map(point => point[1]);\n      \n      // 排序\n      const sortedHfrValues = [...hfrValues].sort((a, b) => a - b);\n      \n      // 计算四分位数\n      const n = sortedHfrValues.length;\n      const q1 = sortedHfrValues[Math.floor(n / 4)];\n      const q3 = sortedHfrValues[Math.floor(3 * n / 4)];\n      const iqr = q3 - q1;\n      \n      // 定义异常值边界（使用2倍IQR，比1.5倍更宽松）\n      const lowerBound = q1 - 2.0 * iqr;\n      const upperBound = q3 + 2.0 * iqr;\n      \n      // 过滤异常值\n      const cleanData = dataPoints.filter(point => \n        point[1] >= lowerBound && point[1] <= upperBound\n      );\n      \n      this.logger.info('Chart-Focus.vue | 基于IQR的异常值检测: 原始数据', dataPoints.length, '个点，清理后', cleanData.length, '个点');\n      \n      return cleanData;\n    },\n    \n    /**\n     * 基于位置分布的异常值检测\n     */\n    removeOutliersByPosition(dataPoints) {\n      if (dataPoints.length < 4) {\n        return dataPoints;\n      }\n      \n      // 按位置排序\n      const sortedData = [...dataPoints].sort((a, b) => a[0] - b[0]);\n      \n      // 计算相邻点之间的距离\n      const distances = [];\n      for (let i = 1; i < sortedData.length; i++) {\n        const dist = sortedData[i][0] - sortedData[i-1][0];\n        distances.push(dist);\n      }\n      \n      // 计算距离的统计信息\n      const sortedDistances = [...distances].sort((a, b) => a - b);\n      const n = sortedDistances.length;\n      const medianDistance = sortedDistances[Math.floor(n / 2)];\n      const q3 = sortedDistances[Math.floor(3 * n / 4)];\n      const threshold = q3 + 1.5 * (q3 - medianDistance);\n      \n      // 识别位置异常的点\n      const cleanData = [];\n      cleanData.push(sortedData[0]); // 第一个点总是保留\n      \n      for (let i = 1; i < sortedData.length; i++) {\n        const dist = sortedData[i][0] - sortedData[i-1][0];\n        if (dist <= threshold) {\n          cleanData.push(sortedData[i]);\n        } else {\n          // 检查是否是孤立点（前后距离都很大）\n          let isIsolated = true;\n          if (i > 1) {\n            const prevDist = sortedData[i-1][0] - sortedData[i-2][0];\n            if (prevDist <= threshold) isIsolated = false;\n          }\n          if (i < sortedData.length - 1) {\n            const nextDist = sortedData[i+1][0] - sortedData[i][0];\n            if (nextDist <= threshold) isIsolated = false;\n          }\n          \n          if (!isIsolated) {\n            cleanData.push(sortedData[i]);\n          }\n        }\n      }\n      \n      this.logger.info('Chart-Focus.vue | 基于位置的异常值检测: 原始数据', dataPoints.length, '个点，清理后', cleanData.length, '个点');\n      \n      return cleanData;\n    },\n    \n    /**\n     * 执行二次曲线拟合\n     * 注意：现在主要依赖后端拟合结果，此方法仅用于测试和调试\n     * 返回拟合系数 {a, b, c}\n     */\n    performQuadraticFit(dataPoints) {\n      if (dataPoints.length < 3) {\n        return null;\n      }\n      \n      this.logger.info('Chart-Focus.vue | 开始二次曲线拟合，数据点数量:', dataPoints.length);\n      \n      // 标准化坐标：将位置转换为相对坐标\n      const minPos = Math.min(...dataPoints.map(point => point[0]));\n      this.logger.debug('Chart-Focus.vue | 最小位置 (偏移量):', minPos);\n      \n      // 构建最小二乘法正规方程组\n      let sum_x4 = 0, sum_x3 = 0, sum_x2 = 0, sum_x = 0, sum_1 = 0;\n      let sum_x2y = 0, sum_xy = 0, sum_y = 0;\n      \n      for (const point of dataPoints) {\n        const x = point[0] - minPos; // 相对坐标\n        const y = point[1];\n        \n        const x2 = x * x;\n        const x3 = x2 * x;\n        const x4 = x3 * x;\n        \n        sum_x4 += x4;\n        sum_x3 += x3;\n        sum_x2 += x2;\n        sum_x += x;\n        sum_1 += 1;\n        \n        sum_x2y += x2 * y;\n        sum_xy += x * y;\n        sum_y += y;\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 拟合统计量:', {\n        sum_x4, sum_x3, sum_x2, sum_x, sum_1,\n        sum_x2y, sum_xy, sum_y\n      });\n      \n      // 构建系数矩阵和常数向量\n      const matrix = [\n        [sum_x4, sum_x3, sum_x2],\n        [sum_x3, sum_x2, sum_x],\n        [sum_x2, sum_x, sum_1]\n      ];\n      \n      const constants = [sum_x2y, sum_xy, sum_y];\n      \n      this.logger.debug('Chart-Focus.vue | 系数矩阵:', matrix);\n      this.logger.debug('Chart-Focus.vue | 常数向量:', constants);\n      \n      // 求解线性方程组（使用高斯消元法）\n      const coefficients = this.solveLinearSystem(matrix, constants);\n      if (!coefficients) {\n        this.logger.error('Chart-Focus.vue | 线性方程组求解失败');\n        return null;\n      }\n      \n      const result = {\n        a: coefficients[0],\n        b: coefficients[1],\n        c: coefficients[2]\n      };\n      \n      this.logger.info('Chart-Focus.vue | 拟合系数:', result);\n      \n      // 验证拟合结果\n      if (!isFinite(result.a) || !isFinite(result.b) || !isFinite(result.c)) {\n        this.logger.error('Chart-Focus.vue | 拟合系数包含无效值');\n        return null;\n      }\n      \n      // 检查是否为有效的二次曲线（a不为0）\n      if (Math.abs(result.a) < 1e-10) {\n        this.logger.warn('Chart-Focus.vue | 警告：二次项系数接近0，可能是直线拟合');\n      }\n      \n      return result;\n    },\n    \n    /**\n     * 求解3x3线性方程组\n     */\n    solveLinearSystem(matrix, constants) {\n      // 高斯消元法求解线性方程组\n      const augmented = [];\n      \n      // 构建增广矩阵\n      for (let i = 0; i < 3; i++) {\n        augmented[i] = [...matrix[i], constants[i]];\n      }\n      \n      // 前向消元\n      for (let i = 0; i < 3; i++) {\n        // 寻找主元\n        let maxRow = i;\n        for (let k = i + 1; k < 3; k++) {\n          if (Math.abs(augmented[k][i]) > Math.abs(augmented[maxRow][i])) {\n            maxRow = k;\n          }\n        }\n        \n        // 交换行\n        if (maxRow !== i) {\n          [augmented[i], augmented[maxRow]] = [augmented[maxRow], augmented[i]];\n        }\n        \n        // 检查主元是否为零\n        if (Math.abs(augmented[i][i]) < 1e-10) {\n          this.logger.error('Chart-Focus.vue | 线性方程组奇异，无法求解');\n          return null;\n        }\n        \n        // 消元\n        for (let k = i + 1; k < 3; k++) {\n          const factor = augmented[k][i] / augmented[i][i];\n          for (let j = i; j < 4; j++) {\n            augmented[k][j] -= factor * augmented[i][j];\n          }\n        }\n      }\n      \n      // 回代求解\n      const solution = [0, 0, 0];\n      for (let i = 2; i >= 0; i--) {\n        solution[i] = augmented[i][3];\n        for (let j = i + 1; j < 3; j++) {\n          solution[i] -= augmented[i][j] * solution[j];\n        }\n        solution[i] /= augmented[i][i];\n      }\n      \n      return solution;\n    },\n    \n    // ==================== 测试和调试方法 ====================\n    \n    /**\n     * 测试后端数据接收功能\n     * 模拟后端发送的拟合数据来测试前端处理\n     */\n    testBackendDataReception() {\n      this.logger.info('Chart-Focus.vue | 开始测试后端数据接收功能');\n      console.log('Chart-Focus.vue | 开始测试后端数据接收功能');\n      \n      // 模拟后端发送的数据格式\n      const testData = \"fitQuadraticCurve:0.000001:-0.02:5.0:15731.13:1.930\";\n      this.logger.info('Chart-Focus.vue | 模拟后端数据:', testData);\n      console.log('Chart-Focus.vue | 模拟后端数据:', testData);\n      \n      // 调用拟合方法\n      this.fitQuadraticCurve(testData);\n    },\n    \n    /**\n     * 测试二次曲线拟合功能\n     * 注意：现在主要依赖后端拟合结果，此方法仅用于测试前端拟合算法\n     * 使用模拟数据验证拟合算法是否正确\n     */\n    testQuadraticFitting() {\n      this.logger.info('Chart-Focus.vue | 开始测试二次曲线拟合功能');\n      \n      // 生成测试数据：y = 0.0001 * (x - 3000)^2 + 2.0\n      const testData = [];\n      for (let i = 0; i < 10; i++) {\n        const x = 2000 + i * 200; // 位置从2000到3800\n        const y = 0.0001 * Math.pow(x - 3000, 2) + 2.0 + (Math.random() - 0.5) * 0.2; // 添加噪声\n        testData.push([x, y]);\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 测试数据:', testData);\n      \n      // 执行拟合\n      const fitResult = this.performQuadraticFit(testData);\n      if (fitResult) {\n        this.logger.info('Chart-Focus.vue | 拟合结果:', fitResult);\n        \n        // 计算理论最佳位置（应该是3000）\n        const minPos = Math.min(...testData.map(point => point[0]));\n        const theoreticalBestPos = -fitResult.b / (2 * fitResult.a) + minPos;\n        this.logger.info('Chart-Focus.vue | 理论最佳位置:', theoreticalBestPos, '期望值: 3000');\n        \n        // 生成拟合曲线\n        this.generateQuadraticCurve(fitResult.a, fitResult.b, fitResult.c, theoreticalBestPos);\n        \n        this.logger.info('Chart-Focus.vue | 二次曲线拟合测试完成');\n      } else {\n        this.logger.error('Chart-Focus.vue | 二次曲线拟合测试失败');\n      }\n    },\n    \n  }\n}\n</script>\n\n<style scoped>\n.linechart-panel {\n  background-color: rgba(0, 0, 0, 0.0);\n  /* backdrop-filter: blur(5px); */\n  border-radius: 5px;\n  box-sizing: border-box;\n}\n\n.focus-result-panel {\n  position: fixed;\n  top: -200%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 300px;\n  background: linear-gradient(135deg, rgba(30, 30, 30, 0.95), rgba(45, 45, 45, 0.95));\n  border: 1px solid rgba(100, 100, 100, 0.3);\n  border-radius: 8px;\n  padding: 12px;\n  font-size: 12px;\n  color: #e0e0e0;\n  z-index: 1000;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(10px);\n  min-height: 60px;\n}\n\n.panel-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  padding-bottom: 6px;\n  border-bottom: 1px solid rgba(100, 100, 100, 0.2);\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n}\n\n.close-button {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  background-color: rgba(255, 255, 255, 0.1);\n  color: #b0b0b0;\n  font-size: 14px;\n  font-weight: bold;\n  transition: all 0.2s ease;\n}\n\n.close-button:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n  color: #ffffff;\n}\n\n.status-icon {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n  font-size: 12px;\n  font-weight: bold;\n}\n\n.status-icon.success {\n  background-color: rgba(76, 175, 80, 0.2);\n  color: #4caf50;\n  border: 1px solid rgba(76, 175, 80, 0.4);\n}\n\n.status-icon.warning {\n  background-color: rgba(255, 152, 0, 0.2);\n  color: #ff9800;\n  border: 1px solid rgba(255, 152, 0, 0.4);\n}\n\n.panel-title {\n  font-weight: 600;\n  color: #ffffff;\n  font-size: 13px;\n}\n\n.panel-content {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.status-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 2px 0;\n}\n\n.label {\n  color: #b0b0b0;\n  font-size: 11px;\n  font-weight: 500;\n}\n\n.value {\n  color: #ffffff;\n  font-size: 11px;\n  font-weight: 600;\n  font-family: 'Courier New', monospace;\n}\n\n.value.error {\n  color: #ff9800;\n  background: none;\n}\n\n.best-position {\n  margin-bottom: 2px;\n  color: #00ffff;\n  font-size: 9px;\n}\n\n.min-hfr {\n  color: #ff00ff;\n  font-size: 9px;\n}\n\n.fit-info {\n  color: #00ff00;\n  font-size: 8px;\n  margin-top: 2px;\n  font-style: italic;\n}\n</style>\n"]}]}