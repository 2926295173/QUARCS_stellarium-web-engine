{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/App.vue","mtime":1759999426550},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappingshfile":"App.vue","sourceRoot":"src","sourcesContent":["// Stellarium Web - Copyright (c) 2022 - Stellarium Labs SRL\n//\n// This program is licensed under the terms of the GNU AGPL v3, or\n// alternatively under a commercial licence.\n//\n// The terms of the AGPL v3 license can be found in the main directory of this\n// repository.\n\n<template>\n  <v-app>\n    <v-navigation-drawer v-model=\"drawer_2\" ref=\"Drawer_2\" app absolute temporary :width=\"DeviceIsConnected ? 200 : 200\"\n      style=\"left: 170px; backdrop-filter: blur(5px); background-color: rgba(0, 0, 0, 0.1);\">\n\n      <div v-show=\"isOpenDevicePage\">\n        <span\n          style=\"position: absolute; top: 0px; left: 50%; transform: translateX(-50%); font-size: 30px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n          {{ $t(CurrentDriverType) }}\n          <v-divider></v-divider>\n        </span>\n\n        <div :style=\"{ width: DeviceIsConnected ? '200px' : '200px' }\"\n          style=\"position: absolute; top: 50px; max-height: calc(100% - 95px); overflow-y: auto;\"\n          class=\"params-container\">\n\n          <div v-show=\"!DeviceIsConnected\" style=\"text-align: center;\">\n            <span style=\"display: inline-block; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n              {{ $t('Device Connection') }}\n            </span>\n\n            <!-- 驱动选择下拉框，添加@change事件 -->\n            <v-select :label=\"$t('Select Driver')\" :items=\"drivers\" item-text=\"label\" item-value=\"value\"\n              v-model=\"selectedDriver\" @change=\"confirmDriver\" style=\"width: 150px; display: inline-block;\">\n            </v-select>\n\n            <!-- 波特率下拉框，添加@change事件 -->\n            <v-select v-if=\"CurrentDriverType === 'Mount' || CurrentDriverType === 'Focuser'\" :label=\"$t('Baud Rate')\"\n              :items=\"BaudRateItems\" item-text=\"label\" item-value=\"value\" v-model=\"BaudRateSelected\"\n              @change=\"confirmDriver\" style=\"width: 150px; display: inline-block;\">\n            </v-select>\n\n            <v-row no-gutters>\n              <v-col cols=\"6\">\n                <button @click=\"clearDriver\" class=\"btn-confirm\" style=\"display: inline-block;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/delete.svg\" height=\"20px\"\n                      style=\"min-height: 20px; pointer-events: none;\"></img>\n                  </div>\n                </button>\n              </v-col>\n              <v-col cols=\"6\">\n                <button v-if=\"!isConnecting\" @click=\"connectDriver(selectedDriver)\" class=\"btn-confirm\"\n                  style=\"display: inline-block; background-color: green;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <v-icon color=\"white\">mdi-link</v-icon>\n                  </div>\n                </button>\n                <v-progress-circular v-else indeterminate color=\"green\" size=\"24\"></v-progress-circular>\n              </v-col>\n            </v-row>\n          </div>\n\n          <div v-show=\"DeviceIsConnected\" v-for=\"(item, index) in CurrentConfigItems()\" :key=\"index\"\n            class=\"config-item\">\n            <!-- 标题，仅在第一个项目显示 -->\n            <span v-if=\"index === 0\" class=\"config-title\">\n              {{ $t('Device Config Items') }}\n            </span>\n\n            <!-- 配置项卡片内容 -->\n            <v-card-text>\n              <!-- 文本输入类型 -->\n              <v-text-field v-if=\"item.inputType === 'text'\" v-model=\"item.value\" :label=\"item.label\"\n                @input=\"handleConfigChange(item.label, item.value)\" class=\"config-input\">\n              </v-text-field>\n\n              <!-- 数字输入类型 -->\n              <v-text-field v-if=\"item.inputType === 'number'\" v-model=\"item.value\" :label=\"item.label\"\n                :type=\"isDesktop ? 'number' : 'text'\" :min=\"item.min\" :max=\"item.max\"\n                :step=\"item.step !== undefined && item.step !== null ? item.step : 1\" :rules=\"numberRules(item)\"\n                :inputmode=\"isMobile ? getInputMode(item) : ''\" :pattern=\"isMobile ? getPattern(item) : ''\"\n                enterkeyhint=\"done\" @blur=\"onNumberCommit(item)\" @keydown.enter.prevent=\"onNumberCommit(item)\"\n                class=\"config-input\" />\n\n              <!-- 滑动条类型 -->\n              <div v-if=\"item.inputType === 'slider'\" class=\"slider-container\">\n                <span class=\"slider-label\">\n                  {{ item.label }}: {{ item.value }}\n                </span>\n                <div>\n                  <!-- 减小按钮 -->\n                  <button @click=\"decrementAndNotify(item)\" class=\"get-click btn-slider btn-minus\">\n                    <div class=\"btn-content\">\n                      <img src=\"@/assets/images/svg/ui/Minus.svg\" height=\"10px\" class=\"btn-icon\">\n                    </div>\n                  </button>\n\n                  <!-- 滑动条 -->\n                  <v-slider v-model=\"item.value\" :step=\"item.inputStep\" :max=\"item.inputMax\" :min=\"item.inputMin\"\n                    @change=\"handleConfigChange(item.label, item.value)\" color=\"white\"\n                    class=\"align-center slider-control\">\n                  </v-slider>\n\n                  <!-- 增加按钮 -->\n                  <button @click=\"incrementAndNotify(item)\" class=\"get-click btn-slider btn-plus\">\n                    <div class=\"btn-content\">\n                      <img src=\"@/assets/images/svg/ui/Plus.svg\" height=\"10px\" class=\"btn-icon\">\n                    </div>\n                  </button>\n                </div>\n              </div>\n\n              <!-- 选择框类型 -->\n              <v-select v-if=\"item.inputType === 'select'\" v-model=\"item.value\" :label=\"item.label\"\n                @change=\"handleConfigChange(item.label, item.value)\" :items=\"item.selectValue\" class=\"config-input\">\n              </v-select>\n\n              <!-- 开关类型 -->\n              <v-switch v-if=\"item.inputType === 'switch'\" v-model=\"item.value\" :label=\"item.label\"\n                @change=\"handleConfigChange(item.label, item.value)\" class=\"config-switch\">\n              </v-switch>\n\n              <!-- 提示信息类型（只读） -->\n              <div v-if=\"item.inputType === 'tip'\" class=\"tip-field\">\n                <div class=\"tip-label\">{{ item.label }}</div>\n                <div class=\"tip-value\" :title=\"formatTipTitle(item)\">\n                  {{ formatTipValue(item) }}\n                </div>\n              </div>\n            </v-card-text>\n          </div>\n\n          <div v-show=\"DeviceIsConnected\"\n            style=\"text-align: center; position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); display: flex; gap: 10px;\">\n            <button @click=\"disconnectDriver\" class=\"btn-confirm\" style=\"display: inline-block; background-color: red;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <v-icon color=\"white\">mdi-link-off</v-icon>\n              </div>\n            </button>\n          </div>\n\n        </div>\n\n        <div v-show=\"isOpenPowerPage\">\n          <span\n            style=\"position: absolute; top: 0px; left: 50%; transform: translateX(-50%); font-size: 26px; color: rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap; \">\n            {{ $t('Power Management') }}\n            <v-divider></v-divider>\n          </span>\n\n          <div style=\"position: absolute; top: 50px; max-height: calc(100% - 50px); width: 200px; overflow-y: auto;\">\n            <v-list dense>\n\n              <v-list-item @click.stop=\"SwitchOutPutPower(1, OutPutPower_1_ON)\"\n                :style=\"{ height: '36px', marginBottom: '10px' }\">\n                <v-list-item-icon style=\"margin-right: 10px;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/OutPutPower.svg\" height=\"30px\"\n                      style=\"min-height: 30px; pointer-events: none;\"></img>\n                  </div>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title>\n                    <span>\n                      <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('OutPut Power 1') }}\n                      </div>\n                      <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': OutPutPower_1_ON }\">{{\n                        OutPutPower_1_ON ?\n                          '[ON]' : '[OFF]' }}</div>\n                    </span>\n                  </v-list-item-title>\n\n                </v-list-item-content>\n              </v-list-item>\n\n              <v-list-item @click.stop=\"SwitchOutPutPower(2, OutPutPower_2_ON)\"\n                :style=\"{ height: '36px', marginBottom: '10px' }\">\n                <v-list-item-icon style=\"margin-right: 10px;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/OutPutPower.svg\" height=\"30px\"\n                      style=\"min-height: 30px; pointer-events: none;\"></img>\n                  </div>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title>\n                    <span>\n                      <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('OutPut Power 2') }}\n                      </div>\n                      <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': OutPutPower_2_ON }\">{{\n                        OutPutPower_2_ON ?\n                          '[ON]' : '[OFF]' }}</div>\n                    </span>\n                  </v-list-item-title>\n\n                </v-list-item-content>\n              </v-list-item>\n\n              <v-divider :style=\"{ marginBottom: '10px' }\"></v-divider>\n\n              <v-list-item @click.stop=\"RestartRaspberryPi()\" :style=\"{ height: '36px', marginBottom: '10px' }\">\n                <v-list-item-icon style=\"margin-right: 10px;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/Reboot.svg\" height=\"30px\"\n                      style=\"min-height: 30px; pointer-events: none;\"></img>\n                  </div>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Restart')\n                  }}</v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n\n              <v-list-item @click.stop=\"ShutdownRaspberryPi()\" :style=\"{ height: '36px', marginBottom: '10px' }\">\n                <v-list-item-icon style=\"margin-right: 10px;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/PowerOFF.svg\" height=\"30px\"\n                      style=\"min-height: 30px; pointer-events: none;\"></img>\n                  </div>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Shut Down')\n                  }}</v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n              <!-- 强制更新 -->\n              <v-list-item @click.stop=\"ForceUpdate()\" :style=\"{ height: '36px', marginBottom: '10px' }\">\n                <v-list-item-icon style=\"margin-right: 10px;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/PowerOFF.svg\" height=\"30px\"\n                      style=\"min-height: 30px; pointer-events: none;\"></img>\n                  </div>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Force Update')\n                  }}</v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n\n            </v-list>\n          </div>\n\n        </div>\n\n      </div>\n\n    </v-navigation-drawer>\n\n    <v-navigation-drawer v-model=\"nav\" app :stateless=\"drawer_2\" temporary width=\"170\"\n      style=\"backdrop-filter: blur(5px); background-color: rgba(0, 0, 0, 0.1);\">\n      <v-layout column fill-height>\n        <v-list dense>\n          <!-- 客户端版本和服务器版本信息 -->\n          <template>\n            <div style=\"display: flex; justify-content: center; align-items: center;\">\n              <span style=\"font-size: 10px; color: rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap;\">\n                Client Version: {{ VueClientVersion }}\n              </span>\n            </div>\n            <div style=\"display: flex; justify-content: center; align-items: center;\">\n              <!-- <span style=\"font-size: 10px; color: getQTClientVersionColor,rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap;\">\n                Server Version: {{ QTClientVersion }}\n              </span> -->\n              <span :style=\"{\n                fontSize: '10px',\n                color: getQTClientVersionColor,\n                userSelect: 'none',\n                whiteSpace: 'nowrap'\n              }\">\n                Server Version: {{ QTClientVersion }}\n              </span>\n            </div>\n            <v-divider></v-divider>\n          </template>\n\n          <!-- 退出(Quit) -->\n          <v-list-item @click.stop=\"QuitToMainApp()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Quit.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Quit')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 视图设置(View Settings) -->\n          <v-list-item @click.stop=\"toggleStoreValue('showViewSettingsDialog')\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Setting.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('View Settings')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 电源管理(Power Management) -->\n          <v-list-item @click.stop=\"openPowerManagerPage()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Power.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Power Management')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-divider></v-divider>\n\n          <!-- 设备列表(动态生成) -->\n          <v-list-item v-for=\"(device, index) in devices\" :key=\"index\" @click.stop=\"selectDevice(device)\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/${device.driverType}.svg`)\" height=\"30px\"\n                  style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t(device.driverType) }}</div>\n                  <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': device.isConnected }\">{{\n                    device.device }}\n                  </div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-divider></v-divider>\n\n          <!-- 连接所有(Connect All) -->\n          <v-list-item :disabled=\"loadingConnectAllDevice\" @touchstart=\"startConnectBtnPress\"\n            @touchend=\"endConnectBtnPress\" @mousedown=\"startConnectBtnPress\" @mouseup=\"endConnectBtnPress\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Connect.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\">\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px', userSelect: 'none' }\">\n                {{ $t('Connect All') }}\n              </v-list-item-title>\n              <v-progress-linear v-if=\"loadingConnectAllDevice\" indeterminate color=\"white\"\n                height=\"5\"></v-progress-linear>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 断开所有连接(Disconnect All) -->\n          <v-list-item @click.stop=\"disconnectAllDevice(false)\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DisConnect.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px', userSelect: 'none' }\">{{\n                $t('Disconnect All') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 设备分配(Device Allocation) -->\n          <v-list-item @click.stop=\"DeviceAllocation()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Allocation.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{\n                $t('Device Allocation') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 校准极轴(Calibrate Polar Axis) -->\n          <v-list-item @click.stop=\"CalibratePolarAxis()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/PoleAxis.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{\n                $t('Calibrate Polar Axis') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 图像文件(Image Files) -->\n          <v-list-item @click.stop=\"OpenIamgeFolder()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/FolderSwitch.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Image Files')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 日志(Logs) -->\n          <v-list-item @click.stop=\"OpenDebugLog()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DebugLog.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Logs')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-divider></v-divider>\n\n          <!-- 纬度和经度(Lat & Long) -->\n          <v-list-item @click.stop=\"locationClicked()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/Location.svg`)\" height=\"30px\" style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Lat & Long') }}</div>\n                  <div :style=\"{ fontSize: '7px' }\">{{ '(' + $store.state.currentLocation.lat + ', ' +\n                    $store.state.currentLocation.lng + ')' }}</div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 刷新页面(Refresh Page) -->\n          <v-list-item @click.stop=\"ShowConfirmDialog('Confirm', $t('Are you sure you need to refresh?'), 'Refresh')\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/Refresh.svg`)\" height=\"30px\" style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ fontSize: '10px' }\">{{ $t('Refresh Page') }}</div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 数据版权(Data Credits) -->\n          <v-list-item @click.stop=\"toggleStoreValue('showDataCreditsDialog')\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DataCredits.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Data Credits')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n        </v-list>\n      </v-layout>\n    </v-navigation-drawer>\n\n\n\n\n    <v-main>\n\n      <canvas v-show=false id=\"TestCanvas\" width=\"1920\" height=\"1080\"></canvas>\n\n      <v-container class=\"fill-height\" fluid style=\"padding: 0\">\n        <div id=\"stel\" v-bind:class=\"{ right_panel: $store.state.showSidePanel }\">\n          <div style=\"position: relative; width: 100%; height: 100%\">\n            <component v-bind:is=\"guiComponent\"></component>\n            <canvas id=\"stel-canvas\" ref='stelCanvas' :style=\"{ zIndex: canvasZIndexStel }\"></canvas>\n            <canvas ref=\"mainCanvas\" id=\"mainCamera-canvas\" :style=\"{ zIndex: canvasZIndexMainCamera }\"\n              @click=\"handleMainCanvasClick\" @touchstart=\"handleTouchStart\" @touchmove=\"handleTouchMove\"\n              @touchend=\"handleTouchEnd\" @mousedown=\"handleMouseDown\" @mouseup=\"handleMouseUp\"\n              @mousemove=\"handleMouseMove\" @wheel=\"handleWheel\">\n            </canvas>\n            <canvas ref=\"guiderCanvas\" id=\"guiderCamera-canvas\" :style=\"{ zIndex: canvasZIndexGuiderCamera }\"\n              @click=\"handleGuiderCanvasClick\"></canvas>\n            <!-- <img id=\"imageSrc\" alt=\"Source\" :src=\"imageSrc\" crossOrigin = \"\" /> -->\n            <ProgressBar :progress=\"progressValue\" :description=\"progressDescription\" :showDescription=\"true\"\n              :isShow=\"currentcanvas === 'MainCamera'\" />\n          </div>\n        </div>\n\n\n      </v-container>\n    </v-main>\n\n    <v-dialog v-model=\"showDisconnectDialog\" persistent max-width=\"290\">\n      <v-card>\n        <v-card-title class=\"text-h5\">Confirm Action</v-card-title>\n        <v-card-text>Are you sure you want to disconnect the driver {{ currentDisconnectDriverName }}?</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"red darken-1\" text @click=\"showDisconnectDialog = false\">Cancel</v-btn>\n          <v-btn color=\"green darken-1\" text @click=\"confirmDisconnect\">Confirm</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- 校准信息显示框 -->\n    <div v-if=\"calibrationInfo.isCalibrating || calibrationInfo.calibrationState === 'complete'\"\n      class=\"calibration-info-box\">\n      <div class=\"calibration-content\">\n        <div class=\"calibration-title\">{{ $t('Focuser Travel Calibration') }}</div>\n        <div class=\"calibration-message\">{{ calibrationInfo.calibrationMessage }}</div>\n        <div class=\"calibration-progress\">{{ $t('Step') }} {{ calibrationInfo.calibrationStep }}/3</div>\n      </div>\n    </div>\n\n  </v-app>\n</template>\n<script>\nimport _ from 'lodash'\nimport Gui from '@/components/gui.vue'\nimport GuiLoader from '@/components/gui-loader.vue'\nimport swh from '@/assets/sw_helpers.js'\nimport Moment from 'moment'\nimport BackgroundImage from '@/assets/images/svg/ui/Background.svg';\nimport ErrorImage from '@/assets/images/svg/ui/errorImage.svg';\nimport ProgressBar from '@/components/ProgressBar.vue';\n\nlet glTestCircle;\nlet glLayer;\nlet glStel;\n\nexport default {\n  data(context) {\n    return {\n      menuItems: [\n        { title: this.$t('View Settings'), icon: 'mdi-settings', store_var_name: 'showViewSettingsDialog', store_show_menu_item: 'showViewSettingsMenuItem' },\n        { title: this.$t('Planets Tonight'), icon: 'mdi-panorama-fisheye', store_var_name: 'showPlanetsVisibilityDialog', store_show_menu_item: 'showPlanetsVisibilityMenuItem' },\n        { divider: true }\n      ].concat(this.getPluginsMenuItems()).concat([\n        { title: this.$t('Data Credits'), footer: true, icon: 'mdi-copyright', store_var_name: 'showDataCreditsDialog' }\n      ]),\n      menuComponents: [].concat(this.getPluginsMenuComponents()),\n      guiComponent: 'GuiLoader',\n      startTimeIsSet: false,\n      initDone: false,\n      dataSourceInitDone: false,\n      imageSrc: 'https://i.imgur.com/egA5FIv.jpeg', // 替换为你的图像路径\n      cvReady: false,\n      canvasZIndexStel: -10,\n      canvasZIndexMainCamera: -11,\n      canvasZIndexGuiderCamera: -12,\n      currentcanvas: 'Stel',\n\n      WebSocketUrl: '',\n\n      websocket: null,\n      message: '',\n      receivedMessages: [],// 存储接收到的消息\n      sentMessages: [], // 存储已发送的消息\n      messageCounter: 0, // 用于生成唯一的消息ID\n      websocketState: 'disconnected', // 添加WebSocket连接状态\n      networkDisconnected: false, // 添加网络连接状态\n\n      QTClientVersion: 'Not connected',\n      VueClientVersion: process.env.VUE_APP_VERSION,\n\n      // 校准信息对象\n      calibrationInfo: {\n        isCalibrating: false,\n        calibrationState: 'idle',\n        calibrationStep: 0,\n        calibrationMessage: ''\n      },\n\n      // isMessageBoxShow: false,\n\n      CurrentDriverType: '',\n      DeviceIsConnected: null,\n      confirmDriverType: '',\n\n      MainCameraOffsetMin: 0,\n      MainCameraOffsetMax: 0,\n\n      MainCameraGainMin: 0,\n      MainCameraGainMax: 0,\n\n      devices: [\n        { name: '导星镜', driverType: 'Guider', type: 'CCDs', ListNum: \"1\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Guider' },\n        { name: '主相机', driverType: 'MainCamera', type: 'CCDs', ListNum: \"20\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_MainCamera' },\n        { name: '赤道仪', driverType: 'Mount', type: 'Telescopes', ListNum: \"0\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Mount' },\n        { name: '望远镜', driverType: 'Telescopes', device: '', isConnected: true },\n        { name: '电动调焦器', driverType: 'Focuser', type: 'Focusers', ListNum: \"22\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Focuser' },\n        { name: '电子极轴镜', driverType: 'PoleCamera', type: 'CCDs', ListNum: \"2\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_PoleCamera' },\n        { name: '滤镜轮', driverType: 'CFW', type: 'Filter Wheels', ListNum: \"21\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_CFW' },\n      ],\n\n      // Changing the label name also requires changing the emit signal name\n      GuiderConfigItems: [\n        { driverType: 'Guider', label: 'Guider Focal Length (mm)', value: '', inputType: 'text' },\n        { driverType: 'Guider', label: 'Multi Star Guider', value: false, inputType: 'switch' },\n        // { driverType: 'Guider', label: 'Guider Pixel size', value: '', inputType: 'text'},\n        { driverType: 'Guider', label: 'Guider Gain', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n        { driverType: 'Guider', label: 'Calibration step (ms)', value: '', inputType: 'text' },\n        { driverType: 'Guider', label: 'Ra Aggression', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n        { driverType: 'Guider', label: 'Dec Aggression', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n\n      ],\n\n      MainCameraConfigItems: [\n        // vue处理参数\n        { driverType: 'MainCamera', label: 'ImageCFA', value: '', inputType: 'select', selectValue: ['GR', 'GB', 'BG', 'RGGB', 'null'] },\n        // 硬件处理参数\n        { driverType: 'MainCamera', label: 'Binning', value: '', inputType: 'slider', inputMin: 1, inputMax: 16, inputStep: 1 },\n        { driverType: 'MainCamera', label: 'Temperature', value: '', inputType: 'select', selectValue: [5, 0, -5, -10, -15, -20, -25] },\n        { driverType: 'MainCamera', label: 'Gain', value: '', inputType: 'slider', inputMin: 0, inputMax: 0, inputStep: 1 },\n        { driverType: 'MainCamera', label: 'Offset', value: '', inputType: 'slider', inputMin: 0, inputMax: 0, inputStep: 1 },\n      ],\n\n      MountConfigItems: [\n        { driverType: 'Mount', label: 'Flip ETA', value: '00:00:00', displayValue: '00:00:00', inputType: 'tip' },\n        { driverType: 'Mount', label: 'GotoThenSolve', value: false, inputType: 'switch' },\n\n        // { driverType: 'Mount', label: 'isAutoFlip', value: false, inputType: 'switch' },\n      ],\n\n      TelescopesConfigItems: [\n        { driverType: 'Telescopes', num: 1, label: 'Focal Length (mm)', value: '', inputType: 'number' },\n      ],\n\n      FocuserConfigItems: [\n        { driverType: 'Focuser', num: 2, label: 'Sync Focuser Step', value: '', inputType: 'text' },\n        { driverType: 'Focuser', num: 2, label: 'Min Limit', value: '', inputType: 'number' },\n        { driverType: 'Focuser', num: 2, label: 'Max Limit', value: '', inputType: 'number' },\n      ],\n\n      PoleCameraConfigItems: [\n\n      ],\n\n      CFWConfigItems: [\n\n      ],\n\n      BeforeChangeConfigItems: [],\n\n\n\n      imageData: null,\n\n      histogramImage: null,\n      histogram_min: 0,    // 直方图自动拉伸的最小值\n      histogram_max: 255,  // 直方图自动拉伸的最大值\n\n      currentHistogramMin: 0,\n      currentHistogramMax: 255,\n\n      ImageGainR: 1,\n      ImageGainB: 1,\n\n      ImageOffset: 0,\n\n      ImageCFA: 'BG',\n\n      cameraBin: 1,   // 当前相机binning\n\n      CanvasWidth: 1920,  // 主画布宽度\n      CanvasHeight: 1080, // 主画布高度\n\n      scale: 1, // 缩放比例\n      translateX: 0, // 平移x坐标\n      translateY: 0, // 平移y坐标\n      bufferCanvas: null, // 存储画布\n      bufferCtx: null, // 存储画布上下文\n      tempCanvas: null, // 临时画布\n      tempCtx: null, // 临时画布上下文\n\n      visibleWidth: 0, // 可见区域宽度\n      visibleHeight: 0, // 可见区域高度\n      visibleX: 0, // 可见区域x坐标\n      visibleY: 0, // 可见区域y坐标\n      isDragging: false, // 标记画布是否正在拖动\n      pendingScaleChange: false, // 标记画布是否正在缩放\n\n      touchStartX: 0, // 触摸开始x坐标\n      touchStartY: 0, // 触摸开始y坐标\n      startDistance: 0, // 触摸开始距离\n\n      moveIntervalId: null, // 拖动定时器\n      zoomIntervalId: null, // 缩放定时器\n\n\n      imageWidth: 0, // 图像宽度\n      imageHeight: 0, // 图像高度\n      drawImgData: null,\n      OriginalImage: null,\n      detectStarsImg: null,\n\n      isNotDrawStars: true,\n\n      mainCameraSizeX: 0,\n      mainCameraSizeY: 0,\n\n      ImageProportion: 0,\n\n      DetectedStarsList: [],\n      DetectedStarsFinish: false,\n\n      CartesianList: [],\n\n      PolarPoint_Altitude: 0,\n\n      LastPoint_AzAlt: null,\n\n      MarkCircleNum: 0,\n\n      LastCircle_RaDec: null,\n      LastCircle_AzAlt: null,\n\n      Circles: [],\n\n      // 极轴校准相关数组\n      calibrationCircles: [],  // 校准点圆圈数组\n      adjustmentCircles: [],   // 调整点圆圈数组\n      targetPointCircle: null, // 目标点圆形对象\n      fakePolarAxisCircle: null, // 假极点圆形对象\n      lastPosition: null,      // 上一次位置\n      fieldUpdateTimer: null,  // 视场更新定时器\n      fieldOfViewPolygons: [], // 存储视场多边形对象\n\n      drawer_2: null,    // 设置侧边栏的显示与隐藏\n\n      drivers: [], // 驱动选项数组\n      selectedDriver: null, // 选中的驱动\n\n      devicesList: [], // 设备选项数组\n      selectedDevice: null, // 选中的设备\n      ToBeConnectDevice: [],\n\n      loadingSelectDriver: false,\n      loadingConnectAllDevice: false,\n\n      CurrentLocationLng: 0,\n      CurrentLocationLat: 0,\n\n      histogramData: [],\n\n      ImageArrayBuffer: null,\n\n      isOpenDevicePage: false, // 设置设备页面是否打开\n      isOpenPowerPage: false, // 设置电源页面是否打开\n\n      OutPutPower_1_ON: true,\n      OutPutPower_2_ON: false,\n\n      isPolarAxisMode: false,\n\n      isTouching: false, // 标记是否正在处理触摸事件\n      ConnectBtnPressTimer: null,\n      ConnectBtnlongPressThreshold: 1000,\n      isConnectBtnLongPress: false, // 标记是否为长按\n      ConnectBtnCanClick: true,\n\n\n      haveDeviceConnect: false,\n      isConnecting: false, // 添加连接状态\n\n      disconnectTimeoutTriggered: false,\n      disconnectTimeout: null,\n\n      isDownloadingImage: false,\n      isDownloadingImageName: '',\n      isWaitingLogged: false, // 添加等待日志标志\n\n      showDisconnectDialog: false,\n      currentDisconnectDriverName: '',\n\n      enableMainCanvasClick: false, // 控制画布是否可以点击，用来移动调焦选择框和选星\n\n      lastImageProcessParams: { // 最后处理图像的参数\n        blackLevel: 0,\n        whiteLevel: 65535,\n        CFA: 'null',\n        analysis: null,\n        isColorCamera: false,\n      },\n      focuserPictureFileName: '',  // 焦距图片文件名\n      isProcessingImage: false,   // 控制是否正在处理图像\n      isFocusLoopShooting: false,  // 控制是否进行ROi循环拍摄\n      focuserROIStarsList: [],  // 用来保存ROI区域的星点列表，分别保存x,y,HFR\n      selectStarX: -1,\n      selectStarY: -1,\n      DrawSelectStarX: -1,\n      DrawSelectStarY: -1,\n      DrawSelectStarHFR: -1,\n      ROI_x: -1,    // 用来保存ROI区域的x坐标,在vue中计算\n      ROI_y: -1,    // 用来保存ROI区域的y坐标,在vue中计算\n      ROI_x_qt: -1,    // 用来保存ROI区域的x坐标,在qt中计算\n      ROI_y_qt: -1,    // 用来保存ROI区域的y坐标,在qt中计算\n      ROI_length: 300, // 用来保存ROI区域的长度\n      showSelectStar: false,\n\n      isOneTouch: false,\n      currentTouchX: [0, 0],\n      currentTouchY: [0, 0],\n      startTouchX: [0, 0],\n      startTouchY: [0, 0],\n      startTouchDistance: 0,\n\n      // 定义波特率选项\n      BaudRateItems: [\n        { label: '9600', value: 9600 },\n        { label: '19200', value: 19200 },\n        { label: '38400', value: 38400 },\n        { label: '57600', value: 57600 },\n        { label: '115200', value: 115200 },\n        { label: '230400', value: 230400 },\n      ],\n      BaudRateSelected: 9600, // 波特率选择\n      cpuTemp: null,  // CPU温度\n      cpuUsage: null, // CPU使用率\n\n      progressValue: 0,// 控制图像处理进度条的变量\n      progressDescription: '', // 控制进度条显示内容\n\n      calculateGain: true, // 控制是否计算白平衡增益\n      lutCache: {\n        lastParams: null, // 用于存储上次的参数\n        lutR: null,\n        lutG: null,\n        lutB: null\n      },\n    }\n  },\n  components: {\n    Gui,\n    GuiLoader,\n    ProgressBar,\n    // MessageBox,\n  },\n  created() {\n    this.$bus.$on('AppSendMessage', this.sendMessage);\n    this.$bus.$on('AppUpdateDevices', this.updateDevices);\n    this.$bus.$on('Switch-MainPage', this.handleButtonTestClick);\n    this.$bus.$on('HandleHistogramNum', this.applyHistStretch);\n    this.$bus.$on('ImageGainR', this.ImageGainSet);\n    this.$bus.$on('ImageGainB', this.ImageGainSet);\n    this.$bus.$on('Offset', this.ImageOffsetSet);\n    this.$bus.$on('Binning', this.BinningSet);\n    this.$bus.$on('Gain', this.GainSet);\n    this.$bus.$on('Offset', this.OffsetSet);\n    this.$bus.$on('ImageCFA', this.ImageCFASet);\n    // this.$bus.$on('MainCameraCFA', this.ImageCFASet);\n    this.$bus.$on('Temperature', this.CameraTemperatureSet);\n    this.$bus.$on('Focal Length (mm)', this.FocalLengthSet);\n    this.$bus.$on('Guider Focal Length (mm)', this.GuiderFocalLengthSet);\n    this.$bus.$on('Multi Star Guider', this.MultiStarGuiderSet);\n    this.$bus.$on('Guider Pixel size', this.GuiderPixelSizeSet);\n    this.$bus.$on('Guider Gain', this.GuiderGainSet);\n    this.$bus.$on('Calibration step (ms)', this.CalibrationDurationSet);\n    this.$bus.$on('Ra Aggression', this.RaAggressionSet);\n    this.$bus.$on('Dec Aggression', this.DecAggressionSet);\n    this.$bus.$on('Sync Focuser Step', this.SyncFocuserStep);\n    this.$bus.$on('GotoThenSolve', this.GotoThenSolve);\n    this.$bus.$on('AutoFlip', this.AutoFlipSet);\n    this.$bus.$on('WestMinutesPastMeridian', this.WestMinutesPastMeridianSet);\n    this.$bus.$on('EastMinutesPastMeridian', this.EastMinutesPastMeridianSet);\n    this.$bus.$on('ImageProportion', this.setImageProportion);\n    this.$bus.$on('MountGoto', this.lookatcircle);\n    this.$bus.$on('SwitchImageToShow', this.SwitchImageToShow);\n    this.$bus.$on('PolarPointAltitude', this.setPolarPointAltitude);\n    this.$bus.$on('showStelCanvas', this.showStelCanvas);\n    this.$bus.$on('RecalibratePolarAxis', this.RecalibratePolarAxis);\n    this.$bus.$on('CurrentExpTimeList', this.CurrentExpTimeList);\n    this.$bus.$on('disconnectAllDevice', this.disconnectAllDevice);\n    this.$bus.$on('GetConnectedDevices', this.ReturnConnectedDevices);\n    this.$bus.$on('CurrentCFWList', this.CurrentCFWList);\n    this.$bus.$on('calcWhiteBalanceGains', this.calcWhiteBalanceGains);\n    this.$bus.$on('SwitchOutPutPower', this.SwitchOutPutPower);\n    this.$bus.$on('PolarAxisMode', this.PolarAxisMode);\n    this.$bus.$on('SendConsoleLogMsg', this.SendConsoleLogMsg);\n    // this.$bus.$on('DisconnectDriverSuccess', this.disconnectDriversuccess);\n    this.$bus.$on('UnBindingDevice', this.UnBindingDevice);\n    this.$bus.$on('CloseWebView', this.QuitToMainApp)\n    this.$bus.$on('RedBoxSizeChange', this.RedBoxSizeChange);\n    this.$bus.$on('setFocuserState', this.setFocuserState);  // 设置调焦状态和进度\n    this.$bus.$on('setShowSelectStar', this.setShowSelectStar);  // 设置是否显示选择星点\n    this.$bus.$on('ScaleChange', this.ScaleChange);\n    this.$bus.$on('showCanvas', this.showCanvas);\n\n    // 极轴校准绘制相关监听器\n    this.$bus.$on('DrawCalibrationPointPolygon', this.drawCalibrationPointPolygon);\n    this.$bus.$on('ClearCalibrationPoints', this.clearCalibrationPoints);\n    this.$bus.$on('DrawAdjustmentPointsPolygon', this.drawAdjustmentPointsPolygon);\n    this.$bus.$on('DrawTargetPointCircle', this.drawTargetPointCircle);\n    this.$bus.$on('DrawFakePolarAxisCircle', this.DrawFakePolarAxisCircle)\n\n    // 校准相关事件监听器\n    this.$bus.$on('StartCalibration', this.startCalibrationProcess);\n    this.$bus.$on('UpdateCalibrationInfo', this.updateCalibrationInfo);\n    this.$bus.$on('EndCalibration', this.endCalibration);\n\n    this.memoryCheckInterval = setInterval(this.checkMemoryUsage, 30000);\n\n\n  },\n  methods: {\n    // 是否允许小数：step 不是整数，或显式允许\n    allowsDecimal(item) {\n      const step = item.step ?? 1;\n      return item.allowDecimal === true || !Number.isInteger(step) || String(step).includes('.');\n    },\n    // 是否允许负数：根据配置或 min<0 猜测\n    allowsNegative(item) {\n      return item.allowNegative === true || (typeof item.min === 'number' && item.min < 0);\n    },\n    // 移动端键盘类型\n    getInputMode(item) {\n      // 仅移动端生效；桌面忽略\n      if (!this.isMobile) return undefined;\n      // 需要小数或负数，用 decimal（更容易出现小数点/负号）\n      return this.allowsDecimal(item) || this.allowsNegative(item) ? 'decimal' : 'numeric';\n    },\n    // 配合 iOS：pattern 可影响弹出键盘与校验\n    getPattern(item) {\n      const neg = this.allowsNegative(item);\n      if (this.allowsDecimal(item)) {\n        // 允许 . 或 , 作为小数点，便于不同语言键盘\n        return neg ? '^[-]?[0-9]*([.,][0-9]*)?$' : '^[0-9]*([.,][0-9]*)?$';\n      }\n      // 整数\n      return neg ? '^[-]?[0-9]*$' : '^[0-9]*$';\n    },\n\n    numberRules(item) {\n      return [\n        v => v === '' || v === null || !isNaN(this._toNumber(v)) || '请输入数字',\n        v => item.min === undefined || this._toNumber(v) >= item.min || `最小值 ${item.min}`,\n        v => item.max === undefined || this._toNumber(v) <= item.max || `最大值 ${item.max}`,\n      ];\n    },\n\n    // 统一把逗号小数转为点，去掉多余空白\n    _toNumber(v) {\n      if (v === '' || v === null || v === undefined) return NaN;\n      if (typeof v === 'number') return v;\n      const s = String(v).trim().replace(',', '.');\n      return Number(s);\n    },\n\n    onNumberCommit(item) {\n      let v = this._toNumber(item.value);\n      if (!Number.isFinite(v)) return;\n\n      // 1) 夹取到 min/max\n      if (item.min !== undefined && v < item.min) v = item.min;\n      if (item.max !== undefined && v > item.max) v = item.max;\n\n      // 2) 按 step 对齐（以 min 或 0 为基准）\n      const step = item.step ?? 1;\n      if (step > 0) {\n        const base = (item.min !== undefined ? item.min : 0);\n        v = base + Math.round((v - base) / step) * step;\n        if (item.min !== undefined && v < item.min) v = item.min;\n        if (item.max !== undefined && v > item.max) v = item.max;\n        v = Number(v.toFixed(12)); // 去浮点误差\n      }\n\n      // 回写并通知\n      item.value = v;\n      this.handleConfigChange(item.label, v);\n    },\n    checkMemoryUsage() {\n      if (window.performance && window.performance.memory) {\n        const memoryInfo = window.performance.memory;\n        const used = Math.round(memoryInfo.usedJSHeapSize / 1048576);\n        const limit = Math.round(memoryInfo.jsHeapSizeLimit / 1048576);\n\n        // console.log(`内存使用: ${used}MB / ${limit}MB`);\n\n        if (memoryInfo.usedJSHeapSize > memoryInfo.jsHeapSizeLimit * 0.7) {\n          this.$bus.$emit('showWarning', this.$i18n.locale === 'cn' ?\n            '内存使用接近限制，请保存工作后刷新页面' :\n            'Memory usage is approaching limit. Please save your work and refresh the page.');\n\n          // 可选：尝试手动触发垃圾回收\n          if (window.gc) {\n            try { window.gc(); } catch (e) { }\n          }\n        }\n      }\n    },\n\n    formatTipValue(item) {\n      return (item && item.displayValue != null)\n        ? String(item.displayValue)\n        : (item && item.value != null ? String(item.value) : '-');\n    },\n    formatTipTitle(item) {\n      if (item && item.tooltip != null) return String(item.tooltip);\n      if (item && item.value != null) return String(item.value);\n      return '';\n    },\n    copyTip(item) {\n      const text = (item && item.value != null) ? String(item.value) : '';\n      if (!text) return;\n      if (navigator && navigator.clipboard && navigator.clipboard.writeText) {\n        navigator.clipboard.writeText(text);\n      }\n    },\n\n    preventDefault(event) {\n      event.preventDefault();\n    },\n    getLocationHostName() {\n      const hostname = window.location.hostname;\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const port = window.location.protocol === 'https:' ? '8601' : '8600';\n      this.SendConsoleLogMsg('location hostname:' + hostname, 'info');\n      this.WebSocketUrl = `${protocol}//${hostname}:${port}`;\n      console.log('WebSocketUrl:', this.WebSocketUrl);\n    },\n    getQTClientVersion() {\n      this.sendMessage('Vue_Command', 'getQTClientVersion');\n    },\n    connect() {\n      // 替换为你的 WebSocket 服务器地址\n      // this.websocket = new WebSocket('ws://192.168.2.31:8600');  // process.env.VUE_APP_WEBSOCKET\n      // this.websocket = new WebSocket(process.env.VUE_APP_WEBSOCKET);\n      const wsOptions = {\n        rejectUnauthorized: false  // 禁用证书验证\n      };\n      this.websocket = new WebSocket(this.WebSocketUrl, [], wsOptions);\n\n      this.websocket.onopen = () => {\n        this.websocketState = 'connected';\n        this.networkDisconnected = false; // WebSocket连接成功时重置网络连接状态\n        if (this.disconnectTimeoutTriggered) {\n          this.callShowMessageBox('WebSocket connected', 'success');\n        }\n        this.$bus.$emit('ShowNetStatus', 'true');\n        this.StatusRecovery();\n        console.log('process.env.NODE_ENV:', process.env.NODE_ENV);\n      };\n\n      this.websocket.onmessage = (message) => {\n        // console.log('QHYCCD | Received message:', message.data);\n\n        const data = JSON.parse(message.data);\n\n        if (data.type === 'QT_Return') {\n          const parts = data.message.split(':');\n          let messageType;\n          if (parts.length > 0) {\n            messageType = parts[0];\n            // console.log('QHYCCD | 获得信息('+messageType+'):', parts);\n          }\n          else {\n            console.error('消息格式错误，无法分割:', data.message);\n            return;\n          }\n          let acceptMessage = false;\n          if (data.message.startsWith('StagingScheduleData:')) {\n            console.log('------------------------------');\n            acceptMessage = true;\n            const parts = data.message.split('[');\n\n            if (parts.length > 0) {\n              console.log('parts.length: ', parts.length);\n              this.$bus.$emit('StagingScheduleData', data.message);\n            }\n            console.log('------------------------------');\n          }\n\n          if (data.message.startsWith('SendDebugMessage|')) {\n            acceptMessage = true;\n            const parts = data.message.split('|');\n            if (parts.length === 3) {\n              const type = parts[1];\n              const message = parts[2];\n              this.$bus.$emit('SendDebugMessage', type, message);\n            }\n          }\n\n          if (!acceptMessage) {\n            switch (messageType) {\n              case 'AddDriver':\n                if (parts.length === 3) {\n                  const label = parts[1];\n                  const value = parts[2];\n                  const type = this.CurrentDriverType;\n                  // 创建一个驱动对象\n                  const driver = { type, label, value };\n\n                  // if (type === 'MainCamera' && label === \"QHY CCD2\") {\n                  //   break;\n                  // }\n                  // if (type === 'Guider' && label === \"QHY CCD\") {\n                  //   break;\n                  // }\n\n                  // 检查label是否为\"QHY CCD\"或\"QFocuser\"，如果是，则插入到数组首位\n                  if (label === \"QHY CCD\" || label === \"QFocuser\" || label === \"QHY CCD2\") {\n                    this.drivers.unshift(driver); // 将新驱动添加到数组的开始位置\n                  } else {\n                    this.drivers.push(driver); // 将新驱动添加到数组的末尾\n                  }\n                }\n                break;\n\n              case 'AddDevice':\n                if (parts.length === 2) {\n                  const label = parts[1];\n                  console.log('QHYCCD | AddDevice: ', label);\n                  // const value = parts[2];\n                  const type = this.confirmDriverType;\n                  // 创建一个驱动对象\n                  const device = { type, label, label };\n                  console.log('QHYCCD | AddDevice: ', device);\n                  // this.$bus.$emit('add-device', device);\n                  this.devicesList.push(device);\n\n                  this.ToBeConnectDevice = [];\n                  this.devicesList.forEach(devicesList => {\n                    if (devicesList.type === this.CurrentDriverType) {\n                      this.ToBeConnectDevice.push(devicesList);\n                    }\n                  });\n\n                  this.loadingSelectDriver = false;\n                }\n                break;\n\n              case 'updateDevices_':\n                if (parts.length === 3) {\n                  const ListNum = parts[1];\n                  const name = parts[2];\n                  this.updateDevices_(ListNum, name);\n                }\n                break;\n\n              case 'ConnectSuccess':\n                if (parts.length === 4) {\n                  const type = parts[1];\n                  const deviceName = parts[2];\n                  const driverName = parts[3];\n\n                  if (deviceName != '') {\n                    this.updateDevicesConnect(type, deviceName, driverName, true);\n                  } else {\n                    this.updateDevicesConnect(type, deviceName, driverName, false);\n                  }\n                }\n                break;\n\n              case 'ConnectFailed':\n                if (parts.length === 2) {\n                  const reason = parts[1];\n                  this.callShowMessageBox(reason, 'error');\n                  this.loadingConnectAllDevice = false;\n                }\n                break;\n\n              case 'ScanFailed':\n                if (parts.length === 2) {\n                  const reason = parts[1];\n                  this.callShowMessageBox(reason, 'error');\n                  this.loadingSelectDriver = false;\n                }\n                break;\n\n              case 'AddDeviceType':\n                if (parts.length === 2) {\n                  const DeviceType = parts[1];\n                  this.$bus.$emit('AddDeviceType', DeviceType);\n                }\n                break;\n\n              case 'DeviceToBeAllocated':\n                if (parts.length === 4) {\n                  const DeviceType = parts[1];\n                  const DeviceIndex = parts[2];\n                  const DeviceName = parts[3];\n                  this.$bus.$emit('DeviceToBeAllocated', DeviceIndex, DeviceName);\n                }\n                break;\n\n              case 'ShowDeviceAllocationWindow':\n                this.$bus.$emit('toggleDeviceAllocationPanel');\n                this.nav = false;\n                break;\n\n              case 'ExposureCompleted':\n                this.$bus.$emit('ExposureCompleted');\n                break;\n\n              case 'SaveJpgSuccess':\n                if (parts.length === 4) {\n                  const fileName = parts[1];\n                  const roi_x = parseInt(parts[2]);\n                  const roi_y = parseInt(parts[3]);\n                  this.ROI_x = roi_x;\n                  this.ROI_y = roi_y;\n\n                  // this.$bus.$emit('showRoiImage', fileName);\n                  this.showRoiImage(fileName, roi_x, roi_y);\n                }\n                break;\n\n              case 'SaveBinSuccess':\n                if (parts.length === 2) {\n                  const fileName = parts[1];\n                  this.readBinFile('img/' + fileName);\n                  this.DetectedStarsFinish = false;\n                }\n                break;\n\n\n              case 'SaveGuiderImageSuccess':\n                if (parts.length === 2) {\n                  const fileName = parts[1];\n                  this.loadAndDisplayImage('img/' + fileName);\n                }\n                break;\n              case 'GuideSize':\n                if (parts.length === 3) {\n                  const col = parts[1];\n                  const row = parts[2];\n                  this.$bus.$emit(\"GuideSize\", col, row);\n                }\n\n              case 'AddScatterChartData':\n                if (parts.length === 3) {\n                  const Data_x = parts[1];\n                  const Data_y = parts[2];\n                  const newDataPoint = [Data_x, Data_y];\n                  this.$bus.$emit('AddScatterChartData', newDataPoint);\n                }\n                break;\n\n              case 'AddLineChartData':\n                if (parts.length === 4) {\n                  const Data_x = parts[1];\n                  const Data_Ra = parts[2];\n                  const Data_Dec = parts[3];\n                  const newDataPoint_Ra = [Data_x, Data_Ra];\n                  const newDataPoint_Dec = [Data_x, Data_Dec];\n                  this.$bus.$emit('AddLineChartData', newDataPoint_Ra, newDataPoint_Dec);\n                }\n                break;\n\n              case 'SetLineChartRange':\n                if (parts.length === 3) {\n                  const min = parts[1];\n                  const max = parts[2];\n                  this.$bus.$emit('SetLineChartRange', min, max);\n                }\n                break;\n\n              case 'GuiderStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('GuiderStatus', status);\n                }\n                break;\n\n              case 'FocusChangeSpeedSuccess':\n                if (parts.length === 2) {\n                  const Speed = parts[1];\n                  this.$bus.$emit('FocusChangeSpeedSuccess', Speed);\n                }\n                break;\n\n\n              case 'FocusPosition':\n                if (parts.length === 3) {\n                  const CurrentPosition = parts[1];\n                  const TargetPosition = parts[2];\n                  this.$bus.$emit('FocusPosition', CurrentPosition, TargetPosition);\n                }\n                break;\n\n              case 'FocusMoveDone':\n                if (parts.length === 3) {\n                  const CurrentPosition = parts[1];\n                  const FWHM = parts[2];\n                  this.$bus.$emit('UpdateFWHM', CurrentPosition, FWHM);\n                  this.$bus.$emit('addData_Point', CurrentPosition, FWHM);\n                }\n                break;\n\n              case 'addMinPointData_Point':\n                if (parts.length === 3) {\n                  const x = parseInt(parts[1]);\n                  const y = parseFloat(parts[2]);\n                  this.$bus.$emit('addMinPointData_Point', x, y);\n                }\n                break;\n              case 'addLineData_Point':\n                if (parts.length === 2) {\n                  const dataList = parts[1].split(',');  // 将字符串分割成数组\n                  const coordinates = [];\n                  for (let i = 0; i < dataList.length - 1; i += 2) {\n                    const x = parseInt(dataList[i]);\n                    const y = parseFloat(dataList[i + 1]);\n                    const coordinate = [x, y];\n                    coordinates.push(coordinate);\n                  }\n                  this.$bus.$emit('addLineData_Point', coordinates);\n                }\n                break;\n              case 'MainCameraSize':\n                if (parts.length === 3) {\n                  const SizeX = parts[1];\n                  const SizeY = parts[2];\n                  this.$bus.$emit('MainCameraSize', SizeX, SizeY);\n                  this.mainCameraSizeX = SizeX;\n                  this.mainCameraSizeY = SizeY;\n                }\n                break;\n\n              case 'MainCameraBinning':\n                if (parts.length === 2) {\n                  this.cameraBin = parseInt(parts[1]);\n                  this.MainCameraConfigItems.find(item => item.label === 'Binning').value = this.cameraBin;\n                  this.$bus.$emit('MainCameraBinning', this.cameraBin);\n                }\n                break;\n\n              case 'fitQuadraticCurve':\n                this.$bus.$emit('ClearfitQuadraticCurve');\n                for (let x = 0; x <= 601; x += 1) {\n                  const a = parts[x];\n                  const b = a.split('|');\n                  if (b.length === 2) {\n                    const x = b[0];\n                    const y = b[1];\n                    this.$bus.$emit('fitQuadraticCurve', x, y);\n                  }\n                }\n                break;\n\n              case 'fitQuadraticCurve_minPoint':\n                const x = parts[1];\n                const y = parts[2];\n                this.$bus.$emit('fitQuadraticCurve_minPoint', x, y);\n                break;\n\n\n              case 'TelescopePark':\n                if (parts.length === 2) {\n                  const Switch = parts[1];\n                  this.$bus.$emit('MountParkSwitch', Switch);\n                }\n                break;\n\n              case 'TelescopeTrack':\n                if (parts.length === 2) {\n                  const Switch = parts[1];\n                  this.$bus.$emit('MountTrackSwitch', Switch);\n                }\n                break;\n\n              case 'MountSetSpeedSuccess':\n                if (parts.length === 2) {\n                  const num = parts[1];\n                  this.$bus.$emit('newMountSlewRate', num);\n                }\n                break;\n\n\n              case 'TelescopePierSide':\n                if (parts.length === 2) {\n                  const Side = parts[1];\n                  this.$bus.$emit('updateMountPierSide', Side);\n                }\n                break;\n\n              case 'TelescopeTotalSlewRate':\n                if (parts.length === 2) {\n                  const num = parts[1];\n                  this.$bus.$emit('MountTotalSlewRate', num);\n                }\n                break;\n\n\n              case 'UpdateScheduleProcess':\n                if (parts.length === 3) {\n                  const RowNum = parts[1];\n                  const Process = parts[2];\n                  this.$bus.$emit('UpdateScheduleProcess', RowNum, Process);\n                }\n                break;\n\n              case 'ExpTimeList':\n                if (parts.length === 2) {\n                  this.$bus.$emit('initExpTimeList', parts[1]);\n                }\n                break;\n\n\n              case 'CameraInExposuring':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('CameraInExposuring', status);\n                }\n                break;\n\n              case 'AutoFocusOver':\n                this.$bus.$emit('AutoFocusOver');\n                break;\n\n              case 'CFWPositionMax':\n                if (parts.length === 2) {\n                  this.$bus.$emit('SetCFWPositionMax', parts[1]);\n\n                  for (let i = 1; i <= parts[1]; i++) {\n                    this.CFWConfigItems.push({ driverType: 'CFW', label: `CFW [${i}]`, value: '', inputType: 'text' });\n                  }\n\n                  this.$bus.$emit('AppSendMessage', 'Vue_Command', 'getCFWList');\n                }\n                break;\n\n\n              case 'SetCFWPositionSuccess':\n                if (parts.length === 2) {\n                  this.$bus.$emit('SetCFWPositionSuccess', parts[1]);\n                }\n                break;\n\n              case 'getCFWList':\n                if (parts.length === 2) {\n                  this.$bus.$emit('initCFWList', parts[1]);\n                }\n                break;\n\n              case 'GuiderSwitchStatus':\n                if (parts.length === 2) {\n                  this.$bus.$emit('GuiderSwitchStatus', parts[1]);\n                }\n                break;\n\n              case 'GuiderLoopExpStatus':\n                if (parts.length === 2) {\n                  this.$bus.$emit('GuiderLoopExpStatus', parts[1]);\n                }\n                break;\n\n              case 'TelescopeRADEC':\n                if (parts.length === 3) {\n                  this.UpdateCirclePos(parts[1], parts[2]);\n                  this.$bus.$emit('updateCurrentLocation', parts[1], parts[2]);\n                }\n                break;\n\n\n              case 'TelescopeStatus':\n                if (parts.length === 2) {\n                  this.UpdateTelescopeStatus(parts[1]);\n                }\n                break;\n\n              case 'MainCameraStatus':\n                if (parts.length === 2) {\n                  this.UpdateMainCameraStatus(parts[1]);\n                }\n                break;\n\n\n              case 'MainCameraTemperature':\n                if (parts.length === 2) {\n                  this.UpdateMainCameraTemperature(parts[1]);\n                }\n                break;\n\n\n              case 'ShowAllImageFolder':\n                if (parts.length === 3) {\n                  this.$bus.$emit('ShowAllImageFolder', parts[1], parts[2]);\n                }\n                break;\n\n\n              case 'ImageFilesName':\n                if (parts.length === 2) {\n                  this.$bus.$emit('ImageFilesName', parts[1]);\n                }\n                break;\n\n\n              case 'USBCheck':\n                if (parts.length === 2) {\n                  const USBdata = parts[1].split(',');\n                  console.log('USB name: ', USBdata[0]);\n                  console.log('USB space: ', USBdata[1]);\n                  this.SendConsoleLogMsg('USB name:' + USBdata[0], 'info');\n                  this.SendConsoleLogMsg('USB space:' + USBdata[1], 'info');\n\n                  this.$bus.$emit('USB_Name_Sapce', USBdata[0], USBdata[1]);\n                }\n                break;\n\n              case 'ImageSaveErroe':\n                if (parts.length === 2) {\n                  const Erroe = parts[1];\n                  if (Erroe === 'USB-Null') {\n                    this.callShowMessageBox('No USB Drive Detected.', 'error');\n                  } else if (Erroe === 'USB-Multiple') {\n                    this.callShowMessageBox('Multiple USB drives detected, please remove excess USB drives.', 'error');\n                  }\n                }\n                break;\n\n              case 'DetectedStars':\n                console.log('Detected', parts.length, 'stars.');\n                this.SendConsoleLogMsg('Detected ' + parts.length + ' stars.', 'info');\n                this.DetectedStarsList = [];\n                for (let i = 0; i < parts.length; i++) {\n                  const a = parts[i];\n                  const b = a.split('|');\n                  if (b.length === 3) {\n                    const x = b[0];\n                    const y = b[1];\n                    const hfr = b[2];\n                    // console.log('Stars at(', x, ',', y, ') with HFR:', hfr);\n                    this.DetectedStarsList.push({ x: x, y: y, hfr: hfr });\n                  }\n                }\n                this.DetectedStarsFinish = true;\n                break;\n\n              case 'SolveImageResult':\n                if (parts.length === 5) {\n                  // this.UpdateCirclePos(parts[1], parts[2]);\n                  console.log('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):', parts[1], ',', parts[2], ',', parts[3], ',', parts[4]);\n                  this.SendConsoleLogMsg('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):' + parts[1] + ',' + parts[2] + ',' + parts[3] + ',' + parts[4], 'info');\n                  this.SolveResultMark(parts[1], parts[2], parts[3], parts[4]);\n                  this.$bus.$emit(\"ImageSolveFinished\", true);\n                  this.$bus.$emit('setParsingProgress', false);\n                }\n                break;\n\n              case 'SolveFovResult':\n                if (parts.length === 9) {\n                  const RaDec = [\n                    { Ra: parts[1], Dec: parts[2] },\n                    { Ra: parts[3], Dec: parts[4] },\n                    { Ra: parts[5], Dec: parts[6] },\n                    { Ra: parts[7], Dec: parts[8] },\n                  ];\n                  this.SolveFovMark(RaDec);\n                }\n                break;\n\n              case 'RealTimeSolveImageResult':\n                if (parts.length === 5) {\n                  console.log('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):', parts[1], ',', parts[2], ',', parts[3], ',', parts[4]);\n                  this.SendConsoleLogMsg('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):' + parts[1] + ',' + parts[2] + ',' + parts[3] + ',' + parts[4], 'info');\n                  const result = this.SolveResultMark_RealTime(parts[1], parts[2], parts[3], parts[4])\n                }\n                break;\n\n              case 'SolveImageSucceeded':\n                console.log('解析同步成功');\n                this.$bus.$emit(\"handleOperationComplete\", \"solve\");\n                this.$bus.$emit('showMsgBox', 'Solve image succeed!', 'success');\n                break;\n\n              case 'SolveImagefailed':\n                this.callShowMessageBox('Solve image faild...', 'error');\n                this.$bus.$emit(\"ImageSolveFinished\", false);\n                this.$bus.$emit('setParsingProgress', false);\n                this.$bus.$emit('MountOperationComplete', 'solve');\n                break;\n\n              case 'MainCameraOffsetRange':\n                if (parts.length === 3) {\n                  console.log('MainCameraOffsetRange:', parts[1], ',', parts[2]);\n                  this.SendConsoleLogMsg('MainCameraOffsetRange:' + parts[1] + ',' + parts[2], 'info');\n                  this.MainCameraOffsetMin = parts[1];\n                  this.MainCameraOffsetMax = parts[2];\n\n                  const OffsetItem = this.MainCameraConfigItems.find(item => item.label === 'Offset');\n                  if (OffsetItem) {\n                    console.log('MainCameraOffsetRange:', parseInt(this.MainCameraOffsetMin, 10), ',', parseInt(this.MainCameraOffsetMax, 10));\n                    OffsetItem.inputMin = parseInt(this.MainCameraOffsetMin, 10);\n                    OffsetItem.inputMax = parseInt(this.MainCameraOffsetMax, 10);\n                  }\n                }\n                break;\n\n              case 'MainCameraGainRange':\n                if (parts.length === 3) {\n                  console.log('MainCameraGainRange:', parts[1], ',', parts[2]);\n                  this.SendConsoleLogMsg('MainCameraGainRange:' + parts[1] + ',' + parts[2], 'info');\n                  this.MainCameraGainMin = parts[1];\n                  this.MainCameraGainMax = parts[2];\n\n                  const gainItem = this.MainCameraConfigItems.find(item => item.label === 'Gain');\n                  if (gainItem) {\n                    console.log('MainCameraGainRange:', parseInt(this.MainCameraGainMin, 10), ',', parseInt(this.MainCameraGainMax, 10));\n                    gainItem.inputMin = parseInt(this.MainCameraGainMin, 10);\n                    gainItem.inputMax = parseInt(this.MainCameraGainMax, 10);\n                  }\n                }\n                break;\n\n              case 'OutputPowerStatus':\n                if (parts.length === 3) {\n                  const index = parseInt(parts[1], 10);\n                  const value = parseInt(parts[2], 10);\n\n                  if (index === 1) {\n                    this.OutPutPower_1_ON = value === 1;\n                  } else if (index === 2) {\n                    this.OutPutPower_2_ON = value === 1;\n                  }\n                }\n                break;\n\n              case 'PHD2StarBoxView':\n                if (parts.length === 2) {\n                  const view = parts[1];\n                  this.$bus.$emit('PHD2StarBoxView', view);\n                }\n                break;\n\n              case 'PHD2StarCrossView':\n                if (parts.length === 2) {\n                  const view = parts[1];\n                  this.$bus.$emit('PHD2StarCrossView', view);\n                }\n                break;\n\n              case 'PHD2StarBoxPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Box_X = parseInt(parts[3], 10);\n                  const Box_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2Box(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y);\n                }\n                break;\n\n              case 'PHD2MultiStarsPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Box_X = parseInt(parts[3], 10);\n                  const Box_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2MultiStars(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y);\n                }\n                break;\n\n              case 'ClearPHD2MultiStars':\n                this.$bus.$emit('ClearPHD2MultiStars');\n                break;\n\n              case 'PHD2StarCrossPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Cross_X = parseInt(parts[3], 10);\n                  const Cross_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2Cross(PHD2ImageSize_X, PHD2ImageSize_Y, Cross_X, Cross_Y);\n                }\n                break;\n\n              case 'QTClientVersion':\n                if (parts.length === 2) {\n                  this.QTClientVersion = parts[1];\n                }\n                break;\n\n\n              case 'CaptureImageSaveStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  if (status === 'Repeat') {\n                    this.callShowMessageBox(this.$t('There is no need to save it again'), 'error');\n                  } else if (status === 'Success') {\n                    this.callShowMessageBox(this.$t('Image saved successfully'), 'success');\n                  } else if (status === 'Null') {\n                    this.callShowMessageBox(this.$t('No images to save'), 'error');\n                  }\n                }\n                break;\n\n              case 'INDIServerDebug':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('INDIServerDebug', message);\n                }\n                break;\n\n              case 'HotspotName':\n                if (parts.length === 2) {\n                  const Name = parts[1];\n                  this.$bus.$emit('HotspotName', Name);\n                }\n                break;\n              case 'EditHotspotNameSuccess':\n                this.$bus.$emit('EditHotspotNameSuccess');\n                break;\n\n              case 'DSLRsSetup':\n                if (parts.length === 2) {\n                  const Name = parts[1];\n                  this.$bus.$emit('ShowDSLRsSetup', Name);\n                }\n                break;\n\n              case 'ConfigureRecovery':\n                if (parts.length === 3) {\n                  const ConfigName = parts[1];\n                  const ConfigValue = parts[2];\n                  console.log('Configure:', ConfigName, ',', ConfigValue);\n                  this.SendConsoleLogMsg('Configure Recovery:' + parts[1] + ',' + parts[2], 'info');\n                  this.$bus.$emit(ConfigName, ConfigValue);\n\n                  if (parts[1] === 'FocalLength') {\n                    this.TelescopesConfigItems[0].value = parts[2];\n                    for (const device of this.devices) {\n                      if (device.driverType === 'Telescopes') {\n                        if (parts[2] === '' || parts[2] === NaN) {\n                          device.device = '';\n                          device.isConnected = false;\n                        } else {\n                          device.device = parts[2] + ' mm';\n                          device.isConnected = true;\n                        }\n                      }\n                    }\n                  }\n\n                  if (parts[1] === 'GuiderFocalLength') {\n                    this.GuiderConfigItems[0].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderFocalLength:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'Coordinates') {\n                    const [latStr, lngStr, isAutoStr] = parts[2].split(',').map(item => item.trim());\n                    const lat = parseFloat(latStr);\n                    const lng = parseFloat(lngStr);\n                    const isAuto = isAutoStr === 'true' || isAutoStr === '1';\n                    this.SetCurrentLocation(lat, lng, isAuto);\n                  }\n\n                  if (parts[1] === 'MultiStarGuider') {\n                    this.GuiderConfigItems[1].value = (parts[2] === 'true');\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'MultiStarGuider:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'GuiderGain') {\n                    this.GuiderConfigItems[2].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderGain:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'CalibrationDuration') {\n                    this.GuiderConfigItems[3].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'CalibrationDuration:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'RaAggression') {\n                    this.GuiderConfigItems[4].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'RaAggression:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'DecAggression') {\n                    this.GuiderConfigItems[5].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DecAggression:' + parts[2]);\n                  }\n                }\n                break;\n\n\n              case 'ConnectDriverSuccess':\n                if (parts.length === 2) {\n                  const device = parts[1];\n                  this.connectDriverSuccess(device);\n                }\n                break;\n\n              case 'ConnectDriverFailed':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.connectDriverFailed(message);\n                }\n                break;\n\n              case 'DisconnectDriverSuccess':\n                if (parts.length === 2) {\n                  const device = parts[1];\n                  this.disconnectDriversuccess(device);\n                }\n                break;\n\n              case 'DisconnectDriverFail':\n                if (parts.length === 2) {\n                  const driver = parts[1];\n                  this.disconnectDriverFail(device)\n                }\n\n              case 'SelectedDriverList':\n                if (parts.length >= 3) {\n                  const deviceObjects = parts.slice(1).reduce((acc, part, index, array) => {\n                    if (index % 2 === 0) {\n                      acc.push({ [array[index]]: array[index + 1] });\n                    }\n                    return acc;\n                  }, []);\n                  this.loadSelectedDriverList(deviceObjects);\n                }\n                break;\n\n\n              case 'BindDeviceList':\n                if (parts.length >= 3) {\n                  const deviceObjects = parts.slice(1).reduce((acc, part, index, array) => {\n                    if (index % 2 === 0) {\n                      acc.push({ [array[index]]: array[index + 1] });\n                    }\n                    return acc;\n                  }, []);\n                  this.loadBindDeviceList(deviceObjects);\n                }\n                break;\n\n\n              case 'BindDeviceTypeList':\n                if (parts.length >= 5) { // 确保至少有五个参数加上前缀\n                  const deviceTypeObjects = [];\n                  for (let i = 1; i < parts.length; i += 4) {\n                    const deviceTypeObject = {\n                      Type: parts[i],\n                      DeviceName: parts[i + 1],\n                      DriverName: parts[i + 2],\n                      isbind: parts[i + 3] == \"true\" ? true : false,\n                    };\n                    deviceTypeObjects.push(deviceTypeObject);\n                  }\n                  this.loadBindDeviceTypeList(deviceTypeObjects);\n                }\n                break;\n\n              case 'deleteDeviceAllocationList':\n                if (parts.length === 2) {\n                  const deviceName = parts[1];\n                  this.deleteDeviceAllocationList(deviceName);\n                }\n                break;\n\n              case 'deleteDeviceTypeAllocationList':\n                if (parts.length === 2) {\n                  const deviceType = parts[1];\n                  if (deviceType != '') {\n                    this.$bus.$emit('deleteDeviceTypeAllocationList', deviceType);\n                  }\n                  if (deviceType == 'CFW') {\n                    for (let i = 0; i < this.devices.length; i++) {\n                      if (this.devices[i].driverType == 'CFW') {\n                        this.devices[i].isConnected = false;\n                        this.devices[i].device = '';\n                        this.devices[i].driverName = '';\n                        this.devices[i].BaudRate = 9600;\n                        this.$bus.$emit('CFWConnected', 0);\n                      }\n                    }\n                  }\n                }\n                break;\n\n              case 'ParseInfoEmitted':\n                if (parts.length === 2) {\n                  const progress = parts[1];\n                  this.$bus.$emit('ParseInfoEmitted', progress);\n                }\n                break;\n\n              case 'GuiderUpdateStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('GuiderUpdateStatus', parseInt(status, 10));\n                }\n                break;\n\n              case 'LoopSolveImageFinished':\n                this.$bus.$emit('LoopSolveImageFinished');\n                break;\n\n              case 'disconnectDevicehasortherdevice':\n                if (parts.length === 2) {\n                  const drivername = parts[1];\n                  this.showSelectdisconnectDriver(drivername);\n                }\n                break;\n\n              case 'getFocuserMoveState':\n                this.$bus.$emit('getFocuserMoveState');\n                break;\n\n              case 'FocusMoveToLimit':\n                if (parts.length === 2) {\n                  const errorlog = parts[1];\n                  this.callShowMessageBox(errorlog, 'error');\n                }\n                break;\n\n              case 'startFocusLoopFailed':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('startFocusLoopFailed', message);\n                }\n                break;\n\n              case 'setFocuserLoopingState':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('setFocuserLoopingState', message);\n                  if (message == 'true') {\n                    this.isFocusLoopShooting = true;\n                  } else {\n                    this.isFocusLoopShooting = false;\n                  }\n                }\n                break;\n\n              case 'focuserROIStarsList':\n                if (parts.length === 4) {\n                  const x = parts[1];\n                  const y = parts[2];\n                  const HFR = parts[3];\n                  this.focuserROIStarsList.push({ x, y, HFR });\n                }\n                break;\n\n              // case 'clearFocuserROIStarsList':\n              //   this.focuserROIStarsList = [];\n              //   break;\n\n              case 'setSelectStarPosition':\n                if (parts.length === 4) {\n                  this.DrawSelectStarX = parseFloat(parts[1]);\n                  this.DrawSelectStarY = parseFloat(parts[2]);\n                  this.DrawSelectStarHFR = parseFloat(parts[3]);\n                }\n                break;\n\n              case 'SetRedBoxState':\n                if (parts.length === 4) {\n                  const length = parseInt(parts[1]);\n                  this.ROI_x = parseFloat(parts[2]);\n                  this.ROI_y = parseFloat(parts[3]);\n\n                  this.setRedBoxState(length, this.ROI_x, this.ROI_y);\n                  console.log('设置红色ROI框: ', length, this.ROI_x, this.ROI_y);\n                }\n                break;\n\n              case 'SetVisibleArea':\n                if (parts.length === 4) {\n                  this.visibleX = parseFloat(parts[1]);\n                  this.visibleY = parseFloat(parts[2]);\n                  this.scale = parseFloat(parts[3]);\n                  this.$bus.$emit('setScale', this.scale);\n                  console.log('设置可见区域: ', this.visibleX, this.visibleY, this.scale);\n                  this.SendConsoleLogMsg('update VisibleArea x=' + this.visibleX + ', y=' + this.visibleY + ', scale=' + this.scale, 'info');\n                }\n                break;\n\n              case 'SetSelectStars':\n                if (parts.length === 3) {\n                  this.selectStarX = parseFloat(parts[1]);\n                  this.selectStarY = parseFloat(parts[2]);\n                  this.SendConsoleLogMsg('update SelectStars x=' + this.selectStarX + ', y=' + this.selectStarY, 'info');\n                }\n                break;\n\n              case 'updateCPUInfo':\n                if (parts.length === 3) {\n                  let cpuTemp = parseFloat(parts[1]);\n                  let cpuUsage = parseFloat(parts[2]);\n                  this.cpuTemp = isNaN(cpuTemp) ? null : (cpuTemp % 1 === 0 ? cpuTemp : cpuTemp.toFixed(1));  // 如果 cpuTemp 是 NaN，设置为 null，否则如果 cpuTemp 是整数，就不保留小数，否则保留一位小数\n                  this.cpuUsage = isNaN(cpuUsage) ? null : (cpuUsage % 1 === 0 ? cpuUsage : cpuUsage.toFixed(1));  // 如果 cpuUsage 是 NaN，设置为 null，否则如果 cpuUsage 是整数，就不保留小数，否则保留一位小数\n                  this.$bus.$emit('updateCPUInfo', this.cpuTemp, this.cpuUsage);\n                }\n                break;\n\n              case 'TianWen':\n                if (parts.length === 4) {\n                  const notice_type = parts[1];\n                  const ra = parts[2];\n                  const dec = parts[3];\n                  this.$bus.$emit('TianWen', notice_type, ra, dec);\n                }\n                break;\n\n              case 'setMainCameraParameters':\n                if (parts.length >= 3) {\n                  let parameters = {};\n                  for (let i = 1; i < parts.length; i += 2) {\n                    const parameter = parts[i];\n                    const value = parts[i + 1];\n                    parameters[parameter] = value;\n                  }\n                  this.setMainCameraParameters(parameters);\n                }\n                break;\n\n              case 'localMessage':\n                if (parts.length === 4) {\n                  const lat = parts[1];\n                  const lon = parts[2];\n                  const language = parts[3];\n                  this.SendConsoleLogMsg('2------------获得参数设置localMessage: ' + lat + ',' + lon + ',' + language, 'info');\n                  if (language == 'zh') {\n                    this.$bus.$emit('ClientLanguage', 'cn');\n                  } else {\n                    this.$bus.$emit('ClientLanguage', 'en');\n                  }\n                  this.$bus.$emit('setLocationLatAndLon', lat, lon);\n                }\n                break;\n\n              case 'isAutoLocation':\n                if (parts.length === 2) {\n                  const isAutoLocation = parts[1];\n                  this.$bus.$emit('isAutoLocation', isAutoLocation);\n                }\n                break;\n\n              case 'sendGetLocation':\n                if (parts.length === 3) {\n                  const lat = parts[1];\n                  const lon = parts[2];\n                  this.SendConsoleLogMsg('sendGetLocation: ' + lat + ',' + lon, 'info');\n                  this.$bus.$emit('sendGetLocation', lat, lon);\n                }\n                break;\n\n              case 'MainCameraCFA':\n                if (parts.length === 2) {\n                  let value = parts[1];\n                  if (value === '') {\n                    value = 'null';\n                  } else if (value === 'GRBG') {\n                    value = 'GR';\n                  } else if (value === 'GBRG') {\n                    value = 'GB';\n                  } else if (value === 'BGGR') {\n                    value = 'BG';\n                  } else if (value === 'RG') {\n                    value = 'RGGB';\n                  }\n                  this.ImageCFA = value;\n                  console.log(\"获取到的主相机参数  MainCameraCFA: \", this.ImageCFA);\n                  this.MainCameraConfigItems.find(item => item.label === 'ImageCFA').value = this.ImageCFA;\n                }\n                break;\n\n              case 'CameraNotIdle':\n                this.callShowMessageBox('Camera is not idle', 'error');\n                this.$bus.$emit('MountOperationComplete', 'solve');\n                break;\n\n              case 'MainCameraNotConnect':\n                this.callShowMessageBox('Main Camera is not connect', 'error');\n                this.$bus.$emit('MountOperationComplete', 'solve');\n                break;\n              case 'ServerInitSuccess':\n                this.callShowMessageBox('Server init success', 'success');\n                window.location.reload();\n                break;\n              case 'PolarAlignmentState':\n                if (parts.length === 4) {\n                  const state = parts[1];\n                  const message = parts[2];\n                  const percentage = parts[3];\n                  this.$bus.$emit('PolarAlignmentState', state, message, percentage);\n                }\n                break;\n              case 'PolarAlignmentAdjustmentGuideData':\n                if (parts.length === 21) {  // 从17改为21\n                  const ra = parseFloat(parts[1]);\n                  const dec = parseFloat(parts[2]);\n                  // 新增：四个角点\n                  const ra0 = parseFloat(parts[3]);\n                  const dec0 = parseFloat(parts[4]);\n                  const ra1 = parseFloat(parts[5]);\n                  const dec1 = parseFloat(parts[6]);\n                  const ra2 = parseFloat(parts[7]);\n                  const dec2 = parseFloat(parts[8]);\n                  const ra3 = parseFloat(parts[9]);\n                  const dec3 = parseFloat(parts[10]);\n\n                  const targetra = parseFloat(parts[11]);\n                  const targetdec = parseFloat(parts[12]);\n                  const offsetra = parseFloat(parts[13]);\n                  const offsetdec = parseFloat(parts[14]);\n                  const adjustmentra = parts[15];\n                  const adjustmentdec = parts[16];\n                  const fakePolarRA = parseFloat(parts[17]);\n                  const fakePolarDEC = parseFloat(parts[18]);\n                  const realPolarRA = parseFloat(parts[19]);\n                  const realPolarDEC = parseFloat(parts[20]);\n\n\n                  // console.log('自动对焦绘制数据: ', ra, dec, targetra, targetdec, fakePolarRA, fakePolarDEC, realPolarRA, realPolarDEC);\n                  console.log('四角点数据: ', ra0, dec0, ra1, dec1, ra2, dec2, ra3, dec3);\n\n                  // 现有事件保持不变（使用计算的max/min值兼容）\n                  this.$bus.$emit('FieldDataUpdate', [ra, dec, ra0, dec0, ra1, dec1, ra2, dec2, ra3, dec3, targetra, targetdec, fakePolarRA, fakePolarDEC, realPolarRA, realPolarDEC]);\n\n                  // console.log('自动对焦显示更新数据: ', offsetra, offsetdec, adjustmentra, adjustmentdec);\n                  this.$bus.$emit('updateCardInfo', ra, dec, targetra, targetdec, offsetra, offsetdec, adjustmentra, adjustmentdec, \"deg\");\n\n                }\n                break;\n\n              case 'focusMoveFailed':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.callShowMessageBox(message, 'error');\n                  this.$bus.$emit('focusMoveFailed', message);\n                }\n\n              case 'focusMoveFailed':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.callShowMessageBox(message, 'error');\n                  this.$bus.$emit('focusMoveFailed', message);\n                }\n                break;\n\n              case 'MeridianETA_hms': {\n                if (parts.length >= 4) {\n                  const h = parts[1];\n                  const m = parts[2];\n                  const s = parts[3];\n\n                  const hms = `${h}:${m}:${s}`;\n                  const item = this.MountConfigItems.find(i => i.label === 'Flip ETA');\n                  if (item) {\n                    item.value = hms;\n                    item.displayValue = hms;\n                  }\n                }\n                break;\n              }\n\n              case 'AutoFlip':\n                if (parts.length >= 2) {\n                  const isAutoFlip = parts[1];\n                  // 查找是否已存在 \"AutoFlip\" 项\n                  let item = this.MountConfigItems.find(i => i.label === 'AutoFlip');\n                  if (item) {\n                    // 已存在 → 更新\n                    item.value = isAutoFlip == 'true';\n                  } else {\n                    // 不存在 → 新增\n                    this.MountConfigItems.push({ driverType: 'Mount', label: 'AutoFlip', value: isAutoFlip == 'true', inputType: 'switch' },);\n                  }\n                }\n                break;\n\n              // case 'MinutesPastMeridian':\n              //   if (parts.length >= 3) {\n              //     const EastMinutesPastMeridian = parts[1];\n              //     const WestMinutesPastMeridian = parts[2];\n              //     let item = this.MountConfigItems.find(i => i.label === 'EastMinutesPastMeridian');\n              //     if (item) {\n              //       item.value = EastMinutesPastMeridian;\n              //     } else {\n              //       this.MountConfigItems.push({ driverType: 'Mount', label: 'EastMinutesPastMeridian', value: EastMinutesPastMeridian,min:-180,max:180, inputType: 'number' },);\n              //     }\n              //     item = this.MountConfigItems.find(i => i.label === 'WestMinutesPastMeridian');\n              //     if (item) {\n              //       item.value = WestMinutesPastMeridian;\n              //     } else {\n              //       this.MountConfigItems.push({ driverType: 'Mount', label: 'WestMinutesPastMeridian', value: WestMinutesPastMeridian,min:-180,max:180, inputType: 'number' },);\n              //     }\n              //   }\n              //   break;\n              case 'EastMinutesPastMeridian':\n                if (parts.length === 2) {\n                  const EastMinutesPastMeridian = parts[1];\n                  let item = this.MountConfigItems.find(i => i.label === 'EastMinutesPastMeridian');\n                  if (item) {\n                    item.value = EastMinutesPastMeridian;\n                  } else {\n                    this.MountConfigItems.push({ driverType: 'Mount', label: 'EastMinutesPastMeridian', value: EastMinutesPastMeridian, min: -180, max: 180, inputType: 'number' },);\n                  }\n                }\n                break;\n              case 'WestMinutesPastMeridian':\n                if (parts.length === 2) {\n                  const WestMinutesPastMeridian = parts[1];\n                  let item = this.MountConfigItems.find(i => i.label === 'WestMinutesPastMeridian');\n                  if (item) {\n                    item.value = WestMinutesPastMeridian;\n                  } else {\n                    this.MountConfigItems.push({ driverType: 'Mount', label: 'WestMinutesPastMeridian', value: WestMinutesPastMeridian, min: -180, max: 180, inputType: 'number' },);\n                  }\n                }\n                break;\n              case 'GotoThenSolve':\n                if (parts.length === 2) {\n                  const GotoThenSolve = parts[1];\n                  let item = this.MountConfigItems.find(i => i.label === 'GotoThenSolve');\n                  if (item) {\n                    item.value = GotoThenSolve;\n                  }\n                }\n                break;\n\n              case 'addFwhmNow':\n                if (parts.length >= 2) {\n                  const fwhm = parseFloat(parts[1]);\n                  console.log('Received addFwhmNow:', fwhm);\n                  this.$bus.$emit('addFwhmNow', fwhm);\n                }\n                break;\n\n              default:\n                console.warn('未处理命令: ', data.message);\n                break;\n            }\n          }\n        }\n        else if (data.type === 'QT_Confirm') {\n          // 处理确认消息\n          const messageId = data.msgid;\n          this.handleMessageResponse(messageId);\n        } else if (data.type === 'Process_Command') {\n          console.log('Process_Command: ', data.message);\n          // 处理返回消息\n          const parts = data.message.split(':');\n          if (parts[0] === 'qtServerIsOver') {\n            this.callShowMessageBox('QT Server is over', 'error');\n            this.ShowConfirmDialog('restart', 'QT server encountered a segmentation fault or is frozen, please restart or exit!', 'restartQtServer');\n          }\n          else if (parts[0] === 'checkHasNewUpdatePack') {\n            if (parts.length === 2) {\n              const version = parts[1];\n              this.SendConsoleLogMsg('获取到更新包版本: ' + version, 'info');\n\n              this.ShowConfirmDialog('ForceUpdate', this.$t('checkHasNewUpdatePack') + ': ' + version + '，' + this.$t('updateConfirm'), 'updateCurrentClient:' + version);\n            }\n          }\n          else if (parts[0] === 'No_update_pack_found') {\n            this.callShowMessageBox(this.$t('No_update_pack_found'), 'error');\n          } else if (parts[0] === 'update_progress') {\n            this.$bus.$emit('update_progress', data.message);\n          } else if (parts[0] === 'update_error') {\n            this.$bus.$emit('update_error', data.message);\n          } else if (parts[0] === 'update_success') {\n            this.$bus.$emit('update_success', data.message);\n          } else if (parts[0] === 'testQtServerProcess') {\n\n          }\n          else {\n            console.warn('未处理命令: ', data.message);\n          }\n        }\n\n        this.receivedMessages.push(data.message); // 将接收到的消息添加到数组中\n      };\n\n      this.websocket.onerror = (error) => {\n        const errorDetails = {\n          type: error.type,\n          timestamp: new Date().toISOString(),\n          url: this.WebSocketUrl,\n          readyState: this.websocket.readyState,\n          protocol: this.websocket.protocol,\n          extensions: this.websocket.extensions\n        };\n        console.error('WebSocket Error Details:', errorDetails);\n        this.SendConsoleLogMsg('WebSocket Error: ' + JSON.stringify(errorDetails), 'error');\n        this.websocketState = 'error';\n        this.networkDisconnected = true;\n      };\n\n      this.websocket.onclose = () => {\n        console.log('QHYCCD | WebSocket disconnected');\n        this.websocketState = 'disconnected';\n        this.networkDisconnected = true; // WebSocket连接关闭时设置网络连接状态\n        console.log('QHYCCD | WebSocket disconnected');\n        this.$bus.$emit('ShowNetStatus', 'false');\n\n        // 设置一个定时器，1秒后检查网络状态\n        this.disconnectTimeout = setTimeout(() => {\n          if (this.networkDisconnected) { // 如果1秒后仍然断开\n            this.callShowMessageBox('WebSocket disconnected', 'error');\n            this.disconnectTimeoutTriggered = true;\n          }\n        }, 1000); // 1秒后执行\n\n        // 启动自动重连\n        this.reconnectWebSocket();\n      };\n    },\n\n    // 自动重连\n    reconnectWebSocket() {\n      setTimeout(() => {\n        console.log('QHYCCD | WebSocket reconnected');\n        this.SendConsoleLogMsg('WebSocket reconnected.', 'info');\n        this.connect();\n      }, 2000); // 2秒后尝试重新连接\n    },\n    // 自动重连\n\n    //监听网络连接状态\n    setupNetworkStatusListener() {\n      window.addEventListener('online', () => {\n        // 检查断开连接的定时器是否已经触发\n        if (this.disconnectTimeoutTriggered) {\n          this.callShowMessageBox('WebSocket connected', 'success');\n        }\n        clearTimeout(this.disconnectTimeout); // 清除断开连接的定时器\n        this.networkDisconnected = false; // 网络恢复时重置网络连接状态\n        this.$bus.$emit('ShowNetStatus', 'true');\n        this.StatusRecovery();\n        this.reconnectWebSocket(); // 网络恢复后自动重连WebSocket\n      });\n\n      window.addEventListener('offline', () => {\n        this.networkDisconnected = true; // 网络断开时设置网络连接状态\n        this.$bus.$emit('ShowNetStatus', 'false');\n        this.disconnectTimeoutTriggered = false; // 初始化断开连接定时器触发标志\n        // 设置一个定时器，1秒后检查网络状态\n        this.disconnectTimeout = setTimeout(() => {\n          if (this.networkDisconnected) { // 如果1秒后仍然断开\n            this.disconnectTimeoutTriggered = true; // 标记定时器已触发\n            this.callShowMessageBox('WebSocket disconnected', 'error');\n          }\n        }, 1000); // 1秒后执行\n      });\n    },\n    //监听网络连接状态\n\n    sendMessage(type, message) {\n      console.log(\"QHYCCD | sendMessage: \", message);\n\n      const messageId = this.generateMessageId(); // 生成唯一的消息ID\n      const messageObj = { type: type, msgid: messageId, message: message }; // 创建包含类型和消息的对象\n      const messageJson = JSON.stringify(messageObj); // 将消息对象转换为 JSON 字符串\n      const messageState = { msgid: messageId, text: messageJson, success: false }; // 创建包含消息和状态信息的对象\n\n      if (this.websocket.readyState === WebSocket.OPEN) {\n        this.websocket.send(messageJson);\n        // messageState.success = true; // 设置消息为成功\n      }\n      this.sentMessages.push(messageState); // 添加消息对象到已发送的消息数组\n    },\n\n    generateMessageId() {\n      // 使用时间戳和计数器生成唯一的消息ID\n      return Date.now() + \"-\" + (this.messageCounter++);\n    },\n\n    handleMessageResponse(messageId) {\n      // 根据返回的消息ID更新消息发送状态\n      const lastMessage = this.sentMessages[this.sentMessages.length - 1];\n      if (lastMessage && lastMessage.msgid === messageId) {\n        lastMessage.success = true;\n      }\n    },\n\n    // 消息框\n    callShowMessageBox(msg, type) {\n      console.log('QHYCCD | callShowMessageBox:', msg, type);\n      this.SendConsoleLogMsg(msg, type);\n      this.$bus.$emit('showMsgBox', msg, type);\n    },\n    // 消息框\n\n    locationClicked: function () {\n      this.$bus.$emit('Vue_Command', 'localMessage'); // 获取位置信息\n      this.$store.commit('toggleBool', 'showLocationDialog');\n\n      this.$bus.$emit('ResetTime');\n    },\n\n    SetCurrentLocation(lat, lng, isAuto) {\n      console.log('SetCurrentLocation:', lat, ',', lng);\n      this.$bus.$emit('SendConsoleLogMsg', 'Set Current Location:' + lat + ',' + lng, 'info');\n      this.$bus.$emit('PolarPointAltitude', lat);\n      this.$bus.$emit('resetLocation', lat, lng, isAuto);\n      const loc = {\n        short_name: 'Unknown',\n        country: 'Unknown',\n        lng: lng,\n        lat: lat,\n        alt: 0,\n        accuracy: 0,\n        street_address: ''\n      }\n      this.$store.commit('setCurrentLocation', loc);\n\n      this.$bus.$emit('ShowPositionInfo', lat, lng);\n\n      setTimeout(() => {\n        this.$bus.$emit('ResetTime');\n      }, 1000);\n    },\n    // 状态恢复\n    StatusRecovery() {\n      // this.sendMessage('SendConsoleLogMsg', '网络连接恢复，恢复当前状态!', 'warning');\n      this.getQTClientVersion();                // 获取QTClient版本\n      this.sendMessage('Vue_Command', 'getROIInfo'); // 获取ROI信息\n      this.sendMessage('Vue_Command', 'localMessage'); // 获取位置信息\n      this.sendMessage('Vue_Command', 'getLastSelectDevice'); // 获取上一次选择的设备\n      this.sendMessage('Vue_Command', 'getMainCameraParameters'); // 获取主相机参数\n      this.sendMessage('Vue_Command', 'getMountParameters'); // 获取赤道仪UI信息\n      this.RecalibratePolarAxis(); // 重新校准极轴\n      this.sendMessage('Vue_Command', 'getStagingSolveResult'); // 获取定标结果\n      this.sendMessage('Vue_Command', 'getFocuserLoopingState'); // 获取焦距器循环状态\n      this.sendMessage('Vue_Command', 'getStagingScheduleData'); // 获取定标计划数据\n      this.sendMessage('Vue_Command', 'getStagingSolveResult'); // 获取定标结果\n      this.sendMessage('Vue_Command', 'getGPIOsStatus'); // 获取GPIO状态\n      // this.sendMessage('Vue_Command', 'getStagingImage'); // 获取最后拍摄的图像\n      this.sendMessage('Vue_Command', 'getPolarAlignmentState'); // 获取极轴对齐状态\n\n\n      this.disconnectTimeoutTriggered = false;\n    },\n\n    openPowerManagerPage() {\n      this.isOpenDevicePage = false;\n      this.isOpenPowerPage = true;\n\n      this.drawer_2 = true;\n    },\n\n    QuitToMainApp() {\n      this.sendMessage('Broadcast_Msg', 'CloseWebView');\n    },\n\n    selectDevice(device) {\n      if (!this.haveDeviceConnect || (this.haveDeviceConnect) || device.driverType === 'Telescopes') {\n        this.isOpenDevicePage = true;\n        this.isOpenPowerPage = false;\n\n        if (device.isget === false) {\n          // device.isget = true;\n          this.sendMessage('Vue_Command', 'SelectIndiDriver:' + device.type + \":\" + device.ListNum);\n          this.drivers = [];\n        }\n\n        this.CurrentDriverType = device.driverType;\n        this.DeviceIsConnected = device.isConnected;\n        this.BaudRateSelected = device.BaudRate;\n        if (device.driverType === 'Telescopes') {\n          this.DeviceIsConnected = true;\n        }\n\n        this.drawer_2 = true;\n\n        this.ToBeConnectDevice = [];\n        this.devicesList.forEach(devicesList => {\n          if (devicesList.type === this.CurrentDriverType) {\n            this.ToBeConnectDevice.push(devicesList);\n          }\n        });\n      } else {\n        this.callShowMessageBox('The device is not connected.', 'error');\n      }\n\n    },\n\n    CurrentConfigItems() {\n      console.log('CurrentConfigItems: ', this.CurrentDriverType + 'ConfigItems');\n      switch (this.CurrentDriverType) {\n        case 'Guider':\n          return this.GuiderConfigItems;\n        case 'MainCamera':\n          return this.MainCameraConfigItems;\n        case 'Mount':\n          return this.MountConfigItems;\n        case 'Telescopes':\n          return this.TelescopesConfigItems;\n        case 'Focuser':\n          return this.FocuserConfigItems;\n        case 'PoleCamera':\n          return this.PoleCameraConfigItems;\n        case 'CFW':\n          return this.CFWConfigItems;\n        default:\n          return [];\n      }\n    },\n\n    confirmDriver() {\n      // 确定驱动的逻辑\n      console.log(\"QHYCCD | confirmDriver: \", this.selectedDriver);\n      this.SendConsoleLogMsg('Confirm Indi Driver:' + this.selectedDriver, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConfirmIndiDriver:' + this.selectedDriver + ':' + this.BaudRateSelected);\n      this.confirmDriverType = this.CurrentDriverType;\n      this.loadingSelectDriver = true;\n\n      this.devices.forEach(device => {\n        if (device.driverType === this.CurrentDriverType) {\n          device.device = this.selectedDriver;\n          device.driverName = this.selectedDriver;\n          device.BaudRate = this.BaudRateSelected;\n        }\n      });\n    },\n    clearDriver() {\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ClearIndiDriver');\n      this.SendConsoleLogMsg('Clear Indi Driver', 'info');\n      this.devices.forEach(device => {\n        if (device.driverType === this.CurrentDriverType) {\n          device.device = '';\n          device.driverName = '';\n          device.BaudRate = 9600;\n        }\n      });\n      this.selectedDriver = '';\n    },\n    confirmDevice() {\n      // 确定设备的逻辑\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConfirmIndiDevice:' + this.selectedDevice + ':' + this.selectedDriver);\n      // this.$bus.$emit('AppUpdateDevices', this.CurrentDriverType, this.selectedDevice);\n      this.updateDevices(this.CurrentDriverType, this.selectedDevice);\n    },\n\n    updateDevices(driverType, newDevice) {    // 手动选择\n      this.devices.forEach(device => {\n        if (device.driverType === driverType) {\n          device.device = newDevice;\n        }\n      });\n    },\n\n    updateDevices_(ListNum, newDevice) {    // 从文件导入\n      this.devices.forEach(device => {\n        if (device.ListNum === ListNum) {\n          device.device = newDevice;\n        }\n      });\n      this.loadingConnectAllDevice = false;\n    },\n\n    updateDevicesConnect(type, DeviceName, DriverName, isBind = true) {    // 连接成功\n      this.SendConsoleLogMsg('updateDevicesConnect' + type + ' ' + DeviceName + ' ' + DriverName + ' ' + isBind, 'info');\n      this.devices.forEach(device => {\n        if (device.driverType === type) {\n          if (isBind == true) {\n            device.device = DeviceName;\n          } else {\n            device.device = \"Not Bind Device\";\n          }\n          device.driverName = DriverName;\n          device.isConnected = true;\n        }\n      });\n      this.callShowMessageBox(DeviceName + ' success connected', 'success');\n      this.haveDeviceConnect = true;\n      this.loadingConnectAllDevice = false;\n\n      if (type === 'MainCamera') {\n        this.$bus.$emit('MainCameraConnected', 1);\n        console.log('MainCamera is Connected.');\n      } else if (type === 'Mount') {\n        this.$bus.$emit('MountConnected', 1);\n        console.log('Mount is Connected.');\n      } else if (type === 'CFW') {\n        this.$bus.$emit('CFWConnected', 1);\n        console.log('Mount is Connected.');\n      } else if (type === 'Focuser') {\n        this.$bus.$emit('FocuserConnected', 1);\n        console.log('Focuser is Connected.');\n      } else if (type === 'Guider') {\n        this.$bus.$emit('GuiderConnected', 1);\n        console.log('Guider is Connected.');\n      }\n      console.log('updateDevicesConnect: ', type, DeviceName, DriverName, isBind);\n\n      this.$bus.$emit('DeviceConnectSuccess', type, DeviceName, DriverName, isBind);\n    },\n    startConnectBtnPress(event) {\n      // 如果是触摸事件，标记并处理\n      if (event.type === 'touchstart') {\n        this.isTouching = true;\n        this.isConnectBtnLongPress = false; // 重置长按标记\n        // this.ConnectBtnPressTimer = setTimeout(() => {\n        //   this.isConnectBtnLongPress = true; // 标记为长按\n        //   this.handleConnectBtnLongPress();\n        // }, this.ConnectBtnlongPressThreshold);\n        this.handleConnectBtnClick();\n      }\n      // 如果是鼠标事件，且没有正在进行的触摸事件，则处理\n      else if (event.type === 'mousedown' && !this.isTouching) {\n        this.isConnectBtnLongPress = false; // 重置长按标记\n        // this.ConnectBtnPressTimer = setTimeout(() => {\n        //   this.isConnectBtnLongPress = true; // 标记为长按\n        //   this.handleConnectBtnLongPress();\n        // }, this.ConnectBtnlongPressThreshold);\n        this.handleConnectBtnClick();\n      }\n    },\n    endConnectBtnPress(event) {\n      // 如果是触摸事件，处理并重置标记\n      if (event.type === 'touchend') {\n        clearTimeout(this.ConnectBtnPressTimer); // 清除定时器\n        // if (!this.isConnectBtnLongPress) {\n        //   this.handleConnectBtnClick(); // 如果不是长按，则触发点击事件\n        // }\n        this.handleConnectBtnClick();\n        this.ConnectBtnPressTimer = null; // 重置定时器\n        this.isTouching = false; // 重置触摸标记\n      }\n      // 如果是鼠标事件，且没有正在进行的触摸事件，则处理\n      else if (event.type === 'mouseup' && !this.isTouching) {\n        clearTimeout(this.ConnectBtnPressTimer); // 清除定时器\n        // if (!this.isConnectBtnLongPress) {\n        //   this.handleConnectBtnClick(); // 如果不是长按，则触发点击事件\n        // }\n        this.handleConnectBtnClick();\n        this.ConnectBtnPressTimer = null; // 重置定时器\n      }\n    },\n    handleConnectBtnClick() {\n      if (this.haveDeviceConnect) {\n        this.callShowMessageBox('Please disconnect all devices first.', 'error');\n        return;\n      }\n      if (!this.ConnectBtnCanClick) return; // 如果不可点击，直接返回\n      this.ConnectBtnCanClick = false; // 设置为不可点击\n      console.log(\"Connect Button clicked\");\n\n      this.connectAllDevice();\n\n      // 恢复点击权限\n      setTimeout(() => {\n        this.ConnectBtnCanClick = true;\n      }, 1000); // 1秒后恢复\n    },\n    handleConnectBtnLongPress() {\n      if (this.haveDeviceConnect) {\n        this.callShowMessageBox('Please disconnect all devices first.', 'error');\n        return;\n      }\n      // 长按事件的处理\n      console.log(\"Connect Button long pressed\");\n\n      this.autoConnectAllDevice();\n    },\n    connectAllDevice() {\n      console.log(\"QHYCCD | connectAllDevice.\");\n      this.SendConsoleLogMsg('Connect All Device', 'info');\n      this.sendMessage('Vue_Command', 'connectAllDevice');\n      this.loadingConnectAllDevice = true;\n    },\n    autoConnectAllDevice() {\n      console.log(\"QHYCCD | autoConnectAllDevice.\");\n      this.SendConsoleLogMsg('Auto Connect All Device', 'info');\n      this.sendMessage('Vue_Command', 'autoConnectAllDevice');\n      this.loadingConnectAllDevice = true;\n    },\n\n    disconnectAllDevice(confirm) {\n      // 检查是否有设备的 isConnected 属性为 true\n      // const hasConnectedDevices = this.devices.some(device => device.isConnected);\n\n      if (this.haveDeviceConnect) {\n        if (confirm === false) {\n          this.ShowConfirmDialog('Confirm', 'Are you sure you want to disconnect all devices?', 'disconnectAllDevice');\n        } else {\n          this.sendMessage('Vue_Command', 'disconnectAllDevice');\n          this.SendConsoleLogMsg('Disconnect All Device', 'info');\n          this.haveDeviceConnect = false;\n          // this.devices.forEach(device => {\n          //   device.isConnected = false;\n          //   // device.device = '';\n          // });\n\n          this.$bus.$emit('MainCameraConnected', 0);\n          this.$bus.$emit('MountConnected', 0);\n          this.$bus.$emit('CFWConnected', 0);\n          this.$bus.$emit('FocuserConnected', 0);\n          this.$bus.$emit('GuiderConnected', 0);\n          this.clearDeviceList();\n        }\n      } else {\n        this.callShowMessageBox('No devices have been connected.', 'error');\n      }\n      this.selectedDriver = '';\n    },\n\n    clearDeviceList() {\n      this.devices.forEach(device => {\n        device.device = device.driverName;\n        device.isConnected = false;\n        device.isget = false;\n        device.BaudRate = 9600;\n      });\n      this.ToBeConnectDevice = [];\n      this.devicesList = [];\n      this.drivers = [];\n      this.$bus.$emit('clearDeviceAllocationList');\n    },\n\n    SwitchOutPutPower(index, isPowerON) {\n      if (isPowerON) {\n        this.drawer_2 = false;\n        this.ShowConfirmDialog('Output Power:' + index, 'Are you sure you want to turn off this output power?', 'SwitchOutPutPower');\n      } else {\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'SwitchOutPutPower:' + index);\n        this.SendConsoleLogMsg('Switch OutPutPower' + index, 'info');\n      }\n    },\n\n    RestartRaspberryPi() {\n      this.drawer_2 = false;\n      this.ShowConfirmDialog('Restart', 'Are you sure you want to restart the Raspberry Pi?', 'RestartRaspberryPi');\n    },\n\n    ShutdownRaspberryPi() {\n      this.drawer_2 = false;\n      this.ShowConfirmDialog('Shut Down', 'Are you sure you want to shut down the Raspberry Pi?', 'ShutdownRaspberryPi');\n    },\n\n    ForceUpdate() {\n      this.drawer_2 = false;\n      this.ShowConfirmDialog('Force Update', 'Are you sure you want to force update the Raspberry Pi?', 'ForceUpdate');\n    },\n\n    ReturnConnectedDevices() {\n      this.devices.forEach(device => {\n        if (device.driverType === 'MainCamera') {\n          if (device.isConnected === true) {\n            this.$bus.$emit('MainCameraConnected', 1);\n            console.log('MainCamera is Connected.');\n            this.SendConsoleLogMsg('MainCamera is Connected.', 'info');\n          }\n        } else if (device.driverType === 'Mount') {\n          if (device.isConnected === true) {\n            this.$bus.$emit('MountConnected', 1);\n            console.log('Mount is Connected.');\n            this.SendConsoleLogMsg('Mount is Connected.', 'info');\n          }\n        }\n      });\n      this.sendMessage('Vue_Command', 'loadSelectedDriverList');\n      this.sendMessage('Vue_Command', 'loadBindDeviceList');\n      this.sendMessage('Vue_Command', 'loadBindDeviceTypeList');\n    },\n\n    OpenIamgeFolder() {\n      this.$bus.$emit('ImageManagerPanelOpen');\n      this.nav = false;\n    },\n\n    OpenDebugLog() {\n      this.$bus.$emit('toggleINDIDebugDialog');\n      this.nav = false;\n    },\n\n    SendConsoleLogMsg(message, type) {\n      if (type == 'error') {\n        console.error('Error: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else if (type == 'info') {\n        console.log('Info: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else if (type == 'warning') {\n        console.warn('Warning: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else {\n        console.log('Debug: ' + message);\n      }\n    },\n\n    DeviceAllocation() {\n      this.$bus.$emit('toggleDeviceAllocationPanel');\n      this.nav = false;\n    },\n\n    // CurrentExpTimeList(index, value) {\n    //   const expTimeIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ExpTime [' + (index + 1) + ']');\n    //   if (expTimeIndex !== -1) { // 确保找到了对应的配置项\n    //     // 更新 ExpTime1 配置项的值\n    //     this.MainCameraConfigItems[expTimeIndex].value = value;\n    //   } else {\n    //     console.error('ExpTime [' + index + '] configuration item not found.');\n    //   }\n    // },\n\n    CurrentCFWList(index, value) {\n      const expTimeIndex = this.CFWConfigItems.findIndex(item => item.label === 'CFW [' + (index + 1) + ']');\n      if (expTimeIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.CFWConfigItems[expTimeIndex].value = value;\n      } else {\n        console.error('CFW [' + index + '] configuration item not found.');\n      }\n    },\n\n    confirmConfiguration(List) {\n      List.forEach(item => {\n        if (item.value !== '') {\n          // console.log(item.label, item.value);\n          this.SendConsoleLogMsg(item.label + ':' + item.value, 'info');\n          this.$bus.$emit(item.label, item.label + ':' + item.value);\n        } else if (item.value == '' && item.label === 'Focal Length (mm)') {\n          this.SendConsoleLogMsg(item.label + 'is NULL', 'info');\n          this.$bus.$emit(item.label, item.label + ':');\n        }\n      });\n      this.callShowMessageBox('Configuration has been modified!', 'success');\n    },\n\n    loadAndDisplayImage(imagePath) {\n      const canvas = document.getElementById('guiderCamera-canvas');\n      // const canvas = document.getElementById('mainCamera-canvas');\n      if (canvas.getContext) {\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n\n        img.onload = () => {\n          canvas.width = img.width;\n          canvas.height = img.height;\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0);\n          // this.$bus.$emit('showSolveImage', img);\n        };\n\n        // 添加错误处理\n        img.onerror = (error) => {\n          console.log(`加载图像失败: ${imagePath}`);\n          this.SendConsoleLogMsg(`加载图像失败: ${imagePath}`, 'error');\n        };\n\n        img.src = imagePath;\n      }\n    },\n\n    ImageGainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value); // 将值转换为 double 类型\n\n      if (signal === 'ImageGainR') {\n        // 处理 ImageGainR 信号\n        this.ImageGainR = doubleValue;\n        this.SendConsoleLogMsg('ImageGainR is set to:' + doubleValue, 'info');\n        this.sendMessage('Vue_Command', 'ImageGainR:' + doubleValue);\n      } else if (signal === 'ImageGainB') {\n        // 处理 ImageGainB 信号\n        this.ImageGainB = doubleValue;\n        this.SendConsoleLogMsg('ImageGainB is set to:' + doubleValue, 'info');\n        this.sendMessage('Vue_Command', 'ImageGainB:' + doubleValue);\n      }\n    },\n\n    ImageOffsetSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value); // 将值转换为 double 类型\n\n      this.ImageOffset = doubleValue;\n      console.log('Image Offset is set to:', doubleValue);\n      this.SendConsoleLogMsg('Image Offset is set to:' + doubleValue, 'info');\n      this.sendMessage('Vue_Command', 'ImageOffset:' + doubleValue);\n    },\n\n    BinningSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n      this.cameraBin = IntValue;\n      console.log('Image Binning is set to:', IntValue);\n      this.SendConsoleLogMsg('Image Binning is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetBinning:' + IntValue);\n      this.$bus.$emit('SetBinningNum', IntValue);\n    },\n\n    GainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Gain is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Gain is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraGain:' + IntValue);\n    },\n\n    OffsetSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Offset is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Offset is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraOffset:' + IntValue);\n    },\n\n    ImageCFASet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n\n      // if (['GR', 'GB', 'BG', 'RGGB','null'].includes(value)) {\n      if (['GR', 'GB', 'BG', 'RG', 'GRBG', 'GBRG', 'BGGR', 'RGGB', 'null', ''].includes(value)) {\n        if (value === '') {\n          value = 'null';\n        } else if (value === 'GRBG') {\n          value = 'GR';\n        } else if (value === 'GBRG') {\n          value = 'GB';\n        } else if (value === 'BGGR') {\n          value = 'BG';\n        } else if (value === 'RG') {\n          value = 'RGGB';\n        }\n        this.ImageCFA = value;\n        // console.log('ImageCFA is set to:', value);\n        this.SendConsoleLogMsg('ImageCFA is set to:' + value, 'info');\n        this.sendMessage('Vue_Command', 'ImageCFA:' + value);\n      } else {\n        // console.log(`Invalid value for ImageCFA: '${value}'. Please set it to one of 'GR', 'GB', 'BG', 'RGGB'.`);\n        this.callShowMessageBox(`Invalid value for ImageCFA: '${value}'. Please set it to one of 'GR', 'GB', 'BG', 'RGGB'.`, 'error');\n      }\n    },\n\n    CameraTemperatureSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Temperature is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Temperature is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraTemperature:' + IntValue);\n    },\n\n    FocalLengthSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n\n      for (const device of this.devices) {\n        if (device.driverType === 'Telescopes') {\n\n          if (value === '' || value === NaN) {\n            device.device = '';\n            this.SendConsoleLogMsg('Focal Length is set to:' + 0, 'info');\n            this.$bus.$emit('SetFocalLengthNum', '');\n          } else {\n            const IntValue = parseInt(value); // 将值转换为 Int 类型\n            device.device = value + ' mm';\n            this.SendConsoleLogMsg('Focal Length is set to:' + IntValue, 'info');\n            this.$bus.$emit('SetFocalLengthNum', IntValue);\n          }\n        }\n      }\n\n\n    },\n\n    GuiderFocalLengthSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n\n      this.SendConsoleLogMsg('Guider Focal Length is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderFocalLength:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderFocalLength:' + IntValue);\n    },\n\n    MultiStarGuiderSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      this.SendConsoleLogMsg('Multi Star Guider is set to:' + value, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'MultiStarGuider:' + value);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:MultiStarGuider:' + value);\n    },\n\n    GuiderPixelSizeSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value);\n      this.SendConsoleLogMsg('Guider Pixel size is set to:' + doubleValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderPixelSize:' + doubleValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderPixelSize:' + doubleValue);\n    },\n\n    GuiderGainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Guider Gain is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderGain:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderGain:' + IntValue);\n    },\n\n    CalibrationDurationSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Guider Calibration step is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'CalibrationDuration:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:CalibrationDuration:' + IntValue);\n    },\n\n    RaAggressionSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Ra Aggression is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'RaAggression:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:RaAggression:' + IntValue);\n    },\n\n    DecAggressionSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Dec Aggression is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DecAggression:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:DecAggression:' + IntValue);\n    },\n\n    SyncFocuserStep(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Sync Focuser Step:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'SyncFocuserStep:' + IntValue);\n    },\n\n    GotoThenSolve(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const BooleanValue = Boolean(value);\n      this.SendConsoleLogMsg('Goto Then Solve:' + BooleanValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GotoThenSolve:' + BooleanValue);\n    },\n\n    AutoFlipSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const BooleanValue = Boolean(value);\n      this.SendConsoleLogMsg('Auto Flip:' + BooleanValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'AutoFlip:' + BooleanValue);\n    },\n\n    WestMinutesPastMeridianSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const WestMinutesPastMeridian = parseFloat(value);\n      this.SendConsoleLogMsg('Minutes Past Meridian:' + WestMinutesPastMeridian, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'WestMinutesPastMeridian:' + WestMinutesPastMeridian);\n    },\n\n    EastMinutesPastMeridianSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const EastMinutesPastMeridian = parseFloat(value);\n      this.SendConsoleLogMsg('Minutes Past Meridian:' + EastMinutesPastMeridian, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'EastMinutesPastMeridian:' + EastMinutesPastMeridian);\n    },\n\n    async readBinFile(fileName, retryCount = 1) {\n      while (this.isDownloadingImage) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        if (!this.isWaitingLogged) {\n          this.SendConsoleLogMsg('The image is already being processed. Please wait for the previous process to complete.', 'warning');\n          this.isWaitingLogged = true; // 确保只记录一次等待信息\n        }\n      }\n\n      if (this.isDownloadingImageName === fileName) {\n        this.SendConsoleLogMsg('The image(' + fileName + ') is already processed.', 'info');\n        return;\n      }\n\n      this.isDownloadingImage = true;\n      this.isWaitingLogged = false; // 重置等待日志标志\n      this.SendConsoleLogMsg('CaptureTestTime | Read image(' + fileName + ') data start.', 'info');\n\n      const startTime = new Date();\n      try {\n        // Check if the fileName is valid\n        if (!fileName || typeof fileName !== 'string') {\n          throw new Error('Invalid file name provided');\n        }\n\n        // Fetch with progress tracking\n        const response = await fetch(fileName, { cache: 'no-store' });\n        if (!response.ok) {\n          throw new Error(`Network response was not ok. Status: ${response.status}`);\n        }\n\n        const contentLength = response.headers.get('content-length');\n        if (!contentLength) {\n          throw new Error('Content-Length header is missing');\n        }\n\n        const total = parseInt(contentLength, 10);\n        if (isNaN(total) || total <= 0) {\n          throw new Error('Invalid content-length value');\n        }\n\n        let loaded = 0;\n\n        const reader = response.body.getReader();\n        const stream = new ReadableStream({\n          start: (controller) => {\n            const push = () => {\n              reader.read().then(({ done, value }) => {\n                if (done) {\n                  controller.close();\n                  return;\n                }\n                loaded += value.byteLength;\n                const percent = (loaded / total) * 100;\n                if (Math.round(percent) % 10 === 0) {\n                  // this.SendConsoleLogMsg(`Progress: ${Math.round(percent)}%`, 'info');\n                  this.updateCaptureImageProgress(Math.round(percent));\n                }\n                // this.SendConsoleLogMsg(`当前进度: ${Math.round(percent)}%`, 'info');\n                controller.enqueue(value);\n                push();\n              }).catch(error => {\n                console.error('Stream reading error:', error);\n                this.SendConsoleLogMsg('Stream reading error: ' + error.message, 'error');\n                controller.error(error);\n              });\n            };\n            push();\n          }\n        });\n\n        const newResponse = new Response(stream);\n        const blob = await newResponse.blob();\n\n        // FileReader with progress tracking\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n          this.ImageArrayBuffer = fileReader.result;\n\n          const endTime = new Date();\n          const elapsedTime = endTime.getTime() - startTime.getTime();\n          this.SendConsoleLogMsg('CaptureTestTime | Read image data end: ' + elapsedTime + ' ms', 'info');\n          if (!this.isPolarAxisMode) {\n            this.callShowMessageBox(`Read image data end: '${elapsedTime}' ms.`, 'info');\n          }\n          this.isDownloadingImageName = fileName;\n          this.processImage(this.ImageArrayBuffer);\n        };\n\n        fileReader.onerror = (error) => {\n          console.error('FileReader error:', error);\n          this.SendConsoleLogMsg('FileReader error: ' + error.message, 'error');\n        };\n\n        fileReader.readAsArrayBuffer(blob);\n      } catch (error) {\n        console.error('There was a problem with the fetch operation:', error);\n        this.SendConsoleLogMsg('There was a problem with the fetch operation: ' + error.message, 'error');\n\n        // 下载失败，重试\n        if (retryCount > 0) {\n          console.log('Retrying download...');\n          this.SendConsoleLogMsg('Retrying download...', 'warning');\n          this.isDownloadingImage = false;\n          this.updateCaptureImageProgress(100);\n          await this.readBinFile(fileName, retryCount - 1);\n        } else {\n          this.SendConsoleLogMsg('Max retries reached. Download failed.', 'error');\n        }\n      } finally {\n        this.isDownloadingImage = false; // 确保在任何情况下都重置状态\n      }\n    },\n\n\n    // async readBinFile(fileName, retryCount = 1) {\n    //   while (this.isDownloadingImage) {\n    //     await new Promise(resolve => setTimeout(resolve, 1000));\n    //     if (!this.isWaitingLogged) {\n    //       this.SendConsoleLogMsg('The image is already being processed. Please wait for the previous process to complete.', 'warning');\n    //       this.isWaitingLogged = true; // 确保只记录一次等待信息\n    //     }\n    //   }\n\n    //   if (this.isDownloadingImageName === fileName) {\n    //     this.SendConsoleLogMsg('The image(' + fileName + ') is already processed.', 'info');\n    //     return;\n    //   }\n\n    //   this.isDownloadingImage = true;\n    //   this.isWaitingLogged = false; // 重置等待日志标志\n    //   this.SendConsoleLogMsg('CaptureTestTime | Read image(' + fileName + ') data start.', 'info');\n\n    //   const startTime = new Date();\n    //   try {\n    //     // Fetch with progress tracking\n    //     const response = await fetch(fileName);\n    //     if (!response.ok) {\n    //       throw new Error('Network response was not ok');\n    //     }\n\n    //     const contentLength = response.headers.get('content-length');\n    //     if (!contentLength) {\n    //       throw new Error('Content-Length header is missing');\n    //     }\n\n    //     const total = parseInt(contentLength, 10);\n    //     let loaded = 0;\n\n    //     const reader = response.body.getReader();\n    //     const stream = new ReadableStream({\n    //       start: (controller) => {\n    //         const push = () => {\n    //           reader.read().then(({ done, value }) => {\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             loaded += value.byteLength;\n    //             const percent = (loaded / total) * 100;\n    //             if (Math.round(percent) % 10 === 0) {\n    //               this.SendConsoleLogMsg(`Progress: ${Math.round(percent)}%`,'info');\n    //               this.updateCaptureImageProgress(Math.round(percent));\n    //             }\n    //             controller.enqueue(value);\n    //             push();\n    //           }).catch(error => {\n    //             console.error('Stream reading error:', error);\n    //             controller.error(error);\n    //           });\n    //         };\n    //         push();\n    //       }\n    //     });\n\n    //     const newResponse = new Response(stream);\n    //     const blob = await newResponse.blob();\n\n    //     // FileReader with progress tracking\n    //     const fileReader = new FileReader();\n    //     fileReader.onload = () => {\n    //       this.ImageArrayBuffer = fileReader.result;\n\n    //       const endTime = new Date();\n    //       const elapsedTime = endTime.getTime() - startTime.getTime();\n    //       this.SendConsoleLogMsg('CaptureTestTime | Read image data end: ' + elapsedTime + ' ms', 'info');\n    //       if (!this.isPolarAxisMode) {\n    //         this.callShowMessageBox(`Read image data end: '${elapsedTime}' ms.`, 'info');\n    //       }\n    //       this.isDownloadingImageName = fileName;\n    //       this.processImage(this.ImageArrayBuffer);\n    //     };\n\n    //     fileReader.onerror = (error) => {\n    //       console.error('FileReader error:', error);\n    //       this.SendConsoleLogMsg('FileReader error:' + error, 'error');\n    //     };\n\n    //     fileReader.readAsArrayBuffer(blob);\n    //   } catch (error) {\n    //     console.error('There was a problem with the fetch operation:', error);\n    //     this.SendConsoleLogMsg('There was a problem with the fetch operation:' + error, 'error');\n\n    //     // 下载失败，重试\n    //     if (retryCount > 0) {\n    //       console.log('Retrying download...');\n    //       this.SendConsoleLogMsg('Retrying download...', 'warning');\n    //       this.isDownloadingImage = false;\n    //       this.updateCaptureImageProgress(100);\n    //       await this.readBinFile(fileName, retryCount - 1);\n    //     }\n    //   } finally {\n    //     this.isDownloadingImage = false; // 确保在任何情况下都重置状态\n    //   }\n    // },\n\n    updateCaptureImageProgress(num) {\n      this.$bus.$emit('ShowCaptureImageProgress', num);\n    },\n\n    setImageProportion(value) {\n      this.ImageProportion = value;\n    },\n\n    async processImage(imgArray, histogramMin = -1, histogramMax = -1, options = {}) {\n      let { calculateHistogram = true } = options;\n      this.progressValue = 0;\n      this.progressDescription = this.$i18n.locale === 'cn' ? '开始处理图像...' : 'Processing image...';\n      let mat = null;\n      let targetImg8 = null;\n      let resizeImg = null;\n\n      // 使用setTimeout和Promise创建非阻塞处理\n      const processAsync = (fn) => {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            const result = fn();\n            resolve(result);\n          }, 0);\n        });\n      };\n\n      try {\n        if (!(imgArray instanceof ArrayBuffer) && !ArrayBuffer.isView(imgArray)) {\n          throw new Error(\"Input must be ArrayBuffer or TypedArray\");\n        }\n        let uintArray = new Uint16Array(imgArray);\n\n        if (uintArray.length != parseInt(this.mainCameraSizeY) * parseInt(this.mainCameraSizeX)) {\n          throw new Error(\"Image size mismatch\");\n        }\n        // 创建Mat对象\n        await processAsync(() => {\n          mat = new cv.Mat(parseInt(this.mainCameraSizeY), parseInt(this.mainCameraSizeX), cv.CV_16UC1);\n          mat.data16U.set(uintArray);\n          this.progressValue = 10;\n          this.progressDescription = this.$i18n.locale === 'cn' ? '创建Mat对象...' : 'Creating Mat object...';\n          return true;\n        });\n\n        // 用户自定义参数\n        let CFA = this.ImageCFA;\n        let isColorCamera = false;\n        let mode = 1;\n        let blackLevel, whiteLevel;\n\n        if (histogramMin == -1 && histogramMax == -1) {\n          // 获取自动拉伸参数\n          const result = await processAsync(() => {\n            const res = this.GetAutoStretch(mat, mode);\n            this.progressValue = 20;\n            this.progressDescription = this.$i18n.locale === 'cn' ? '获取自动拉伸参数...' : 'Getting auto stretch parameters...';\n            return res;\n          });\n\n          calculateHistogram = true;\n          // 从结果中提取值\n          blackLevel = result.blackLevel;\n          whiteLevel = result.whiteLevel;\n        } else {\n          blackLevel = histogramMin;  // 现在可以正常工作\n          whiteLevel = histogramMax;  // 现在可以正常工作\n        }\n\n        // 根据CFA设置颜色转换模式\n        if (CFA === 'GR') {\n          isColorCamera = true;\n        } else if (CFA === 'GB') {\n          isColorCamera = true;\n        } else if (CFA === 'BG') {\n          isColorCamera = true;\n        } else if (CFA === 'RGGB') {\n          isColorCamera = true;\n        } else {\n          isColorCamera = false;\n        }\n        console.log(\"当前拍摄参数:isColorCamera:\", isColorCamera, \"CFA:\", CFA);\n        // 计算直方图\n        const analysis = await processAsync(() => {\n          const result = isColorCamera\n            ? this.analyzeImageStatistics(mat, 'bayer', CFA, { calculateGain: this.calculateGain, calculateHistogram: calculateHistogram })\n            : this.analyzeImageStatistics(mat, 'gray', { calculateGain: this.calculateGain, calculateHistogram: calculateHistogram });\n\n          if (this.ImageGainR != 1 || this.ImageGainB != 1 || this.ImageOffset != 0) {\n            result.gainR = this.ImageGainR;\n            result.gainB = this.ImageGainB;\n            result.offset = this.ImageOffset;\n          }\n\n          this.progressValue = 40;\n          this.progressDescription = this.$i18n.locale === 'cn' ? '计算直方图...' : 'Calculating histogram...';\n          return result;\n        });\n\n        if (analysis.histogram) {\n          this.$bus.$emit('showHistogram', analysis.histogram);  // 更新 直方图数据\n          this.$bus.$emit('ChangeDialPosition', blackLevel, whiteLevel);  // 更新直方图的显示轴\n          this.$bus.$emit('AutoHistogramNum', blackLevel, whiteLevel);\n        }\n\n        this.lastImageProcessParams = {\n          blackLevel: blackLevel,\n          whiteLevel: whiteLevel,\n          CFA: CFA,\n          analysis: analysis,\n          isColorCamera: isColorCamera,\n        };\n\n        // 使用增益和拉伸，并转化为8位图像\n        targetImg8 = await processAsync(() => {\n          const result = isColorCamera\n            ? this.applyStretchAndGain(mat, analysis, 'bayer', CFA, blackLevel, whiteLevel)\n            : this.applyStretchAndGain(mat, analysis, 'gray', CFA, blackLevel, whiteLevel);\n\n          // 释放mat\n          if (mat) {\n            mat.delete();\n            mat = null;\n          }\n\n          this.progressValue = 60;\n          this.progressDescription = this.$i18n.locale === 'cn' ? '根据参数处理...' : 'Processing with parameters...';\n          return result;\n        });\n\n        // 根据模式处理图像\n        if (this.isPolarAxisMode) {\n          await processAsync(() => {\n            resizeImg = new cv.Mat();\n            cv.resize(targetImg8, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n\n            if (targetImg8) {\n              targetImg8.delete();\n              targetImg8 = null;\n            }\n            this.progressValue = 0;\n            return true;\n          });\n\n          this.$bus.$emit('showSolveImage', resizeImg);\n\n          if (resizeImg) {\n            resizeImg.delete();\n            resizeImg = null;\n          }\n        } else {\n          // 转换为ImageData对象\n          const colorData = await processAsync(() => {\n            const data = new ImageData(\n              new Uint8ClampedArray(targetImg8.data),\n              targetImg8.cols,\n              targetImg8.rows\n            );\n\n            if (targetImg8) {\n              targetImg8.delete();\n              targetImg8 = null;\n            }\n            if (resizeImg) {\n              resizeImg.delete();\n              resizeImg = null;\n            }\n            this.progressValue = 80;\n            this.progressDescription = this.$i18n.locale === 'cn' ? '转换为ImageData对象...' : 'Converting to ImageData object...';\n            return data;\n          });\n\n          this.drawImgData = true;\n\n          // 设置缓冲画布\n          await processAsync(() => {\n            this.bufferCanvas.width = colorData.width;\n            this.bufferCanvas.height = colorData.height;\n            this.bufferCtx.putImageData(colorData, 0, 0);\n            this.progressValue = 90;\n            this.progressDescription = this.$i18n.locale === 'cn' ? '绘制缓冲画布图像...' : 'Drawing buffer canvas image...';\n            return true;\n          });\n\n          // 绘制主画布图像\n          this.progressValue = 100;\n          this.progressDescription = this.$i18n.locale === 'cn' ? '绘制主画布图像...' : 'Drawing main canvas image...';\n          this.drawImageData();\n        }\n      } catch (error) {\n        this.handleError('Process image data error', 'processImage', error);\n        this.progressValue = 0;\n        this.progressDescription = '';\n      } finally {\n        this.progressValue = 0;\n        // 确保所有Mat对象都被释放\n        if (mat) {\n          mat.delete();\n          mat = null;\n        }\n        if (targetImg8) {\n          targetImg8.delete();\n          targetImg8 = null;\n        }\n        if (resizeImg) {\n          resizeImg.delete();\n          resizeImg = null;\n        }\n        // 处理后检查内存\n        this.checkMemoryUsage();\n        // 在处理完大量数据后手动请求垃圾回收\n        if (window.gc) {\n          try { window.gc(); } catch (e) { }\n        }\n      }\n    },\n\n\n    /**\n     * 获取自动拉伸参数，返回黑色和白色阈值\n     * @param {cv.Mat} imgMat 输入的图像Mat对象\n     * @param {int} mode 模式\n     * @returns {int，int} 黑色和白色阈值\n     */\n    GetAutoStretch(imgMat, mode) {\n      // 仅支持 Mat 类型输入，并假定为16位图像\n      // 使用 OpenCV 的 meanStdDev 函数直接计算均值和标准差\n      const means = new cv.Mat();\n      const stdDevs = new cv.Mat();\n\n      // 高效计算均值和标准差\n      cv.meanStdDev(imgMat, means, stdDevs);\n\n      // 获取计算结果\n      const mean = means.doubleAt(0, 0);\n      const stdDev = stdDevs.doubleAt(0, 0);\n\n      // 释放临时 Mat 对象\n      means.delete();\n      stdDevs.delete();\n\n      // 根据模式设置标准差倍数\n      let a, b;\n      switch (mode) {\n        case 0: a = 3; b = 5; break;\n        case 1: a = 2; b = 5; break;\n        case 2: a = 3; b = 8; break;\n        default: a = 2; b = 8;\n      }\n\n      // 固定为16位图像处理\n      const maxValue = 65535;\n\n      // 计算黑白点\n      let blackLevel = Math.round(Math.max(0, mean - stdDev * a));\n      let whiteLevel = Math.round(Math.min(maxValue, mean + stdDev * b));\n\n      // 确保 blackLevel < whiteLevel\n      if (blackLevel >= whiteLevel) {\n        blackLevel = whiteLevel - 1;\n      }\n\n      return { blackLevel, whiteLevel };\n    },\n\n    /**\n     * 分析16位图像并计算直方图和白平衡增益\n     * @param {cv.Mat} img16 - 输入的16位图像Mat对象\n     * @param {string} imageType - 图像类型: 'gray'(灰度图) 或 'bayer'(Bayer格式)\n     * @param {string} bayerPattern - Bayer模式，如果imageType为'bayer'则需提供: 'RGGB', 'GR', 'GB', 'BG'\n     * @param {Object} options - 可选参数\n     * @param {number} options.bins - 直方图箱数，默认256\n     * @param {boolean} options.calculateGain - 是否计算白平衡增益参数，默认true\n     * @param {boolean} options.usePercentile - 是否使用百分位计算增益，默认true\n     * @param {number} options.lowPercentile - 下截断百分位，默认1\n     * @param {number} options.highPercentile - 上截断百分位，默认99\n     * @returns {Object} 直方图数据和增益参数\n     */\n    analyzeImageStatistics(img16, imageType, bayerPattern = 'RGGB', options = {}) {\n      // 首先检查输入Mat是否有效\n      if (!img16 || img16.rows <= 0 || img16.cols <= 0) {\n        console.error('无效的图像数据');\n        return {};\n      }\n\n      const { calculateGain = true, calculateHistogram = true } = options;\n      const result = {};\n\n\n      // 设置直方图参数\n      const step = 4;\n\n      // 安全访问函数\n      const safeUshortAt = (mat, y, x) => {\n        if (y >= 0 && y < mat.rows && x >= 0 && x < mat.cols) {\n          try {\n            return mat.ushortAt(y, x);\n          } catch (e) {\n            console.error(`访问位置错误: (${y},${x})`);\n            return 0;\n          }\n        }\n        return 0;\n      };\n\n      // 安全掩码设置\n      const safeUcharAt = (mask, y, x, value) => {\n        if (y >= 0 && y < mask.rows && x >= 0 && x < mask.cols) {\n          try {\n            mask.ucharAt(y, x, value);\n          } catch (e) {\n            console.error(`设置掩码错误: (${y},${x})`);\n          }\n        }\n      };\n\n      if (imageType === 'gray') {\n        if (calculateHistogram) {\n          // 计算直方图\n          const histData = Array(65536).fill(0);\n          for (let i = 0; i < img16.rows; i += step) {\n            for (let j = 0; j < img16.cols; j += step) {\n              try {\n                histData[safeUshortAt(img16, i, j)]++;\n              } catch (e) {\n                // 忽略错误继续执行\n              }\n            }\n          }\n          result.histogram = histData;\n        }\n      } else if (imageType === 'bayer') {\n        // 确保图像大小足够进行Bayer处理\n        if (img16.rows < 2 || img16.cols < 2) {\n          console.error('图像尺寸过小，无法进行Bayer处理');\n          return {};\n        }\n\n        const rows = img16.rows;\n        const cols = img16.cols;\n\n        // 创建掩码 - 使用稀疏采样\n        const maskR = new cv.Mat(rows, cols, cv.CV_8UC1, new cv.Scalar(0));\n        const maskG = new cv.Mat(rows, cols, cv.CV_8UC1, new cv.Scalar(0));\n        const maskB = new cv.Mat(rows, cols, cv.CV_8UC1, new cv.Scalar(0));\n\n        // 确定采样步长 - 大图像时采用更大步长\n        const sampleStep = Math.max(2, Math.floor(Math.min(rows, cols) / 200) * 2);\n\n        // 确定Bayer模式位置\n        let rOffsets, gOffsets, bOffsets;\n        switch (bayerPattern) {\n          case 'RGGB':\n            rOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            bOffsets = [{ y: 1, x: 1 }];\n            break;\n          case 'GR':\n            gOffsets = [{ y: 0, x: 0 }, { y: 1, x: 1 }];\n            rOffsets = [{ y: 0, x: 1 }];\n            bOffsets = [{ y: 1, x: 0 }];\n            break;\n          case 'GB':\n            gOffsets = [{ y: 0, x: 0 }, { y: 1, x: 1 }];\n            bOffsets = [{ y: 0, x: 1 }];\n            rOffsets = [{ y: 1, x: 0 }];\n            break;\n          case 'BG':\n            bOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            rOffsets = [{ y: 1, x: 1 }];\n            break;\n          default:\n            rOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            bOffsets = [{ y: 1, x: 1 }];\n        }\n\n        // 采样数据用于增益计算\n        const rValues = [];\n        const gValues = [];\n        const bValues = [];\n\n        // 采样设置掩码和收集采样数据\n        for (let y = 0; y < rows; y += sampleStep) {\n          for (let x = 0; x < cols; x += sampleStep) {\n            // 处理红色通道\n            for (const pos of rOffsets) {\n              const py = y + pos.y;\n              const px = x + pos.x;\n              if (py < rows && px < cols && py >= 0 && px >= 0) {\n                try {\n                  maskR.ucharAt(py, px, 255);\n                  if (calculateGain && y % (sampleStep * 2) === 0 && x % (sampleStep * 2) === 0) {\n                    rValues.push(safeUshortAt(img16, py, px));\n                  }\n                } catch (e) {\n                  console.error(`R通道错误：(${py},${px})`, e);\n                }\n              }\n            }\n\n            // 处理绿色通道\n            for (const pos of gOffsets) {\n              const py = y + pos.y;\n              const px = x + pos.x;\n              if (py < rows && px < cols && py >= 0 && px >= 0) {\n                try {\n                  maskG.ucharAt(py, px, 255);\n                  if (calculateGain && y % (sampleStep * 2) === 0 && x % (sampleStep * 2) === 0) {\n                    gValues.push(safeUshortAt(img16, py, px));\n                  }\n                } catch (e) {\n                  console.error(`G通道错误：(${py},${px})`, e);\n                }\n              }\n            }\n\n            // 处理蓝色通道\n            for (const pos of bOffsets) {\n              const py = y + pos.y;\n              const px = x + pos.x;\n              if (py < rows && px < cols && py >= 0 && px >= 0) {\n                try {\n                  maskB.ucharAt(py, px, 255);\n                  if (calculateGain && y % (sampleStep * 2) === 0 && x % (sampleStep * 2) === 0) {\n                    bValues.push(safeUshortAt(img16, py, px));\n                  }\n                } catch (e) {\n                  console.error(`B通道错误：(${py},${px})`, e);\n                }\n              }\n            }\n          }\n        }\n\n        if (calculateHistogram) {\n          // 计算三个通道的直方图\n          const histDataR = Array(65536).fill(0);\n          const histDataG = Array(65536).fill(0);\n          const histDataB = Array(65536).fill(0);\n\n          // 确保安全访问\n          const maxRows = rows - 1;\n          const maxCols = cols - 1;\n\n          for (let i = 0; i < maxRows; i += 2) {\n            for (let j = 0; j < maxCols; j += 2) {\n              try {\n                if (bayerPattern === 'RGGB') {\n                  histDataR[safeUshortAt(img16, i, j)]++;\n                  const g1 = safeUshortAt(img16, i + 1, j);\n                  const g2 = safeUshortAt(img16, i, j + 1);\n                  histDataG[Math.floor((g1 + g2) / 2)]++;\n                  histDataB[safeUshortAt(img16, i + 1, j + 1)]++;\n                } else if (bayerPattern === 'GR') {\n                  const g1 = safeUshortAt(img16, i, j);\n                  const g2 = safeUshortAt(img16, i + 1, j + 1);\n                  histDataG[Math.floor((g1 + g2) / 2)]++;\n                  histDataR[safeUshortAt(img16, i + 1, j)]++;\n                  histDataB[safeUshortAt(img16, i, j + 1)]++;\n                } else if (bayerPattern === 'GB') {\n                  const g1 = safeUshortAt(img16, i, j);\n                  const g2 = safeUshortAt(img16, i + 1, j + 1);\n                  histDataG[Math.floor((g1 + g2) / 2)]++;\n                  histDataB[safeUshortAt(img16, i + 1, j)]++;\n                  histDataR[safeUshortAt(img16, i, j + 1)]++;\n                } else if (bayerPattern === 'BG') {\n                  histDataB[safeUshortAt(img16, i, j)]++;\n                  const g1 = safeUshortAt(img16, i + 1, j);\n                  const g2 = safeUshortAt(img16, i, j + 1);\n                  histDataG[Math.floor((g1 + g2) / 2)]++;\n                  histDataR[safeUshortAt(img16, i + 1, j + 1)]++;\n                }\n              } catch (e) {\n                console.error(`直方图计算错误：(${i},${j})`, e);\n              }\n            }\n          }\n          result.histogram = [histDataR, histDataG, histDataB];\n        }\n\n        // 计算白平衡增益参数 - 使用快速中位数近似法\n        if (calculateGain && rValues.length > 0 && gValues.length > 0 && bValues.length > 0) {\n          try {\n            // 快速计算中位数而非排序全部数组\n            const rMean = this.truncatedMean(rValues);\n            const gMean = this.truncatedMean(gValues);\n            const bMean = this.truncatedMean(bValues);\n\n            // 计算增益\n            const gainR = Math.min(Math.max(gMean / rMean, 0.1), 2);\n            const gainB = Math.min(Math.max(gMean / bMean, 0.1), 2);\n\n            result.whiteBalance = {\n              gainR: gainR,\n              gainB: gainB\n            };\n          } catch (e) {\n            console.error(\"白平衡增益计算错误\", e);\n            result.whiteBalance = { gainR: 1.0, gainB: 1.0 };\n          }\n        }\n\n        // 释放资源\n        try {\n          maskR.delete();\n          maskG.delete();\n          maskB.delete();\n        } catch (e) {\n          console.error(\"释放资源错误\", e);\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * 使用截断均值计算 - 去除上下一定比例的极值后计算平均值\n     * @param {Array} arr - 输入数据数组\n     * @param {number} lowerPercent - 下截断百分比，默认5%\n     * @param {number} upperPercent - 上截断百分比，默认5%\n     * @returns {number} 截断均值\n     */\n    truncatedMean(arr, lowerPercent = 5, upperPercent = 5) {\n      if (arr.length === 0) return 0;\n\n      // 过滤极端黑点和过饱和点\n      const filtered = arr.filter(v => v > 100 && v < 65000);\n      if (filtered.length === 0) return arr.length > 0 ? arr[0] : 0;\n\n      // 对于特别大的数组，采样处理\n      let workingArray = filtered;\n      if (filtered.length > 10000) {\n        workingArray = [];\n        const step = Math.ceil(filtered.length / 5000);\n        for (let i = 0; i < filtered.length; i += step) {\n          workingArray.push(filtered[i]);\n        }\n      }\n\n      // 排序数组\n      workingArray.sort((a, b) => a - b);\n\n      // 计算截断点\n      const lowerCutoff = Math.floor(workingArray.length * (lowerPercent / 100));\n      const upperCutoff = Math.floor(workingArray.length * (1 - upperPercent / 100));\n\n      // 获取截断后的子数组\n      const truncated = workingArray.slice(lowerCutoff, upperCutoff);\n\n      // 计算平均值\n      if (truncated.length === 0) return workingArray[Math.floor(workingArray.length / 2)];\n\n      const sum = truncated.reduce((acc, val) => acc + val, 0);\n      return sum / truncated.length;\n    },\n    /**\n     * 快速计算中位数 - 使用随机选择算法\n     */\n    quickMedian(arr) {\n      if (arr.length === 0) return 0;\n      if (arr.length < 100) {\n        // 小数组直接排序\n        const sortedArr = [...arr].sort((a, b) => a - b);\n        return sortedArr[Math.floor(sortedArr.length / 2)];\n      }\n\n      // 大数组随机采样\n      const samples = [];\n      for (let i = 0; i < 100; i++) {\n        samples.push(arr[Math.floor(Math.random() * arr.length)]);\n      }\n      samples.sort((a, b) => a - b);\n      return samples[50]; // 返回采样的中位数\n    },\n\n    /**\n     * 应用白平衡和亮度拉伸，将16位图像转换为8位图像\n     * @param {cv.Mat} img16 - 输入的16位图像Mat对象\n     * @param {Object} analysis - 从analyzeImageStatistics获取的分析结果\n     * @param {string} imageType - 图像类型: 'gray'(灰度图) 或 'bayer'(彩色相机)\n     * @param {string} bayerPattern - Bayer模式，仅当imageType为'bayer'时需要\n     * @param {Object} stretchParams - 手动指定拉伸参数，可选\n     * @param {number} stretchParams.blackLevel - 黑点值 \n     * @param {number} stretchParams.whiteLevel - 白点值\n     * @returns {cv.Mat} 处理后的8位RGBA图像\n     */\n    applyStretchAndGain(img16, analysis, imageType, bayerPattern = 'RGGB', blackLevel, whiteLevel) {\n      // 确保黑点小于白点\n      if (blackLevel >= whiteLevel) {\n        blackLevel = whiteLevel - 1;\n      }\n\n      // 计算转换比例和偏移\n      const scale = 255.0 / (whiteLevel - blackLevel);\n      const offset = -blackLevel * scale;\n\n      if (imageType === 'gray') {\n        // 单色相机 - 一步转换到8位RGBA\n        const rgbaImg = new cv.Mat();\n        const gray8 = new cv.Mat();\n\n        img16.convertTo(gray8, cv.CV_8U, scale, offset);\n        cv.cvtColor(gray8, rgbaImg, cv.COLOR_GRAY2RGBA);\n        gray8.delete();\n\n        return rgbaImg;\n      } else {\n        // 彩色相机处理\n        let gainR = 1.0, gainB = 1.0;\n        if (analysis && analysis.whiteBalance) {\n          gainR = analysis.whiteBalance.gainR;\n          gainB = analysis.whiteBalance.gainB;\n        }\n\n        // 使用LUT优化白平衡和拉伸\n        // 1. 创建三个LUT表\n        const { lutR, lutG, lutB } = this.getLUT(blackLevel, whiteLevel, gainR, gainB);\n\n        // 3. 创建8位输出图像\n        const img8 = new cv.Mat(img16.rows, img16.cols, cv.CV_8UC1);\n\n        // 4. 使用LUT应用白平衡和拉伸\n        // 为避免像素遍历，我们使用更高效的方式\n        const rows = img16.rows;\n        const cols = img16.cols;\n        const data8 = img8.data;\n\n        // 确定Bayer模式的位置\n        let rOffsets, gOffsets, bOffsets;\n        switch (bayerPattern) {\n          case 'RGGB':\n            rOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            bOffsets = [{ y: 1, x: 1 }];\n            break;\n          case 'GR':\n            gOffsets = [{ y: 0, x: 0 }, { y: 1, x: 1 }];\n            rOffsets = [{ y: 0, x: 1 }];\n            bOffsets = [{ y: 1, x: 0 }];\n            break;\n          case 'GB':\n            gOffsets = [{ y: 0, x: 0 }, { y: 1, x: 1 }];\n            bOffsets = [{ y: 0, x: 1 }];\n            rOffsets = [{ y: 1, x: 0 }];\n            break;\n          case 'BG':\n            bOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            rOffsets = [{ y: 1, x: 1 }];\n            break;\n          default:\n            rOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            bOffsets = [{ y: 1, x: 1 }];\n        }\n\n        // 使用TypedArray方式处理 - 比逐个像素处理更快\n        const data16U = img16.data16U;\n\n        // 使用Bayer掩码创建转换LUT，批量处理\n        for (let y = 0; y < rows; y += 2) {\n          for (let x = 0; x < cols; x += 2) {\n            // 处理2x2块\n            // R位置\n            for (const pos of rOffsets) {\n              const idx = (y + pos.y) * cols + (x + pos.x);\n              if (idx < data16U.length) {\n                data8[idx] = lutR[data16U[idx]];\n              }\n            }\n\n            // G位置\n            for (const pos of gOffsets) {\n              const idx = (y + pos.y) * cols + (x + pos.x);\n              if (idx < data16U.length) {\n                data8[idx] = lutG[data16U[idx]];\n              }\n            }\n\n            // B位置\n            for (const pos of bOffsets) {\n              const idx = (y + pos.y) * cols + (x + pos.x);\n              if (idx < data16U.length) {\n                data8[idx] = lutB[data16U[idx]];\n              }\n            }\n          }\n        }\n\n        // 5. 将8位单通道转为RGBA\n        const rgbaImg = new cv.Mat();\n        let cvmode;\n        switch (bayerPattern) {\n          case 'RGGB': cvmode = cv.COLOR_BayerRG2RGBA; break;\n          case 'GR': cvmode = cv.COLOR_BayerGR2RGBA; break;\n          case 'GB': cvmode = cv.COLOR_BayerGB2RGBA; break;\n          case 'BG': cvmode = cv.COLOR_BayerBG2RGBA; break;\n          default: cvmode = cv.COLOR_GRAY2RGBA;\n        }\n\n        cv.cvtColor(img8, rgbaImg, cvmode);\n        img8.delete();\n\n        return rgbaImg;\n      }\n    },\n    /**\n     * 获取或计算LUT表\n     * @param {number} blackLevel - 黑点值\n     * @param {number} whiteLevel - 白点值\n     * @param {number} gainR - 红色增益\n     * @param {number} gainB - 蓝色增益\n     * @returns {Object} 包含LUT表的Object\n     */\n    getLUT(blackLevel, whiteLevel, gainR, gainB) {\n      // 创建当前参数的快照\n      const currentParams = `${blackLevel}_${whiteLevel}_${gainR}_${gainB}`;\n\n      // 如果参数未变化，直接返回缓存的LUT表\n      if (this.lutCache.lastParams === currentParams &&\n        this.lutCache.lutR && this.lutCache.lutG && this.lutCache.lutB) {\n        return {\n          lutR: this.lutCache.lutR,\n          lutG: this.lutCache.lutG,\n          lutB: this.lutCache.lutB\n        };\n      }\n\n      // 参数变化，需要重新计算LUT表\n      console.log('重新计算LUT表');\n\n      // 计算转换比例\n      const scale = 255.0 / (whiteLevel - blackLevel);\n\n      // 创建LUT表\n      const lutR = this.lutCache.lutR || new Uint8Array(65536);\n      const lutG = this.lutCache.lutG || new Uint8Array(65536);\n      const lutB = this.lutCache.lutB || new Uint8Array(65536);\n\n      // 计算LUT表\n      for (let i = 0; i < 65536; i++) {\n        lutR[i] = Math.min(255, Math.max(0, Math.round((i * gainR - blackLevel) * scale)));\n        lutG[i] = Math.min(255, Math.max(0, Math.round((i - blackLevel) * scale)));\n        lutB[i] = Math.min(255, Math.max(0, Math.round((i * gainB - blackLevel) * scale)));\n      }\n\n      // 更新缓存\n      this.lutCache.lastParams = currentParams;\n      this.lutCache.lutR = lutR;\n      this.lutCache.lutG = lutG;\n      this.lutCache.lutB = lutB;\n\n      return { lutR, lutG, lutB };\n    },\n    // checkImageData(img) {\n    //   // 检查是否为 cv.Mat 类型\n    //   if (!(img instanceof cv.Mat)) {\n    //     this.SendConsoleLogMsg('The image is not a valid cv.Mat object.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像是否为空\n    //   if (img.empty()) {\n    //     this.SendConsoleLogMsg('The image is empty.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像深度是否为 8 位或 16 位\n    //   const depth = img.type() & cv.CV_MAT_DEPTH_MASK;\n    //   if (depth !== cv.CV_8U && depth !== cv.CV_16U) {\n    //     this.SendConsoleLogMsg('The image depth is not 8-bit or 16-bit.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像尺寸是否合理\n    //   if (img.rows <= 0 || img.cols <= 0) {\n    //     this.SendConsoleLogMsg('The image dimensions are not valid.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像数据是否超出范围或全为0\n    //   const data = img.data;\n    //   let isAllZero = true;\n    //   const maxValue = depth === cv.CV_8U ? 255 : 65535;\n\n    //   for (let i = 0; i < data.length; i++) {\n    //     if (data[i] < 0 || data[i] > maxValue) {\n    //       this.SendConsoleLogMsg('The image data contains out-of-range values.', 'error');\n    //       return false;\n    //     }\n    //     if (data[i] !== 0) {\n    //       isAllZero = false;\n    //     }\n    //   }\n\n    //   if (isAllZero) {\n    //     this.SendConsoleLogMsg('The image data is all zero.', 'error');\n    //     return false;\n    //   }\n    //   return true;\n    // },\n\n\n    // processImage(imgArray) {\n    //   this.progressValue = 0;\n    //   try {\n    //     if (!(imgArray instanceof ArrayBuffer) && !ArrayBuffer.isView(imgArray)) {\n    //       throw new Error(\"Input must be ArrayBuffer or TypedArray\");\n    //     }\n    //     const totalStartTime = new Date(); // 总开始时间\n\n    //     this.SendConsoleLogMsg('CaptureTestTime | Process image data start.', 'info');\n    //     const startTime = new Date();\n    //     let img_bit = -1;\n    //     let uintArray;\n    //     if (imgArray.byteLength === this.mainCameraSizeX * this.mainCameraSizeY * 2 ){\n    //       uintArray = new Uint16Array(imgArray);\n    //       img_bit = 16;\n    //     }else if(imgArray.byteLength === this.mainCameraSizeX * this.mainCameraSizeY){\n    //       uintArray = new Uint8Array(imgArray);\n    //       img_bit = 8;\n    //     }else{\n    //       this.SendConsoleLogMsg(`Image data is underfind bit`, 'error');\n    //       return;\n    //     }\n\n    //     this.SendConsoleLogMsg(`Image data detected as ${img_bit}-bit.`, 'info');\n\n\n\n    //     // 设置画布宽高常量\n    //     const canvasWidth = parseInt(this.mainCameraSizeX);\n    //     const canvasHeight = parseInt(this.mainCameraSizeY);\n\n    //     // 获取原始画布和修改后的画布以及对应上下文\n    //     const modifiedCanvas = document.getElementById('mainCamera-canvas');\n    //     const modifiedCtx = modifiedCanvas.getContext('2d');\n\n\n\n    //     modifiedCanvas.width = canvasWidth;\n    //     modifiedCanvas.height = canvasHeight;\n\n    //     let mat;\n    //     if (img_bit === 16){\n    //       mat = new cv.Mat(canvasHeight, canvasWidth, cv.CV_16UC1);\n    //       mat.data16U.set(uintArray);\n    //     }else{\n    //       mat = new cv.Mat(canvasHeight, canvasWidth, cv.CV_8UC1);\n    //       mat.data.set(uintArray);\n    //     }\n    //     this.progressValue = 10;\n\n    //     const matEndTime = new Date(); // mat 结束时间\n    //     this.SendConsoleLogMsg('CaptureTestTime | Mat creation time: ' + (matEndTime.getTime() - startTime.getTime()) + ' ms', 'info');\n\n    //     // 用户自定义参数\n    //     let gainR = this.ImageGainR;\n    //     let gainB = this.ImageGainB;\n    //     let offset = this.ImageOffset;\n    //     let CFA = this.ImageCFA;\n    //     let mode = 1;\n\n    //     // 参数\n    //     let B = 0;\n    //     let W = 65535;\n    //     let cvmode = 0;\n\n    //     const { blackLevel, whiteLevel } = this.GetAutoStretch(uintArray, mode, img_bit);\n    //     B = blackLevel;\n    //     W = whiteLevel;\n    //     this.progressValue = 30;\n    //     const GetAutoStretchEndTime = new Date(); // GetAutoStretch 结束时间\n    //     this.SendConsoleLogMsg('CaptureTestTime | GetAutoStretch time: ' + (GetAutoStretchEndTime.getTime() - matEndTime.getTime()) + ' ms', 'info');\n\n    //     // 根据CFA设置颜色转换模式\n    //     if (CFA === 'GR') {\n    //       cvmode = cv.COLOR_BayerGR2RGBA;\n    //     } else if (CFA === 'GB') {\n    //       cvmode = cv.COLOR_BayerGB2RGBA;\n    //     } else if (CFA === 'BG') {\n    //       cvmode = cv.COLOR_BayerBG2RGBA;\n    //     } else if (CFA === 'RGGB') {\n    //       cvmode = cv.COLOR_BayerRG2RGBA;\n    //     }else{\n    //       cvmode = cv.COLOR_GRAY2RGBA\n    //     }\n\n    //     // 对目标图像进行颜色转换\n    //     let dst = new cv.Mat();\n\n    //     try {\n    //       cv.cvtColor(mat, dst, cvmode);\n    //     } catch (error) {\n    //       this.handleError('cvtColor 出错', 'cvtColor', error);\n    //       mat.delete();\n    //       return;\n    //     }\n\n    //     this.progressValue = 50;\n\n    //     const cvtColorEndTime = new Date(); // cvtColor 结束时间\n    //     this.SendConsoleLogMsg('CaptureTestTime | cvtColor time: ' + (cvtColorEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n    //     mat.delete();\n\n    //     // 调整图像大小\n    //     // cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n    //     // dst.delete();\n\n    //     // let originalImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n    //     // resizeImg.delete();\n\n    //     let resizeImg = new cv.Mat(); // 用来存储调整后的图像\n    //     if (this.isPolarAxisMode) {\n    //       this.progressValue = 0;\n    //       // 调整图像大小\n    //       cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n    //       dst.delete();\n\n    //       let originalImg8;\n    //       if (img_bit === 16){\n    //         originalImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n    //       }else{\n    //         originalImg8 = resizeImg;\n    //       }\n\n    //       resizeImg.delete();\n\n    //       const Bit16To8_StretchEndTime = new Date(); // Bit16To8_Stretch 结束时间\n    //       this.SendConsoleLogMsg('CaptureTestTime | Bit16To8_Stretch time: ' + (Bit16To8_StretchEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n    //       let targetImg8 = this.ImageSoftAWB(originalImg8, gainR, gainB, offset);\n    //       this.$bus.$emit('showSolveImage', targetImg8);\n\n    //       const ImageSoftAWBEndTime = new Date(); // ImageSoftAWB 结束时间\n    //       this.SendConsoleLogMsg('CaptureTestTime | ImageSoftAWB time: ' + (ImageSoftAWBEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n    //     } else {\n    //       modifiedCtx.clearRect(0, 0, modifiedCanvas.width, modifiedCanvas.height);\n    //       cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n    //       this.progressValue = 70;\n    //       let originalResizeImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n    //       this.OriginalImage = new ImageData(new Uint8ClampedArray(originalResizeImg8.data), originalResizeImg8.cols, originalResizeImg8.rows);\n    //       resizeImg.delete();\n    //       originalResizeImg8.delete();\n    //       console.log('dst.data.length: ', dst.data.length);\n    //       console.log('dst.cols: ', dst.cols);\n    //       console.log('dst.rows: ', dst.rows);\n    //       let originalImg8 = this.Bit16To8_Stretch(dst, B, W);\n    //       dst.delete();\n    //       this.progressValue = 80;\n\n    //       const Bit16To8_StretchEndTime = new Date(); // Bit16To8_Stretch 结束时间\n    //       this.SendConsoleLogMsg('CaptureTestTime | Bit16To8_Stretch time: ' + (Bit16To8_StretchEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n    //       // let targetImg8 = this.ImageSoftAWB(originalImg8, gainR, gainB, offset);\n\n    //       // const ImageSoftAWBEndTime = new Date(); // ImageSoftAWB 结束时间\n    //       // this.SendConsoleLogMsg('CaptureTestTime | ImageSoftAWB time: ' + (ImageSoftAWBEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n\n    //       // originalImg8.delete();\n\n    //       this.lastImageProcessParams = {\n    //         gainR: gainR,\n    //         gainB: gainB,\n    //         offset: offset,\n    //         CFA: CFA,\n    //         mode: mode,\n    //         B: B,\n    //         W: W,\n    //         cvmode: cvmode,\n    //       };\n\n    //       modifiedCanvas.width = this.CanvasWidth;\n    //       modifiedCanvas.height = this.CanvasHeight;\n    //       let colorData = new ImageData(new Uint8ClampedArray(originalImg8.data), originalImg8.cols, originalImg8.rows);\n    //       originalImg8.delete();\n    //       this.drawImgData = colorData;\n    //       this.progressValue = 90;\n    //       // 设置缓冲画布宽高\n    //       this.bufferCanvas.width = colorData.width;\n    //       this.bufferCanvas.height = colorData.height;\n    //       // 绘制缓存画布图像\n    //       this.bufferCtx.putImageData(colorData, 0, 0);\n    //       // 绘制主画布图像\n    //       this.drawImageData();\n    //       this.progressValue = 100;\n    //       const DrawImageDataEndTime = new Date(); // DrawImageData 结束时间\n    //       this.SendConsoleLogMsg('CaptureTestTime | DrawImageData time: ' + (DrawImageDataEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n\n    //       const endTime = new Date();\n    //       const elapsedTime = endTime.getTime() - startTime.getTime();\n    //       this.SendConsoleLogMsg('CaptureTestTime | Process image data end:' + elapsedTime + ' milliseconds', 'info');\n\n    //       const totalEndTime = new Date(); // 总结束时间\n    //       this.SendConsoleLogMsg('CaptureTestTime | Total process image data time: ' + (totalEndTime.getTime() - totalStartTime.getTime()) + ' ms', 'info');\n\n    //       this.$bus.$emit('showCaptureImage');\n    //       this.MakeHistogram(colorData);\n    //       this.histogramImage = colorData;\n\n    //       const checkDetectedStarsFinish = () => {\n    //         if (this.DetectedStarsFinish) {\n    //           this.detectStarsImg = this.DrawDetectStars(targetImg8, this.DetectedStarsList);\n    //           targetImg8.delete();\n    //           clearInterval(intervalId);\n    //         }\n    //       };\n\n    //       const intervalId = setInterval(checkDetectedStarsFinish, 1000);\n    //     }\n\n    //     // if (this.isNotDrawStars) {\n    //     //   this.drawImageData(this.drawImgData);\n    //     // } else {\n    //     //   if (this.detectStarsImg != null) {\n    //     //     this.drawImageData(this.detectStarsImg);\n    //     //   } else {\n    //     //     this.drawImageData(this.drawImgData);\n    //     //   }\n    //     // }\n\n    //     // const windowWidth = window.innerWidth;\n    //     // const windowHeight = window.innerHeight;\n\n    //     // const minTranslateX = this.imageWidth - this.CanvasWidth;\n    //     // const minTranslateY = this.imageHeight - this.CanvasHeight;\n\n    //     // 计算初始的 ScaleImageSize_X 和 ScaleImageSize_Y\n    //     // this.ScaleImageSize_X = Math.floor(minTranslateX / this.CanvasWidth * windowWidth + windowWidth);\n    //     // this.ScaleImageSize_Y = Math.floor(minTranslateY / this.CanvasHeight * windowHeight + windowHeight);\n\n    //     // this.$bus.$emit('ScaleImageSize', this.ScaleImageSize_X, this.ScaleImageSize_Y);\n\n    //   } catch (error) {\n    //     this.handleError('Process image data error', 'processImage', error);\n    //     if (mat) {\n    //       mat.delete();\n    //     }\n    //     if (resizeImg) {\n    //       resizeImg.delete();\n    //     }\n    //     if (originalImg8) {\n    //       originalImg8.delete();\n    //     }\n    //     if (targetImg8) {\n    //       targetImg8.delete();\n    //     }\n    //   }\n    // },\n\n    // histogramStretch(imageData, min, max) {\n    //   const startTime = new Date();\n    //   // Convert ImageData to cv.Mat\n    //   const image = cv.matFromImageData(imageData);\n    //   let Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 转换图像数据时间: ' + (Time1.getTime() - startTime.getTime()) + ' ms', 'info');\n    //   // Perform the histogram stretch\n    //   const channels = new cv.MatVector();\n    //   cv.split(image, channels); // Split channels (BGR) into separate Mat objects\n    //   let Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 分割通道时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Calculate alpha and beta for each channel\n    //   let alpha = 255.0 / (max - min);\n    //   let beta = -min * alpha;\n\n    //   if (alpha < 0) {\n    //     alpha = 0;\n    //     beta = 0;\n    //   } else if (alpha > 255) {\n    //     alpha = 255;\n    //     beta = 0;\n    //   }\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 计算alpha和beta时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   // Iterate over each channel and apply histogram stretching\n    //   for (let i = 0; i < channels.size(); i++) {\n    //     let channel = channels.get(i);\n\n\n    //     // Apply histogram stretching to the channel\n    //     channel.convertTo(channel, -1, alpha, beta);\n\n    //     // Release the memory of channel\n    //     channel.delete();\n    //   }\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 各通道拉伸时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Merge the channels back into a single image\n    //   const stretchImage = new cv.Mat();\n    //   cv.merge(channels, stretchImage);\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 合并通道时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   // Release the memory of channels and MatVector\n    //   channels.delete();\n\n    //   // Convert cv.Mat back to ImageData\n    //   const stretchedImageData = new ImageData(new Uint8ClampedArray(stretchImage.data), stretchImage.cols, stretchImage.rows);\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 转换图像数据时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Clean up\n    //   image.delete();\n    //   stretchImage.delete();\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 释放内存时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   this.SendConsoleLogMsg('histogramStretch | 总时间: ' + (Time1.getTime() - startTime.getTime()) + ' ms', 'info');\n    //   return stretchedImageData;\n    // },\n\n    histogramStretch(imageData, min, max) {\n      if (max < min) {\n        this.SendConsoleLogMsg('histogramStretch | max < min, return original imageData', 'warning');\n        max = min;\n      }\n      const startTime = new Date();\n      // Calculate alpha and beta\n      let alpha = 255.0 / (max - min);\n      let beta = -min * alpha;\n\n      if (alpha < 0) {\n        alpha = 0;\n        beta = 0;\n      } else if (alpha > 255) {\n        alpha = 255;\n        beta = 0;\n      }\n\n      // Apply histogram stretching directly on ImageData\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        for (let j = 0; j < 3; j++) { // For each color channel\n          let value = imageData.data[i + j];\n          value = value * alpha + beta;\n          imageData.data[i + j] = Math.max(0, Math.min(255, value));\n        }\n      }\n\n      const endTime = new Date();\n      this.SendConsoleLogMsg('histogramStretch | 总时间: ' + (endTime.getTime() - startTime.getTime()) + ' ms', 'info');\n      return imageData;\n    },\n    localWhiteBalanceAdjustment(imageData, gainR, gainB, offset) {\n      // 分离通道\n      let value;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        for (let j = 0; j < 3; j++) { // For each color channel\n          if (j == 0) {\n            value = imageData.data[i + j];\n            value = value * gainB + offset;\n          } else if (j == 2) {\n            value = imageData.data[i + j];\n            value = value * gainR + offset;\n          } else {\n            value = imageData.data[i + j];\n            value = value * 1 + offset;\n          }\n          imageData.data[i + j] = Math.max(0, Math.min(255, value));\n        }\n      }\n\n\n      return imageData;\n    },\n\n    initCanvas() {\n      this.bufferCanvas = document.createElement('canvas');\n      this.bufferCtx = this.bufferCanvas.getContext('2d');\n\n      this.tempCanvas = document.createElement('canvas');\n      this.tempCtx = this.tempCanvas.getContext('2d');\n    },\n\n    //*/*/*/*/*/*/*/*/*/*/*/\n    SwitchImageToShow(isOriginal) {\n      // console.log('Show Original Image: ', isOriginal);\n      this.SendConsoleLogMsg('Show Original Image:' + isOriginal, 'info');\n      this.isNotDrawStars = isOriginal;\n      if (isOriginal) {\n        // document.removeEventListener('click', this.handleTouchOrMouseDown);\n        this.enableMainCanvasClick = false;\n        this.drawImageData();\n      } else {\n        // document.addEventListener('click', this.handleTouchOrMouseDown);\n        this.enableMainCanvasClick = true;\n        // this.drawImageData(this.detectStarsImg);\n      }\n    },\n\n\n\n    drawImageData() {\n      if (this.bufferCanvas == null) {\n        this.SendConsoleLogMsg('drawImageData error: bufferCanvas is null or undefined.', 'error');\n        return;\n      }\n      if (!this.drawImgData) return;\n\n      // 可用相关参数\n      // window.innerWidth; // 窗口宽度\n      // window.innerHeight; // 窗口高度\n      // this.scale 缩放比例\n      // this.translateX 平移x坐标\n      // this.translateY 平移y坐标\n      // this.CanvasWidth 主画布宽度 1920\n      // this.CanvasHeight 主画布高度 1080\n      // this.mainCameraSizeX 原始图像宽度\n      // this.mainCameraSizeY 原始图像高度\n      // this.bufferCanvas.width 缓冲画布宽度\n      // this.bufferCanvas.height 缓冲画布高度\n      // this.ImageProportion 图像比例\n      // this.ROI_x ROI的x坐标\n      // this.ROI_y ROI的y坐标\n      // this.ROI_length ROI的长度\n\n      // console.log('当前画布参数:\\n bufferCanvas.width: ', this.bufferCanvas.width, '\\n bufferCanvas.height: ', this.bufferCanvas.height, '\\n ImageProportion: ', this.ImageProportion, '\\n scale: ', this.scale, '\\n visibleX: ', this.visibleX, '\\n visibleY: ', this.visibleY, '\\n visibleWidth: ', this.visibleWidth, '\\n visibleHeight: ', this.visibleHeight, '\\n ROI_x: ', this.ROI_x, '\\n ROI_y: ', this.ROI_y, '\\n ROI_length: ', this.ROI_length);\n\n\n      // 计算可见区域\n      const newVisibleWidth = this.bufferCanvas.width * this.scale;\n      const newVisibleHeight = newVisibleWidth / this.ImageProportion;\n\n      // 计算可见区域x坐标\n      let newVisibleX = this.visibleX;\n      // 计算可见区域y坐标\n      let newVisibleY = this.visibleY;\n\n      // 避免图像越界\n      if (newVisibleX - newVisibleWidth / 2 < 0) {\n        newVisibleX = newVisibleWidth / 2;\n      } else if (newVisibleX + newVisibleWidth / 2 > this.bufferCanvas.width) {\n        newVisibleX = this.bufferCanvas.width - newVisibleWidth / 2;\n      }\n\n      if (newVisibleY - newVisibleHeight / 2 < 0) {\n        newVisibleY = newVisibleHeight / 2;\n      } else if (newVisibleY + newVisibleHeight / 2 > this.bufferCanvas.height) {\n        newVisibleY = this.bufferCanvas.height - newVisibleHeight / 2;\n      }\n\n      // 更新ROI区域\n      // 计算可见区域的边界\n      const visibleLeft = newVisibleX - newVisibleWidth / 2;\n      const visibleRight = newVisibleX + newVisibleWidth / 2;\n      const visibleTop = newVisibleY - newVisibleHeight / 2;\n      const visibleBottom = newVisibleY + newVisibleHeight / 2;\n\n      // 计算 ROI 区域的边界\n      const roiLeft = this.ROI_x;\n      const roiRight = this.ROI_x + this.ROI_length;\n      const roiTop = this.ROI_y;\n      const roiBottom = this.ROI_y + this.ROI_length;\n\n      // 判断 ROI 区域是否在可见区域内\n      const isRoiInVisible = roiRight >= visibleLeft && roiLeft <= visibleRight && roiBottom >= visibleTop && roiTop <= visibleBottom;\n\n      // 计算 ROI 区域在屏幕上的位置，中心点坐标\n      const roiScreenX = (this.ROI_x - visibleLeft) * (window.innerWidth / newVisibleWidth) + this.RedBoxSideLength * window.innerWidth / newVisibleWidth / 2;\n      const roiScreenY = (this.ROI_y - visibleTop) * (window.innerHeight / newVisibleHeight) + this.RedBoxSideLength * window.innerHeight / newVisibleHeight / 2;\n      // this.SendConsoleLogMsg('ROI 区域在屏幕上的位置: ' + roiScreenX + '*' + roiScreenY + '长度 ' + this.RedBoxSideLength * window.innerWidth / newVisibleWidth + '*' + this.RedBoxSideLength * window.innerHeight / newVisibleHeight, 'info');\n      this.$bus.$emit('setRedBoxLength', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n      this.$bus.$emit('setRedBoxPosition', roiScreenX, roiScreenY);\n\n\n      const canvas = this.$refs.mainCanvas;\n      const ctx = canvas.getContext('2d');\n      canvas.width = this.CanvasWidth;\n      canvas.height = this.CanvasHeight;\n\n      ctx.drawImage(this.bufferCanvas, visibleLeft, visibleTop, newVisibleWidth, newVisibleHeight, 0, 0, canvas.width, canvas.height);\n\n      this.visibleX = newVisibleX;\n      this.visibleY = newVisibleY;\n      this.visibleWidth = newVisibleWidth;\n      this.visibleHeight = newVisibleHeight;\n\n      this.$bus.$emit('setCurrentMainCanvasHasImage', true); // 发送给电调，用于判断是否可以进行循环拍摄\n      // 发送消息给QT客户端，用于信息图标\n      // 统一坐标：发送给 QT 的 ROI 坐标采用传感器像素坐标（不再按 bin 放大），避免在回环中被重复乘以 bin 导致指数级增长\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendVisibleArea:' + this.visibleX + ':' + this.visibleY + ':' + this.scale);\n\n      // 如果选择了星点，则根据选择位置，在ROI区域中绘制一个圆\n      if (this.DrawSelectStarX != -1 && this.DrawSelectStarY != -1 && this.showSelectStar) {\n        let radius, canvasStarX, canvasStarY, color;\n        // 如果有星点\n        if (this.DrawSelectStarHFR != -1) {\n          radius = this.DrawSelectStarHFR / this.scale * 2;\n          if (radius <= 1) radius = 1;\n          canvasStarX = (this.DrawSelectStarX / this.cameraBin + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n          canvasStarY = (this.DrawSelectStarY / this.cameraBin + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n          color = 'green'; // 有星点，绘制绿色的圆\n        } else {\n          // 否则，在选择的位置绘制一个圆\n          radius = 10 / this.scale; // 你可以根据需要调整这个值\n          canvasStarX = (this.DrawSelectStarX / this.cameraBin + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n          canvasStarY = (this.DrawSelectStarY / this.cameraBin + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n          color = 'red'; // 无星点，绘制红色的圆\n        }\n\n        // 获取绘制圆的位置的图像数据\n        const imageData = ctx.getImageData(canvasStarX - radius, canvasStarY - radius, 2 * radius, 2 * radius);\n        // 发送图像数据给显示框\n        this.$bus.$emit('selectStarImage', imageData);\n        console.log('绘制星点的位置和大小: x =', canvasStarX, 'y =', canvasStarY, 'radius =', radius);\n        // 在指定位置开始绘制圆\n        ctx.beginPath();\n        ctx.arc(canvasStarX, canvasStarY, radius, 0, 2 * Math.PI);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 3;\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n    },\n\n    addEventListeners() {\n\n    },\n\n    // 节流函数\n    throttle(func, delay) {\n      let lastExecuted = 0;\n      return function (...args) {\n        const now = Date.now();\n        if (now - lastExecuted >= delay) {\n          func.apply(this, args);\n          lastExecuted = now;\n        }\n      };\n    },\n\n    Bit16To8_Stretch(img16, B, W) {\n      console.log('Bit16To8_Stretch | B = ' + B + ', W = ' + W);\n      let img8 = new cv.Mat(img16.rows, img16.cols, cv.CV_8UC4);\n      img16.convertTo(img8, cv.CV_8U, 255.0 / (W - B), -B * 255.0 / (W - B));\n      return img8;\n    },\n\n    DrawDetectStars(image, Stars) {\n      console.log('Draw circle on the Capture Image(', image.cols, ',', image.rows, ').');\n      if (!(image instanceof cv.Mat)) {\n        throw new Error('Invalid image data');\n      }\n      Stars.forEach(star => {\n        let centerX = Math.round(star.x / (this.mainCameraSizeX / image.cols));\n        let centerY = Math.round(star.y / (this.mainCameraSizeY / image.rows));\n        let radius = Math.round(star.hfr);\n\n        console.log('Draw circle at(', centerX, ',', centerY, ') with radius:', radius);\n\n        let center = new cv.Point(centerX, centerY);\n        let color = new cv.Scalar(255, 0, 0, 255);\n        let thickness = 2; // 圆圈厚度\n\n        cv.circle(image, center, radius, color, thickness);\n\n        // 添加 hfr 值到圆的上方\n        // 确保 star.hfr 是一个数字\n        let hfrValue = parseFloat(star.hfr);\n        if (isNaN(hfrValue)) {\n          hfrValue = 0; // 如果 star.hfr 不能转换为数字，则默认值设为0\n        }\n\n        // 保留到小数点后2位\n        let text = hfrValue.toFixed(2);\n        let fontFace = cv.FONT_HERSHEY_SIMPLEX;\n        let fontScale = 1;\n        let textColor = new cv.Scalar(255, 0, 0, 255);\n        let textThickness = 2;\n\n        // 手动设置文本的位置，假设字体高度大约为10像素\n        let textX = centerX - (text.length * 10); // 估算每个字符宽度为5像素\n        let textY = centerY - radius - 3; // 圆的上方 3 像素\n\n        // 在图像上绘制文本\n        cv.putText(image, text, new cv.Point(textX, textY), fontFace, fontScale, textColor, textThickness);\n      });\n\n      const imageData = new ImageData(new Uint8ClampedArray(image.data), image.cols, image.rows);\n\n      return imageData;\n    },\n\n    DrawPHD2Box(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const BoxWidth = 20 / ratioZoomX;\n      const BoxHeight = 20 / ratioZoomY;\n\n      const BoxStartX = Box_X / ratioZoomX - BoxWidth / 2;\n      const BoxStartY = Box_Y / ratioZoomY - BoxHeight / 2;\n\n      this.$bus.$emit('PHD2BoxPosition', BoxStartX, BoxStartY, BoxWidth, BoxHeight);\n    },\n\n    DrawPHD2Cross(PHD2ImageSize_X, PHD2ImageSize_Y, Cross_X, Cross_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const CrossStartX = Cross_X / ratioZoomX;\n      const CrossStartY = Cross_Y / ratioZoomY;\n\n      this.$bus.$emit('PHD2CrossPosition', CrossStartX, CrossStartY);\n    },\n\n    DrawPHD2MultiStars(PHD2ImageSize_X, PHD2ImageSize_Y, Star_X, Star_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const StarStartX = Star_X / ratioZoomX - 12 / 2;\n      const StarStartY = Star_Y / ratioZoomY - 12 / 2;\n\n      this.$bus.$emit('PHD2MultiStarsPosition', StarStartX, StarStartY);\n    },\n\n    calculateHistogram(imageData) {\n      console.log('QHYCCD | calculateHistogram');\n      const histogram = [\n        Array(256).fill(0), // 存储蓝色通道直方图\n        Array(256).fill(0), // 存储绿色通道直方图\n        Array(256).fill(0)  // 存储红色通道直方图\n      ];\n\n      // 分别计算三个通道的直方图\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const r = imageData.data[i];\n        const g = imageData.data[i + 1];\n        const b = imageData.data[i + 2];\n\n        // 更新每个通道的直方图\n        histogram[0][b]++;\n        histogram[1][g]++;\n        histogram[2][r]++;\n      }\n\n      return histogram;\n    },\n\n    applyHistStretch(Min, Max) {\n      this.currentHistogramMin = Min;\n      this.currentHistogramMax = Max;\n      if (this.ImageArrayBuffer) {\n        this.processImage(this.ImageArrayBuffer, Min, Max, { calculateHistogram: false });\n      }\n      this.$bus.$emit('ChangeDialPosition', Min, Max);\n    },\n\n\n    calcWhiteBalanceGains() {\n      // const Gains = this.calculateWhiteBalanceGains(this.histogramData, this.ImageOffset);\n      this.calculateGain = true;\n      this.processImage(this.ImageArrayBuffer, this.currentHistogramMin, this.currentHistogramMax, { calculateHistogram: false });\n\n      this.ImageGainR = Gains.GainR;\n      this.ImageGainB = Gains.GainB;\n\n      const GainRIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ImageGainR');\n      if (GainRIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.MainCameraConfigItems[GainRIndex].value = this.ImageGainR;\n      } else {\n        console.error('ImageGainR configuration item not found.');\n      }\n\n      const GainBIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ImageGainB');\n      if (GainBIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.MainCameraConfigItems[GainBIndex].value = this.ImageGainB;\n      } else {\n        console.error('ImageGainB configuration item not found.');\n      }\n\n    },\n\n\n    calculateWhiteBalanceGains() {\n      if (!(this.OriginalImage instanceof ImageData)) {\n        throw new Error('Invalid image data');\n      }\n\n      // 创建 cv.Mat 对象\n      const img8 = cv.matFromImageData(this.OriginalImage);\n\n      // 分割通道\n      const channels = new cv.MatVector();\n      cv.split(img8, channels);\n\n      // 获取各通道\n      const b = channels.get(0);\n      const g = channels.get(1);\n      const r = channels.get(2);\n\n      // 计算中位数\n      const medianB = new cv.Mat();\n      const medianG = new cv.Mat();\n      const medianR = new cv.Mat();\n      cv.medianBlur(b, medianB, 5);\n      cv.medianBlur(g, medianG, 5);\n      cv.medianBlur(r, medianR, 5);\n\n      // 计算平均亮度\n      const avgB = cv.mean(medianB)[0];\n      const avgG = cv.mean(medianG)[0];\n      const avgR = cv.mean(medianR)[0];\n\n      // 计算增益\n      const gainR = Math.min(Math.max(avgG / avgR, 0.1), 3);\n      const gainB = Math.min(Math.max(avgG / avgB, 0.1), 3);\n\n      // 释放内存\n      b.delete();\n      g.delete();\n      r.delete();\n      medianB.delete();\n      medianG.delete();\n      medianR.delete();\n      channels.delete();\n      img8.delete();\n\n      return { GainR: gainR, GainB: gainB };\n    },\n\n    loadOpenCv() {\n      return new Promise((resolve, reject) => {\n        if (typeof cv === 'undefined') {\n          // 如果 cv 未定义，尝试加载 OpenCV.js\n          const script = document.createElement('script');\n          script.src = '/opencv.js'; // 使用 public 文件夹中的路径\n          script.async = true;\n          script.onload = () => {\n            resolve();\n          };\n          script.onerror = (error) => {\n            reject(error);\n          };\n          document.head.appendChild(script);\n        } else {\n          // 如果 cv 已定义，直接解析\n          resolve();\n        }\n      });\n    },\n\n\n    onCvReady() {\n\n      // Test if some of opencv method can work.\n      if (cv) {\n        console.log(\"QHYCCD | OpenCV.js is ready.\");\n        this.SendConsoleLogMsg('OpenCV.js is ready.', 'info');\n      } else {\n        console.log(\"QHYCCD | Failed to load OpenCV.js\");\n        this.SendConsoleLogMsg('Failed to load OpenCV.js.', 'error');\n      }\n\n      this.cvReady = true;\n    },\n\n\n    loadImageToCanvasMainCamera: function () {\n      const canvas = document.getElementById('mainCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n      image.src = BackgroundImage;\n    },\n    loadImageToCanvasGuiderCamera: function () {\n      const canvas = document.getElementById('guiderCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n      image.src = BackgroundImage;\n    },\n\n\n    showGuiderCameraCanvas() {\n      // 动态更新z-index\n      this.canvasZIndexStel = -10;\n      this.canvasZIndexMainCamera = -11;\n      this.canvasZIndexGuiderCamera = 0;\n      this.$bus.$emit('setParsingProgress', false);\n\n      // this.convertToGrayscale();\n    },\n\n    showStelCanvas() {\n      if (this.isPolarAxisMode) {\n        this.$bus.$emit('setParsingProgress', true);\n      } else {\n        this.$bus.$emit('setParsingProgress', false);\n      }\n      this.canvasZIndexStel = 0;\n      this.canvasZIndexMainCamera = -10;\n      this.canvasZIndexGuiderCamera = -11;\n    },\n\n    showMainCameraCanvas() {\n      this.canvasZIndexStel = -10;\n      this.canvasZIndexMainCamera = 0;\n      this.canvasZIndexGuiderCamera = -11;\n\n      this.$bus.$emit('setParsingProgress', false);\n    },\n\n\n    handleButtonTestClick() {\n      // this.changeOrder();\n      if (this.currentcanvas === 'Stel') {\n        this.currentcanvas = 'MainCamera';\n        this.showMainCameraCanvas();\n      }\n      else if (this.currentcanvas === 'MainCamera') {\n        this.currentcanvas = 'GuiderCamera';\n        this.showGuiderCameraCanvas();\n      }\n      else if (this.currentcanvas === 'GuiderCamera') {\n        this.currentcanvas = 'Stel';\n        this.showStelCanvas();\n      }\n    },\n\n    getPluginsMenuItems: function () {\n      let res = []\n      for (const i in this.$stellariumWebPlugins()) {\n        const plugin = this.$stellariumWebPlugins()[i]\n        if (plugin.menuItems) {\n          res = res.concat(plugin.menuItems)\n        }\n      }\n      return res\n    },\n    getPluginsMenuComponents: function () {\n      let res = []\n      for (const i in this.$stellariumWebPlugins()) {\n        const plugin = this.$stellariumWebPlugins()[i]\n        if (plugin.menuComponents) {\n          res = res.concat(plugin.menuComponents)\n        }\n      }\n      return res\n    },\n    toggleStoreValue: function (storeVarName) {\n      this.nav = false;\n      this.$store.commit('toggleBool', storeVarName)\n    },\n    getStoreValue: function (storeVarName) {\n      return _.get(this.$store.state, storeVarName)\n    },\n    setStateFromQueryArgs: function () {\n      // Check whether the observing panel must be displayed\n      this.$store.commit('setValue', { varName: 'showSidePanel', newValue: this.$route.path.startsWith('/p/') })\n\n      // Set the core's state from URL query arguments such\n      // as date, location, view direction & fov\n      let that = this\n\n      if (!this.initDone) {\n        this.$stel.core.time_speed = 1\n        let d = new Date()\n        if (this.$route.query.date) {\n          d = new Moment(this.$route.query.date).toDate()\n          this.$stel.core.observer.utc = d.getMJD()\n          this.startTimeIsSet = true\n        }\n\n        if (this.$route.query.lng && this.$route.query.lat) {\n          const pos = { lat: Number(this.$route.query.lat), lng: Number(this.$route.query.lng), alt: this.$route.query.elev ? Number(this.$route.query.elev) : 0, accuracy: 1 }\n          swh.geoCodePosition(pos, that).then((loc) => {\n            that.$store.commit('setCurrentLocation', loc)\n          }, (error) => { console.log(error) })\n        }\n\n        this.$stel.core.observer.yaw = this.$route.query.az ? Number(this.$route.query.az) * Math.PI / 180 : 0\n        this.$stel.core.observer.pitch = this.$route.query.alt ? Number(this.$route.query.alt) * Math.PI / 180 : 30 * Math.PI / 180\n        this.$stel.core.fov = this.$route.query.fov ? Number(this.$route.query.fov) * Math.PI / 180 : 120 * Math.PI / 180\n\n        this.initDone = true\n      }\n\n      if (this.$route.path.startsWith('/skysource/')) {\n        const name = decodeURIComponent(this.$route.path.substring(11))\n        console.log('Will select object: ' + name)\n        this.SendConsoleLogMsg('Will select object: ' + name, 'info');\n        return swh.lookupSkySourceByName(name).then(ss => {\n          if (!ss) {\n            return\n          }\n          let obj = swh.skySource2SweObj(ss)\n          if (!obj) {\n            obj = this.$stel.createObj(ss.model, ss)\n            this.$selectionLayer.add(obj)\n          }\n          if (!obj) {\n            console.warning(\"Can't find object in SWE: \" + ss.names[0])\n          }\n          swh.setSweObjAsSelection(obj)\n        }, err => {\n          console.log(err)\n          console.log(\"Couldn't find skysource for name: \" + name)\n          this.SendConsoleLogMsg(\"Couldn't find skysource for name: \" + name, 'error');\n        })\n      }\n    },\n\n    lookatcircle() {\n      // glStel.core.selection = glTestCircle;\n      glStel.pointAndLock(glTestCircle);\n    },\n\n    setGloabalStel: function (stel) {\n      return stel;\n    },\n\n    setGlobalLayer: function (stel) {\n      return stel.createLayer({ id: 'testLayerStars', z: 7, visible: true });\n    },\n\n    // 坐标验证方法\n    isValidCoordinate: function (coord) {\n      // 如果是字符串，尝试转换为数字\n      if (typeof coord === 'string') {\n        coord = parseFloat(coord);\n      }\n\n      return typeof coord === 'number' &&\n        !isNaN(coord) &&\n        isFinite(coord) &&\n        coord >= -360 &&\n        coord <= 360;\n    },\n\n    vec3_from_sphe: function (ra_degree, dec_degree, out) {\n      // 确保坐标是数字类型\n      let ra = ra_degree;\n      let dec = dec_degree;\n\n      if (typeof ra === 'string') {\n        ra = parseFloat(ra);\n      }\n      if (typeof dec === 'string') {\n        dec = parseFloat(dec);\n      }\n\n      // 添加坐标验证\n      if (!this.isValidCoordinate(ra) || !this.isValidCoordinate(dec)) {\n        console.error('无效的坐标输入:', { ra_degree, dec_degree, converted: { ra, dec } });\n        return;\n      }\n\n      try {\n        const cp = Math.cos(dec * Math.PI / 180);\n        out[0] = Math.cos(ra * Math.PI / 180) * cp;\n        out[1] = Math.sin(ra * Math.PI / 180) * cp;\n        out[2] = Math.sin(dec * Math.PI / 180);\n      } catch (error) {\n        console.error('坐标转换出错:', error, { ra_degree, dec_degree, converted: { ra, dec } });\n      }\n    },\n\n    testAddCircle: function (stel, layer) {\n      console.log(\"Add a circle star near polaris\");\n\n      // 为临时对象创建带有名称的配置\n      const circleConfig = {\n        id: 'test_circle_' + Date.now(),\n        model_data: {},\n        names: ['Test Circle'],  // 添加名称\n        types: ['Temporary'],\n        model: 'temporary'\n      };\n\n      let circle = stel.createObj('circle', circleConfig);\n\n      circle.update();\n      layer.add(circle);\n\n      // 现在可以安全地选择对象，因为它有名称\n      stel.core.selection = circle;\n      stel.pointAndLock(circle);\n\n      // Circle Property\n      let mm = circle.pos;\n      this.vec3_from_sphe(2.52971, 89.2641, mm);\n      circle.pos = mm;\n      console.log(\"circle pos:\" + mm);\n      circle.label = \"\";\n      circle.frame = 1;\n      circle.size = [0.05, 0.05];\n      circle.color = [0, 1, 0, 0.25];\n      circle.border_color = [0, 1, 0, 1];\n\n      return circle;\n    },\n\n    UpdateCirclePos(Ra_degree, Dec_degree) {\n      // 添加安全检查\n      if (!glTestCircle || !glTestCircle.pos) {\n        console.warn('glTestCircle 未初始化，跳过位置更新');\n        return;\n      }\n      \n      let mm = glTestCircle.pos;\n      this.vec3_from_sphe(Ra_degree, Dec_degree, mm);\n      glTestCircle.pos = mm;\n      // console.log(\"赤道仪位置更新为:\"+Ra_degree+\"+\"+Dec_degree);\n    },\n\n    UpdateTelescopeStatus(status) {\n      this.$bus.$emit('MountStatus', status);\n      \n      // 添加安全检查\n      if (!glTestCircle) {\n        console.warn('glTestCircle 未初始化，跳过状态更新');\n        return;\n      }\n      \n      if (status === 'Moving') {\n        glTestCircle.color = [1, 0, 0, 0.25];\n        glTestCircle.border_color = [1, 0, 0, 1];\n      } else {\n        glTestCircle.color = [0, 1, 0, 0.25];\n        glTestCircle.border_color = [0, 1, 0, 1];\n      }\n    },\n\n    UpdateMainCameraStatus(status) {\n      this.$bus.$emit('MainCameraStatus', status);\n    },\n\n    // 绘制视场多边形（基于五个RA/DEC坐标的闭环）\n    AddFieldOfViewPolygon: function (stel, layer, coordinates, color, name) {\n      console.log(`开始创建视场多边形: ${name}`, { coordinates, color });\n\n      try {\n        // 验证输入参数\n        if (!coordinates || !Array.isArray(coordinates)) {\n          console.error('视场坐标必须是数组');\n          return null;\n        }\n\n        if (coordinates.length !== 5) {\n          console.error(`视场坐标必须是5个点，当前有${coordinates.length}个点`);\n          return null;\n        }\n\n        // 验证每个坐标点\n        for (let i = 0; i < coordinates.length; i++) {\n          const coord = coordinates[i];\n          if (!coord || typeof coord.ra === 'undefined' || typeof coord.dec === 'undefined') {\n            console.error(`坐标点${i}格式错误，需要包含ra和dec属性:`, coord);\n            return null;\n          }\n\n          // 验证坐标值\n          if (!this.isValidCoordinate(coord.ra) || !this.isValidCoordinate(coord.dec)) {\n            console.error(`坐标点${i}的值无效:`, coord);\n            return null;\n          }\n        }\n\n        // 设置默认颜色\n        const defaultColor = {\n          stroke: \"#FFFFFF\",\n          strokeOpacity: 1,\n          fill: \"#1E90FF\",\n          fillOpacity: 0.25\n        };\n\n        const finalColor = { ...defaultColor, ...color };\n        console.log('最终颜色配置:', finalColor);\n\n        // 创建多边形对象\n        const polygonConfig = {\n          id: 'field_of_view_' + Date.now(),\n          model_data: {},\n          names: [name || 'Field of View'],\n          types: ['FieldOfView'],\n          model: 'field_of_view'\n        };\n\n        console.log('创建GeoJSON多边形对象');\n        let polygon = stel.createObj('geojson', {\n          data: {\n            \"type\": \"FeatureCollection\",\n            \"features\": [\n              {\n                \"type\": \"Feature\",\n                \"properties\": {\n                  \"stroke\": finalColor.stroke,\n                  \"stroke-opacity\": finalColor.strokeOpacity,\n                  \"fill\": finalColor.fill,\n                  \"fill-opacity\": finalColor.fillOpacity,\n                  \"name\": name || 'Field of View'\n                },\n                \"geometry\": {\n                  \"type\": \"Polygon\",\n                  \"coordinates\": [\n                    [\n                      // 五个坐标点，形成闭环\n                      [coordinates[0].ra, coordinates[0].dec],\n                      [coordinates[1].ra, coordinates[1].dec],\n                      [coordinates[2].ra, coordinates[2].dec],\n                      [coordinates[3].ra, coordinates[3].dec],\n                      [coordinates[0].ra, coordinates[0].dec]  // 闭合多边形\n                    ]\n                  ]\n                }\n              }\n            ]\n          }\n        });\n\n        if (!polygon) {\n          console.error('GeoJSON多边形对象创建失败');\n          return null;\n        }\n\n        console.log('多边形对象创建成功，开始更新和添加到图层');\n\n        // 设置对象属性\n        polygon.update();\n        layer.add(polygon);\n\n        console.log('多边形已添加到图层');\n\n        // // 添加标签（可选）\n        // if (name) {\n        //   console.log('添加多边形标签');\n        //   // 计算视场中心点\n        //   const centerRa = coordinates.reduce((sum, coord) => sum + coord.ra, 0) / coordinates.length;\n        //   const centerDec = coordinates.reduce((sum, coord) => sum + coord.dec, 0) / coordinates.length;\n\n        //   let labelCircle = this.AddMarkCircle(stel, layer, 4, name);\n        //   if (labelCircle) {\n        //     let labelMm = labelCircle.pos;\n        //     this.vec3_from_sphe(centerRa, centerDec + 0.02, labelMm); // 在视场上方显示名称\n        //     labelCircle.pos = labelMm;\n        //     labelCircle.color = [1, 1, 1, 0.8];  // 白色，半透明\n        //     labelCircle.border_color = [0, 0, 0, 0.5];  // 黑色边框，半透明\n        //     labelCircle.size = [0.01, 0.01];  // 很小的圆圈作为名称标签\n\n        //     // 将标签与多边形关联\n        //     polygon.labelCircle = labelCircle;\n        //     console.log('标签已添加到多边形');\n        //   } else {\n        //     console.warn('标签创建失败');\n        //   }\n        // }\n\n        console.log(`视场多边形创建完成: ${name || 'Field of View'}`, {\n          coordinates: coordinates,\n          color: finalColor,\n          polygon: polygon\n        });\n\n        return polygon;\n\n      } catch (error) {\n        console.error('创建视场多边形时出错:', error);\n        console.error('错误堆栈:', error.stack);\n        return null;\n      }\n    },\n\n    // 删除指定的视场多边形\n    RemoveFieldOfViewPolygon: function (polygon) {\n      try {\n        if (!polygon) {\n          console.warn('要删除的多边形对象为空');\n          return false;\n        }\n\n        // 删除关联的标签\n        if (polygon.labelCircle) {\n          glLayer.remove(polygon.labelCircle);\n        }\n\n        // 删除多边形\n        glLayer.remove(polygon);\n\n        console.log('视场多边形已删除:', polygon);\n        return true;\n\n      } catch (error) {\n        console.error('删除视场多边形时出错:', error);\n        return false;\n      }\n    },\n\n    // 删除所有视场多边形\n    RemoveAllFieldOfViewPolygons: function () {\n      try {\n        // 如果有多边形数组，遍历删除\n        if (this.fieldOfViewPolygons && Array.isArray(this.fieldOfViewPolygons)) {\n          this.fieldOfViewPolygons.forEach(polygon => {\n            this.RemoveFieldOfViewPolygon(polygon);\n          });\n          this.fieldOfViewPolygons = [];\n        }\n\n        console.log('所有视场多边形已删除');\n        return true;\n\n      } catch (error) {\n        console.error('删除所有视场多边形时出错:', error);\n        return false;\n      }\n    },\n\n    // 更新视场多边形的位置\n    UpdateFieldOfViewPolygonPosition: function (polygon, newCoordinates) {\n      try {\n        if (!polygon || !newCoordinates || !Array.isArray(newCoordinates) || newCoordinates.length !== 5) {\n          console.error('更新视场多边形位置时参数无效');\n          return false;\n        }\n\n        // 验证新坐标\n        for (let i = 0; i < newCoordinates.length; i++) {\n          const coord = newCoordinates[i];\n          if (!this.isValidCoordinate(coord.ra) || !this.isValidCoordinate(coord.dec)) {\n            console.error(`新坐标点${i}的值无效:`, coord);\n            return false;\n          }\n        }\n\n        // 更新多边形数据\n        polygon.data.features[0].geometry.coordinates[0] = [\n          [newCoordinates[0].ra, newCoordinates[0].dec],\n          [newCoordinates[1].ra, newCoordinates[1].dec],\n          [newCoordinates[2].ra, newCoordinates[2].dec],\n          [newCoordinates[3].ra, newCoordinates[3].dec],\n          [newCoordinates[4].ra, newCoordinates[4].dec],\n          [newCoordinates[0].ra, newCoordinates[0].dec]  // 闭合\n        ];\n\n        polygon.update();\n\n        // 更新标签位置（如果存在）\n        if (polygon.labelCircle) {\n          const centerRa = newCoordinates.reduce((sum, coord) => sum + coord.ra, 0) / newCoordinates.length;\n          const centerDec = newCoordinates.reduce((sum, coord) => sum + coord.dec, 0) / newCoordinates.length;\n\n          let labelMm = polygon.labelCircle.pos;\n          this.vec3_from_sphe(centerRa, centerDec + 0.02, labelMm);\n          polygon.labelCircle.pos = labelMm;\n        }\n\n        console.log('视场多边形位置已更新:', newCoordinates);\n        return true;\n\n      } catch (error) {\n        console.error('更新视场多边形位置时出错:', error);\n        return false;\n      }\n    },\n\n    UpdateMainCameraTemperature(value) {\n      // console.log('Main Camera Temperature:', value + '°');\n      this.$bus.$emit('MainCameraTemperature', value);\n    },\n\n    setPolarPointAltitude(Altitude) {\n      this.PolarPoint_Altitude = Altitude;\n      console.log('Polar Point Altitude:', this.PolarPoint_Altitude);\n      this.SendConsoleLogMsg('Polar Point Altitude:' + this.PolarPoint_Altitude, 'info');\n    },\n\n    AddMarkCircle: function (stel, layer, frame, label) {\n      console.log(`开始创建标记圆圈: ${label}`);\n\n      try {\n        // 为临时对象创建带有名称的配置\n        const circleConfig = {\n          id: 'temp_circle_' + Date.now(),\n          model_data: {},\n          names: [label || 'Temporary Marker'],  // 添加名称\n          types: ['Temporary'],\n          model: 'temporary'\n        };\n\n        console.log('创建圆形对象');\n        let circle = stel.createObj('circle', circleConfig);\n\n        if (!circle) {\n          console.error('圆形对象创建失败');\n          return null;\n        }\n\n        console.log('圆形对象创建成功，开始设置属性');\n        circle.update();\n        layer.add(circle);\n\n        // 设置默认位置（北极星附近）\n        let mm = circle.pos;\n        this.vec3_from_sphe(2.52971, 89.2641, mm);\n        circle.pos = mm;\n\n        // 设置圆形属性\n        circle.label = label;\n        circle.frame = frame;\n        circle.size = [0.04, 0.04];\n        circle.color = [1, 1, 1, 0.5];\n        circle.border_color = [1, 1, 1, 1];\n\n        console.log(`标记圆圈创建完成: ${label}`, {\n          pos: mm,\n          size: circle.size,\n          color: circle.color,\n          border_color: circle.border_color\n        });\n\n        return circle;\n      } catch (error) {\n        console.error('创建标记圆圈时出错:', error);\n        console.error('错误堆栈:', error.stack);\n        return null;\n      }\n    },\n\n    AddMarkRectangle: function (stel, layer, RaDec) {\n      let line = stel.createObj('geojson', {\n        data: {\n          \"type\": \"FeatureCollection\",\n          \"features\": [\n            {\n              \"type\": \"Feature\",\n              \"properties\": {\n                \"stroke\": \"#FFFFFF\",\n                \"stroke-opacity\": 1,\n                \"fill\": \"#1E90FF\",\n                \"fill-opacity\": 0.25\n              },\n              \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                  [\n                    // [139.76, 35.52], [139.32, 33.41], [140.92, 33.08], [141.35, 35.19], [139.76, 35.52]\n                    [parseFloat(RaDec[0].Ra), parseFloat(RaDec[0].Dec)], [parseFloat(RaDec[1].Ra), parseFloat(RaDec[1].Dec)],\n                    [parseFloat(RaDec[2].Ra), parseFloat(RaDec[2].Dec)], [parseFloat(RaDec[3].Ra), parseFloat(RaDec[3].Dec)],\n                    [parseFloat(RaDec[0].Ra), parseFloat(RaDec[0].Dec)]\n                  ]\n                ]\n              }\n            },\n          ]\n        }\n      });\n\n      line.update();\n      layer.add(line);\n      return line;\n    },\n\n\n\n    // 辅助方法：将十六进制颜色转换为RGB\n    hexToRgb: function (hex) {\n      // 移除#号\n      hex = hex.replace('#', '');\n\n      // 解析RGB值\n      const r = parseInt(hex.substr(0, 2), 16);\n      const g = parseInt(hex.substr(2, 2), 16);\n      const b = parseInt(hex.substr(4, 2), 16);\n\n      return { r, g, b };\n    },\n\n    // 更新视场方法\n    updateFieldOfView: function (field) {\n      if (!field || !field.fieldInfo) return;\n\n      const info = field.fieldInfo;\n\n      // 计算视场的四个角点\n      const corners = [\n        { Ra: info.maxRa, Dec: info.maxDec },\n        { Ra: info.minRa, Dec: info.maxDec },\n        { Ra: info.minRa, Dec: info.minDec },\n        { Ra: info.maxRa, Dec: info.minDec },\n        { Ra: info.maxRa, Dec: info.maxDec }  // 闭合多边形\n      ];\n\n      // 更新GeoJSON数据\n      field.data = {\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"stroke\": info.color,\n              \"strokeOpacity\": 0.8,\n              \"fill\": info.color,\n              \"fillOpacity\": 0.2\n            },\n            \"geometry\": {\n              \"type\": \"Polygon\",\n              \"coordinates\":\n                [\n                  [parseFloat(corners[0].Ra), parseFloat(corners[0].Dec)],\n                  [parseFloat(corners[1].Ra), parseFloat(corners[1].Dec)],\n                  [parseFloat(corners[2].Ra), parseFloat(corners[2].Dec)],\n                  [parseFloat(corners[3].Ra), parseFloat(corners[3].Dec)],\n                  [parseFloat(corners[4].Ra), parseFloat(corners[4].Dec)]\n                ]\n            }\n          }\n        ]\n      };\n\n      field.update();\n    },\n\n    // 启动视场更新定时器\n    startFieldUpdateTimer: function () {\n      if (this.fieldUpdateTimer) {\n        clearInterval(this.fieldUpdateTimer);\n      }\n\n      this.fieldUpdateTimer = setInterval(() => {\n        // 更新校准点视场\n        if (this.calibrationCircles) {\n          this.calibrationCircles.forEach(field => {\n            if (field.fieldInfo) {\n              this.updateFieldOfView(field);\n            }\n          });\n        }\n\n        // 更新调整点视场\n        if (this.adjustmentCircles) {\n          this.adjustmentCircles.forEach(field => {\n            if (field.fieldInfo) {\n              this.updateFieldOfView(field);\n            }\n          });\n        }\n      }, 3000); // 每3秒更新一次\n    },\n\n    // 停止视场更新定时器\n    stopFieldUpdateTimer: function () {\n      if (this.fieldUpdateTimer) {\n        clearInterval(this.fieldUpdateTimer);\n        this.fieldUpdateTimer = null;\n      }\n    },\n\n    getCiecleAzAlt(Circle) {\n      let obs = this.$stel.core.observer;\n      let cirs = this.$stel.convertFrame(obs, 'ICRF', 'CIRS', Circle.getInfo('radec'));\n      let observed = this.$stel.convertFrame(obs, 'CIRS', 'OBSERVED', cirs);\n      // const azalt = this.$stel.c2s(this.$stel.convertFrame(this.$stel.core.observer, 'ICRF', 'OBSERVED', obj.getInfo('radec')))\n      let azalt = this.$stel.c2s(observed);\n      let az = this.$stel.anp(azalt[0]);\n      let alt = this.$stel.anp(azalt[1]);\n\n      const az_raf = this.$stel.a2af(az, 1);\n      const Az_degree = (az_raf.degrees < 0 ? az_raf.degrees + 180 : az_raf.degrees) + az_raf.arcminutes / 60 + az_raf.arcseconds / 3600;\n\n      const alt_raf = this.$stel.a2af(alt, 1);\n      const Alt_degree = alt_raf.degrees + alt_raf.arcminutes / 60 + alt_raf.arcseconds / 3600;\n\n      console.log('AzAlt:', Az_degree, Alt_degree);\n\n      return { Az_degree, Alt_degree };\n    },\n\n    SolveResultMark(RaDegree, DecDegree, Azimuth, Altitude) {\n      let MarkCircle_RaDec = this.AddMarkCircle(this.$stel, glLayer, 1, \"RaDec\");\n      let mm = MarkCircle_RaDec.pos;\n      this.vec3_from_sphe(RaDegree, DecDegree, mm);\n      MarkCircle_RaDec.pos = mm;\n      console.log(\"RaDec circle coordinates:\" + mm);\n\n      const AzAlt = this.getCiecleAzAlt(MarkCircle_RaDec);\n      glLayer.remove(MarkCircle_RaDec);\n\n      this.MarkCircleNum++;\n      let Label = \"AzAlt_Vue_\" + this.MarkCircleNum;\n\n      let MarkCircle_AltAz = this.AddMarkCircle(this.$stel, glLayer, 4, Label);\n      mm = MarkCircle_AltAz.pos;\n      this.vec3_from_sphe(AzAlt.Az_degree, AzAlt.Alt_degree, mm);\n      MarkCircle_AltAz.pos = mm;\n      console.log(\"AzAlt_Vue circle coordinates:\" + mm);\n\n      console.log(\"AzAlt_Vue circle x:\" + mm[0]);\n      console.log(\"AzAlt_Vue circle y:\" + mm[1]);\n      console.log(\"AzAlt_Vue circle z:\" + mm[2]);\n\n      this.LastPoint_AzAlt = this.getCiecleAzAlt(MarkCircle_AltAz);\n\n      this.CalculationPolarPoint(mm);\n\n      // 将创建的圆存储到数组中\n      // this.Circles.push(MarkCircle_RaDec);\n      this.Circles.push(MarkCircle_AltAz);\n\n    },\n\n    RemoveAllCircles() {\n      this.Circles.forEach(circle => {\n        glLayer.remove(circle);\n      });\n      this.Circles = [];\n    },\n\n    SolveResultMark_RealTime(RaDegree, DecDegree, Azimuth, Altitude) {\n      this.LastCircle_RaDec = this.AddMarkCircle(this.$stel, glLayer, 1, \"RaDec\");\n      let mm = this.LastCircle_RaDec.pos;\n      this.vec3_from_sphe(RaDegree, DecDegree, mm);\n      this.LastCircle_RaDec.pos = mm;\n      console.log(\"RaDec circle coordinates:\" + mm);\n\n      const AzAlt = this.getCiecleAzAlt(this.LastCircle_RaDec);\n      glLayer.remove(this.LastCircle_RaDec);\n\n      if (this.LastCircle_AzAlt !== null && this.LastCircle_AzAlt !== undefined) {\n        glLayer.remove(this.LastCircle_AzAlt);\n      }\n      this.LastCircle_AzAlt = this.AddMarkCircle(this.$stel, glLayer, 4, 'Current');\n      mm = this.LastCircle_AzAlt.pos;\n      this.vec3_from_sphe(AzAlt.Az_degree, AzAlt.Alt_degree, mm);\n      this.LastCircle_AzAlt.pos = mm;\n      this.LastCircle_AzAlt.color = [0, 1, 1, 0.25];\n      console.log(\"AzAlt_Vue circle coordinates:\" + mm);\n\n      console.log(\"AzAlt_Vue circle x:\" + mm[0]);\n      console.log(\"AzAlt_Vue circle y:\" + mm[1]);\n      console.log(\"AzAlt_Vue circle z:\" + mm[2]);\n\n      this.Current_AzAlt = this.getCiecleAzAlt(this.LastCircle_AzAlt);\n      console.log(\"Current AzAlt:\", this.Current_AzAlt.Az_degree, this.Current_AzAlt.Alt_degree);\n      this.$bus.$emit('ShowCurrentAzAltText', this.Current_AzAlt.Az_degree, this.Current_AzAlt.Alt_degree);\n    },\n\n\n    CalculationPolarPoint(coordinate) {\n      this.CartesianList.push(coordinate);\n\n      if (this.CartesianList.length < 3) {\n        return;\n      }\n\n      this.$bus.$emit('HideSingleSolveBtn');\n\n      // 获取三个点的坐标\n      const p1 = this.CartesianList[0];\n      const p2 = this.CartesianList[1];\n      const p3 = this.CartesianList[2];\n\n      // 计算两个向量\n      const v1 = [\n        p2[0] - p1[0],\n        p2[1] - p1[1],\n        p2[2] - p1[2]\n      ];\n\n      const v2 = [\n        p3[0] - p1[0],\n        p3[1] - p1[1],\n        p3[2] - p1[2]\n      ];\n\n      // 计算法向量\n      const normal = [\n        v1[1] * v2[2] - v1[2] * v2[1],\n        v1[2] * v2[0] - v1[0] * v2[2],\n        v1[0] * v2[1] - v1[1] * v2[0]\n      ];\n\n      // 计算法向量的长度\n      const normalLength = Math.sqrt(normal[0] ** 2 + normal[1] ** 2 + normal[2] ** 2);\n\n      // 归一化法向量\n      const unitNormal = [\n        normal[0] / normalLength,\n        normal[1] / normalLength,\n        normal[2] / normalLength\n      ];\n\n      // 假设球的半径为r，圆心为(0, 0, 0)\n      const r = 1; // 根据你的实际情况调整\n\n      // 计算与球面的交点\n      const intersection1 = [\n        unitNormal[0] * r,\n        unitNormal[1] * r,\n        unitNormal[2] * r\n      ];\n\n      const intersection2 = [\n        -unitNormal[0] * r,\n        -unitNormal[1] * r,\n        -unitNormal[2] * r\n      ];\n\n      console.log('Intersection Points:', intersection1, intersection2);\n\n      // 选择离(0,0,1)更近的交点\n      const closerIntersection = intersection1[2] > 0 ? intersection1 : intersection2;\n\n      let MarkCircle_FakePolarPoint = this.AddMarkCircle(this.$stel, glLayer, 4, \"FakePolarPoint\");\n      let mm = MarkCircle_FakePolarPoint.pos;\n      mm[0] = closerIntersection[0];\n      mm[1] = closerIntersection[1];\n      mm[2] = closerIntersection[2];\n      MarkCircle_FakePolarPoint.pos = mm;\n      console.log(\"FakePolarPoint circle coordinates:\" + mm);\n\n      const AzAlt_FakePolarPoint = this.getCiecleAzAlt(MarkCircle_FakePolarPoint);\n\n      console.log(\"Fake Polar Point AzAlt:\", AzAlt_FakePolarPoint.Az_degree, ',', AzAlt_FakePolarPoint.Alt_degree);\n\n      this.Circles.push(MarkCircle_FakePolarPoint);\n\n      let AzAlt_PolarPoint = {\n        Az_degree: 0,\n        Alt_degree: this.PolarPoint_Altitude\n      };\n\n      // console.log(\"Real Polar Point AzAlt:\", AzAlt_PolarPoint.Az_degree, ',', AzAlt_PolarPoint.Alt_degree);\n      this.SendConsoleLogMsg('Real Polar Point AzAlt:' + AzAlt_PolarPoint.Az_degree + ',' + AzAlt_PolarPoint.Alt_degree, 'info');\n      // console.log(\"Last Point AzAlt:\", this.LastPoint_AzAlt.Az_degree, this.LastPoint_AzAlt.Alt_degree);\n      this.SendConsoleLogMsg('Last Point AzAlt:' + this.LastPoint_AzAlt.Az_degree + ',' + this.LastPoint_AzAlt.Alt_degree, 'info');\n\n      ////////////////////////////////////////////////\n\n      // // 将球坐标转换为笛卡尔坐标\n      // let fakePolarPoint = this.sphericalToCartesian(AzAlt_FakePolarPoint.Az_degree, AzAlt_FakePolarPoint.Alt_degree);\n      // let polarPoint = this.sphericalToCartesian(AzAlt_PolarPoint.Az_degree, AzAlt_PolarPoint.Alt_degree);\n      // let lastPoint = this.sphericalToCartesian(this.LastPoint_AzAlt.Az_degree, this.LastPoint_AzAlt.Alt_degree);\n\n      // // 计算旋转四元数\n      // let quaternion = this.computeQuaternion(fakePolarPoint, polarPoint);\n\n      // // 应用旋转\n      // let fourthPoint = this.applyQuaternion(lastPoint, quaternion);\n\n      // // 将结果转换回球坐标\n      // let fourthPointAzAlt = this.cartesianToSpherical(fourthPoint);\n      // console.log(\"Fourth Point AzAlt:\", fourthPointAzAlt.Az_degree, ',', fourthPointAzAlt.Alt_degree);\n\n      ////////////////////////////////////////////////\n\n      // 计算角度差值，考虑角度的循环性质\n      function calculateAngleDifference(angle1, angle2) {\n        let difference = angle2 - angle1;\n        while (difference > 180) difference -= 360;\n        while (difference < -180) difference += 360;\n        return difference;\n      }\n\n      let azimuthDifference = calculateAngleDifference(AzAlt_FakePolarPoint.Az_degree, AzAlt_PolarPoint.Az_degree);\n      let altitudeDifference = AzAlt_PolarPoint.Alt_degree - AzAlt_FakePolarPoint.Alt_degree;\n\n      // 应用差值到LastPoint\n      let fourthPointAzAlt = {\n        Az_degree: this.LastPoint_AzAlt.Az_degree + azimuthDifference,\n        Alt_degree: this.LastPoint_AzAlt.Alt_degree + altitudeDifference\n      };\n\n      // 确保方位角在0到360度之间\n      fourthPointAzAlt.Az_degree = (fourthPointAzAlt.Az_degree + 360) % 360;\n\n      // 确保高度角在-90到90度之间\n      fourthPointAzAlt.Alt_degree = Math.max(Math.min(fourthPointAzAlt.Alt_degree, 90), -90);\n\n      console.log(\"Fourth Point AzAlt:\", fourthPointAzAlt.Az_degree, ',', fourthPointAzAlt.Alt_degree);\n\n      this.$bus.$emit('ShowAzAltText', azimuthDifference, altitudeDifference, fourthPointAzAlt.Az_degree, fourthPointAzAlt.Alt_degree);\n\n      ////////////////////////////////////////////////\n\n      // 将角度转换为弧度\n      function degreesToRadians(degrees) {\n        return degrees * Math.PI / 180;\n      }\n\n      // 将球坐标转换为笛卡尔坐标\n      function sphericalToCartesian(azimuth, altitude) {\n        let az = degreesToRadians(azimuth);\n        let alt = degreesToRadians(altitude);\n        let x = Math.cos(alt) * Math.cos(az);\n        let y = Math.cos(alt) * Math.sin(az);\n        let z = Math.sin(alt);\n        return { x: x, y: y, z: z };\n      }\n\n      // 将第四个点转换为笛卡尔坐标\n      let fourthPointCartesian = sphericalToCartesian(fourthPointAzAlt.Az_degree, fourthPointAzAlt.Alt_degree);\n      console.log(\"Fourth Point Cartesian:\", fourthPointCartesian.x, ',', fourthPointCartesian.y, ',', fourthPointCartesian.z);\n\n      let MarkCircle_fourthPoint = this.AddMarkCircle(this.$stel, glLayer, 4, \"Target Point\");\n      mm = MarkCircle_fourthPoint.pos;\n      mm[0] = fourthPointCartesian.x;\n      mm[1] = fourthPointCartesian.y;\n      mm[2] = fourthPointCartesian.z;\n      MarkCircle_fourthPoint.pos = mm;\n      MarkCircle_fourthPoint.color = [1, 0, 0, 0.25];\n\n      this.Circles.push(MarkCircle_fourthPoint);\n\n      // 清空列表，准备下次计算\n      this.CartesianList = [];\n      this.MarkCircleNum = 0;\n    },\n\n    // 将角度转换为弧度\n    degreesToRadians(degrees) {\n      return degrees * Math.PI / 180;\n    },\n\n    // 将球坐标转换为笛卡尔坐标\n    sphericalToCartesian(azimuth, altitude) {\n      let az = this.degreesToRadians(azimuth);\n      let alt = this.degreesToRadians(altitude);\n      let x = Math.cos(alt) * Math.cos(az);\n      let y = Math.cos(alt) * Math.sin(az);\n      let z = Math.sin(alt);\n      return { x: x, y: y, z: z };\n    },\n\n    // 计算旋转四元数\n    computeQuaternion(from, to) {\n      let w = from.x * to.x + from.y * to.y + from.z * to.z + 1;\n      let x = from.y * to.z - from.z * to.y;\n      let y = from.z * to.x - from.x * to.z;\n      let z = from.x * to.y - from.y * to.x;\n\n      let norm = Math.sqrt(w * w + x * x + y * y + z * z);\n      return { w: w / norm, x: x / norm, y: y / norm, z: z / norm };\n    },\n\n    // 应用四元数旋转\n    applyQuaternion(point, quat) {\n      let x = quat.w * quat.w * point.x + 2 * quat.y * quat.w * point.z - 2 * quat.z * quat.w * point.y + quat.x * quat.x * point.x + 2 * quat.y * quat.x * point.y + 2 * quat.z * quat.x * point.z - quat.z * quat.z * point.x - quat.y * quat.y * point.x;\n      let y = 2 * quat.x * quat.y * point.x + quat.y * quat.y * point.y + 2 * quat.z * quat.y * point.z + 2 * quat.w * quat.z * point.x - quat.z * quat.z * point.y + quat.w * quat.w * point.y - 2 * quat.x * quat.w * point.z - quat.x * quat.x * point.y;\n      let z = 2 * quat.x * quat.z * point.x + 2 * quat.y * quat.z * point.y + quat.z * quat.z * point.z - 2 * quat.w * quat.y * point.x - quat.y * quat.y * point.z + 2 * quat.w * quat.x * point.y - quat.x * quat.x * point.z + quat.w * quat.w * point.z;\n      return { x: x, y: y, z: z };\n    },\n\n    // 将笛卡尔坐标转换回球坐标\n    cartesianToSpherical(cartesian) {\n      let r = Math.sqrt(cartesian.x ** 2 + cartesian.y ** 2 + cartesian.z ** 2);\n      let azimuth = Math.atan2(cartesian.y, cartesian.x);\n      let altitude = Math.asin(cartesian.z / r);\n      return {\n        Az_degree: azimuth * 180 / Math.PI,\n        Alt_degree: altitude * 180 / Math.PI\n      };\n    },\n\n    SolveFovMark(RaDec) {\n      console.log('RaDec[4]:', RaDec);\n\n      // let rectangle = this.AddMarkRectangle(this.$stel, glLayer, RaDec);\n\n      this.Circles.push(rectangle);\n\n    },\n\n    CalibratePolarAxis() {\n      this.$bus.$emit('CalibratePolarAxisMode');\n      // this.$bus.$emit('AppSendMessage', 'Vue_Command', 'StartLoopCapture');\n      this.nav = false;\n    },\n\n    RecalibratePolarAxis() {\n      // 清空列表，准备下次计算\n      this.CartesianList = [];\n      this.MarkCircleNum = 0;\n      this.RemoveAllCircles();\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ClearSloveResultList');\n    },\n\n\n\n    // 使用新的多边形方式绘制校准点\n    drawCalibrationPointPolygon(coordinates, color, name) {\n      console.log(`绘制校准点多边形: ${name}`, coordinates);\n\n      try {\n        // 验证输入参数\n        if (!coordinates || !Array.isArray(coordinates)) {\n          console.error('校准点坐标必须是数组');\n          return;\n        }\n\n        if (coordinates.length !== 5) {\n          console.error(`校准点坐标必须是5个点，当前有${coordinates.length}个点`);\n          return;\n        }\n\n        // 验证每个坐标点\n        for (let i = 0; i < coordinates.length; i++) {\n          const coord = coordinates[i];\n          if (!coord || typeof coord.ra === 'undefined' || typeof coord.dec === 'undefined') {\n            console.error(`校准点坐标${i}格式错误：`, coord);\n            return;\n          }\n\n          if (!this.isValidCoordinate(coord.ra) || !this.isValidCoordinate(coord.dec)) {\n            console.error(`校准点坐标${i}值无效：`, coord);\n            return;\n          }\n        }\n\n        // 使用新的多边形绘制方法\n        let calibrationPolygon = this.AddFieldOfViewPolygon(\n          this.$stel,\n          glLayer,\n          coordinates,\n          color,\n          name\n        );\n\n        if (calibrationPolygon) {\n          // 添加到校准点数组\n          if (!this.calibrationCircles) {\n            this.calibrationCircles = [];\n          }\n          this.calibrationCircles.push(calibrationPolygon);\n\n          console.log(`校准点多边形创建成功: ${name}`, calibrationPolygon);\n        } else {\n          console.error(`校准点多边形创建失败: ${name}`);\n        }\n\n      } catch (error) {\n        console.error('绘制校准点多边形时出错:', error);\n      }\n    },\n\n    // 清除所有校准点\n    clearCalibrationPoints() {\n      console.log('清除所有校准点');\n\n      // 确保数组存在\n      if (!this.calibrationCircles) {\n        this.calibrationCircles = [];\n      }\n      if (!this.adjustmentCircles) {\n        this.adjustmentCircles = [];\n      }\n\n      // 清除校准点\n      if (this.calibrationCircles.length > 0) {\n        console.log(`清除 ${this.calibrationCircles.length} 个校准点`);\n        this.calibrationCircles.forEach((circle, index) => {\n          try {\n            if (circle && glLayer) {\n              glLayer.remove(circle);\n              console.log(`成功清除校准点 ${index + 1}`);\n            }\n          } catch (error) {\n            console.warn(`清除校准点 ${index + 1} 时出错:`, error);\n          }\n        });\n        this.calibrationCircles = [];\n      }\n\n      // 清除调整点\n      if (this.adjustmentCircles.length > 0) {\n        console.log(`清除 ${this.adjustmentCircles.length} 个调整点`);\n        this.adjustmentCircles.forEach((circle, index) => {\n          try {\n            if (circle && glLayer) {\n              glLayer.remove(circle);\n              console.log(`成功清除调整点 ${index + 1}`);\n            }\n          } catch (error) {\n            console.warn(`清除调整点 ${index + 1} 时出错:`, error);\n          }\n        });\n        this.adjustmentCircles = [];\n      }\n\n      // 清除上一次位置\n      this.lastPosition = null;\n\n      // 清除目标点\n      if (this.targetPointCircle) {\n        try {\n          if (glLayer) {\n            glLayer.remove(this.targetPointCircle);\n            console.log('成功清除目标点');\n          }\n          this.targetPointCircle = null;\n        } catch (error) {\n          console.warn('清除目标点时出错:', error);\n        }\n      }\n\n      console.log('所有校准相关元素清除完成');\n    },\n\n\n    // 使用新的多边形方式绘制调整点\n    // 使用新的多边形方式绘制调整点（不在此处画圆）\n    drawAdjustmentPointsPolygon(currentCoordinates, targetCoordinates, currentColor, targetColor, isTimerUpdate) {\n      if (isTimerUpdate === undefined) isTimerUpdate = false;\n      console.log('绘制调整点多边形', { currentCoordinates, targetCoordinates });\n\n      try {\n        // 1) 清除之前的调整点\n        if (this.adjustmentCircles) {\n          this.adjustmentCircles.forEach(obj => {\n            try { glLayer.remove(obj); } catch (e) { console.warn('清除调整点时出错:', e); }\n          });\n        }\n        this.adjustmentCircles = [];\n\n        // 2) 绘制当前位置视场多边形\n        if (currentCoordinates && Array.isArray(currentCoordinates) && currentCoordinates.length === 5) {\n          console.log('绘制当前位置多边形');\n          const currentPolygon = this.AddFieldOfViewPolygon(\n            this.$stel,\n            glLayer,\n            currentCoordinates,\n            currentColor,\n            'Current'\n          );\n          if (currentPolygon) {\n            this.adjustmentCircles.push(currentPolygon);\n            console.log('当前位置多边形创建成功');\n          } else {\n            console.error('当前位置多边形创建失败');\n          }\n        } else {\n          console.warn('当前位置坐标无效，跳过绘制');\n        }\n\n        // 3) 视角转向（可选；不创建圆）\n        if (!isTimerUpdate && targetCoordinates && Array.isArray(targetCoordinates) && targetCoordinates.length === 5) {\n          try {\n            const centerRa = targetCoordinates.reduce((s, c) => s + c.ra, 0) / targetCoordinates.length;\n            const centerDec = targetCoordinates.reduce((s, c) => s + c.dec, 0) / targetCoordinates.length;\n            console.log(`视角转向目标: RA=${centerRa}, DEC=${centerDec}`);\n\n            // 用临时对象只做指向，不加入 layer\n            const targetObjConfig = {\n              id: 'temp_target_' + Date.now(),\n              model_data: {},\n              names: ['Target Position'],\n              types: ['Temporary'],\n              model: 'temporary'\n            };\n            const targetObj = this.$stel.createObj('circle', targetObjConfig);\n            let mm = targetObj.pos;\n            this.vec3_from_sphe(centerRa, centerDec, mm);\n            targetObj.pos = mm;\n            if (typeof targetObj.update === 'function') targetObj.update();\n\n            this.$stel.pointAndLock(targetObj, 1.0);\n            console.log('视角转向完成');\n\n            // 清理临时对象（未加入 layer，无需 remove）\n            setTimeout(() => { try { /* no-op */ } catch (_) { } }, 0);\n          } catch (error) {\n            console.error('视角转向出错:', error);\n          }\n        }\n\n      } catch (error) {\n        console.error('绘制调整点多边形时出错:', error);\n      }\n    },\n\n\n    // 绘制目标点圆形（坐标：RA/Dec，单位：度）\n    drawTargetPointCircle(targetRa, targetDec, color, name, text, clearlast) {\n      if (clearlast === undefined) clearlast = true; // 内部设置默认值\n      console.log('绘制目标点圆形', { targetRa, targetDec, color });\n\n      try {\n        // 1) 校验\n        if (!this.isValidCoordinate(targetRa) || !this.isValidCoordinate(targetDec)) {\n          console.error(text + '坐标无效:', { targetRa, targetDec });\n          return;\n        }\n\n        // 2) 清除之前的目标点\n        if (this.targetPointCircle && clearlast) {\n          try {\n            if (glLayer) {\n              glLayer.remove(this.targetPointCircle);\n              console.log('成功清除之前的' + name);\n            }\n          } catch (error) {\n            console.warn('清除之前的' + text + '时出错:', error);\n          }\n        }\n\n        // 3) 创建圆对象\n        const circle = this.AddMarkCircle(this.$stel, glLayer, 4, name); // frame=4：赤道系\n        if (!circle) {\n          console.error(text + '圆形创建失败');\n          return;\n        }\n\n        // 4) 位置（RA/Dec 度 → 3D 单位向量）\n        const mm = circle.pos;\n        this.vec3_from_sphe(targetRa, targetDec, mm);\n        circle.pos = mm;\n\n        // 5) 样式\n        if (color) {\n          const rgb = this.hexToRgb(color.stroke || color.fill || '#FF8C00');\n          const alpha = (color.fillOpacity || 0.3);\n          const borderAlpha = (color.strokeOpacity || 1.0);\n          circle.color = [rgb.r / 255, rgb.g / 255, rgb.b / 255, alpha];\n          circle.border_color = [rgb.r / 255, rgb.g / 255, rgb.b / 255, borderAlpha];\n        } else {\n          circle.color = [1, 0.55, 0, 0.3];\n          circle.border_color = [1, 0.55, 0, 1];\n        }\n        const size = 0.02;\n        circle.size = [size, size];\n\n        // 6) 更新 & 保存引用\n        if (typeof circle.update === 'function') circle.update();\n        this.targetPointCircle = circle;\n\n        console.log(text + '圆形创建成功', circle);\n      } catch (error) {\n        console.error('绘制' + text + '圆形时出错:', error);\n      }\n    },\n\n\n    // 绘制假极轴圆形\n    DrawFakePolarAxisCircle(targetRa, targetDec, color, name, text) {\n      console.log('绘制目标点圆形', { targetRa, targetDec, color });\n\n      try {\n        // 验证输入参数\n        if (!this.isValidCoordinate(targetRa) || !this.isValidCoordinate(targetDec)) {\n          console.error(text + '坐标无效:', { targetRa, targetDec });\n          return;\n        }\n\n        // 清除之前的目标点\n        if (this.fakePolarAxisCircle) {\n          try {\n            if (glLayer) {\n              glLayer.remove(this.fakePolarAxisCircle);\n              console.log('成功清除之前的' + name);\n            }\n          } catch (error) {\n            console.warn('清除之前的' + text + '时出错:', error);\n          }\n        }\n\n        // 创建目标点圆形\n        let targetCircle = this.AddMarkCircle(this.$stel, glLayer, 4, name);\n        if (targetCircle) {\n          // 设置目标点位置\n          let targetMm = targetCircle.pos;\n          this.vec3_from_sphe(targetRa, targetDec, targetMm);\n          targetCircle.pos = targetMm;\n\n          // 设置目标点颜色和样式\n          if (color) {\n            // 将十六进制颜色转换为RGB数组\n            const rgb = this.hexToRgb(color.stroke || color.fill || '#FF8C00');\n            const alpha = (color.fillOpacity || 0.3);\n            const borderAlpha = (color.strokeOpacity || 1.0);\n\n            targetCircle.color = [rgb.r / 255, rgb.g / 255, rgb.b / 255, alpha];\n            targetCircle.border_color = [rgb.r / 255, rgb.g / 255, rgb.b / 255, borderAlpha];\n          } else {\n            // 默认橙色\n            targetCircle.color = [1, 0.55, 0, 0.3];  // 橙色，半透明\n            targetCircle.border_color = [1, 0.55, 0, 1];  // 橙色边框\n          }\n\n          // 设置目标点大小\n          const targetSize = 0.02; // 固定小尺寸\n          targetCircle.size = [targetSize, targetSize];\n\n          // 保存目标点引用，用于后续清除\n          this.fakePolarAxisCircle = targetCircle;\n\n          console.log(text + '圆形创建成功', targetCircle);\n        } else {\n          console.error(text + '圆形创建失败');\n        }\n\n      } catch (error) {\n        console.error('绘制' + text + '圆形时出错:', error);\n      }\n    },\n\n    ShowConfirmDialog(Title, Text, ToDo) {\n      // window.location.reload();\n      this.nav = false;\n      this.$bus.$emit('ShowConfirmDialog', Title, Text, ToDo);\n    },\n\n    decrement(item) {\n      console.log('decrement:', item.value);\n      if (item.value > item.inputMin) {\n        item.value -= item.inputStep;\n      }\n    },\n\n    increment(item) {\n      console.log('increment:', item.value);\n      if (item.value < item.inputMax) {\n        item.value += item.inputStep;\n      }\n    },\n\n    PolarAxisMode(bool) {\n      this.isPolarAxisMode = bool;\n    },\n\n    handleGuiderCanvasClick(event) {\n      const canvas = this.$refs.guiderCanvas;\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left; // 点击坐标X\n      const y = event.clientY - rect.top;  // 点击坐标Y\n      console.log(`Clicked at: (${x}, ${y})`);\n      const CanvasWidth = window.innerWidth;\n      const CanvasHeight = window.innerHeight;\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderCanvasClick:' + CanvasWidth + ':' + CanvasHeight + ':' + x + ':' + y);\n    },\n    connectDriver() {\n      this.isConnecting = true;\n      // this.isOpenDevicePage = false;\n      this.startLoading();\n      const DeviceType = this.CurrentDriverType;\n      for (const device of this.devices) {\n        if (device.driverType === DeviceType && device.isConnected == false) {\n          const DriverName = device.driverName;\n          if (DriverName == '') {\n            this.SendConsoleLogMsg('No driver selected', 'warning');\n            this.isConnecting = false;\n            return;\n          }\n          this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConnectDriver:' + DriverName + ':' + DeviceType);\n          this.SendConsoleLogMsg('Start Connecting driver:' + DeviceType + ' ' + DriverName, 'info');\n          return;\n        }\n      }\n    },\n    connectDriverSuccess(devicetype) {\n      console.log('connectDriverSuccess:', devicetype);\n      this.SendConsoleLogMsg(\"connectDriverSuccess:\" + devicetype, 'info');\n      this.isConnecting = false;\n      if (this.drawer_2 == true) {\n        this.drawer_2 = false\n      }\n\n      this.stopLoading();\n    },\n    connectDriverFailed(message) {\n      console.log('connectDriverFailed:', message);\n      this.SendConsoleLogMsg(\"connectDriverFailed:\" + message, 'error');\n      this.isConnecting = false;\n      this.stopLoading();\n    },\n    disconnectDriver() {\n      const DeviceType = this.CurrentDriverType;\n      for (const device of this.devices) {\n        if (device.driverType === DeviceType && device.isConnected) {\n          this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DisconnectDevice:' + device.device + \":\" + DeviceType);\n        }\n      }\n    },\n    disconnectDriversuccess(devicetype) {\n      console.log('disconnectDevicesuccess:', devicetype);\n      this.drawer_2 = false\n      if (devicetype == \"all\") {\n        this.sendMessage('Vue_Command', 'disconnectAllDevice');\n        this.SendConsoleLogMsg('Disconnect All Device', 'info');\n        this.haveDeviceConnect = false;\n        this.$bus.$emit('MainCameraConnected', 0);\n        this.$bus.$emit('MountConnected', 0);\n        this.$bus.$emit('CFWConnected', 0);\n        this.$bus.$emit('GuiderConnected', 0);\n        this.clearDeviceList();\n        this.$bus.$emit('deleteDeviceTypeAllocationList', 'all');\n        return;\n      };\n\n      for (const device of this.devices) {\n        if (device.driverType === devicetype && device.isConnected) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n      for (const device of this.ToBeConnectDevice) {\n        if (device.driverType === devicetype) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n\n      this.$bus.$emit('deleteDeviceTypeAllocationList', devicetype);\n      if (devicetype == \"MainCamera\") {\n        this.$bus.$emit('MainCameraConnected', 0);\n      } else if (devicetype == \"Mount\") {\n        this.$bus.$emit('MountConnected', 0);\n      } else if (devicetype == \"CFW\") {\n        this.$bus.$emit('CFWConnected', 0);\n      } else if (devicetype == \"Guider\") {\n        this.$bus.$emit('GuiderConnected', 0);\n      }\n    },\n\n    disconnectDriverFail(devicetype) {\n      console.log('disconnectDeviceFail:', devicetype);\n      this.drawer_2 = false\n      if (devicetype == \"all\") {\n        this.sendMessage('Vue_Command', 'disconnectAllDevice');\n        this.SendConsoleLogMsg('Disconnect All Device', 'info');\n        this.haveDeviceConnect = false;\n        this.$bus.$emit('MainCameraConnected', 0);\n        this.$bus.$emit('MountConnected', 0);\n        this.$bus.$emit('CFWConnected', 0);\n        this.$bus.$emit('GuiderConnected', 0);\n        this.clearDeviceList();\n        this.$bus.$emit('deleteDeviceTypeAllocationList', 'all');\n        return;\n      };\n\n      for (const device of this.devices) {\n        if (device.driverType === devicetype && device.isConnected) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n      for (const device of this.ToBeConnectDevice) {\n        if (device.driverType === devicetype) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n\n      this.$bus.$emit('deleteDeviceTypeAllocationList', devicetype);\n      if (devicetype == \"MainCamera\") {\n        this.$bus.$emit('MainCameraConnected', 0);\n      } else if (devicetype == \"Mount\") {\n        this.$bus.$emit('MountConnected', 0);\n      } else if (devicetype == \"CFW\") {\n        this.$bus.$emit('CFWConnected', 0);\n      } else if (devicetype == \"Guider\") {\n        this.$bus.$emit('GuiderConnected', 0);\n      }\n    },\n    loadSelectedDriverList(deviceObject) {\n      console.log('loadSelectedDriverList:', deviceObject);\n      deviceObject.forEach(device => {\n        // 假设你想要打印每个设备对象的键值对\n        for (const [driverType, driverName] of Object.entries(device)) {\n          this.devices.forEach(device => {\n            if (device.driverType === driverType && device.isConnected == false) {\n              device.device = driverName;\n              device.driverName = driverName;\n            }\n          });\n        }\n      });\n    },\n    loadBindDeviceList(deviceObject) {\n      console.log('loadBindDeviceList:', deviceObject);\n      this.$bus.$emit('loadBindDeviceList', deviceObject);\n\n    },\n    loadBindDeviceTypeList(deviceTypeObject) {\n      console.log('loadBindDeviceTypeList:', deviceTypeObject);\n      this.$bus.$emit('loadBindDeviceTypeList', deviceTypeObject);\n      deviceTypeObject.forEach(deviceType => {\n        const { Type, DeviceName, DriverName, isbind } = deviceType;\n        this.updateDevicesConnect(Type, DeviceName, DriverName, isbind);\n      });\n    },\n    updateSelectedDriver(driverType) {\n\n      this.selectedDriver = null;\n      this.devices.forEach(device => {\n        if (device.driverType === driverType) {\n          this.selectedDriver = device.driverName\n        }\n      });\n      console.log('Current drivers:', this.selectedDriver);\n    },\n    startLoading() {\n      this.loadingDeviceSelection = true;\n    },\n    stopLoading() {\n      this.loadingDeviceSelection = false;\n    },\n    deleteDeviceAllocationList(deviceName) {\n      console.log('deleteDeviceAllocationList:', deviceName);\n      this.$bus.$emit('deleteDeviceAllocationList', deviceName);\n    },\n    UnBindingDevice(type, name, driverName) {\n      console.log('UnBindingDevice:', type, name, driverName);\n      this.updateDevicesConnect(type, name, driverName, false);\n    },\n\n    displayErrorImage() {\n      console.error(\"image is error, load errorImage.svg\");\n      const canvas = document.getElementById('mainCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n\n      image.onerror = () => {\n        console.error(\"Failed to load image from \" + image.src);\n        // 可以在这里添加备用图像或其他错误处理逻辑\n      };\n\n      // 确保ErrorImage是有效的URL\n      image.src = ErrorImage; // 请替换为实际的图像路径\n    },\n    handleError(message, location, error = null) {\n      const errorMsg = error ? `${message} at ${location}: ${error}` : `${message} at ${location}`;\n      console.error(errorMsg);\n      this.SendConsoleLogMsg(errorMsg, 'error');\n      this.displayErrorImage(); // 显示错误图像\n    },\n    showSelectdisconnectDriver(drivername) {\n      this.showDisconnectDialog = true;\n      this.currentDisconnectDriverName = drivername;\n    },\n    confirmDisconnect() {\n      this.sendMessage('Vue_Command', 'disconnectSelectDriver:' + this.currentDisconnectDriverName);\n      this.showDisconnectDialog = false;\n    },\n\n    // 主画布点击事件\n    handleMainCanvasClick(event) {\n      // this.SendConsoleLogMsg('触发鼠标点击事件:', 'info');\n      if (!this.enableMainCanvasClick || this.isDragging || this.drawImgData == null) return; // 如果画布不可点击，则不处理点击事件\n      // console.log('触发鼠标点击事件:', event);\n      const canvas = this.$refs.mainCanvas;\n      if (!canvas) return; // 确保 canvas 元素存在\n      const rect = canvas.getBoundingClientRect();// 获取 canvas 元素的边界矩形\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      console.log('Mouse clicked at:', x, y);\n      if (!this.isFocusLoopShooting) {\n        // 期望中心（画布坐标 → 传感器像素坐标）\n        const desiredCenterX = (x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2;\n        const desiredCenterY = (y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2;\n\n        // ROI 边长（像素，偶数化），来源于固定 RedBoxSideLength\n        let side = this.RedBoxSideLength / this.cameraBin;\n        side = Math.max(2, Math.floor(side));\n        if (side % 2 !== 0) side += 1; // 强制偶数\n\n        // 将 ROI 左上角按中心反推，并约束在图像范围内\n        const half = side / 2;\n        const imgW = this.mainCameraSizeX;\n        const imgH = this.mainCameraSizeY;\n\n        let roiX = desiredCenterX - half;\n        let roiY = desiredCenterY - half;\n\n        // 边界约束\n        const maxX = Math.max(0, imgW - side);\n        const maxY = Math.max(0, imgH - side);\n        roiX = Math.min(Math.max(0, roiX), maxX);\n        roiY = Math.min(Math.max(0, roiY), maxY);\n\n        // 偶数对齐位置\n        roiX = Math.floor(roiX);\n        roiY = Math.floor(roiY);\n        if (roiX % 2 !== 0) roiX += 1;\n        if (roiY % 2 !== 0) roiY += 1;\n\n        this.ROI_x = roiX;\n        this.ROI_y = roiY;\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendRedBoxState:' + this.RedBoxSideLength + ':' + this.ROI_x + ':' + this.ROI_y);\n      } else {\n        this.selectStarX = ((x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2 - this.ROI_x) * this.cameraBin; // 计算选择位置的x坐标\n        this.selectStarY = ((y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2 - this.ROI_y) * this.cameraBin; // 计算选择位置的y坐标\n\n        if (this.selectStarX >= 0 && this.selectStarX < this.RedBoxSideLength &&\n          this.selectStarY >= 0 && this.selectStarY < this.RedBoxSideLength) {\n          this.SendConsoleLogMsg('Select Star is in ROI', 'info');\n        } else {\n          this.SendConsoleLogMsg('Select Star is not in ROI', 'error');\n          this.selectStarX = -1;\n          this.selectStarY = -1;\n        }\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendSelectStars:' + this.selectStarX + ':' + this.selectStarY);\n      }\n      this.drawImageData();\n    },\n\n    // 主画布拖动\n    handleMouseDown(event) {\n      // this.SendConsoleLogMsg('触发鼠标按下事件:', 'info');\n      if (this.isDragging || this.drawImgData == null) return;\n      this.isDragging = true;\n      this.startX = event.clientX;\n      this.startY = event.clientY;\n      this.currentX = event.clientX;\n      this.currentY = event.clientY;\n\n      // 设置一个定时器，每100ms执行一次鼠标移动的逻辑\n      this.moveIntervalId = setInterval(() => {\n        if (!this.isDragging) return;\n\n        const dx = this.startX - this.currentX;\n        const dy = this.startY - this.currentY;\n        if (isNaN(dx) || isNaN(dy)) {\n          return;\n        }\n        let newVisibleX = this.visibleX + dx / window.innerWidth * this.visibleWidth;\n        let newVisibleY = this.visibleY + dy / window.innerHeight * this.visibleHeight;\n        if (newVisibleX < 0) {\n          newVisibleX = 0;\n        }\n        if (newVisibleY < 0) {\n          newVisibleY = 0;\n        }\n        if (newVisibleX > this.mainCameraSizeX) {\n          newVisibleX = this.mainCameraSizeX;\n        }\n        if (newVisibleY > this.mainCameraSizeY) {\n          newVisibleY = this.mainCameraSizeY;\n        }\n\n        this.visibleX = newVisibleX;\n        this.visibleY = newVisibleY;\n\n        this.startX = this.currentX;\n        this.startY = this.currentY;\n        this.drawImageData();\n        // this.SendConsoleLogMsg('拖动事件,拖动距离:' + dx + ',' + dy, 'info');\n      }, 100);\n    },\n    handleMouseMove(event) {\n      // this.SendConsoleLogMsg('触发鼠标移动事件:', 'info');\n      if (!this.isDragging) return;\n      this.currentX = event.clientX;\n      this.currentY = event.clientY;\n    },\n    handleMouseUp(event) {\n      // this.SendConsoleLogMsg('触发鼠标抬起事件:', 'info');\n      this.isDragging = false;\n\n      // 清除定时器\n      clearInterval(this.moveIntervalId);\n      this.moveIntervalId = null;\n    },\n    handleWheel(event) {\n      // this.SendConsoleLogMsg('触发鼠标滚轮事件:', 'info');\n      if (this.drawImgData == null) return;\n      const scaleChange = event.deltaY > 0 ? 0.1 : -0.1; // 根据滚轮的滚动方向，计算缩放比例的变化量\n      let newScale = this.scale + scaleChange; // 更新缩放比例\n      if (newScale < 0.1) {\n        newScale = 0.1;\n      }\n      if (newScale > 1) {\n        newScale = 1;\n      }\n\n      // 如果已经有一个待执行的缩放操作，则直接返回\n      if (this.pendingScaleChange) {\n        return;\n      }\n\n      // 标记有一个待执行的缩放操作\n      this.pendingScaleChange = true;\n\n      // 使用 requestAnimationFrame 来控制缩放操作的执行频率\n      requestAnimationFrame(() => {\n        if (newScale != this.scale) {\n          this.scale = newScale; // 更新缩放比例\n          this.$bus.$emit('setScale', this.scale);\n          this.drawImageData();\n          this.SendConsoleLogMsg('缩放比例变化,缩放比例:' + newScale, 'info');\n        } else {\n          this.SendConsoleLogMsg('缩放比例没有变化,缩放比例:' + this.scale, 'info');\n        }\n        this.pendingScaleChange = false; // 清除待执行的缩放操作标记\n      });\n    },\n\n    handleMainCanvasTouch(event) {\n      // this.SendConsoleLogMsg('触发触摸事件:', 'info');\n      if (!this.enableMainCanvasClick || this.isDragging || this.drawImgData == null) return; // 如果画布不可点击，则不处理点击事件\n      // console.log('触发触摸事件:', event);\n      if (!this.enableMainCanvasClick || !event.touches || event.touches.length === 0) return;\n      const canvas = this.$refs.mainCanvas;\n      if (!canvas) return; // 确保 canvas 元素存在\n      const touch = event.touches[0];\n      const rect = canvas.getBoundingClientRect();// 获取 canvas 元素的边界矩形\n      const x = touch.clientX - rect.left;\n      const y = touch.clientY - rect.top;\n      console.log('Touch at:', x, y);\n      event.preventDefault();// 阻止默认事件，如页面滚动\n      if (!this.isFocusLoopShooting) {\n        // 期望中心（画布坐标 → 传感器像素坐标）\n        const desiredCenterX = (x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2;\n        const desiredCenterY = (y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2;\n\n        // ROI 边长（像素，偶数化），来源于固定 RedBoxSideLength\n        let side = this.RedBoxSideLength / this.cameraBin;\n        side = Math.max(2, Math.floor(side));\n        if (side % 2 !== 0) side += 1; // 强制偶数\n\n        // 将 ROI 左上角按中心反推，并约束在图像范围内\n        const half = side / 2;\n        const imgW = this.mainCameraSizeX;\n        const imgH = this.mainCameraSizeY;\n\n        let roiX = desiredCenterX - half;\n        let roiY = desiredCenterY - half;\n\n        // 边界约束\n        const maxX = Math.max(0, imgW - side);\n        const maxY = Math.max(0, imgH - side);\n        roiX = Math.min(Math.max(0, roiX), maxX);\n        roiY = Math.min(Math.max(0, roiY), maxY);\n\n        // 偶数对齐位置\n        roiX = Math.floor(roiX);\n        roiY = Math.floor(roiY);\n        if (roiX % 2 !== 0) roiX += 1;\n        if (roiY % 2 !== 0) roiY += 1;\n\n        this.ROI_x = roiX;\n        this.ROI_y = roiY;\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendRedBoxState:' + this.RedBoxSideLength + ':' + this.ROI_x + ':' + this.ROI_y);\n      } else {\n        this.selectStarX = ((x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2 - this.ROI_x) * this.cameraBin; // 计算选择位置的x坐标\n        this.selectStarY = ((y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2 - this.ROI_y) * this.cameraBin; // 计算选择位置的y坐标\n\n        if (this.selectStarX >= 0 && this.selectStarX < this.RedBoxSideLength &&\n          this.selectStarY >= 0 && this.selectStarY < this.RedBoxSideLength) {\n          this.SendConsoleLogMsg('Select Star is in ROI', 'info');\n        } else {\n          this.SendConsoleLogMsg('Select Star is not in ROI', 'error');\n          this.selectStarX = -1;\n          this.selectStarY = -1;\n        }\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendSelectStars:' + this.selectStarX + ':' + this.selectStarY);\n      }\n      this.drawImageData();\n    },\n    handleTouchStart(event) {\n      if (this.drawImgData == null) return;\n      // this.SendConsoleLogMsg('触发触摸开始事件:', 'info');\n      if (event.touches.length === 1) { // 单指触摸，开始拖动\n        this.isOneTouch = true;\n        // this.SendConsoleLogMsg('触发单指触摸事件', 'info');\n        this.isDragging = true;\n        this.startTouchX[0] = event.touches[0].clientX;\n        this.startTouchY[0] = event.touches[0].clientY;\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        // 清除可能存在的双指触摸的定时器\n        if (this.zoomIntervalId) {\n          clearInterval(this.zoomIntervalId);\n          this.zoomIntervalId = null;\n        }\n\n\n        this.handleMainCanvasTouch(event);\n      } else if (event.touches.length >= 2) { // 双指触摸，开始缩放\n        this.isOneTouch = false;\n        // this.SendConsoleLogMsg('触发双指触摸事件', 'info');\n        this.isDragging = true;\n        // 计算两个触摸点之间的距离\n        const dx = this.currentTouchX[0] - this.currentTouchX[1];\n        const dy = this.currentTouchY[0] - this.currentTouchY[1];\n        this.startTouchDistance = Math.sqrt(dx * dx + dy * dy);\n        // 清除可能存在的单指触摸的定时器\n        if (this.moveIntervalId) {\n          clearInterval(this.moveIntervalId);\n          this.moveIntervalId = null;\n        }\n\n\n      } else {\n        // this.SendConsoleLogMsg('触发多指触摸事件，获取当前触摸点数量:' + event.touches.length, 'info');\n      }\n\n    },\n\n    handleTouchMove(event) {\n      // this.SendConsoleLogMsg('触发触摸移动事件:', 'info');\n      if (!this.isDragging || this.drawImgData == null) return;\n      if (event.touches.length == 1) {\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        if (this.zoomIntervalId) {\n          clearInterval(this.zoomIntervalId);\n          this.zoomIntervalId = null;\n        }\n        if (this.moveIntervalId != null) {\n          return;\n        }\n        // 设置一个定时器，每100ms执行一次触摸移动的逻辑\n        this.moveIntervalId = setInterval(() => {\n          // console.log('执行触摸移动!');\n          if (!this.isDragging || !this.isOneTouch) return;\n\n          const dx = this.startTouchX[0] - this.currentTouchX[0];\n          const dy = this.startTouchY[0] - this.currentTouchY[0];\n          if (isNaN(dx) || isNaN(dy)) {\n            return;\n          }\n          if (dx == 0 && dy == 0) {\n            return;\n          }\n\n          let newVisibleX = this.visibleX + dx / window.innerWidth * this.visibleWidth;\n          let newVisibleY = this.visibleY + dy / window.innerHeight * this.visibleHeight;\n          if (newVisibleX < 0) {\n            newVisibleX = 0;\n          }\n          if (newVisibleY < 0) {\n            newVisibleY = 0;\n          }\n          if (newVisibleX > this.mainCameraSizeX) {\n            newVisibleX = this.mainCameraSizeX;\n          }\n          if (newVisibleY > this.mainCameraSizeY) {\n            newVisibleY = this.mainCameraSizeY;\n          }\n\n          this.visibleX = newVisibleX;\n          this.visibleY = newVisibleY;\n\n          this.startTouchX[0] = this.currentTouchX[0];\n          this.startTouchY[0] = this.currentTouchY[0];\n\n          this.drawImageData();\n        }, 100);\n\n      } else if (event.touches.length >= 2) {\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        this.currentTouchX[1] = event.touches[1].clientX;\n        this.currentTouchY[1] = event.touches[1].clientY;\n\n        // 清除可能存在的单指触摸的定时器\n        if (this.moveIntervalId) {\n          clearInterval(this.moveIntervalId);\n          this.moveIntervalId = null;\n        }\n        if (this.zoomIntervalId != null) {\n          return;\n        }\n        // 设置一个定时器，每100ms执行一次缩放逻辑\n        this.zoomIntervalId = setInterval(() => {\n          if (!this.isDragging || !this.isOneTouch) return;\n          const dx = this.currentTouchX[0] - this.currentTouchX[1];\n          const dy = this.currentTouchY[0] - this.currentTouchY[1];\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          this.SendConsoleLogMsg('距离变化 distance:' + distance, 'info');\n          if (this.startTouchDistance == 0) {\n            this.startTouchDistance = distance;\n          }\n          // 计算缩放比例的变化量\n          const scaleChange = distance / this.startTouchDistance;\n          this.SendConsoleLogMsg('距离变化比例 scaleChange:' + scaleChange, 'info');\n          let newScale = this.scale * scaleChange; // 更新缩放比例\n          if (newScale < 0.1) {\n            newScale = 0.1;\n          }\n          if (newScale > 1) {\n            newScale = 1;\n          }\n          if (newScale != this.scale) {\n            this.SendConsoleLogMsg('缩放比例变化,缩放比例:' + newScale, 'info');\n            this.scale = newScale; // 更新缩放比例\n            this.$bus.$emit('setScale', this.scale);\n            this.drawImageData();\n          } else {\n            this.SendConsoleLogMsg('缩放比例没有变化,缩放比例:' + this.scale, 'info');\n          }\n          this.startTouchDistance = distance; // 更新两个触摸点之间的距离\n        }, 100);\n      } else {\n        this.SendConsoleLogMsg('触发多指触摸事件，获取当前触摸点数量:' + event.touches.length, 'info');\n      }\n    },\n\n    handleTouchEnd(event) {\n      // this.SendConsoleLogMsg('触发触摸结束事件:', 'info');\n      this.isDragging = false; // 停止拖动\n      // 清除定时器\n      if (this.moveIntervalId) {\n        clearInterval(this.moveIntervalId);\n        this.moveIntervalId = null;\n      }\n      if (this.zoomIntervalId) {\n        clearInterval(this.zoomIntervalId);\n        this.zoomIntervalId = null;\n      }\n    },\n\n    ScaleChange(type) {\n      if (this.drawImgData == null) return;\n      if (type == '+') {\n        this.scale -= 0.1;\n      } else if (type == '-') {\n        this.scale += 0.1;\n      }\n      if (this.scale < 0.1) {\n        this.scale = 0.1;\n      }\n      if (this.scale > 1) {\n        this.scale = 1;\n      }\n      this.$bus.$emit('setScale', this.scale);\n      this.drawImageData();\n    },\n\n    // 显示ROI图像\n    showRoiImage(fileName, destX, destY) {\n      if (this.RedBoxSideLength == 0 || this.RedBoxSideLength == null) {\n        this.SendConsoleLogMsg('RedBoxSideLength is 0 or null', 'error');\n        return;\n      }\n      if (this.isProcessingImage) {\n        this.SendConsoleLogMsg('Image is being transmitted, current processing is slow, skipping one frame.', 'warning');\n        return;\n      }\n      this.isProcessingImage = true;\n      const imagePath = 'img/' + fileName;\n      // 创建一个AbortController实例来取消fetch请求\n      const fetchController = new AbortController();\n      const fetchSignal = fetchController.signal;\n\n      // const startDownloadTime = performance.now();\n\n      // 使用 fetch API 获取二进制数据\n      fetch(imagePath, { cache: 'no-store', signal: fetchSignal })\n        .then(response => response.arrayBuffer())\n        .then(buffer => {\n          // const endDownloadTime = performance.now();\n          // const downloadTime = endDownloadTime - startDownloadTime;\n          if (this.isFocusLoopShooting) this.$bus.$emit('AppSendMessage', 'Vue_Command', 'showRoiImageSuccess:true');\n          else this.$bus.$emit('AppSendMessage', 'Vue_Command', 'showRoiImageSuccess:false');\n          let time1 = performance.now();\n          let src, imgData, targetImg8;\n          try {\n            const uint16Array = new Uint16Array(buffer);\n            let newWidth = parseInt(this.RedBoxSideLength / this.cameraBin);\n            let newHeight = parseInt(this.RedBoxSideLength / this.cameraBin);\n            if (newWidth % 2 != 0) {\n              newWidth = newWidth - 1;\n            }\n            if (newHeight % 2 != 0) {\n              newHeight = newHeight - 1;\n            }\n            if (uint16Array.length !== newWidth * newHeight) {\n              this.SendConsoleLogMsg('uint16Array.length (' + uint16Array.length + ') !== newWidth * newHeight (' + newWidth * newHeight + ')', 'error');\n              return;\n            }\n            // 创建一个空的 Mat 对象\n            src = new cv.Mat(newHeight, newWidth, cv.CV_16UC1);\n            src.data16U.set(uint16Array);\n            let time2 = performance.now();\n            this.SendConsoleLogMsg('创建mat对象时间: ' + (time2 - time1).toFixed(0) + 'ms', 'info');\n            if (this.lastImageProcessParams.isColorCamera == 'true' || this.lastImageProcessParams.isColorCamera == 'True' || this.lastImageProcessParams.isColorCamera) {\n              targetImg8 = this.applyStretchAndGain(src, this.lastImageProcessParams.analysis, 'bayer', this.lastImageProcessParams.CFA, this.lastImageProcessParams.blackLevel, this.lastImageProcessParams.whiteLevel);\n\n            } else {\n              targetImg8 = this.applyStretchAndGain(src, this.lastImageProcessParams.analysis, 'gray', this.lastImageProcessParams.CFA, this.lastImageProcessParams.blackLevel, this.lastImageProcessParams.whiteLevel);\n     \n            }\n            time1 = performance.now();\n            this.SendConsoleLogMsg('applyStretchAndGain时间: ' + (time1 - time2).toFixed(0) + 'ms', 'info');\n            src.delete();\n            src = null;\n\n            // 将 Mat 对象转换回 ImageData 对象\n            imgData = new ImageData(new Uint8ClampedArray(targetImg8.data), targetImg8.cols, targetImg8.rows);\n            targetImg8.delete();\n            targetImg8 = null;\n            // 在指定位置开始绘制图像\n            // this.bufferCtx.clearRect(this.ROI_x, this.ROI_y, targetImg8.cols, targetImg8.rows);\n            this.bufferCtx.putImageData(imgData, this.ROI_x, this.ROI_y);\n            // this.SendConsoleLogMsg('绘制一次ROI数据:' + fileName + ':' + this.ROI_x + ':' + this.ROI_y, 'info');\n            // 标注识别到的星点位置\n            // time2 = performance.now();\n            // this.SendConsoleLogMsg('绘制在缓存画布耗时: ' + (time2 - time1).toFixed(0) + 'ms', 'info');\n            this.drawImageData();\n            // time1 = performance.now();\n            // this.SendConsoleLogMsg('drawImageData时间: ' + (time1 - time2).toFixed(0) + 'ms', 'info');\n            this.focuserPictureFileName = fileName;\n            // const processTime = performance.now() - downloadTime;\n            // this.SendConsoleLogMsg(`ROI的执行时间 下载: ${downloadTime.toFixed(0)}ms, 处理: ${processTime.toFixed(0)}ms`, 'info');\n\n          } catch (error) {\n            console.error(`处理图像失败: ${imagePath}`, error);\n          } finally {\n            // 确保 Mat 对象和 ImageData 对象被删除\n            if (src && !src.isDeleted()) {\n              src.delete();\n              src = null; // 添加这行代码，确保 src 对象被清理\n            }\n            if (targetImg8 && !targetImg8.isDeleted()) {\n              targetImg8.delete();\n              targetImg8 = null; // 添加这行代码，确保 originalImg8 对象被清理\n            }\n            // 确保 buffer 被清理\n            buffer = null;\n            this.isProcessingImage = false;\n          }\n        })\n        .catch(error => {\n          if (error.name === 'AbortError') {\n            console.log('Fetch request cancelled');\n          } else {\n            console.error(`获取图像失败: ${imagePath}`, error);\n          }\n          this.isProcessingImage = false;\n        });\n\n      // 在组件卸载时取消 fetch 请求\n      this.$once('hook:beforeDestroy', () => {\n        fetchController.abort();\n      });\n    },\n    setRedBoxState(length, x, y) {\n      this.SendConsoleLogMsg('setRedBoxState:' + length + ',' + x + ',' + y, 'info');\n      this.$bus.$emit('setRedBoxPosition', x, y);\n      this.$bus.$emit('setRedBoxSideLength', length);\n    },\n    setFocuserState(state) {\n      if (state === 'selectstars') {\n        this.isFocusLoopShooting = true;\n      } else {\n        this.isFocusLoopShooting = false;\n      }\n    },\n    setShowSelectStar(state) {\n      this.showSelectStar = state;\n    },\n    RedBoxSizeChange(length) {\n      this.RedBoxSideLength = parseInt(length);\n      // this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendRedBoxState:' + this.RedBoxSideLength + ':' + this.ROI_x + ':' + this.ROI_y);\n    },\n    setMainCameraParameters(parameters) {\n      for (const parameter in parameters) {\n        const item = this.MainCameraConfigItems.find(item => item.label === parameter);\n        if (item) {\n          item.value = parameters[parameter];\n        } else {\n          if (parameter == 'RedBoxSize') {\n            this.$bus.$emit('setRedBoxSideLength', parameters[parameter]);\n            this.RedBoxSideLength = parseInt(parameters[parameter]);\n          } else if (parameter == 'ROI_x') {\n            this.ROI_x = parseFloat(parameters[parameter]);\n          } else if (parameter == 'ROI_y') {\n            this.ROI_y = parseFloat(parameters[parameter]);\n          } \n          else {\n            console.error(`未找到参数：${parameter}`);\n          }\n        }\n      }\n      this.confirmConfiguration(this.MainCameraConfigItems);\n    },\n    showCanvas(canvas) {\n      if (canvas === 'Stel') {\n        this.currentcanvas = 'Stel';\n        this.showStelCanvas();\n      }\n      else if (canvas === 'MainCamera') {\n\n        this.currentcanvas = 'MainCamera';\n        this.showMainCameraCanvas();\n        this.drawImageData()\n      }\n      else if (canvas === 'GuiderCamera') {\n        this.currentcanvas = 'GuiderCamera';\n        this.showGuiderCameraCanvas();\n      } else {\n        this.SendConsoleLogMsg(\"unknown canvas: \" + canvas, 'error');\n      }\n    },\n    // 现有的加减函数需要修改\n    decrementAndNotify(item) {\n      if (item.value > item.inputMin) {\n        item.value -= item.inputStep;\n        this.handleConfigChange(item.label, item.value);\n      }\n    },\n\n    incrementAndNotify(item) {\n      if (item.value < item.inputMax) {\n        item.value += item.inputStep;\n        this.handleConfigChange(item.label, item.value);\n      }\n    },\n\n    // 通用的配置更改处理函数\n    handleConfigChange(label, value) {\n      console.log(`配置已更改: ${label} = ${value}`);\n      if (value !== '') {\n        // console.log(item.label, item.value);\n        this.SendConsoleLogMsg(label + ':' + value, 'info');\n        this.$bus.$emit(label, label + ':' + value);\n      } else if (value == '' && label === 'Focal Length (mm)') {\n        this.SendConsoleLogMsg(label + 'is NULL', 'info');\n        this.$bus.$emit(item.label, item.label + ':');\n      }\n    },\n    // 校准相关方法\n    startCalibrationProcess() {\n      this.calibrationInfo.isCalibrating = true;\n      this.calibrationInfo.calibrationState = 'running';\n      this.calibrationInfo.calibrationStep = 0;\n      this.calibrationInfo.calibrationMessage = this.$t('Preparing to start focuser travel calibration...');\n      console.log('App: Calibration started:', this.calibrationInfo);\n    },\n\n    updateCalibrationInfo(step, message, state) {\n      try {\n        this.calibrationInfo.calibrationStep = step;\n        // 如果消息是国际化键，则翻译它\n        if (message && typeof message === 'string') {\n          this.calibrationInfo.calibrationMessage = this.$t(message);\n        } else {\n          this.calibrationInfo.calibrationMessage = message;\n        }\n        if (state) {\n          this.calibrationInfo.calibrationState = state;\n        }\n        if (step === 0) {\n          this.calibrationInfo.isCalibrating = true;\n        }\n        console.log('App: Calibration info updated:', this.calibrationInfo);\n      } catch (error) {\n        console.error('Error in updateCalibrationInfo:', error);\n      }\n    },\n\n    endCalibration() {\n      this.calibrationInfo.isCalibrating = false;\n      this.calibrationInfo.calibrationState = 'idle';\n      this.calibrationInfo.calibrationStep = 0;\n      this.calibrationInfo.calibrationMessage = '';\n      console.log('App: Calibration ended');\n    },\n  },\n  computed: {\n    nav: {\n      get: function () {\n        console.log('nav:', this.$store.state.showNavigationDrawer);\n        return this.$store.state.showNavigationDrawer\n      },\n      set: function (v) {\n        if (this.$store.state.showNavigationDrawer !== v) {\n          console.log('nav:', this.$store.state.showNavigationDrawer);\n          this.$store.commit('toggleBool', 'showNavigationDrawer')\n        }\n      }\n    },\n    storeCurrentLocation: function () {\n      return this.$store.state.currentLocation\n    },\n    getQTClientVersionColor() {\n      if (this.QTClientVersion === 'Not connected') {\n        return 'rgba(255, 0, 0, 0.5)'; // 红色，透明度 0.5\n      } else {\n        return 'rgba(255, 255, 255, 0.5)'; // 默认白色，透明度 0.5\n      }\n    },\n    isMobile() {\n      var ua = navigator.userAgent || '';\n      var touch = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0);\n      var uaDataMobile = null;\n      // 兼容老浏览器：避免可选链\n      if (navigator.userAgentData && typeof navigator.userAgentData.mobile !== 'undefined') {\n        uaDataMobile = navigator.userAgentData.mobile;\n      }\n      var mobileLike = /Android|iPhone|iPad|iPod|Mobile|Tablet/i.test(ua);\n      return (uaDataMobile !== null ? uaDataMobile : mobileLike) && !!touch;\n    },\n    isDesktop() {\n      return !this.isMobile;\n    },\n  },\n  watch: {\n    storeCurrentLocation: function (loc) {\n      const DD2R = Math.PI / 180\n      this.$stel.core.observer.latitude = loc.lat * DD2R\n      this.$stel.core.observer.longitude = loc.lng * DD2R\n      this.$stel.core.observer.elevation = loc.alt\n\n      // At startup, we need to wait for the location to be set before deciding which\n      // startup time to set so that it's night time.\n      if (!this.startTimeIsSet) {\n        this.$stel.core.observer.utc = swh.getTimeAfterSunset(this.$stel)\n        this.startTimeIsSet = true\n      }\n      // Init of time and date is complete\n      this.$store.commit('setValue', { varName: 'initComplete', newValue: true })\n    },\n    $route: function () {\n      // react to route changes...\n      this.setStateFromQueryArgs()\n    },\n    CurrentDriverType(newVal) {\n      // 当 CurrentDriverType 变化时，更新 selectedDriver\n      this.updateSelectedDriver(newVal);\n    }\n  },\n  mounted: function () {\n    // // 阻止默认的触摸行为\n    // document.addEventListener('touchstart', this.preventDefault, { passive: false });\n    // document.addEventListener('touchmove', this.preventDefault, { passive: false });\n    // document.addEventListener('touchend', this.preventDefault, { passive: false });\n\n    // // 阻止默认的鼠标行为\n    // document.addEventListener('mousedown', this.preventDefault, { passive: false });\n    // document.addEventListener('mousemove', this.preventDefault, { passive: false });\n    // document.addEventListener('mouseup', this.preventDefault, { passive: false });\n\n    // // 阻止默认的滚轮行为\n    // document.addEventListener('wheel', this.preventDefault, { passive: false });\n\n    let that = this\n\n    this.getLocationHostName();\n\n    this.loadImageToCanvasMainCamera();\n    this.loadImageToCanvasGuiderCamera();\n\n    this.initCanvas();\n    this.addEventListeners();\n\n    for (const i in this.$stellariumWebPlugins()) {\n      const plugin = this.$stellariumWebPlugins()[i]\n      if (plugin.onAppMounted) {\n        plugin.onAppMounted(that)\n      }\n    }\n\n    this.connect();\n    this.setupNetworkStatusListener();\n\n    // 使用 Promise 检查 OpenCV.js 是否加载完成\n    this.loadOpenCv().then(() => {\n      if (!this._isDestroyed) { // 检查组件是否已销毁\n        console.log('OpenCV.js is ready');\n        this.onCvReady();  // 调用 OpenCV 准备好的回调\n      }\n    }).catch(error => {\n      console.error('Error loading OpenCV.js:', error);\n    });\n\n    // const script = document.createElement('script');\n    // script.src = 'https://docs.opencv.org/4.5.5/opencv.js';\n    // script.async = true;\n    // script.onload = () => this.onCvReady();\n    // document.head.appendChild(script);\n\n    import('@/assets/js/stellarium-web-engine.wasm').then(f => {\n      if (!this._isDestroyed) { // 再次检查组件是否已销毁\n        // Initialize the StelWebEngine viewer singleton\n        // After this call, the StelWebEngine state will always be available in vuex store\n        // in the $store.stel object in a reactive way (useful for vue components).\n        // To modify the state of the StelWebEngine, it's enough to call/set values directly on the $stel object\n        try {\n          swh.initStelWebEngine(that.$store, f.default, that.$refs.stelCanvas, function () {\n            // Start auto location detection (even if we don't use it)\n            swh.getGeolocation().then(p => swh.geoCodePosition(p, that)).then((loc) => {\n              that.$store.commit('setAutoDetectedLocation', loc)\n            }, (error) => { console.log(error) })\n\n            that.$stel.setFont('regular', process.env.BASE_URL + 'fonts/Roboto-Regular.ttf', 1.38)\n            that.$stel.setFont('bold', process.env.BASE_URL + 'fonts/Roboto-Bold.ttf', 1.38)\n            that.$stel.core.constellations.show_only_pointed = false\n\n            that.setStateFromQueryArgs()\n            that.guiComponent = 'Gui'\n            for (const i in that.$stellariumWebPlugins()) {\n              const plugin = that.$stellariumWebPlugins()[i]\n              if (plugin.onEngineReady) {\n                plugin.onEngineReady(that)\n              }\n            }\n\n            if (!that.dataSourceInitDone) {\n              // Set all default data sources\n              const core = that.$stel.core\n              core.stars.addDataSource({ url: process.env.BASE_URL + 'skydata/stars' })\n              core.stars.addDataSource({ url: process.env.BASE_URL + 'skydata/stars_base' })\n              core.stars.addDataSource({ url: process.env.BASE_URL + 'skydata/stars_extend' })\n              core.dss.addDataSource({ url: process.env.BASE_URL + 'skydata/dss/v1' })\n              // core.stars.addDataSource({ url: process.env.BASE_URL + 'skydata/stars' })\n\n              // Allow to specify a custom path for sky culture data\n              if (that.$route.query.sc) {\n                const key = that.$route.query.sc.substring(that.$route.query.sc.lastIndexOf('/') + 1)\n                core.skycultures.addDataSource({ url: that.$route.query.sc, key: key })\n                core.skycultures.current_id = key\n              } else {\n                core.skycultures.addDataSource({ url: process.env.BASE_URL + 'skydata/skycultures/western', key: 'western' })\n              }\n\n              core.dsos.addDataSource({ url: process.env.BASE_URL + 'skydata/dso' })\n              core.landscapes.addDataSource({ url: process.env.BASE_URL + 'skydata/landscapes/guereins', key: 'guereins' })\n              core.milkyway.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/milkyway' })\n              // core.dss.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/dss' })\n              core.minor_planets.addDataSource({ url: process.env.BASE_URL + 'skydata/mpcorb.dat', key: 'mpc_asteroids' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/moon', key: 'moon' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/sun', key: 'sun' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/moon', key: 'default' })\n              core.comets.addDataSource({ url: process.env.BASE_URL + 'skydata/CometEls.txt', key: 'mpc_comets' })\n              core.satellites.addDataSource({ url: process.env.BASE_URL + 'skydata/tle_satellite.jsonl.gz', key: 'jsonl/sat' })\n\n              // Mount Pointing\n              glStel = that.setGloabalStel(that.$stel);\n              glLayer = that.setGlobalLayer(that.$stel);\n              glTestCircle = that.testAddCircle(that.$stel, glLayer);\n\n            }\n          })\n        } catch (e) {\n          this.$store.commit('setValue', { varName: 'wasmSupport', newValue: false })\n        }\n      }\n    });\n\n    window.addEventListener('load', () => {\n      // 页面完全加载\n      this.SendConsoleLogMsg('页面已完全加载', 'info');\n      this.$bus.$emit('AppSendMessage', 'Process_Command_Return', 'VueClientVersion:' + process.env.VUE_APP_VERSION);\n    })\n\n    document.addEventListener('DOMContentLoaded', () => {\n      // DOM加载完成\n      this.SendConsoleLogMsg('DOM已加载完成', 'info');\n    })\n\n  },\n  // 在组件销毁时移除\n  beforeDestroy() {\n    document.removeEventListener('touchstart', this.preventDefault);\n    document.removeEventListener('touchmove', this.preventDefault);\n    document.removeEventListener('touchend', this.preventDefault);\n\n    document.removeEventListener('mousedown', this.preventDefault);\n    document.removeEventListener('mousemove', this.preventDefault);\n    document.removeEventListener('mouseup', this.preventDefault);\n\n    document.removeEventListener('wheel', this.preventDefault);\n\n    // 清理极轴校准相关的圆圈\n    if (this.calibrationCircles) {\n      this.calibrationCircles.forEach(circle => {\n        if (glLayer && circle) {\n          glLayer.remove(circle);\n        }\n      });\n      this.calibrationCircles = [];\n    }\n\n    if (this.adjustmentCircles) {\n      this.adjustmentCircles.forEach(circle => {\n        if (glLayer && circle) {\n          glLayer.remove(circle);\n        }\n      });\n      this.adjustmentCircles = [];\n    }\n\n    // 停止视场更新定时器\n    this.stopFieldUpdateTimer();\n  },\n\n\n}\n</script>\n\n<style>\nbody {\n  background-color: black;\n  /* 禁用文本选择 */\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n\n  /* 禁用触摸操作 */\n  /* touch-action: none;\n  -ms-touch-action: none; */\n\n  /* 禁用双击缩放 */\n  -webkit-tap-highlight-color: transparent;\n\n  /* 禁用滚动和缩放 */\n  overscroll-behavior: none;\n  -webkit-overflow-scrolling: touch;\n\n  /* 禁用长按菜单 */\n  -webkit-touch-callout: none;\n\n  /* 禁用图片拖拽 */\n  -webkit-user-drag: none;\n  -khtml-user-drag: none;\n  -moz-user-drag: none;\n  -o-user-drag: none;\n}\n\n/* 确保画布元素也继承这些属性 */\ncanvas {\n  /* touch-action: none;\n  -ms-touch-action: none; */\n  -webkit-tap-highlight-color: transparent;\n  -webkit-user-drag: none;\n}\n\n/* 禁用所有元素的默认触摸行为 */\n/* * {\n  touch-action: none;\n  -ms-touch-action: none;\n} */\n\na {\n  color: #82b1ff;\n}\n\na:link {\n  text-decoration-line: none;\n}\n\n.divider_menu {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\nhtml {\n  overflow-y: visible;\n}\n\nhtml,\nbody,\n#app {\n  overflow-y: visible !important;\n  overflow-x: visible;\n  position: fixed !important;\n  width: 100%;\n  height: 100%;\n  padding: 0 !important;\n  font-size: 10px;\n}\n\n.fullscreen {\n  overflow-y: hidden;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  padding: 0 !important;\n}\n\n.click-through {\n  pointer-events: none;\n}\n\n.get-click {\n  pointer-events: all;\n}\n\n.dialog {\n  background: transparent;\n}\n\n.menu__content {\n  background-color: transparent !important;\n}\n\n#stel {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n}\n\n#stel-canvas {\n  width: 100%;\n  height: 100%;\n}\n\n#mainCamera-canvas {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n#guiderCamera-canvas {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.right_panel {\n  padding-right: 400px;\n}\n\n.v-btn {\n  margin-left: 8px;\n  margin-right: 8px;\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n\n.v-application--wrap {\n  min-height: 100% !important;\n}\n\n\n.my-custom-button {\n  background-color: #4CAF50;\n  /* 绿色背景 */\n  color: white;\n  /* 白色文字 */\n  padding: 15px 32px;\n  /* 内边距 */\n  text-align: center;\n  /* 文字居中 */\n  text-decoration: none;\n  /* 无文本装饰 */\n  display: inline-block;\n  /* 行内块显示 */\n  font-size: 16px;\n  /* 字体大小 */\n  margin: 4px 2px;\n  /* 外边距 */\n  cursor: pointer;\n  /* 鼠标样式 */\n  border: none;\n  /* 无边框 */\n}\n\n.connected-device {\n  color: #4dc251;\n}\n\n.btn-confirm {\n  width: 60px;\n  height: 30px;\n  background-color: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n}\n\n.btn-slider {\n  width: 20px;\n  height: 20px;\n  background-color: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n}\n\n.btn-confirm:active,\n.btn-slider:active {\n  transform: scale(0.95);\n  background-color: rgba(255, 255, 255, 0.5);\n}\n\n\n/* 配置项样式 */\n.config-item {\n  text-align: center;\n  width: 100%;\n  margin-bottom: 5px;\n}\n\n/* 配置项标题 */\n.config-title {\n  display: inline-block;\n  font-size: 15px;\n  color: rgba(255, 255, 255, 0.5);\n  user-select: none;\n  margin-top: 10px;\n  margin-bottom: 5px;\n}\n\n/* 配置输入框 */\n.config-input {\n  width: 150px;\n  display: inline-block;\n  margin: 5px 0;\n}\n\n/* 滑块容器 */\n.slider-container {\n  text-align: left;\n  height: 30px;\n  width: 150px;\n  display: inline-block;\n  margin-bottom: 20px;\n  position: relative;\n}\n\n/* 滑块标签 */\n.slider-label {\n  display: inline-block;\n  font-size: 15px;\n  color: rgba(255, 255, 255, 0.5);\n  user-select: none;\n  margin-bottom: 5px;\n}\n\n/* 滑块控制样式 */\n.slider-control {\n  position: absolute;\n  left: 30px;\n  width: calc(100% - 60px);\n}\n\n/* 提示控制样式 */\n.tip-field {\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n  /* 左标签 | 中值 | 右复制 */\n  align-items: center;\n  gap: 8px;\n  padding: 8px 4px 4px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n  /* 与其他输入项的下划线保持一致 */\n}\n\n.tip-label {\n  color: var(--v-theme-primary, #42a5f5);\n  font-size: 0.9rem;\n  line-height: 1.2;\n  white-space: nowrap;\n}\n\n.tip-value {\n  font-size: 1.25rem;\n  font-weight: 600;\n  letter-spacing: 0.02em;\n  user-select: text;\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", monospace;\n}\n\n.tip-copy {\n  margin-left: 4px;\n  opacity: 0.9;\n}\n\n/* 减少按钮样式 */\n.btn-minus {\n  position: absolute;\n  left: 5px;\n  transform: translateY(5px);\n}\n\n/* 增加按钮样式 */\n.btn-plus {\n  position: absolute;\n  right: 5px;\n  transform: translateY(5px);\n}\n\n/* 按钮内容居中 */\n.btn-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n}\n\n/* 按钮图标样式 */\n.btn-icon {\n  min-height: 10px;\n  pointer-events: none;\n}\n\n/* 开关样式 */\n.config-switch {\n  width: 150px;\n  display: inline-block;\n  margin-bottom: 0;\n  margin-top: 0;\n}\n\n/* 自定义滚动条样式 */\n.config-items-container::-webkit-scrollbar {\n  width: 6px;\n}\n\n.config-items-container::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n}\n\n.config-items-container::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.3);\n  border-radius: 3px;\n}\n\n.config-items-container::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.5);\n}\n\n/* Firefox滚动条样式 */\n.config-items-container {\n  scrollbar-width: thin;\n  scrollbar-color: rgba(255, 255, 255, 0.3) rgba(0, 0, 0, 0.1);\n}\n\n/* 参数容器滚动条样式 */\n.params-container {\n  overflow-y: auto;\n  height: 100%;\n}\n\n.params-container::-webkit-scrollbar {\n  width: 6px;\n}\n\n.params-container::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n}\n\n.params-container::-webkit-scrollbar-thumb {\n  background: white;\n  border-radius: 3px;\n}\n\n.params-container::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.8);\n}\n\n/* Firefox滚动条样式 */\n.params-container {\n  scrollbar-width: thin;\n  scrollbar-color: white rgba(0, 0, 0, 0.1);\n}\n\n/* 校准信息显示框样式 */\n.calibration-info-box {\n  position: fixed;\n  top: 50vh;\n  left: 50vw;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.9);\n  backdrop-filter: blur(15px);\n  border: 2px solid rgba(255, 165, 0, 0.8);\n  border-radius: 15px;\n  padding: 25px;\n  z-index: 10001;\n  min-width: 350px;\n  max-width: 450px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);\n}\n\n.calibration-content {\n  text-align: center;\n  color: white;\n}\n\n.calibration-title {\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 20px;\n  color: #FFA500;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\n}\n\n.calibration-message {\n  font-size: 16px;\n  line-height: 1.6;\n  margin-bottom: 20px;\n  color: #FFFFFF;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);\n}\n\n.calibration-progress {\n  font-size: 14px;\n  color: #FFA500;\n  font-weight: bold;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);\n}\n</style>"]}]}