{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Histogram.vue?vue&type=style&index=0&id=d223cdb4&scoped=true&lang=css&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Histogram.vue","mtime":1750053328600},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/css-loader/dist/cjs.js","mtime":1707125446000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1707125450000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/postcss-loader/src/index.js","mtime":1707125450000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5iYXJjaGFydC1wYW5lbCB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjMpOwogIGJhY2tkcm9wLWZpbHRlcjogYmx1cig1cHgpOwogIGJvcmRlci1yYWRpdXM6IDVweDsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIC8qIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTsgKi8KfQo="},{"version":3,"sources":["Chart-Histogram.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+KA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chart-Histogram.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div ref=\"barchart\" :style=\"{ width: containerMaxWidth + 'px', height: 80 + 'px' }\" class=\"barchart-panel\"></div>\n  </div>\n</template>\n\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'BarChart',\n  data() {\n    return {\n      containerMaxWidth: 190,\n      barData: [],  // 示例数据\n      xAxis_min: 0,\n      xAxis_max: 255,\n\n      histogram_min: 0,\n      histogram_max: 255,\n    };\n  },\n  mounted() {\n\n  },\n  created() {\n    // this.$bus.$on('InitChart', this.setMaxWidth);\n    this.$bus.$on('showHistogram', this.addDataToChart);\n    this.$bus.$on('updateHistogramWidth', this.initChart);\n  },\n  methods: {\n    initChart(Width) {\n      this.containerMaxWidth = Width - 10;\n      const chartDom = this.$refs.barchart;\n      chartDom.style.width = this.containerMaxWidth + 'px';\n      this.myChart = echarts.init(chartDom);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n\n    renderChart(x_min, x_max) {\n      const yAxisMax = Math.max(...this.barData.map(item => item[1]));  // 获取 y 轴的最大值\n      const option = {\n        grid: {\n          left: '-1%',\n          right: '1%',\n          bottom: '0%',\n          top: '0%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'value',\n          min: x_min,\n          max: x_max,\n          axisLine: {\n            lineStyle: {\n              color: 'white'\n            }\n          },\n          axisLabel: null,\n          splitLine: {  // 隐藏 x 轴的网格线\n            show: false\n          }\n        },\n        yAxis: {\n          type: 'value',\n          max: yAxisMax,  // 使用动态获取的 y 轴最大值\n          axisLine: {\n            lineStyle: {\n              color: 'white'\n            }\n          },\n          axisLabel: null,\n          splitLine: {  // 隐藏 x 轴的网格线\n            show: false\n          }\n        },\n        series: []\n      };\n\n      // 为每个通道创建对应的 series\n      for (let channel = 0; channel < 3; channel++) {\n        option.series.push({\n          data: this.barData[channel], // 注意这里的数据结构\n          type: 'line',\n          itemStyle: {\n            color: channel === 0 ? 'rgba(0,120,212,0.7)' : (channel === 1 ? 'rgba(51,218,121,0.7)' : 'rgba(255,0,0,0.7)') // 根据通道选择颜色\n          },\n          symbolSize: 0\n        });\n      }\n\n      // 在这里可以继续添加其他通道的曲线，也可以根据需要修改颜色\n\n      option.series.push({\n        data: [[this.histogram_min, 0], [this.histogram_min, yAxisMax]],  // 数据格式为 [x, y]\n        type: 'line',\n        lineStyle: {\n          color: 'blue',  // 设置线的颜色\n          type: 'dashed',  // 设置线的类型，可以为 'solid', 'dashed', 'dotted'\n          width: 1\n        },\n        symbolSize: 0\n      });\n\n      option.series.push({\n        data: [[this.histogram_max, 0], [this.histogram_max, yAxisMax]],\n        type: 'line',\n        lineStyle: {\n          color: 'red',\n          type: 'dashed',\n          width: 1\n        },\n        symbolSize: 0\n      });\n\n      this.myChart.setOption(option);\n    },\n\n    addDataToChart(histogramData) {\n      this.clearBarData();\n\n      // 初始化最小和最大值的索引\n      let firstNonZeroIndex = -1;\n      let lastNonZeroIndex = -1;\n\n      // 处理三个通道的直方图数据\n      for (let channel = 0; channel < histogramData.length; channel++) {\n        const channelData = histogramData[channel];\n        const channelSeriesData = []; // 存储当前通道的 series 数据\n\n        for (let i = 0; i < channelData.length; i++) {\n          const value = [i, channelData[i]];\n          channelSeriesData.push(value);\n\n          // 更新最小和最大值的索引\n          if (channelData[i] !== 0) {\n            if (firstNonZeroIndex === -1) {\n              // 第一次不等于0的索引\n              firstNonZeroIndex = i;\n            }\n            // 记录每次不等于0的索引，最后一次会覆盖之前记录的值\n            if (i > lastNonZeroIndex){\n              lastNonZeroIndex = i;\n            }\n          }\n        }\n\n        // 将当前通道的 series 数据存入 barData\n        this.barData.push(channelSeriesData);\n      }\n\n      // 发送最小和最大值的索引到其他组件\n      this.histogram_min = firstNonZeroIndex;\n      this.histogram_max = lastNonZeroIndex;\n\n      console.log(\"histogram_min:\", this.histogram_min, \"histogram_max:\", this.histogram_max);\n      this.$bus.$emit('AutoHistogramNum', this.histogram_min, this.histogram_max);\n\n      this.$bus.$emit('SendConsoleLogMsg', 'First Non-Zero Index:' + firstNonZeroIndex, 'info');\n      this.$bus.$emit('SendConsoleLogMsg', 'Last Non-Zero Index:' + lastNonZeroIndex, 'info');\n\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n\n    clearBarData() {\n      this.barData = [];  // 清空数据\n      this.renderChart(this.xAxis_min, this.xAxis_max);  // 重新渲染图表\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n.barchart-panel {\n  background-color: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(5px);\n  border-radius: 5px;\n  box-sizing: border-box;\n  /* border: 1px solid rgba(255, 255, 255, 0.8); */\n}\n</style>\n"]}]}