{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/ScheduleTable.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/app/src/components/ScheduleTable.vue","mtime":1747376444000},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":1707125446000},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1707125450000},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":1707125450000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRhYmxlLWNvbnRhaW5lciB7CiAgb3ZlcmZsb3cteDogYXV0bzsKICBkaXNwbGF5OiBibG9jazsKICBzY3JvbGxiYXItd2lkdGg6IHRoaW47IC8qIEZpcmVmb3ggKi8KICBzY3JvbGxiYXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50OyAvKiBGaXJlZm94ICovCiAgd2lkdGg6IGNhbGMoMTAwJSAtIDUwcHgpOwogIG1hcmdpbi1sZWZ0OiBhdXRvOwp9Cgouc2Nyb2xsYWJsZS1jb250YWluZXIgeyAKICAvKlRPRE86IOiuvue9ruacgOWkp+mrmOW6pu+8jOS9v+WGheWuuei2hei/h+ivpemrmOW6puaXtuWHuueOsOa7muWKqOadoSAqLwogIG1heC1oZWlnaHQ6IDI2MHB4OwogIC8qIGhlaWdodDogY2FsYygxMDAlIC0gMHB4KTsgICovCiAgb3ZlcmZsb3cteTogYXV0bzsgLyog5Z6C55u05pa55ZCR5LiK5Ye6546w5rua5Yqo5p2hICovCiAgcG9zaXRpb246IHJlbGF0aXZlOyAvKiDkvb/or6Xlrrnlmajnm7jlr7nlrprkvY3vvIzkuI3kvJrlvbHlk43liLDooajlpLTnmoTluIPlsYAgKi8KICAKICAmOjotd2Via2l0LXNjcm9sbGJhciB7CiAgICB3aWR0aDogMHB4OyAvKiDorr7nva7mu5rliqjmnaHlrr3luqYgKi8KICB9Cn0KCnRhYmxlIHsKICB3aWR0aDogY2FsYygxMDAlIC0gMHB4KTsKICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogIC8qIFRoaXMgZW5zdXJlcyB0aGF0IHRhYmxlIGJvcmRlcnMgYXJlIGNvbGxhcHNlZCBpbnRvIGEgc2luZ2xlIGJvcmRlciAqLwogIHRhYmxlLWxheW91dDogZml4ZWQ7Cn0KCnRkIHsKICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBoZWlnaHQ6IDQwcHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsKICB3aGl0ZS1zcGFjZTogbm93cmFwOwp9Cgp0aCB7CiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgaGVpZ2h0OiA0MHB4OwogIG92ZXJmbG93OiBoaWRkZW47CiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpOwogIGJhY2tkcm9wLWZpbHRlcjogYmx1cig1cHgpOwogIGNvbG9yOiB3aGl0ZTsKfQoKLnNlbGVjdGVkIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDc1LCAxNTUsIDI1MCwgMC43KTsKICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTsKfQoKLnNlbGVjdGVkLWNlbGwgewogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNTEsIDIxOCwgMTIxLCAwLjcpOwogIGJhY2tkcm9wLWZpbHRlcjogYmx1cig1cHgpOwp9CgoK"},{"version":3,"sources":["ScheduleTable.vue"],"names":[],"mappingsfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ScheduleTable.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"table-container\">\n    <table>\n      <thead>\n        <tr>\n          <!-- <th>序号</th> -->\n          <th>{{ $t('Target') }}</th>\n          <th>{{ $t('Ra/Dec') }}</th>\n          <th>{{ $t('Shoot Time') }}</th>\n          <th>{{ $t('Exp Time') }}</th>\n          <th>{{ $t('Filter No.') }}</th>\n          <th>{{ $t('Reps') }}</th>\n          <th>{{ $t('Type') }}</th>\n          <th>{{ $t('Refocus') }}</th>\n          <!-- <th>进度</th> -->\n        </tr>\n      </thead>\n    </table>\n    <div :style=\"{ 'max-height': containerMaxHeight + 'px' }\" class=\"scrollable-container\" @scroll=\"handleScrollB\" ref=\"listB\">\n      <table>\n        <tbody class=\"scrollable-body\">\n          <tr v-for=\"row in numberOfRows\" :key=\"row\" :class=\"{ selected: isSelectedRow(row) }\">\n            <td v-for=\"column in numberOfColumns\" :key=\"column\" :class=\"{ 'selected-cell': isSelected(row, column) }\"\n              @click=\"selectCell(row, column)\">\n              {{ cellValues[`${row}-${column}`] || '' }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n  \n<script>\nexport default {\n  data() {\n    return {\n      containerMaxHeight: 0,\n      selectedRow_: null,\n      selectedRow: null,\n      selectedColumn: null,\n      selectedCellValue: '', // 新增选中单元格内容的变量\n      numberOfRows: 8,\n      numberOfColumns: 8,\n      cellValues: {},\n      tableData: [],\n      \n      initialColumnValues: {\n        1: 'null ',\n        2: '',\n        3: 'Now',\n        4: '1 s',\n        5: 'L',\n        6: '1',\n        7: 'Light',\n        8: 'OFF',\n      },\n    };\n  },\n  created() {\n    this.$bus.$on('toggleSchedulePanel', this.setMaxHeight);\n\n    // 监听来自事件总线的滚动事件\n    this.$bus.$on('scrollEventA', (scrollTop) => {\n      // 使用 scrollTo 方法控制组件的滚动\n      this.$refs.listB.scrollTo(0, scrollTop);\n    });\n\n    this.$bus.$on('AddScheduleRow',this.AddScheduleRow);\n\n    this.$bus.$on('SelectedScheduleRow', this.SelectedScheduleRow);\n\n    this.$bus.$on('NoSelectedScheduleRow', this.NoSelectedScheduleRow);\n\n    this.$bus.$on('MoveScheduleRow',this.MoveScheduleRow);\n\n    this.$bus.$on('DeleteSelectedScheduleRow',this.DeleteSelectedScheduleRow);\n\n    this.$bus.$on('EditContent',this.EditContent);\n\n    this.$bus.$on('insertObjName',this.insertObjName);\n\n    this.$bus.$on('getTableData',this.getTableData);\n\n    this.$bus.$on('TargetRaDec',this.insertObjRaDec);\n\n    this.$bus.$on('StagingScheduleData',this.RecoveryScheduleData);\n\n    this.$bus.$on('TianWen',this.AddTianWenRow);\n\n  },\n  mounted() {\n    console.log('initialize ScheduleTable------------------------------');\n    // this.sendMessage('Vue_Command', 'getStagingScheduleData');\n    // 初始化表格数据\n    this.initializeTable();\n    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'getStagingScheduleData');\n  },\n  methods: {\n    selectCell(row, column) {\n      this.selectedRow = row;\n      this.selectedColumn = column;\n\n      this.selectedCellValue = this.cellValues[`${row}-${column}`] || ''; // 获取选中单元格的内容\n      console.log(`selectCell: `, this.selectedCellValue);\n\n      if(column === 1)\n      {\n        this.$bus.$emit('KeyBoardMode','Target');\n      }\n      else if(column === 2)\n      {\n\n      }\n      else if(column === 3)\n      {\n        this.$bus.$emit('KeyBoardMode','Time');\n      }\n      else if(column === 4)\n      {\n        this.$bus.$emit('KeyBoardMode','ExpTime');\n      }\n      else if(column === 5)\n      {\n        this.$bus.$emit('KeyBoardMode','CFW');\n      }\n      else if(column === 6)\n      {\n        this.$bus.$emit('KeyBoardMode','Repeat');\n      }\n      else if(column === 7)\n      {\n        this.$bus.$emit('KeyBoardMode','Type');\n      }\n      else if(column === 8)\n      {\n        this.$bus.$emit('KeyBoardMode','Focus');\n      }\n\n      this.getTableData(false);\n    },\n\n    SelectedScheduleRow(index) {\n      this.selectedRow_ = index;\n    },\n\n    NoSelectedScheduleRow() {\n      this.selectedRow_ = null;\n    },\n\n    isSelected(row, column) {\n      return this.selectedRow === row && this.selectedColumn === column;\n    },\n\n    isSelectedRow(row) {\n      return this.selectedRow_ === row;\n    },\n\n    MoveScheduleRow(index) {\n      // 检查选中的行是否有效\n      if (this.selectedRow_ === null || index < 1 || index > this.numberOfRows || index === this.selectedRow_) {\n        return;\n      }\n\n      // 获取选中行的数据\n      const selectedRowData = {};\n      for (let column = 1; column <= this.numberOfColumns; column++) {\n        const key = `${this.selectedRow_}-${column}`;\n        selectedRowData[key] = this.cellValues[key] || '';\n      }\n\n      // 删除选中的行\n      if (this.selectedRow_ < index) {\n        // 如果选中的行在目标位置的下方，需要先删除再插入\n        for (let row = this.selectedRow_; row < index; row++) {\n          for (let column = 1; column <= this.numberOfColumns; column++) {\n            const currentKey = `${row}-${column}`;\n            const nextKey = `${row + 1}-${column}`;\n            this.cellValues[currentKey] = this.cellValues[nextKey] || '';\n          }\n        }\n      } else {\n        // 如果选中的行在目标位置的上方，直接插入\n        for (let row = this.selectedRow_; row > index; row--) {\n          for (let column = 1; column <= this.numberOfColumns; column++) {\n            const currentKey = `${row}-${column}`;\n            const prevKey = `${row - 1}-${column}`;\n            this.cellValues[currentKey] = this.cellValues[prevKey] || '';\n          }\n        }\n      }\n\n      // 在目标位置插入选中的行数据\n      for (let column = 1; column <= this.numberOfColumns; column++) {\n        const key = `${index}-${column}`;\n        this.$set(this.cellValues, key, selectedRowData[`${this.selectedRow_}-${column}`]);\n      }\n\n      // 更新选中的行索引\n      this.selectedRow_ = index;\n    },\n\n    DeleteSelectedScheduleRow(index) {\n      if (index >= 1 && index <= this.numberOfRows) {\n        // 更新 numberOfRows\n        this.numberOfRows -= 1;\n\n        // 删除 cellValues 中对应行的数据\n        for (let row = index; row <= this.numberOfRows; row++) {\n          for (let column = 1; column <= this.numberOfColumns; column++) {\n            const currentKey = `${row}-${column}`;\n            const nextKey = `${row + 1}-${column}`;\n            this.cellValues[currentKey] = this.cellValues[nextKey] || '';\n          }\n        }\n\n        // 删除最后一行的数据\n        for (let column = 1; column <= this.numberOfColumns; column++) {\n          const lastRowKey = `${this.numberOfRows + 1}-${column}`;\n          delete this.cellValues[lastRowKey];\n        }\n\n        // 如果删除的行是选中的行，取消选中状态\n        if (this.selectedRow_ === index) {\n          this.selectedRow_ = null;\n        } else if (this.selectedRow_ > index) {\n          // 如果删除的行在选中行的上方，需要更新选中行的索引\n          this.selectedRow_ -= 1;\n        }\n      }\n    },\n\n    getTableData(isStart) {\n      // this.$bus.$emit('getScheduleItemList');\n      // 清空原始表格数据\n      this.tableData = [];\n      // 遍历每一行\n      for (let row = 1; row <= this.numberOfRows; row++) {\n        // 检查第一列的单元格内容是否为 'null '\n        const firstColumnKey = `${row}-1`;\n        const firstColumnValue = this.cellValues[firstColumnKey];\n        \n        // const RepeatNumKey = `${row}-6`;\n        // const RepeatNum = this.cellValues[RepeatNumKey];\n\n        // 如果第一列的内容不是 'null '，则获取该行数据\n        if (firstColumnValue !== 'null ') {\n          let rowData = ['[']; // 在每一行的开头添加 [\n          // 遍历每一列\n          for (let column = 1; column <= this.numberOfColumns; column++) {\n            const key = `${row}-${column}`;\n            // 将单元格数据添加到当前行的数组中\n            rowData.push(this.cellValues[key] || '');\n          }\n          // rowData.push(']'); // 在每一行的结尾添加 ]\n          // 将当前行的数组添加到表格数据中\n          this.tableData.push(rowData);\n        }\n      }\n      // 输出表格数据\n      console.log('Table Data:', this.tableData);\n      if(isStart) {\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ScheduleTabelData:'+ this.tableData);\n      } else {\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'StagingScheduleData:'+ this.tableData);\n      }\n      \n    },\n\n    RecoveryScheduleData(text) {\n      console.log('RecoveryScheduleData: ', text);\n      const rowData = text.split('[');\n\n      // 循环遍历分割后的数组\n      for (let i = 1; i < rowData.length; i++) {\n        console.log('rowData: ', rowData[i]);\n\n        const colData = rowData[i].split(',');\n        for (let j = 1; j < colData.length; j++){\n          console.log('colData: ', colData[j]);\n          let key;\n          if(j === 1) {\n            key = `${i}-${1}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 2) {\n            key = `${i}-${2}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 3) {\n            key = `${i}-${2}`;\n            const currentValue = this.cellValues[key] || '';\n            this.cellValues[key] = currentValue + ',' + colData[j];\n          } else if (j === 4) {\n            key = `${i}-${3}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 5) {\n            key = `${i}-${4}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 6) {\n            key = `${i}-${5}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 7) {\n            key = `${i}-${6}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 8) {\n            key = `${i}-${7}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 9) {\n            key = `${i}-${8}`;\n            this.cellValues[key] = colData[j];\n          }\n        }\n      }\n    },\n\n    EditContent(text) {\n      if (this.selectedRow !== null && this.selectedColumn !== null) {\n        const key = `${this.selectedRow}-${this.selectedColumn}`;\n        if (this.selectedColumn === 5 || this.selectedColumn === 7 || this.selectedColumn === 8) {\n          // 如果 selectedColumn 为 5、7 或 8，则直接赋值给单元格内容\n          this.cellValues[key] = text;\n        } else if (this.selectedColumn === 1) {\n          const currentValue = this.cellValues[key] || '';\n          // console.log('currentValue', currentValue);\n          if (!isNaN(text)) {\n            // 如果 text 是数字，则将数字插入到现有文本的后面\n            this.cellValues[key] = currentValue + text;\n          } else if (text === 'Prefix' && currentValue.includes('null')) {\n            this.cellValues[key] = currentValue.replace('null', 'M');\n          } else if (text === 'Prefix' && currentValue === ' ') {\n            this.cellValues[key] = currentValue.replace(' ', 'M ');\n          } else if (text === 'Prefix' && currentValue.includes('M')) {\n            this.cellValues[key] = currentValue.replace('M', 'IC');\n          } else if (text === 'Prefix' && currentValue.includes('IC')) {\n            this.cellValues[key] = currentValue.replace('IC', 'NGC');\n          } else if (text === 'Prefix' && currentValue.includes('NGC')) {\n            this.cellValues[key] = currentValue.replace('NGC', 'M');\n          } else if (text === 'Delete') {\n            // 如果 text 是 \"Delete\"，则删除现有文本中数字部分的最后一位，但不能删除空格以及空格前的字母部分\n            const spaceIndex = currentValue.indexOf(' ');\n            if (spaceIndex !== -1) {\n              const numberPart = currentValue.slice(spaceIndex + 1);\n              if (numberPart.length > 0) {\n                this.cellValues[key] = currentValue.slice(0, spaceIndex + 1) + numberPart.slice(0, -1);\n              }\n            }\n          }\n          console.log('currentValue', this.cellValues[key]);\n          this.$bus.$emit('SearchName',this.cellValues[key]);\n        } else if (this.selectedColumn === 2) {\n          \n        } else if (this.selectedColumn === 3) {\n          const currentValue = this.cellValues[key] || '';\n          const textIsNumber = !isNaN(text);\n\n          if (textIsNumber) {\n            const currentLength = currentValue.length;\n            if (currentValue === 'Now') {\n              if (text < 3) {\n                const updatedValue = text + ':';\n                this.cellValues[key] = updatedValue;\n              }\n            } else if (currentLength === 2) {\n              const firstChar = currentValue.charAt(0);\n              if (firstChar > 1) {\n                if (text < 4) {\n                  const insertIndex = currentValue.indexOf(':');\n                  const updatedValue = currentValue.slice(0, insertIndex) + text + currentValue.slice(insertIndex);\n                  this.cellValues[key] = updatedValue;\n                }\n              } else {\n                const insertIndex = currentValue.indexOf(':');\n                const updatedValue = currentValue.slice(0, insertIndex) + text + currentValue.slice(insertIndex);\n                this.cellValues[key] = updatedValue;\n              }\n            } else if (currentLength === 3) {\n              if (text < 6) {\n                const updatedValue = currentValue + text;\n                this.cellValues[key] = updatedValue;\n              }\n            } else if (currentLength === 4) {\n              const updatedValue = currentValue + text;\n              this.cellValues[key] = updatedValue;\n            }\n          } else if (text === 'Delete') {\n            const currentLength = currentValue.length;\n            if (currentLength === 4 || currentLength === 5) {\n              const updatedValue = currentValue.slice(0, -1);\n              this.cellValues[key] = updatedValue;\n            } else if (currentLength === 3) {\n              const indexToDelete = currentValue.indexOf(':') - 1;\n              if (indexToDelete >= 0) {\n                const updatedValue = currentValue.slice(0, indexToDelete) + currentValue.slice(indexToDelete + 1);\n                this.cellValues[key] = updatedValue;\n              }\n            } else if (currentLength === 2) {\n              this.cellValues[key] = 'Now';\n            }\n          }\n        } else if (this.selectedColumn === 4) {\n          const currentValue = this.cellValues[key] || '';\n          if (!isNaN(text)) {\n            // 如果 text 是数字，则将数字插入到现有文本中空格前的数字后面\n            const spaceIndex = currentValue.indexOf(' ');\n            if (spaceIndex !== -1) {\n              this.cellValues[key] = currentValue.slice(0, spaceIndex) + text + currentValue.slice(spaceIndex);\n            } else {\n              this.cellValues[key] += text;\n            }\n          } else if (text === 'Delete') {\n            // 如果 text 为 \"Delete\"，则删除空格前的数字部分的最后一位\n            const spaceIndex = currentValue.indexOf(' ');\n            if (spaceIndex !== -1) {\n              const numberPart = currentValue.slice(0, spaceIndex);\n              if (numberPart.length > 0) {\n                this.cellValues[key] = numberPart.slice(0, -1) + currentValue.slice(spaceIndex);\n              }\n            }\n          } else if (text === 's/ms' && currentValue.includes('ms')) {\n            // 如果 text 是 \"ms\"，且现有文本包含 \"ms\"，则将 \"ms\" 修改为 \"s\"\n            this.cellValues[key] = currentValue.replace('ms', 's');\n          } else if (text === 's/ms' && currentValue.includes('s')) {\n            // 如果 text 是 \"s\"，且现有文本包含 \"s\"，则将 \"s\" 修改为 \"ms\"\n            this.cellValues[key] = currentValue.replace('s', 'ms');\n          } \n        } else if (text === 'Delete') {\n          // 如果 text 为 \"Delete\"，则删除单元格现有内容的最后一位\n          this.cellValues[key] = (this.cellValues[key] || '').slice(0, -1);\n        } else {\n          // 否则，在单元格现有内容的后面插入 text\n          this.cellValues[key] = (this.cellValues[key] || '') + text;\n        }\n      }\n    },\n\n    insertObjName(name) {\n      if (this.selectedRow !== null && this.selectedColumn !== null) {\n        const key = `${this.selectedRow}-${this.selectedColumn}`;\n        if (this.selectedColumn === 1) {\n          // 如果 selectedColumn 为 1，则直接赋值给单元格内容\n          this.cellValues[key] = ' ' + name;\n        }\n      }\n    },\n\n    insertObjRaDec(RaDec) {\n      if (this.selectedRow !== null && this.selectedColumn !== null) {\n        const key = `${this.selectedRow}-${this.selectedColumn + 1}`;\n        if (this.selectedColumn === 1) {\n          this.cellValues[key] = ' ' + RaDec;\n        }\n      }\n    },\n\n    setMaxHeight() {\n      const Height = window.innerHeight;\n      this.containerMaxHeight = Height - 130;\n    },\n    handleScrollB() {\n      this.$bus.$emit('scrollEventB', this.$refs.listB.scrollTop);\n      // console.log(`handleScrollB: `, this.$refs.listB.scrollTop);\n    },\n    AddScheduleRow() {\n      this.numberOfRows += 1;\n\n      for (let column = 1; column <= this.numberOfColumns; column++) {\n        const key = `${this.numberOfRows}-${column}`;\n        this.$set(this.cellValues, key, this.initialColumnValues[column] || '');\n      }\n\n    },\n    AddTianWenRow(notice_type, ra, dec) {\n      this.numberOfRows += 1;\n      const newinitialColumnValues = {\n        1: notice_type,\n        2: 'ra:'+ ra + ',dec:' + dec,\n        3: 'Now',\n        4: '1 s',\n        5: 'L',\n        6: '1',\n        7: 'Light',\n        8: 'OFF',\n      };\n      for (let column = 1; column <= this.numberOfColumns; column++) {\n        const key = `${this.numberOfRows}-${column}`;\n        this.$set(this.cellValues, key, newinitialColumnValues[column] || '');\n      }\n    },\n\n    initializeTable() {\n      // 为初始行添加默认值\n      for (let row = 1; row <= this.numberOfRows; row++) {\n        for (let column = 1; column <= this.numberOfColumns; column++) {\n          const key = `${row}-${column}`;\n          // 如果当前单元格没有值，则设置默认值\n          if (!this.cellValues[key]) {\n            const initialValue = this.initialColumnValues[column] || '';\n            this.$set(this.cellValues, key, initialValue);\n          }\n        }\n      }\n    },\n\n  },\n};\n</script>\n  \n<style>\n.table-container {\n  overflow-x: auto;\n  display: block;\n  scrollbar-width: thin; /* Firefox */\n  scrollbar-color: transparent transparent; /* Firefox */\n  width: calc(100% - 50px);\n  margin-left: auto;\n}\n\n.scrollable-container { \n  /*TODO: 设置最大高度，使内容超过该高度时出现滚动条 */\n  max-height: 260px;\n  /* height: calc(100% - 0px);  */\n  overflow-y: auto; /* 垂直方向上出现滚动条 */\n  position: relative; /* 使该容器相对定位，不会影响到表头的布局 */\n  \n  &::-webkit-scrollbar {\n    width: 0px; /* 设置滚动条宽度 */\n  }\n}\n\ntable {\n  width: calc(100% - 0px);\n  border-collapse: collapse;\n  /* This ensures that table borders are collapsed into a single border */\n  table-layout: fixed;\n}\n\ntd {\n  border: 1px solid #ddd;\n  text-align: center;\n  height: 40px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\nth {\n  border: 1px solid #ddd;\n  text-align: center;\n  height: 40px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(5px);\n  color: white;\n}\n\n.selected {\n  background-color: rgba(75, 155, 250, 0.7);\n  backdrop-filter: blur(5px);\n}\n\n.selected-cell {\n  background-color: rgba(51, 218, 121, 0.7);\n  backdrop-filter: blur(5px);\n}\n\n\n</style>\n"]}]}