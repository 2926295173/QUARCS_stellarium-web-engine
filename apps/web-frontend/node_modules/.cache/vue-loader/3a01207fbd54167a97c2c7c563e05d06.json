{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/DeviceAllocationPanel.vue?vue&type=style&index=0&id=b0334564&scoped=true&lang=css&","dependencies":[{"path":"/app/src/components/DeviceAllocationPanel.vue","mtime":1752115797896},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":1707125446000},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1707125450000},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":1707125450000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5EZXZpY2VBbGxvY2F0aW9uUGFuZWwtcGFuZWwgewogIHBvaW50ZXItZXZlbnRzOiBhdXRvOwogIHBvc2l0aW9uOiBmaXhlZDsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDY0LCA2NCwgNjQsIDAuNSk7CiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDVweCk7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICBvdmVyZmxvdzogaGlkZGVuOwogIGxlZnQ6IDUwJTsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7CgogIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpOwp9CgpAa2V5ZnJhbWVzIHNob3dQYW5lbEFuaW1hdGlvbiB7CiAgZnJvbSB7CiAgICBib3R0b206IDEwMCU7CiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMHB4KTsKICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNjQsIDY0LCA2NCwgMC4wKTsKICB9CgogIHRvIHsKICAgIGJvdHRvbTogNzBweDsKICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cig1cHgpOwogICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg2NCwgNjQsIDY0LCAwLjMpOwogIH0KfQoKQGtleWZyYW1lcyBoaWRlUGFuZWxBbmltYXRpb24gewogIGZyb20gewogICAgYm90dG9tOiA3MHB4OwogICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDVweCk7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDY0LCA2NCwgNjQsIDAuMyk7CiAgfQoKICB0byB7CiAgICBib3R0b206IDEwMCU7CiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMHB4KTsKICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNjQsIDY0LCA2NCwgMC4wKTsKICB9Cn0KCi5wYW5lbC1lbnRlci1hY3RpdmUgewogIGFuaW1hdGlvbjogc2hvd1BhbmVsQW5pbWF0aW9uIDAuM3MgZm9yd2FyZHM7Cn0KCi5wYW5lbC1sZWF2ZS1hY3RpdmUgewogIGFuaW1hdGlvbjogaGlkZVBhbmVsQW5pbWF0aW9uIDAuM3MgZm9yd2FyZHM7Cn0KCi5kZXZpY2UtbGlzdCB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMzBweDsKICByaWdodDogMTVweDsKICBib3R0b206IDI1cHg7CgogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICAvKiDljrvmjonliJfooajliY3nmoTpu5jorqTngrkgKi8KICBwYWRkaW5nOiAwOwogIC8qIOWOu+aOieWGhei+uei3nSAqLwogIG1hcmdpbjogMDsKICAvKiDljrvmjonlpJbovrnot50gKi8KICB3aWR0aDogMTUwcHg7CiAgLyog5o6n5Yi25YiX6KGo5a695bqmICovCiAgbWF4LWhlaWdodDogMjAwcHg7CiAgLyog5o6n5Yi25YiX6KGo5pyA5aSn6auY5bqmICovCiAgb3ZlcmZsb3cteTogYXV0bzsKICAvKiDlhYHorrjlnoLnm7Tmu5rliqggKi8KICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7Cn0KCmxpIHsKICBjb2xvcjogd2hpdGU7CiAgLyog6K6+5a6a5paH5a2X6aKc6ImyICovCiAgcGFkZGluZzogNXB4IDEwcHg7CiAgLyog5re75Yqg5LiA5Lqb5YaF6L656LedICovCiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTsKICAvKiDmt7vliqDlupXpg6jovrnmoYYgKi8KICB3aGl0ZS1zcGFjZTogbm93cmFwOwogIC8qIOehruS/neaWh+acrOS4jeaNouihjCAqLwogIG92ZXJmbG93OiBoaWRkZW47CiAgLyog6LaF5Ye66YOo5YiG6ZqQ6JePICovCiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7CiAgLyog6LaF5Ye66YOo5YiG55So55yB55Wl5Y+36KGo56S6ICovCn0KCmxpOmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7CiAgLyog5oKs5YGc5pWI5p6cICovCn0KCi5EZXZpY2VUeXBlcy1saXN0IHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAzMHB4OwogIC8qIOagueaNrumcgOimgeiwg+aVtOS9jee9riAqLwogIHJpZ2h0OiAxNXB4OwogIC8qIOagueaNrumcgOimgeiwg+aVtOS9jee9riAqLwogIGJvdHRvbTogMTVweDsKICAvKiDmoLnmja7pnIDopoHosIPmlbTkvY3nva4gKi8KICB3aWR0aDogMTUwcHg7CiAgLyog6K6+572u5a695bqm77yM56Gu5L+d5Y+z5L6n55qEIERldmljZVBpY2tlciDnu4Tku7bog73lpJ/mmL7npLogKi8KICBvdmVyZmxvdy15OiBhdXRvOwogIC8qIOWFgeiuuOWeguebtOa7muWKqO+8jOWmguaenOmcgOimgeeahOivnSAqLwp9Cg=="},{"version":3,"sources":["DeviceAllocationPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DeviceAllocationPanel.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <transition name=\"panel\">\n    <div class=\"DeviceAllocationPanel-panel\" :style=\"{ bottom: bottom + 'px', top: top + 'px', width: panelWidth }\">\n      <!-- <ul class=\"device-list\">\n        <li v-for=\"(device, index) in DeviceList\" :key=\"index\" @click=\"SelectedDeviceName(device)\">\n          {{ device.DeviceName }}\n        </li>\n      </ul> -->\n      <div class=\"DeviceTypes-list\">\n        <DevicePicker v-for=\"(deviceType, index) in DeviceTypes\" :key=\"index\" :DeviceType=\"deviceType.DeviceType\"\n          :DeviceName=\"deviceType.DeviceName\" :DeviceBind=\"deviceType.isBind\" :PickerIndex=\"index\" :PickerSelect=\"deviceType.isSelected\"\n          :style=\"{ top: Position[index].top, left: Position[index].left }\" />\n      </div>\n\n      <span style=\"position: absolute; top: 10px; right: 15px; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\"> \n        {{ $t('Device To Be Allocated') }}\n      </span>\n\n      <ul class=\"device-list\">\n        <li v-for=\"(device, index) in DeviceList.filter(device => !device.isBind)\" :key=\"index\" @click=\"SelectedDeviceName(device)\">\n          {{ device.DeviceName }}\n        </li>\n      </ul>\n\n      <span style=\"position: absolute; bottom: 5px; right: 15px; font-size: 12px; font-weight: bold; color: rgba(0, 121, 214, 0.8); user-select: none;\" @click=\"ClosePanel\"> \n        {{ $t('CLOSE') }}\n      </span>\n\n\n\n    </div>\n  </transition>\n</template>\n\n<script>\nimport DevicePicker from './DevicePicker.vue';\n\nexport default {\n  name: 'DeviceAllocationPanel',\n  data() {\n    return {\n      bottom: 70,\n      top: 70,\n      DeviceList: [\n        // { DeviceName: 'QHY CCD QHY5III462C-075', DeviceIndex: 0, isBind: false },\n        // { DeviceName: 'QHY CCD QHY268C-59aa8c4', DeviceIndex: 1, isBind: false },\n        // { DeviceName: 'LX200 OnStep', DeviceIndex: 2, isBind: false },\n        // { DeviceName: 'QHY CCD QHY1920M-075', DeviceIndex: 3, isBind: false },\n        // { DeviceName: 'QHY CCD QHY163C-075', DeviceIndex: 4, isBind: false },\n      ],\n\n\n      DeviceTypes: [\n        // { DeviceType: 'Guider', DeviceName: '', isBind: false, isSelected: false },\n        // { DeviceType: 'Main Camera', DeviceName: '', isBind: false, isSelected: false },\n        // { DeviceType: 'Mount', DeviceName: '', isBind: false, isSelected: false },\n\n        // { DeviceType: 'Focuser', DeviceName: '', isBind: false, isSelected: false },\n        // { DeviceType: 'Pole Camera', DeviceName: '', isBind: false, isSelected: false },\n        // { DeviceType: 'CFW', DeviceName: '', isBind: false, isSelected: false },\n      ],\n\n      Position: [\n        { top: '12%', left: '15px' },\n        { top: '39%', left: '15px' },\n        { top: '66%', left: '15px' },\n\n        { top: '12%', left: '175px' },\n        { top: '39%', left: '175px' },\n        { top: '66%', left: '175px' },\n      ],\n    };\n  },\n  created() {\n    this.$bus.$on('SelectPickerIndex', this.SelectPickerIndex);\n    this.$bus.$on('AddDeviceType',this.AddDeviceType);\n    this.$bus.$on('DeviceToBeAllocated',this.DeviceToBeAllocated);\n    this.$bus.$on('DeviceConnectSuccess', this.DeviceConnectSuccess);\n    this.$bus.$on('BindDeviceIndex', this.BindingDevice);\n    this.$bus.$on('UnBindDeviceIndex', this.UnBindingDevice);\n    this.$bus.$on('clearDeviceAllocationList',this.clearDeviceAllocationList);\n    this.$bus.$on('deleteDeviceTypeAllocationList',this.deleteDeviceTypeAllocationList);\n    this.$bus.$on('deleteDeviceAllocationList',this.deleteDeviceAllocationList);\n    this.$bus.$on('loadBindDeviceList',this.loadBindDeviceList);\n    this.$bus.$on('loadBindDeviceTypeList',this.loadBindDeviceTypeList);\n  },\n  methods: {\n    SelectPickerIndex(num) {\n      for(let i = 0; i < this.DeviceTypes.length; i++) {\n        this.DeviceTypes[i].isSelected = false;\n      }\n      console.log('Select Picker Index:', num);\n      if(!this.DeviceTypes[num].isBind){\n        this.DeviceTypes[num].isSelected = true;\n      }\n    },\n\n    SelectedDeviceName(device) {\n      for (let i = 0; i < this.DeviceTypes.length; i++) {\n        if (this.DeviceTypes[i].DeviceName === device.DeviceName) {\n          this.DeviceTypes[i].DeviceName = '';\n        }\n      }\n\n      for (let i = 0; i < this.DeviceTypes.length; i++) {\n        if (this.DeviceTypes[i].isSelected === true) {\n          this.DeviceTypes[i].DeviceName = device.DeviceName;\n        }\n      }\n    },\n\n    AddDeviceType(DeviceType) {\n      const exists = this.DeviceTypes.some(item => item.DeviceType === DeviceType);\n      if (exists) {\n        console.log('Device Type already exists:', DeviceType);\n      } else {\n        console.log('Add Device Type:', DeviceType);\n        this.DeviceTypes.push({DeviceType: DeviceType, DeviceName: '', isBind: false, isSelected: false });\n      }\n    },\n\n    DeviceToBeAllocated(index,name) {\n      const exists1 = this.DeviceList.some(item => item.DeviceName === name);\n      const exists2 = this.DeviceTypes.some(item => item.DeviceName === name);\n      console.log('this.DeviceList:', this.DeviceList);\n      if (exists1) {\n        console.log('Device already exists:', name);\n        this.$bus.$emit('SendConsoleLogMsg', 'Device already exists:' + index + ':' + name, 'info');\n      } else {\n        if (exists2) {\n          this.$bus.$emit('SendConsoleLogMsg', 'Device already exists:' + index + ':' + name, 'info');\n          this.DeviceList.push({DeviceName: name, DeviceIndex: index, isBind: true });\n        } else {\n          this.$bus.$emit('SendConsoleLogMsg', 'Add Device To Be Allocated:' + index + ':' + name, 'info');\n          console.log('Add Device To Be Allocated:', index, name);\n          this.DeviceList.push({DeviceName: name, DeviceIndex: index, isBind: false });\n        }\n      }\n    },\n\n    DeviceConnectSuccess(type, DeviceName, DriverName, isBind = true) {\n      if (type == '' || type == \"undefined\" || type == null || DriverName == '' || DriverName == \"undefined\" || DriverName == null){\n        return;\n      }\n\n      let found = false;\n      for (let i = 0; i < this.DeviceTypes.length; i++) {\n        if (this.DeviceTypes[i].DeviceType === type) {\n          this.DeviceTypes[i].DeviceName = DeviceName;\n          this.DeviceTypes[i].isBind = isBind;\n          this.DeviceTypes[i].isSelected = false;\n          found = true; // 标记已找到匹配项\n          break; // 找到后可以跳出循环，优化性能\n        }\n      }\n\n      // 如果没有找到匹配项，添加新的设备对象\n      if (!found) {\n        this.DeviceTypes.push({\n          DeviceType: type,\n          DeviceName: DeviceName,\n          isBind: isBind,\n          isSelected: false,\n        });\n      }\n      const indexToRemove = this.DeviceList.findIndex(item => item.DeviceName === DeviceName);\n      if (indexToRemove !== -1) {\n        this.DeviceList[indexToRemove].isBind = isBind;\n        this.$bus.$emit('SendConsoleLogMsg', ' Binding Device Success:' + type + ':' + this.DeviceList[indexToRemove].DeviceIndex+': '+ this.DeviceList[indexToRemove].isBind, 'info');\n      }\n    },\n\n    BindingDevice(index) {\n      const type = this.DeviceTypes[index].DeviceType;\n      const name = this.DeviceTypes[index].DeviceName;\n\n      const DeviceNameIndex = this.DeviceList.findIndex(item => item.DeviceName === name);\n      if (DeviceNameIndex !== -1) {\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'BindingDevice:' + type + ':' + this.DeviceList[DeviceNameIndex].DeviceIndex);\n        this.$bus.$emit('SendConsoleLogMsg', 'Binding Device:' + type + ':' + this.DeviceList[DeviceNameIndex].DeviceIndex, 'info');\n      }\n    },\n\n    UnBindingDevice(index) {\n      const type = this.DeviceTypes[index].DeviceType;\n      const name = this.DeviceTypes[index].DeviceName;\n\n\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'UnBindingDevice:' + type);\n      this.$bus.$emit('SendConsoleLogMsg', 'UnBinding Device:' + type, 'info');\n\n      this.DeviceTypes[index].isBind = false;\n      this.DeviceTypes[index].DeviceName = '';\n      const indexToRemove = this.DeviceList.findIndex(item => item.DeviceName === name);\n      this.DeviceList[indexToRemove].isBind = false;\n      this.$bus.$emit('UnBindingDevice', type, name,this.DeviceList[index].DriverName);\n    },\n\n    ClosePanel() {\n      this.$bus.$emit('toggleDeviceAllocationPanel');\n    },\n\n    clearDeviceAllocationList() {\n      this.DeviceTypes = [];\n      this.DeviceList = [];\n    },\n    deleteDeviceTypeAllocationList(type) {\n\n      if (type == \"all\"){\n        this.clearDeviceAllocationList()\n        this.$bus.$emit('SendConsoleLogMsg', 'All driverType has removed', 'info');\n        return;\n      }\n\n      for (let i = this.DeviceTypes.length - 1; i >= 0; i--) {\n        if (this.DeviceTypes[i].DeviceType === type) {\n          for (let j = this.DeviceList.length - 1; j >= 0; j--) {\n            if (this.DeviceList[j].DeviceName === this.DeviceTypes[i].DeviceName) {\n              this.DeviceList[j].isBind = false;\n              break\n            }\n          }\n          this.DeviceTypes.splice(i, 1);\n          break\n        }\n      }\n      this.$bus.$emit('SendConsoleLogMsg', type + \" driverType has removed\", 'info');\n    },\n    deleteDeviceAllocationList(deviceName) {\n      for (let i = this.DeviceList.length - 1; i >= 0; i--) {\n        if (this.DeviceList[i].DeviceName === deviceName) {\n          this.DeviceList.splice(i, 1);\n        }\n      }\n      this.$bus.$emit('SendConsoleLogMsg', 'Device(' + deviceName + ') has removed', 'info');\n    },\n\n\n    GetConnectedDevices() {\n      this.$bus.$emit('GetConnectedDevices');\n      \n    },\n\n    loadBindDeviceList(deviceObject) {\n      deviceObject.forEach(device => {\n        for (const [deviceName, deviceIndex, isBind] of Object.entries(device)) {\n          this.DeviceToBeAllocated(deviceIndex, deviceName, isBind);\n        }\n      });\n    },\n\n    loadBindDeviceTypeList(deviceTypeObject) {\n      deviceTypeObject.forEach(deviceType => {\n        const { type, DeviceName, DriverName, isbind } = deviceType;\n        this.DeviceConnectSuccess(type, DeviceName, DriverName, isbind);\n      });\n    }\n    \n  },\n  components: {\n    DevicePicker,\n  },\n  computed: {\n    panelWidth() {\n      // 如果 DeviceTypes 中的项目数小于或等于 3，则宽度为 360px\n      // 如果大于 3，则宽度为 500px\n      return this.DeviceTypes.length <= 3 ? '360px' : '500px';\n    },\n  },\n  mounted: function () {\n    this.GetConnectedDevices();\n  },\n  watch: {},\n};\n</script>\n\n<style scoped>\n.DeviceAllocationPanel-panel {\n  pointer-events: auto;\n  position: fixed;\n  background-color: rgba(64, 64, 64, 0.5);\n  backdrop-filter: blur(5px);\n  box-sizing: border-box;\n  overflow: hidden;\n  left: 50%;\n  transform: translateX(-50%);\n\n  border-radius: 10px;\n  border: 1px solid rgba(255, 255, 255, 0.8);\n}\n\n@keyframes showPanelAnimation {\n  from {\n    bottom: 100%;\n    backdrop-filter: blur(0px);\n    background-color: rgba(64, 64, 64, 0.0);\n  }\n\n  to {\n    bottom: 70px;\n    backdrop-filter: blur(5px);\n    background-color: rgba(64, 64, 64, 0.3);\n  }\n}\n\n@keyframes hidePanelAnimation {\n  from {\n    bottom: 70px;\n    backdrop-filter: blur(5px);\n    background-color: rgba(64, 64, 64, 0.3);\n  }\n\n  to {\n    bottom: 100%;\n    backdrop-filter: blur(0px);\n    background-color: rgba(64, 64, 64, 0.0);\n  }\n}\n\n.panel-enter-active {\n  animation: showPanelAnimation 0.3s forwards;\n}\n\n.panel-leave-active {\n  animation: hidePanelAnimation 0.3s forwards;\n}\n\n.device-list {\n  position: absolute;\n  top: 30px;\n  right: 15px;\n  bottom: 25px;\n\n  list-style-type: none;\n  /* 去掉列表前的默认点 */\n  padding: 0;\n  /* 去掉内边距 */\n  margin: 0;\n  /* 去掉外边距 */\n  width: 150px;\n  /* 控制列表宽度 */\n  max-height: 200px;\n  /* 控制列表最大高度 */\n  overflow-y: auto;\n  /* 允许垂直滚动 */\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\nli {\n  color: white;\n  /* 设定文字颜色 */\n  padding: 5px 10px;\n  /* 添加一些内边距 */\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n  /* 添加底部边框 */\n  white-space: nowrap;\n  /* 确保文本不换行 */\n  overflow: hidden;\n  /* 超出部分隐藏 */\n  text-overflow: ellipsis;\n  /* 超出部分用省略号表示 */\n}\n\nli:hover {\n  background-color: rgba(255, 255, 255, 0.1);\n  /* 悬停效果 */\n}\n\n.DeviceTypes-list {\n  position: absolute;\n  top: 30px;\n  /* 根据需要调整位置 */\n  right: 15px;\n  /* 根据需要调整位置 */\n  bottom: 15px;\n  /* 根据需要调整位置 */\n  width: 150px;\n  /* 设置宽度，确保右侧的 DevicePicker 组件能够显示 */\n  overflow-y: auto;\n  /* 允许垂直滚动，如果需要的话 */\n}\n</style>\n"]}]}