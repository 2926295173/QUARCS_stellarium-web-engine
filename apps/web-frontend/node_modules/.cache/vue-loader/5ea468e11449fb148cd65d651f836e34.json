{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/App.vue","mtime":1749191979333},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappingsihfile":"App.vue","sourceRoot":"src","sourcesContent":["// Stellarium Web - Copyright (c) 2022 - Stellarium Labs SRL\n//\n// This program is licensed under the terms of the GNU AGPL v3, or\n// alternatively under a commercial licence.\n//\n// The terms of the AGPL v3 license can be found in the main directory of this\n// repository.\n\n<template>\n\n  <v-app>\n    <v-navigation-drawer v-model=\"drawer_2\" ref=\"Drawer_2\" app absolute temporary :width=\"DeviceIsConnected ? 200 : 200\"\n      style=\"left: 170px; backdrop-filter: blur(5px); background-color: rgba(0, 0, 0, 0.1);\">\n\n      <div v-show=\"isOpenDevicePage\">\n        <span\n          style=\"position: absolute; top: 0px; left: 50%; transform: translateX(-50%); font-size: 30px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n          {{ $t(CurrentDriverType) }}\n          <v-divider></v-divider>\n        </span>\n\n        <div :style=\"{ width: DeviceIsConnected ? '200px' : '200px' }\"\n          style=\"position: absolute; top: 50px; max-height: calc(100% - 95px); overflow-y: auto;\">\n\n          <div v-show=\"!DeviceIsConnected\" style=\"text-align: center;\">\n            <span style=\"display: inline-block; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n              {{ $t('Device Connection') }}\n            </span>\n            <v-select :label=\"$t('Select Driver')\" :items=\"drivers\" item-text=\"label\" item-value=\"value\"\n              v-model=\"selectedDriver\" style=\"width: 150px; display: inline-block;\"></v-select>\n\n            <v-select v-if=\"CurrentDriverType === 'Mount' || CurrentDriverType === 'Focuser'\" :label=\"$t('Baud Rate')\"\n              :items=\"BaudRateItems\" item-text=\"label\" item-value=\"value\" v-model=\"BaudRateSelected\"\n              style=\"width: 150px; display: inline-block;\">\n            </v-select>\n\n            <v-row no-gutters>\n              <v-col cols=\"4\">\n                <button @click=\"clearDriver\" class=\"btn-confirm\" style=\"display: inline-block;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/delete.svg\" height=\"20px\"\n                      style=\"min-height: 20px; pointer-events: none;\"></img>\n                  </div>\n                </button>\n              </v-col>\n              <v-col cols=\"4\">\n                <button v-if=\"!isConnecting\" @click=\"connectDriver(selectedDriver)\" class=\"btn-confirm\"\n                  style=\"display: inline-block; background-color: green;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <v-icon color=\"white\">mdi-link</v-icon>\n                  </div>\n                </button>\n                <v-progress-circular v-else indeterminate color=\"green\" size=\"24\"></v-progress-circular>\n              </v-col>\n              <v-col cols=\"4\">\n                <button @click=\"confirmDriver\" class=\"btn-confirm\" style=\"display: inline-block;\">\n                  <template>\n                    <v-icon color=\"rgba(255, 255, 255)\">mdi-check-bold</v-icon>\n                  </template>\n                </button>\n              </v-col>\n            </v-row>\n          </div>\n\n          <!-- <div v-show=\"!DeviceIsConnected\" style=\"text-align: center;\">\n            <span style=\"display: inline-block; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n              {{ $t('Device Connection') }}\n            </span>\n            <v-select :label=\"$t('Select Driver')\" :items=\"drivers\" item-text=\"label\" item-value=\"value\"\n              v-model=\"selectedDriver\" style=\"width: 150px; display: inline-block;\"></v-select>\n            <v-row no-gutters>\n              <v-col cols=\"6\">\n                <button @click=\"clearDriver\" class=\"btn-confirm\" style=\"display: inline-block;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/delete.svg\" height=\"20px\"\n                      style=\"min-height: 20px; pointer-events: none;\"></img>\n                  </div>\n                </button>\n              </v-col>\n              <v-col cols=\"6\">\n                <button @click=\"confirmDriver\" class=\"btn-confirm\" style=\"display: inline-block;\">\n                  <template>\n                    <v-icon color=\"rgba(255, 255, 255)\">mdi-check-bold</v-icon>\n                  </template>\n                </button>\n              </v-col>\n            </v-row>\n\n          </div> -->\n\n          <div v-show=\"DeviceIsConnected\" v-for=\"(item, index) in CurrentConfigItems()\" :key=\"index\"\n            style=\"text-align: center; width: 200px;\">\n            <span v-if=\"index === 0\"\n              style=\"display: inline-block; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n              {{ $t('Device Config Items') }}\n            </span>\n            <v-card-text>\n              <v-text-field v-if=\"item.inputType === 'text'\" v-model=\"item.value\" :label=\"item.label\"\n                style=\"width: 150px; display: inline-block;\"></v-text-field>\n\n              <div v-if=\"item.inputType === 'slider'\"\n                style=\"text-align: left; height: 30px; width: 150px; display: inline-block; margin-bottom: 20px;\">\n                <span\n                  style=\"display: inline-block; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\">{{\n                    item.label }}: {{ item.value }}</span>\n                <div>\n                  <button @click=\"decrement(item)\" class=\"get-click btn-slider\"\n                    style=\"position: absolute; left: 25px; transform: translateY(5px); user-select: none; font-size: 5px;\">\n                    <div style=\"display: flex; justify-content: center; align-items: center;\">\n                      <img src=\"@/assets/images/svg/ui/Minus.svg\" height=\"10px\"\n                        style=\"min-height: 10px; pointer-events: none;\"></img>\n                    </div>\n                  </button>\n                  <v-slider v-model=\"item.value\" :step=\"item.inputStep\" :max=\"item.inputMax\" :min=\"item.inputMin\"\n                    color=\"white\" class=\"align-center\"\n                    style=\"position: absolute; left: 45px; width: calc(100% - 90px);\"></v-slider>\n                  <button @click=\"increment(item)\" class=\"get-click btn-slider\"\n                    style=\"position: absolute; right: 25px; transform: translateY(5px); user-select: none; font-size: 5px;\">\n                    <div style=\"display: flex; justify-content: center; align-items: center;\">\n                      <img src=\"@/assets/images/svg/ui/Plus.svg\" height=\"10px\"\n                        style=\"min-height: 10px; pointer-events: none;\"></img>\n                    </div>\n                  </button>\n                </div>\n              </div>\n\n              <v-select v-if=\"item.inputType === 'select'\" v-model=\"item.value\" :label=\"item.label\"\n                :items=\"item.selectValue\" style=\"width: 150px; display: inline-block;\"></v-select>\n              <v-switch v-if=\"item.inputType === 'switch'\" v-model=\"item.value\" :label=\"item.label\"\n                style=\"width: 170px; display: inline-block; margin-bottom: -35px; margin-top: -35px;\"></v-switch>\n            </v-card-text>\n          </div>\n\n        </div>\n\n        <div v-show=\"DeviceIsConnected\"\n          style=\"text-align: center; position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); display: flex; gap: 10px;\">\n          <button @click=\"confirmConfiguration(CurrentConfigItems())\" class=\"btn-confirm\"\n            style=\"display: inline-block; user-select: none;\">\n            <v-icon color=\"rgba(255, 255, 255)\">mdi-check-bold</v-icon>\n          </button>\n          <button @click=\"disconnectDriver\" class=\"btn-confirm\" style=\"display: inline-block; background-color: red;\">\n            <div style=\"display: flex; justify-content: center; align-items: center;\">\n              <v-icon color=\"white\">mdi-link-off</v-icon>\n            </div>\n          </button>s\n        </div>\n\n        <!-- <div v-show=\"DeviceIsConnected\"\n          style=\"text-align: center; position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); display: flex; justify-content: center; width: 100%;\">\n          <button @click=\"confirmConfiguration(CurrentConfigItems())\" class=\"btn-confirm\"\n            style=\"display: inline-block; user-select: none;\">\n            <v-icon color=\"rgba(255, 255, 255)\">mdi-check-bold</v-icon>\n          </button>\n        </div> -->\n\n      </div>\n\n      <div v-show=\"isOpenPowerPage\">\n        <span\n          style=\"position: absolute; top: 0px; left: 50%; transform: translateX(-50%); font-size: 26px; color: rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap; \">\n          {{ $t('Power Management') }}\n          <v-divider></v-divider>\n        </span>\n\n        <div style=\"position: absolute; top: 50px; max-height: calc(100% - 50px); width: 200px; overflow-y: auto;\">\n          <v-list dense>\n\n            <v-list-item @click.stop=\"SwitchOutPutPower(1, OutPutPower_1_ON)\"\n              :style=\"{ height: '36px', marginBottom: '10px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/OutPutPower.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>\n                  <span>\n                    <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('OutPut Power 1') }}\n                    </div>\n                    <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': OutPutPower_1_ON }\">{{\n                      OutPutPower_1_ON ?\n                        '[ON]' : '[OFF]' }}</div>\n                  </span>\n                </v-list-item-title>\n\n              </v-list-item-content>\n            </v-list-item>\n\n            <v-list-item @click.stop=\"SwitchOutPutPower(2, OutPutPower_2_ON)\"\n              :style=\"{ height: '36px', marginBottom: '10px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/OutPutPower.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>\n                  <span>\n                    <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('OutPut Power 2') }}\n                    </div>\n                    <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': OutPutPower_2_ON }\">{{\n                      OutPutPower_2_ON ?\n                        '[ON]' : '[OFF]' }}</div>\n                  </span>\n                </v-list-item-title>\n\n              </v-list-item-content>\n            </v-list-item>\n\n            <v-divider :style=\"{ marginBottom: '10px' }\"></v-divider>\n\n            <v-list-item @click.stop=\"RestartRaspberryPi()\" :style=\"{ height: '36px', marginBottom: '10px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/Reboot.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Restart')\n                  }}</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n\n            <v-list-item @click.stop=\"ShutdownRaspberryPi()\" :style=\"{ height: '36px', marginBottom: '10px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/PowerOFF.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Shut Down')\n                  }}</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n\n          </v-list>\n        </div>\n\n      </div>\n\n    </v-navigation-drawer>\n\n    <v-navigation-drawer v-model=\"nav\" app :stateless=\"drawer_2\" temporary width=\"170\"\n      style=\"backdrop-filter: blur(5px); background-color: rgba(0, 0, 0, 0.1);\"> <!-- stateless temporary  -->\n      <v-layout column fill-height>\n        <v-list dense>\n          <template>\n            <div style=\"display: flex; justify-content: center; align-items: center;\">\n              <span style=\"font-size: 10px; color: rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap;\">\n                Client Version: {{ VueClientVersion }}\n              </span>\n            </div>\n            <div style=\"display: flex; justify-content: center; align-items: center;\">\n              <!-- <span style=\"font-size: 10px; color: getQTClientVersionColor,rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap;\">\n                Server Version: {{ QTClientVersion }}\n              </span> -->\n              <span :style=\"{\n                fontSize: '10px',\n                color: getQTClientVersionColor,\n                userSelect: 'none',\n                whiteSpace: 'nowrap'\n              }\">\n                Server Version: {{ QTClientVersion }}\n              </span>\n            </div>\n            <v-divider></v-divider>\n          </template>\n\n          <template>\n            <v-list-item @click.stop=\"QuitToMainApp()\" :style=\"{ height: '36px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/Quit.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Quit')\n                }}</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n\n            <v-list-item @click.stop=\"toggleStoreValue('showViewSettingsDialog')\" :style=\"{ height: '36px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/Setting.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('View Settings')\n                }}</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n            <v-divider></v-divider>\n          </template>\n\n          <v-list-item @click.stop=\"openPowerManagerPage()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Power.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Power Management')\n              }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- <v-list-item :disabled=\"loadingConnectAllDevice\" @touchstart=\"startConnectBtnPress\"\n            @touchend=\"endConnectBtnPress\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Connect.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px', userSelect: 'none' }\">{{\n                $t('Connect All') }}</v-list-item-title>\n              <v-progress-linear v-if=\"loadingConnectAllDevice\" indeterminate color=\"white\"\n                height=\"5\"></v-progress-linear>\n            </v-list-item-content>\n          </v-list-item> -->\n          <v-list-item :disabled=\"loadingConnectAllDevice\" @touchstart=\"startConnectBtnPress\"\n            @touchend=\"endConnectBtnPress\" @mousedown=\"startConnectBtnPress\" @mouseup=\"endConnectBtnPress\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Connect.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\">\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px', userSelect: 'none' }\">\n                {{ $t('Connect All') }}\n              </v-list-item-title>\n              <v-progress-linear v-if=\"loadingConnectAllDevice\" indeterminate color=\"white\"\n                height=\"5\"></v-progress-linear>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"disconnectAllDevice(false)\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DisConnect.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px', userSelect: 'none' }\">{{\n                $t('Disconnect All') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"DeviceAllocation()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Allocation.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{\n                $t('DeviceAllocation') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"CalibratePolarAxis()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/PoleAxis.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{\n                $t('CalibratePolarAxis') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"OpenIamgeFolder()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/FolderSwitch.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Image Files')\n              }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"OpenDebugLog()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DebugLog.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Logs')\n              }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-divider></v-divider>\n\n          <v-list-item v-for=\"(device, index) in devices\" :key=\"index\" @click.stop=\"selectDevice(device)\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/${device.driverType}.svg`)\" height=\"30px\"\n                  style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t(device.driverType) }}</div>\n                  <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': device.isConnected }\">{{ device.device}}\n                  </div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-divider></v-divider>\n\n          <v-list-item @click.stop=\"locationClicked()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/Location.svg`)\" height=\"30px\" style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Lat & Long') }}</div>\n                  <div :style=\"{ fontSize: '7px' }\">{{ '(' + $store.state.currentLocation.lat + ', ' +\n                    $store.state.currentLocation.lng + ')' }}</div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"ShowConfirmDialog('Confirm', $t('Are you sure you need to refresh?'), 'Refresh')\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/Refresh.svg`)\" height=\"30px\" style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ fontSize: '10px' }\">{{ $t('Refresh Page') }}</div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"toggleStoreValue('showDataCreditsDialog')\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DataCredits.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Data Credits')\n              }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n        </v-list>\n      </v-layout>\n    </v-navigation-drawer>\n\n\n    <v-main>\n\n      <canvas v-show=false id=\"TestCanvas\" width=\"1920\" height=\"1080\"></canvas>\n\n      <v-container class=\"fill-height\" fluid style=\"padding: 0\">\n        <div id=\"stel\" v-bind:class=\"{ right_panel: $store.state.showSidePanel }\">\n          <div style=\"position: relative; width: 100%; height: 100%\">\n            <component v-bind:is=\"guiComponent\"></component>\n            <canvas id=\"stel-canvas\" ref='stelCanvas' :style=\"{ zIndex: canvasZIndexStel }\"></canvas>\n            <canvas ref=\"mainCanvas\" id=\"mainCamera-canvas\" :style=\"{ zIndex: canvasZIndexMainCamera }\"\n              @click=\"handleMainCanvasClick\" @touchstart=\"handleTouchStart\" @touchmove=\"handleTouchMove\"\n              @touchend=\"handleTouchEnd\" @mousedown=\"handleMouseDown\" @mouseup=\"handleMouseUp\"\n              @mousemove=\"handleMouseMove\" @wheel=\"handleWheel\">\n            </canvas>\n            <canvas ref=\"guiderCanvas\" id=\"guiderCamera-canvas\" :style=\"{ zIndex: canvasZIndexGuiderCamera }\"\n              @click=\"handleGuiderCanvasClick\"></canvas>\n            <!-- <img id=\"imageSrc\" alt=\"Source\" :src=\"imageSrc\" crossOrigin = \"\" /> -->\n\n          </div>\n        </div>\n\n\n      </v-container>\n    </v-main>\n\n    <v-dialog v-model=\"showDisconnectDialog\" persistent max-width=\"290\">\n      <v-card>\n        <v-card-title class=\"text-h5\">Confirm Action</v-card-title>\n        <v-card-text>Are you sure you want to disconnect the driver {{ currentDisconnectDriverName }}?</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"red darken-1\" text @click=\"showDisconnectDialog = false\">Cancel</v-btn>\n          <v-btn color=\"green darken-1\" text @click=\"confirmDisconnect\">Confirm</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n  </v-app>\n\n</template>\n\n<script>\nimport _ from 'lodash'\nimport Gui from '@/components/gui.vue'\nimport GuiLoader from '@/components/gui-loader.vue'\nimport swh from '@/assets/sw_helpers.js'\nimport Moment from 'moment'\nimport BackgroundImage from '@/assets/images/svg/ui/Background.svg';\nimport ErrorImage from '@/assets/images/svg/ui/errorImage.svg';\n\nlet glTestCircle;\nlet glLayer;\nlet glStel;\n\nexport default {\n  data(context) {\n    return {\n      menuItems: [\n        { title: this.$t('View Settings'), icon: 'mdi-settings', store_var_name: 'showViewSettingsDialog', store_show_menu_item: 'showViewSettingsMenuItem' },\n        { title: this.$t('Planets Tonight'), icon: 'mdi-panorama-fisheye', store_var_name: 'showPlanetsVisibilityDialog', store_show_menu_item: 'showPlanetsVisibilityMenuItem' },\n        { divider: true }\n      ].concat(this.getPluginsMenuItems()).concat([\n        { title: this.$t('Data Credits'), footer: true, icon: 'mdi-copyright', store_var_name: 'showDataCreditsDialog' }\n      ]),\n      menuComponents: [].concat(this.getPluginsMenuComponents()),\n      guiComponent: 'GuiLoader',\n      startTimeIsSet: false,\n      initDone: false,\n      dataSourceInitDone: false,\n      imageSrc: 'https://i.imgur.com/egA5FIv.jpeg', // 替换为你的图像路径\n      cvReady: false,\n      canvasZIndexStel: -10,\n      canvasZIndexMainCamera: -11,\n      canvasZIndexGuiderCamera: -12,\n      currentcanvas: 'Stel',\n\n      WebSocketUrl: '',\n\n      websocket: null,\n      message: '',\n      receivedMessages: [],// 存储接收到的消息\n      sentMessages: [], // 存储已发送的消息\n      messageCounter: 0, // 用于生成唯一的消息ID\n      websocketState: 'disconnected', // 添加WebSocket连接状态\n      networkDisconnected: false, // 添加网络连接状态\n\n      QTClientVersion: 'Not connected',\n      VueClientVersion: process.env.VUE_APP_VERSION,\n\n      // isMessageBoxShow: false,\n\n      CurrentDriverType: '',\n      DeviceIsConnected: null,\n      confirmDriverType: '',\n\n      MainCameraOffsetMin: 0,\n      MainCameraOffsetMax: 0,\n\n      MainCameraGainMin: 0,\n      MainCameraGainMax: 0,\n\n      devices: [\n        { name: '导星镜', driverType: 'Guider', type: 'CCDs', ListNum: \"1\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Guider' },\n        { name: '主相机', driverType: 'MainCamera', type: 'CCDs', ListNum: \"20\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_MainCamera' },\n        { name: '赤道仪', driverType: 'Mount', type: 'Telescopes', ListNum: \"0\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Mount' },\n        { name: '望远镜', driverType: 'Telescopes', device: '', isConnected: false },\n        { name: '电动调焦器', driverType: 'Focuser', type: 'Focusers', ListNum: \"22\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Focuser' },\n        { name: '电子极轴镜', driverType: 'PoleCamera', type: 'CCDs', ListNum: \"2\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_PoleCamera' },\n        { name: '滤镜轮', driverType: 'CFW', type: 'Filter Wheels', ListNum: \"21\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_CFW' },\n      ],\n\n      // Changing the label name also requires changing the emit signal name\n      GuiderConfigItems: [\n        { driverType: 'Guider', label: 'Guider Focal Length (mm)', value: '', inputType: 'text' },\n        { driverType: 'Guider', label: 'Multi Star Guider', value: false, inputType: 'switch' },\n        // { driverType: 'Guider', label: 'Guider Pixel size', value: '', inputType: 'text'},\n        { driverType: 'Guider', label: 'Guider Gain', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n        { driverType: 'Guider', label: 'Calibration step (ms)', value: '', inputType: 'text' },\n        { driverType: 'Guider', label: 'Ra Aggression', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n        { driverType: 'Guider', label: 'Dec Aggression', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n\n      ],\n\n      MainCameraConfigItems: [\n        // vue处理参数\n        { driverType: 'MainCamera', label: 'ImageGainR', value: '1', inputType: 'slider', inputMin: 0, inputMax: 3, inputStep: 0.01 },\n        { driverType: 'MainCamera', label: 'ImageGainB', value: '1', inputType: 'slider', inputMin: 0, inputMax: 3, inputStep: 0.01 },\n        { driverType: 'MainCamera', label: 'ImageOffset', value: '', inputType: 'slider', inputMin: 0, inputMax: 255, inputStep: 0.1},\n        { driverType: 'MainCamera', label: 'ImageCFA', value: '', inputType: 'select', selectValue: ['GR', 'GB', 'BG', 'RGGB'] },\n        // 硬件处理参数\n        { driverType: 'MainCamera', label: 'Binning', value: '', inputType: 'slider', inputMin: 1, inputMax: 4, inputStep: 1 },\n        { driverType: 'MainCamera', label: 'Temperature', value: '', inputType: 'slider', inputMin: -50, inputMax: 30, inputStep: 1 },\n        { driverType: 'MainCamera', label: 'Gain', value: '', inputType: 'slider', inputMin: 0, inputMax: 0, inputStep: 1 },\n        { driverType: 'MainCamera', label: 'Offset', value: '', inputType: 'slider', inputMin: 0, inputMax: 0, inputStep: 1 },\n        // { driverType: 'MainCamera', label: 'RedBox Side Length (px)', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [1]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [2]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [3]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [4]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [5]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [6]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [7]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [8]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [9]', value: '', inputType: 'text' },\n        // 在这里添加更多的配置项\n      ],\n\n      MountConfigItems: [\n\n      ],\n\n      TelescopesConfigItems: [\n        { driverType: 'Telescopes', num: 1, label: 'Focal Length (mm)', value: '', inputType: 'text' },\n      ],\n\n      FocuserConfigItems: [\n        // { driverType: 'Focuser', num: 1, label: 'RedBox Side Length (px)', value: '', inputType: 'text'},\n        { driverType: 'Focuser', num: 2, label: 'Min Step', value: '', inputType: 'text' },\n        { driverType: 'Focuser', num: 2, label: 'Sync Focuser Step', value: '', inputType: 'text' },\n\n      ],\n\n      PoleCameraConfigItems: [\n\n      ],\n\n      CFWConfigItems: [\n\n      ],\n\n      BeforeChangeConfigItems: [],\n\n\n\n      imageData: null,\n\n      histogramImage: null,\n      histogram_min: 0,    // 直方图自动拉伸的最小值\n      histogram_max: 255,  // 直方图自动拉伸的最大值\n\n      currentHistogramMin: 0,\n      currentHistogramMax: 255,\n\n      ImageGainR: 1,\n      ImageGainB: 1,\n\n      ImageOffset: 0,\n\n      ImageCFA: 'BG',\n\n      CanvasWidth: 1920,  // 主画布宽度\n      CanvasHeight: 1080, // 主画布高度\n\n      scale: 1, // 缩放比例\n      translateX: 0, // 平移x坐标\n      translateY: 0, // 平移y坐标\n      bufferCanvas: null, // 存储画布\n      bufferCtx: null, // 存储画布上下文\n      tempCanvas: null, // 临时画布\n      tempCtx: null, // 临时画布上下文\n\n      visibleWidth: 0, // 可见区域宽度\n      visibleHeight: 0, // 可见区域高度\n      visibleX: 0, // 可见区域x坐标\n      visibleY: 0, // 可见区域y坐标\n      isDragging: false, // 标记画布是否正在拖动\n      pendingScaleChange: false, // 标记画布是否正在缩放\n\n      touchStartX: 0, // 触摸开始x坐标\n      touchStartY: 0, // 触摸开始y坐标\n      startDistance: 0, // 触摸开始距离\n\n      moveIntervalId: null, // 拖动定时器\n      zoomIntervalId: null, // 缩放定时器\n\n\n      imageWidth: 0, // 图像宽度\n      imageHeight: 0, // 图像高度\n      drawImgData: null,\n      OriginalImage: null,\n      detectStarsImg: null,\n\n      isNotDrawStars: true,\n\n      mainCameraSizeX: 0,\n      mainCameraSizeY: 0,\n\n      ImageProportion: 0,\n\n      DetectedStarsList: [],\n      DetectedStarsFinish: false,\n\n      CartesianList: [],\n\n      PolarPoint_Altitude: 0,\n\n      LastPoint_AzAlt: null,\n\n      MarkCircleNum: 0,\n\n      LastCircle_RaDec: null,\n      LastCircle_AzAlt: null,\n\n      Circles: [],\n\n      drawer_2: null,    // 设置侧边栏的显示与隐藏\n\n      drivers: [], // 驱动选项数组\n      selectedDriver: null, // 选中的驱动\n\n      devicesList: [], // 设备选项数组\n      selectedDevice: null, // 选中的设备\n      ToBeConnectDevice: [],\n\n      loadingSelectDriver: false,\n      loadingConnectAllDevice: false,\n\n      CurrentLocationLng: 0,\n      CurrentLocationLat: 0,\n\n      histogramData: [],\n\n      ImageArrayBuffer: null,\n\n      isOpenDevicePage: false, // 设置设备页面是否打开\n      isOpenPowerPage: false, // 设置电源页面是否打开\n\n      OutPutPower_1_ON: true,\n      OutPutPower_2_ON: false,\n\n      isPolarAxisMode: false,\n\n      isTouching: false, // 标记是否正在处理触摸事件\n      ConnectBtnPressTimer: null,\n      ConnectBtnlongPressThreshold: 1000,\n      isConnectBtnLongPress: false, // 标记是否为长按\n      ConnectBtnCanClick: true,\n\n\n      haveDeviceConnect: false,\n      isConnecting: false, // 添加连接状态\n\n      disconnectTimeoutTriggered: false,\n      disconnectTimeout: null,\n\n      isDownloadingImage: false,\n      isDownloadingImageName: '',\n      isWaitingLogged: false, // 添加等待日志标志\n\n      showDisconnectDialog: false,\n      currentDisconnectDriverName: '',\n\n      enableMainCanvasClick: false, // 控制画布是否可以点击，用来移动调焦选择框和选星\n\n      lastImageProcessParams: { // 最后处理图像的参数\n        gainR: 1,\n        gainB: 1,\n        offset: 0,\n        CFA: 'BG',\n        mode: 1,\n        B: 0,\n        W: 65535,\n        cvmode: 0,\n      },\n      focuserPictureFileName: '',  // 焦距图片文件名\n      isProcessingImage: false,   // 控制是否正在处理图像\n      isFocusLoopShooting: false,  // 控制是否进行ROi循环拍摄\n      // focuserROIStarsList: [],  // 用来保存ROI区域的星点列表，分别保存x,y,HFR\n      selectStarX: -1,\n      selectStarY: -1,\n      DrawSelectStarX: -1,\n      DrawSelectStarY: -1,\n      DrawSelectStarHFR: -1,\n      ROI_x: -1,    // 用来保存ROI区域的x坐标\n      ROI_y: -1,    // 用来保存ROI区域的y坐标\n      ROI_length: 300, // 用来保存ROI区域的长度\n      showSelectStar: false,\n\n      isOneTouch: false,\n      currentTouchX: [0, 0],\n      currentTouchY: [0, 0],\n      startTouchX: [0, 0],\n      startTouchY: [0, 0],\n      startTouchDistance: 0,\n\n      // 定义波特率选项\n      BaudRateItems: [\n        { label: '9600', value: 9600 },\n        { label: '19200', value: 19200 },\n        { label: '38400', value: 38400 },\n        { label: '57600', value: 57600 },\n        { label: '115200', value: 115200 },\n        { label: '230400', value: 230400 },\n      ],\n      BaudRateSelected: 9600, // 波特率选择\n      cpuTemp: null,  // CPU温度\n      cpuUsage: null, // CPU使用率\n    }\n  },\n  components: {\n    Gui,\n    GuiLoader,\n    // MessageBox,\n  },\n  created() {\n    this.$bus.$on('AppSendMessage', this.sendMessage);\n    this.$bus.$on('AppUpdateDevices', this.updateDevices);\n    this.$bus.$on('Switch-MainPage', this.handleButtonTestClick);\n    this.$bus.$on('AutoHistogramNum', this.setAutoHistogramNum);\n    this.$bus.$on('HandleHistogramNum', this.applyHistStretch);\n    this.$bus.$on('ImageGainR', this.ImageGainSet);\n    this.$bus.$on('ImageGainB', this.ImageGainSet);\n    this.$bus.$on('Offset', this.ImageOffsetSet);\n    this.$bus.$on('Binning', this.BinningSet);\n    this.$bus.$on('Gain', this.GainSet);\n    this.$bus.$on('Offset', this.OffsetSet);\n    this.$bus.$on('ImageCFA', this.ImageCFASet);\n    this.$bus.$on('Temperature', this.CameraTemperatureSet);\n    this.$bus.$on('Focal Length (mm)', this.FocalLengthSet);\n    this.$bus.$on('Guider Focal Length (mm)', this.GuiderFocalLengthSet);\n    this.$bus.$on('Multi Star Guider', this.MultiStarGuiderSet);\n    this.$bus.$on('Guider Pixel size', this.GuiderPixelSizeSet);\n    this.$bus.$on('Guider Gain', this.GuiderGainSet);\n    this.$bus.$on('Calibration step (ms)', this.CalibrationDurationSet);\n    this.$bus.$on('Ra Aggression', this.RaAggressionSet);\n    this.$bus.$on('Dec Aggression', this.DecAggressionSet);\n    this.$bus.$on('Sync Focuser Step', this.SyncFocuserStep);\n    this.$bus.$on('ImageProportion', this.setImageProportion);\n    this.$bus.$on('MountGoto', this.lookatcircle);\n    this.$bus.$on('SwitchImageToShow', this.SwitchImageToShow);\n    this.$bus.$on('PolarPointAltitude', this.setPolarPointAltitude);\n    this.$bus.$on('showStelCanvas', this.showStelCanvas);\n    this.$bus.$on('RecalibratePolarAxis', this.RecalibratePolarAxis);\n    this.$bus.$on('CurrentExpTimeList', this.CurrentExpTimeList);\n    this.$bus.$on('disconnectAllDevice', this.disconnectAllDevice);\n    this.$bus.$on('GetConnectedDevices', this.ReturnConnectedDevices);\n    this.$bus.$on('CurrentCFWList', this.CurrentCFWList);\n    this.$bus.$on('calcWhiteBalanceGains', this.calcWhiteBalanceGains);\n    this.$bus.$on('SwitchOutPutPower', this.SwitchOutPutPower);\n    this.$bus.$on('PolarAxisMode', this.PolarAxisMode);\n    this.$bus.$on('SendConsoleLogMsg', this.SendConsoleLogMsg);\n    // this.$bus.$on('DisconnectDriverSuccess', this.disconnectDriversuccess);\n    this.$bus.$on('UnBindingDevice', this.UnBindingDevice);\n    this.$bus.$on('CloseWebView', this.QuitToMainApp)\n    this.$bus.$on('RedBoxSizeChange', this.RedBoxSizeChange);\n    this.$bus.$on('setFocuserState', this.setFocuserState);  // 设置调焦状态和进度\n    this.$bus.$on('setShowSelectStar', this.setShowSelectStar);  // 设置是否显示选择星点\n    this.$bus.$on('ScaleChange', this.ScaleChange);\n  },\n  methods: {\n    getLocationHostName() {\n      const hostname = window.location.hostname;\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const port = window.location.protocol === 'https:' ? '8601' : '8600';\n      this.SendConsoleLogMsg('location hostname:' + hostname, 'info');\n      this.WebSocketUrl = `${protocol}//${hostname}:${port}`;\n      console.log('WebSocketUrl:', this.WebSocketUrl);\n    },\n    getQTClientVersion() {\n      this.sendMessage('Vue_Command', 'getQTClientVersion');\n    },\n    connect() {\n      // 替换为你的 WebSocket 服务器地址\n      // this.websocket = new WebSocket('ws://192.168.2.31:8600');  // process.env.VUE_APP_WEBSOCKET\n      // this.websocket = new WebSocket(process.env.VUE_APP_WEBSOCKET);\n      const wsOptions = {\n        rejectUnauthorized: false  // 禁用证书验证\n      };\n      this.websocket = new WebSocket(this.WebSocketUrl, [], wsOptions);\n\n      this.websocket.onopen = () => {\n        this.websocketState = 'connected';\n        this.networkDisconnected = false; // WebSocket连接成功时重置网络连接状态\n        if (this.disconnectTimeoutTriggered) {\n          this.callShowMessageBox('WebSocket connected', 'success');\n        }\n        this.$bus.$emit('ShowNetStatus', 'true');\n        this.StatusRecovery();\n        console.log('process.env.NODE_ENV:', process.env.NODE_ENV);\n      };\n      \n      this.websocket.onmessage = (message) => {\n        // console.log('QHYCCD | Received message:', message.data);\n\n        const data = JSON.parse(message.data);\n\n        if (data.type === 'QT_Return') {\n          const parts = data.message.split(':');\n          let messageType;\n          if (parts.length > 0) {\n            messageType = parts[0];\n            // console.log('QHYCCD | 获得信息('+messageType+'):', parts);\n          }\n          else {\n            console.error('消息格式错误，无法分割:', data.message);\n            return;\n          }\n          let acceptMessage = false;\n          if (data.message.startsWith('StagingScheduleData:')) {\n            console.log('------------------------------');\n            acceptMessage = true;\n            const parts = data.message.split('[');\n\n            if (parts.length > 0) {\n              console.log('parts.length: ', parts.length);\n              this.$bus.$emit('StagingScheduleData', data.message);\n            }\n            console.log('------------------------------');\n          }\n\n          if (data.message.startsWith('SendDebugMessage|')) {\n            acceptMessage = true;\n            const parts = data.message.split('|');\n            if (parts.length === 3) {\n              const type = parts[1];\n              const message = parts[2];\n              this.$bus.$emit('SendDebugMessage', type, message);\n            }\n          }\n\n          if (!acceptMessage) {\n            switch (messageType) {\n              case 'AddDriver':\n                if (parts.length === 3) {\n                  const label = parts[1];\n                  const value = parts[2];\n                  const type = this.CurrentDriverType;\n                  // 创建一个驱动对象\n                  const driver = { type, label, value };\n\n                  // if (type === 'MainCamera' && label === \"QHY CCD2\") {\n                  //   break;\n                  // }\n                  // if (type === 'Guider' && label === \"QHY CCD\") {\n                  //   break;\n                  // }\n\n                  // 检查label是否为\"QHY CCD\"或\"QFocuser\"，如果是，则插入到数组首位\n                  if (label === \"QHY CCD\" || label === \"QFocuser\" || label === \"QHY CCD2\") {\n                    this.drivers.unshift(driver); // 将新驱动添加到数组的开始位置\n                  } else {\n                    this.drivers.push(driver); // 将新驱动添加到数组的末尾\n                  }\n                }\n                break;\n\n              case 'AddDevice':\n                if (parts.length === 2) {\n                  const label = parts[1];\n                  console.log('QHYCCD | AddDevice: ', label);\n                  // const value = parts[2];\n                  const type = this.confirmDriverType;\n                  // 创建一个驱动对象\n                  const device = { type, label, label };\n                  console.log('QHYCCD | AddDevice: ', device);\n                  // this.$bus.$emit('add-device', device);\n                  this.devicesList.push(device);\n\n                  this.ToBeConnectDevice = [];\n                  this.devicesList.forEach(devicesList => {\n                    if (devicesList.type === this.CurrentDriverType) {\n                      this.ToBeConnectDevice.push(devicesList);\n                    }\n                  });\n\n                  this.loadingSelectDriver = false;\n                }\n                break;\n\n              case 'updateDevices_':\n                if (parts.length === 3) {\n                  const ListNum = parts[1];\n                  const name = parts[2];\n                  this.updateDevices_(ListNum, name);\n                }\n                break;\n\n              case 'ConnectSuccess':\n                if (parts.length === 4) {\n                  const type = parts[1];\n                  const deviceName = parts[2];\n                  const driverName = parts[3];\n\n                  if (deviceName != '') {\n                    this.updateDevicesConnect(type, deviceName, driverName, true);\n                  } else {\n                    this.updateDevicesConnect(type, deviceName, driverName, false);\n                  }\n                }\n                break;\n\n              case 'ConnectFailed':\n                if (parts.length === 2) {\n                  const reason = parts[1];\n                  this.callShowMessageBox(reason, 'error');\n                  this.loadingConnectAllDevice = false;\n                }\n                break;\n\n              case 'ScanFailed':\n                if (parts.length === 2) {\n                  const reason = parts[1];\n                  this.callShowMessageBox(reason, 'error');\n                  this.loadingSelectDriver = false;\n                }\n                break;\n\n              case 'AddDeviceType':\n                if (parts.length === 2) {\n                  const DeviceType = parts[1];\n                  this.$bus.$emit('AddDeviceType', DeviceType);\n                }\n                break;\n\n              case 'DeviceToBeAllocated':\n                if (parts.length === 4) {\n                  const DeviceType = parts[1];\n                  const DeviceIndex = parts[2];\n                  const DeviceName = parts[3];\n                  this.$bus.$emit('DeviceToBeAllocated', DeviceIndex, DeviceName);\n                }\n                break;\n\n              case 'ShowDeviceAllocationWindow':\n                this.$bus.$emit('toggleDeviceAllocationPanel');\n                this.nav = false;\n                break;\n\n              case 'ExposureCompleted':\n                this.$bus.$emit('ExposureCompleted');\n                break;\n\n              case 'SaveJpgSuccess':\n                if (parts.length === 4) {\n                  const fileName = parts[1];\n                  const roi_x = parts[2];\n                  const roi_y = parts[3];\n                  // this.$bus.$emit('showRoiImage', fileName);\n                  this.showRoiImage(fileName, roi_x, roi_y);\n                }\n                break;\n\n              case 'SaveBinSuccess':\n                if (parts.length === 2) {\n                  const fileName = parts[1];\n                  this.readBinFile('img/' + fileName);\n                  this.DetectedStarsFinish = false;\n                }\n                break;\n\n              case 'SaveGuiderImageSuccess':\n                if (parts.length === 2) {\n                  const fileName = parts[1];\n                  this.loadAndDisplayImage('img/' + fileName);\n                }\n                break;\n\n              case 'AddScatterChartData':\n                if (parts.length === 3) {\n                  const Data_x = parts[1];\n                  const Data_y = parts[2];\n                  const newDataPoint = [Data_x, Data_y];\n                  this.$bus.$emit('AddScatterChartData', newDataPoint);\n                }\n                break;\n\n              case 'AddLineChartData':\n                if (parts.length === 4) {\n                  const Data_x = parts[1];\n                  const Data_Ra = parts[2];\n                  const Data_Dec = parts[3];\n                  const newDataPoint_Ra = [Data_x, Data_Ra];\n                  const newDataPoint_Dec = [Data_x, Data_Dec];\n                  this.$bus.$emit('AddLineChartData', newDataPoint_Ra, newDataPoint_Dec);\n                }\n                break;\n\n              case 'SetLineChartRange':\n                if (parts.length === 3) {\n                  const min = parts[1];\n                  const max = parts[2];\n                  this.$bus.$emit('SetLineChartRange', min, max);\n                }\n                break;\n\n              case 'GuiderStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('GuiderStatus', status);\n                }\n                break;\n\n              case 'FocusChangeSpeedSuccess':\n                if (parts.length === 2) {\n                  const Speed = parts[1];\n                  this.$bus.$emit('FocusChangeSpeedSuccess', Speed);\n                }\n                break;\n\n\n              case 'FocusPosition':\n                if (parts.length === 3) {\n                  const CurrentPosition = parts[1];\n                  const TargetPosition = parts[2];\n                  this.$bus.$emit('FocusPosition', CurrentPosition, TargetPosition);\n                }\n                break;\n\n              case 'FocusMoveDone':\n                if (parts.length === 3) {\n                  const CurrentPosition = parts[1];\n                  const FWHM = parts[2];\n                  this.$bus.$emit('UpdateFWHM',CurrentPosition, FWHM);\n                  this.$bus.$emit('addData_Point', CurrentPosition, FWHM);\n                }\n                break;\n\n              case 'addMinPointData_Point':\n                if (parts.length === 3) {\n                  const x = parseInt(parts[1]);\n                  const y = parseFloat(parts[2]);\n                  this.$bus.$emit('addMinPointData_Point', x, y);\n                }\n                break;\n              case 'addLineData_Point':\n                if (parts.length === 2) {\n                    const dataList = parts[1].split(',');  // 将字符串分割成数组\n                    const coordinates = [];\n                    for (let i = 0; i < dataList.length-1; i += 2) {\n                        const x = parseInt(dataList[i]);\n                        const y = parseFloat(dataList[i + 1]);\n                        const coordinate = [x, y];\n                        coordinates.push(coordinate);\n                    }\n                    this.$bus.$emit('addLineData_Point', coordinates);\n                }\n                break;\n              case 'MainCameraSize':\n                if (parts.length === 3) {\n                  const SizeX = parts[1];\n                  const SizeY = parts[2];\n                  this.$bus.$emit('MainCameraSize', SizeX, SizeY);\n                  this.mainCameraSizeX = SizeX;\n                  this.mainCameraSizeY = SizeY;\n                }\n                break;\n\n              case 'MainCameraBinning':\n                if (parts.length === 2) {\n                  const bin = parseInt(parts[1]);\n                  this.$bus.$emit('MainCameraBinning', bin);\n                }\n                break;\n\n              case 'fitQuadraticCurve':\n                this.$bus.$emit('ClearfitQuadraticCurve');\n                for (let x = 0; x <= 601; x += 1) {\n                  const a = parts[x];\n                  const b = a.split('|');\n                  if (b.length === 2) {\n                    const x = b[0];\n                    const y = b[1];\n                    this.$bus.$emit('fitQuadraticCurve', x, y);\n                  }\n                }\n                break;\n\n              case 'fitQuadraticCurve_minPoint':\n                const x = parts[1];\n                const y = parts[2];\n                this.$bus.$emit('fitQuadraticCurve_minPoint', x, y);\n                break;\n\n\n              case 'TelescopePark':\n                if (parts.length === 2) {\n                  const Switch = parts[1];\n                  this.$bus.$emit('MountParkSwitch', Switch);\n                }\n                break;\n\n              case 'TelescopeTrack':\n                if (parts.length === 2) {\n                  const Switch = parts[1];\n                  this.$bus.$emit('MountTrackSwitch', Switch);\n                }\n                break;\n\n              case 'MountSetSpeedSuccess':\n                if (parts.length === 2) {\n                  const num = parts[1];\n                  this.$bus.$emit('newMountSlewRate', num);\n                }\n                break;\n\n\n              case 'TelescopePierSide':\n                if (parts.length === 2) {\n                  const Side = parts[1];\n                  this.$bus.$emit('updateMountPierSide', Side);\n                }\n                break;\n\n              case 'TelescopeTotalSlewRate':\n                if (parts.length === 2) {\n                  const num = parts[1];\n                  this.$bus.$emit('MountTotalSlewRate', num);\n                }\n                break;\n\n\n              case 'UpdateScheduleProcess':\n                if (parts.length === 3) {\n                  const RowNum = parts[1];\n                  const Process = parts[2];\n                  this.$bus.$emit('UpdateScheduleProcess', RowNum, Process);\n                }\n                break;\n\n              case 'ExpTimeList':\n                if (parts.length === 2) {\n                  this.$bus.$emit('initExpTimeList', parts[1]);\n                }\n                break;\n\n\n              case 'CameraInExposuring':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('CameraInExposuring', status);\n                }\n                break;\n\n              case 'AutoFocusOver':\n                this.$bus.$emit('AutoFocusOver');\n                break;\n\n              case 'CFWPositionMax':\n                if (parts.length === 2) {\n                  this.$bus.$emit('SetCFWPositionMax', parts[1]);\n\n                  for (let i = 1; i <= parts[1]; i++) {\n                    this.CFWConfigItems.push({ driverType: 'CFW', label: `CFW [${i}]`, value: '', inputType: 'text' });\n                  }\n\n                  this.$bus.$emit('AppSendMessage', 'Vue_Command', 'getCFWList');\n                }\n                break;\n\n\n              case 'SetCFWPositionSuccess':\n                if (parts.length === 2) {\n                  this.$bus.$emit('SetCFWPositionSuccess', parts[1]);\n                }\n                break;\n\n              case 'getCFWList':\n                if (parts.length === 2) {\n                  this.$bus.$emit('initCFWList', parts[1]);\n                }\n                break;\n\n              case 'GuiderSwitchStatus':\n                if (parts.length === 2) {\n                  this.$bus.$emit('GuiderSwitchStatus', parts[1]);\n                }\n                break;\n\n              case 'GuiderLoopExpStatus':\n                if (parts.length === 2) {\n                  this.$bus.$emit('GuiderLoopExpStatus', parts[1]);\n                }\n                break;\n\n              case 'TelescopeRADEC':\n                if (parts.length === 3) {\n                  this.UpdateCirclePos(parts[1], parts[2]);\n                }\n                break;\n\n\n              case 'TelescopeStatus':\n                if (parts.length === 2) {\n                  this.UpdateTelescopeStatus(parts[1]);\n                }\n                break;\n\n              case 'MainCameraStatus':\n                if (parts.length === 2) {\n                  this.UpdateMainCameraStatus(parts[1]);\n                }\n                break;\n\n\n              case 'MainCameraTemperature':\n                if (parts.length === 2) {\n                  this.UpdateMainCameraTemperature(parts[1]);\n                }\n                break;\n\n\n              case 'ShowAllImageFolder':\n                if (parts.length === 3) {\n                  this.$bus.$emit('ShowAllImageFolder', parts[1], parts[2]);\n                }\n                break;\n\n\n              case 'ImageFilesName':\n                if (parts.length === 2) {\n                  this.$bus.$emit('ImageFilesName', parts[1]);\n                }\n                break;\n\n\n              case 'USBCheck':\n                if (parts.length === 2) {\n                  const USBdata = parts[1].split(',');\n                  console.log('USB name: ', USBdata[0]);\n                  console.log('USB space: ', USBdata[1]);\n                  this.SendConsoleLogMsg('USB name:' + USBdata[0], 'info');\n                  this.SendConsoleLogMsg('USB space:' + USBdata[1], 'info');\n\n                  this.$bus.$emit('USB_Name_Sapce', USBdata[0], USBdata[1]);\n                }\n                break;\n\n              case 'ImageSaveErroe':\n                if (parts.length === 2) {\n                  const Erroe = parts[1];\n                  if (Erroe === 'USB-Null') {\n                    this.callShowMessageBox('No USB Drive Detected.', 'error');\n                  } else if (Erroe === 'USB-Multiple') {\n                    this.callShowMessageBox('Multiple USB drives detected, please remove excess USB drives.', 'error');\n                  }\n                }\n                break;\n\n              case 'DetectedStars':\n                console.log('Detected', parts.length, 'stars.');\n                this.SendConsoleLogMsg('Detected ' + parts.length + ' stars.', 'info');\n                this.DetectedStarsList = [];\n                for (let i = 0; i < parts.length; i++) {\n                  const a = parts[i];\n                  const b = a.split('|');\n                  if (b.length === 3) {\n                    const x = b[0];\n                    const y = b[1];\n                    const hfr = b[2];\n                    // console.log('Stars at(', x, ',', y, ') with HFR:', hfr);\n                    this.DetectedStarsList.push({ x: x, y: y, hfr: hfr });\n                  }\n                }\n                this.DetectedStarsFinish = true;\n                break;\n\n              case 'SolveImageResult':\n                if (parts.length === 5) {\n                  // this.UpdateCirclePos(parts[1], parts[2]);\n                  console.log('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):', parts[1], ',', parts[2], ',', parts[3], ',', parts[4]);\n                  this.SendConsoleLogMsg('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):' + parts[1] + ',' + parts[2] + ',' + parts[3] + ',' + parts[4], 'info');\n                  this.SolveResultMark(parts[1], parts[2], parts[3], parts[4]);\n                  this.$bus.$emit(\"ImageSolveFinished\", true);\n                  this.$bus.$emit('setParsingProgress', false);\n                }\n                break;\n\n              case 'SolveFovResult':\n                if (parts.length === 9) {\n                  const RaDec = [\n                    { Ra: parts[1], Dec: parts[2] },\n                    { Ra: parts[3], Dec: parts[4] },\n                    { Ra: parts[5], Dec: parts[6] },\n                    { Ra: parts[7], Dec: parts[8] },\n                  ];\n                  this.SolveFovMark(RaDec);\n                }\n                break;\n\n              case 'RealTimeSolveImageResult':\n                if (parts.length === 5) {\n                  console.log('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):', parts[1], ',', parts[2], ',', parts[3], ',', parts[4]);\n                  this.SendConsoleLogMsg('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):' + parts[1] + ',' + parts[2] + ',' + parts[3] + ',' + parts[4], 'info');\n                  const result = this.SolveResultMark_RealTime(parts[1], parts[2], parts[3], parts[4])\n                }\n                break;\n\n              case 'SolveImagefailed':\n                this.callShowMessageBox('Solve image faild...', 'error');\n                this.$bus.$emit(\"ImageSolveFinished\", false);\n                this.$bus.$emit('setParsingProgress', false);\n                break;\n\n              case 'MainCameraOffsetRange':\n                if (parts.length === 3) {\n                  console.log('MainCameraOffsetRange:', parts[1], ',', parts[2]);\n                  this.SendConsoleLogMsg('MainCameraOffsetRange:' + parts[1] + ',' + parts[2], 'info');\n                  this.MainCameraOffsetMin = parts[1];\n                  this.MainCameraOffsetMax = parts[2];\n\n                  const OffsetItem = this.MainCameraConfigItems.find(item => item.label === 'Offset');\n                  if (OffsetItem) {\n                    console.log('MainCameraOffsetRange:', parseInt(this.MainCameraOffsetMin, 10), ',', parseInt(this.MainCameraOffsetMax, 10));\n                    OffsetItem.inputMin = parseInt(this.MainCameraOffsetMin, 10);\n                    OffsetItem.inputMax = parseInt(this.MainCameraOffsetMax, 10);\n                  }\n                }\n                break;\n\n              case 'MainCameraGainRange':\n                if (parts.length === 3) {\n                  console.log('MainCameraGainRange:', parts[1], ',', parts[2]);\n                  this.SendConsoleLogMsg('MainCameraGainRange:' + parts[1] + ',' + parts[2], 'info');\n                  this.MainCameraGainMin = parts[1];\n                  this.MainCameraGainMax = parts[2];\n\n                  const gainItem = this.MainCameraConfigItems.find(item => item.label === 'Gain');\n                  if (gainItem) {\n                    console.log('MainCameraGainRange:', parseInt(this.MainCameraGainMin, 10), ',', parseInt(this.MainCameraGainMax, 10));\n                    gainItem.inputMin = parseInt(this.MainCameraGainMin, 10);\n                    gainItem.inputMax = parseInt(this.MainCameraGainMax, 10);\n                  }\n                }\n                break;\n\n              case 'OutputPowerStatus':\n                if (parts.length === 3) {\n                  const index = parseInt(parts[1], 10);\n                  const value = parseInt(parts[2], 10);\n\n                  if (index === 1) {\n                    this.OutPutPower_1_ON = value === 1;\n                  } else if (index === 2) {\n                    this.OutPutPower_2_ON = value === 1;\n                  }\n                }\n                break;\n\n              case 'PHD2StarBoxView':\n                if (parts.length === 2) {\n                  const view = parts[1];\n                  this.$bus.$emit('PHD2StarBoxView', view);\n                }\n                break;\n\n              case 'PHD2StarCrossView':\n                if (parts.length === 2) {\n                  const view = parts[1];\n                  this.$bus.$emit('PHD2StarCrossView', view);\n                }\n                break;\n\n              case 'PHD2StarBoxPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Box_X = parseInt(parts[3], 10);\n                  const Box_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2Box(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y);\n                }\n                break;\n\n              case 'PHD2MultiStarsPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Box_X = parseInt(parts[3], 10);\n                  const Box_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2MultiStars(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y);\n                }\n                break;\n\n              case 'ClearPHD2MultiStars':\n                this.$bus.$emit('ClearPHD2MultiStars');\n                break;\n\n              case 'PHD2StarCrossPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Cross_X = parseInt(parts[3], 10);\n                  const Cross_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2Cross(PHD2ImageSize_X, PHD2ImageSize_Y, Cross_X, Cross_Y);\n                }\n                break;\n\n              case 'QTClientVersion':\n                if (parts.length === 2) {\n                  this.QTClientVersion = parts[1];\n                }\n                break;\n\n\n              case 'CaptureImageSaveStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  if (status === 'Repeat') {\n                    this.callShowMessageBox(this.$t('There is no need to save it again'), 'error');\n                  } else if (status === 'Success') {\n                    this.callShowMessageBox(this.$t('Image saved successfully'), 'success');\n                  } else if (status === 'Null') {\n                    this.callShowMessageBox(this.$t('No images to save'), 'error');\n                  }\n                }\n                break;\n\n              case 'INDIServerDebug':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('INDIServerDebug', message);\n                }\n                break;\n\n              case 'HotspotName':\n                if (parts.length === 2) {\n                  const Name = parts[1];\n                  this.$bus.$emit('HotspotName', Name);\n                }\n                break;\n\n              case 'EditHotspotNameSuccess':\n                this.$bus.$emit('EditHotspotNameSuccess');\n                break;\n\n              case 'DSLRsSetup':\n                if (parts.length === 2) {\n                  const Name = parts[1];\n                  this.$bus.$emit('ShowDSLRsSetup', Name);\n                }\n                break;\n\n              case 'ConfigureRecovery':\n                if (parts.length === 3) {\n                  const ConfigName = parts[1];\n                  const ConfigValue = parts[2];\n                  console.log('Configure:', ConfigName, ',', ConfigValue);\n                  this.SendConsoleLogMsg('Configure Recovery:' + parts[1] + ',' + parts[2], 'info');\n                  this.$bus.$emit(ConfigName, ConfigValue);\n\n                  if (parts[1] === 'FocalLength') {\n                    this.TelescopesConfigItems[0].value = parts[2];\n                    for (const device of this.devices) {\n                      if (device.driverType === 'Telescopes') {\n                        if (parts[2] === '' || parts[2] === NaN) {\n                          device.device = '';\n                        }else{\n                          device.device = parts[2] + ' mm';\n                        }\n                      }\n                    }\n                  }\n\n                  if (parts[1] === 'GuiderFocalLength') {\n                    this.GuiderConfigItems[0].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderFocalLength:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'Coordinates') {\n                    const [lat, lng] = parts[2].split(',').map(coord => parseFloat(coord.trim()));\n                    this.SetCurrentLocation(lat, lng);\n                  }\n\n                  if (parts[1] === 'MultiStarGuider') {\n                    this.GuiderConfigItems[1].value = (parts[2] === 'true');\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'MultiStarGuider:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'GuiderGain') {\n                    this.GuiderConfigItems[2].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderGain:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'CalibrationDuration') {\n                    this.GuiderConfigItems[3].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'CalibrationDuration:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'RaAggression') {\n                    this.GuiderConfigItems[4].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'RaAggression:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'DecAggression') {\n                    this.GuiderConfigItems[5].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DecAggression:' + parts[2]);\n                  }\n                }\n                break;\n\n\n              case 'ConnectDriverSuccess':\n                if (parts.length === 2) {\n                  const device = parts[1];\n                  this.connectDriverSuccess(device);\n                }\n                break;\n\n              case 'ConnectDriverFailed':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.connectDriverFailed(message);\n                }\n                break;\n\n              case 'DisconnectDriverSuccess':\n                if (parts.length === 2) {\n                  const device = parts[1];\n                  this.disconnectDriversuccess(device);\n                }\n                break;\n\n              case 'DisconnectDriverFail':\n                if (parts.length === 2) {\n                  const driver = parts[1];\n                  this.disconnectDriverFail(device)\n                }\n\n              case 'SelectedDriverList':\n                if (parts.length >= 3) {\n                  const deviceObjects = parts.slice(1).reduce((acc, part, index, array) => {\n                    if (index % 2 === 0) {\n                      acc.push({ [array[index]]: array[index + 1] });\n                    }\n                    return acc;\n                  }, []);\n                  this.loadSelectedDriverList(deviceObjects);\n                }\n                break;\n\n\n              case 'BindDeviceList':\n                if (parts.length >= 3) {\n                  const deviceObjects = parts.slice(1).reduce((acc, part, index, array) => {\n                    if (index % 2 === 0) {\n                      acc.push({ [array[index]]: array[index + 1] });\n                    }\n                    return acc;\n                  }, []);\n                  this.loadBindDeviceList(deviceObjects);\n                }\n                break;\n\n\n              case 'BindDeviceTypeList':\n                if (parts.length >= 5) { // 确保至少有五个参数加上前缀\n                  const deviceTypeObjects = [];\n                  for (let i = 1; i < parts.length; i += 4) {\n                    const deviceTypeObject = {\n                      Type: parts[i],\n                      DeviceName: parts[i + 1],\n                      DriverName: parts[i + 2],\n                      isbind: parts[i + 3] == \"true\" ? true : false,\n                    };\n                    deviceTypeObjects.push(deviceTypeObject);\n                  }\n                  this.loadBindDeviceTypeList(deviceTypeObjects);\n                }\n                break;\n\n              case 'deleteDeviceAllocationList':\n                if (parts.length === 2) {\n                  const deviceName = parts[1];\n                  this.deleteDeviceAllocationList(deviceName);\n                }\n                break;\n\n              case 'deleteDeviceTypeAllocationList':\n                if (parts.length === 2) {\n                  const deviceType = parts[1];\n                  if (deviceType != '') {\n                    this.$bus.$emit('deleteDeviceTypeAllocationList', deviceType);\n                  }\n                  if (deviceType == 'CFW') {\n                    for (let i = 0; i < this.devices.length; i++) {\n                      if (this.devices[i].driverType == 'CFW') {\n                        this.devices[i].isConnected = false;\n                        this.devices[i].device = '';\n                        this.devices[i].driverName = '';\n                        this.devices[i].BaudRate = 9600;\n                        this.$bus.$emit('CFWConnected', 0);\n                      }\n                    }\n                  }\n                }\n                break;\n\n              case 'ParseInfoEmitted':\n                if (parts.length === 2) {\n                  const progress = parts[1];\n                  this.$bus.$emit('ParseInfoEmitted', progress);\n                }\n                break;\n\n              case 'GuiderUpdateStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('GuiderUpdateStatus', parseInt(status, 10));\n                }\n                break;\n\n              case 'LoopSolveImageFinished':\n                this.$bus.$emit('LoopSolveImageFinished');\n                break;\n\n              case 'disconnectDevicehasortherdevice':\n                if (parts.length === 2) {\n                  const drivername = parts[1];\n                  this.showSelectdisconnectDriver(drivername);\n                }\n                break;\n\n              case 'getFocuserMoveState':\n                this.$bus.$emit('getFocuserMoveState');\n                break;\n\n              case 'FocusMoveToLimit':\n                if (parts.length === 2) {\n                  const errorlog = parts[1];\n                  this.callShowMessageBox(errorlog, 'error');\n                }\n                break;\n\n              case 'startFocusLoopSjootingfile':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('startFocusLoopSjootingfile', message);\n                }\n                break;\n\n              case 'setFocuserLoopingState':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('setFocuserLoopingState', message);\n                  if (message == 'true') {\n                    this.isFocusLoopShooting = true;\n                  } else {\n                    this.isFocusLoopShooting = false;\n                  }\n                }\n                break;\n\n              // case 'focuserROIStarsList':\n              //   if (parts.length === 4) {\n              //     const x = parts[1];\n              //     const y = parts[2];\n              //     const HFR = parts[3];\n              //     this.focuserROIStarsList.push({ x, y, HFR });\n              //   }\n              //   break;\n\n              // case 'clearFocuserROIStarsList':\n              //   this.focuserROIStarsList = [];\n              //   break;\n\n              case 'setSelectStarPosition':\n                if (parts.length === 4) {\n                  this.DrawSelectStarX = parseFloat(parts[1]);\n                  this.DrawSelectStarY = parseFloat(parts[2]);\n                  this.DrawSelectStarHFR = parseFloat(parts[3]);\n                }\n                break;\n\n              case 'SetRedBoxState':\n                if (parts.length === 4) {\n                  const length = parts[1];\n                  this.ROI_x = parseFloat(parts[2]);\n                  this.ROI_y = parseFloat(parts[3]);\n                  this.setRedBoxState(length, this.ROI_x, this.ROI_y);\n                  console.log('设置红色ROI框: ', length, this.ROI_x, this.ROI_y);\n                }\n                break;\n\n              case 'SetVisibleArea':\n                if (parts.length === 4) {\n                  this.visibleX = parseFloat(parts[1]);\n                  this.visibleY = parseFloat(parts[2]);\n                  this.scale = parseFloat(parts[3]);\n                  this.$bus.$emit('setScale', this.scale);\n                  console.log('设置可见区域: ', this.visibleX, this.visibleY, this.scale);\n                  this.SendConsoleLogMsg('update VisibleArea x=' + this.visibleX + ', y=' + this.visibleY + ', scale=' + this.scale, 'info');\n                }\n                break;\n\n              case 'SetSelectStars':\n                if (parts.length === 3) {\n                  this.selectStarX = parseFloat(parts[1]);\n                  this.selectStarY = parseFloat(parts[2]);\n                  this.SendConsoleLogMsg('update SelectStars x=' + this.selectStarX + ', y=' + this.selectStarY, 'info');\n                }\n                break;\n\n              case 'updateCPUInfo':\n                if (parts.length === 3) {\n                  let cpuTemp = parseFloat(parts[1]);\n                  let cpuUsage = parseFloat(parts[2]);\n                  this.cpuTemp = isNaN(cpuTemp) ? null : (cpuTemp % 1 === 0 ? cpuTemp : cpuTemp.toFixed(1));  // 如果 cpuTemp 是 NaN，设置为 null，否则如果 cpuTemp 是整数，就不保留小数，否则保留一位小数\n                  this.cpuUsage = isNaN(cpuUsage) ? null : (cpuUsage % 1 === 0 ? cpuUsage : cpuUsage.toFixed(1));  // 如果 cpuUsage 是 NaN，设置为 null，否则如果 cpuUsage 是整数，就不保留小数，否则保留一位小数\n                  this.$bus.$emit('updateCPUInfo', this.cpuTemp, this.cpuUsage);\n                }\n                break;\n\n              case 'TianWen':\n                if (parts.length === 4) {\n                  const notice_type = parts[1];\n                  const ra = parts[2];\n                  const dec = parts[3];\n                  this.$bus.$emit('TianWen', notice_type, ra, dec);\n                }\n                break;\n\n              case 'setMainCameraParameters':\n                if (parts.length >= 3) {\n                  let parameters = {};\n                  for (let i = 1; i < parts.length; i += 2) {\n                    const parameter = parts[i];\n                    const value = parts[i + 1];\n                    parameters[parameter] = value;\n                  }\n                  this.setMainCameraParameters(parameters);\n                }\n                break;\n\n              case 'localMessage':\n                if (parts.length === 4) {\n                  const lat = parts[1];\n                  const lon = parts[2];\n                  const language = parts[3];\n                  this.SendConsoleLogMsg('localMessage: ' + lat + ',' + lon + ',' + language, 'info');\n                  if (language == 'zh') {\n                    this.$bus.$emit('ClientLanguage', 'cn');\n                  } else {\n                    this.$bus.$emit('ClientLanguage', 'en');\n                  }\n                  this.$bus.$emit('setLocationLatAndLon', lat, lon);\n                }\n                break;\n\n              default:\n                console.warn('未处理命令: ', data.message);\n                break;\n            }\n          }\n        }\n        else if (data.type === 'QT_Confirm') {\n          // 处理确认消息\n          const messageId = data.msgid;\n          this.handleMessageResponse(messageId);\n        }else if (data.type === 'Process_Command') {\n          // 处理返回消息\n          const parts = data.message.split(':');\n          if (parts[0] === 'qtServerIsOver') {\n            this.callShowMessageBox('QT Server is over', 'error');\n            this.ShowConfirmDialog('restart', 'QT server encountered a segmentation fault or is frozen, please restart or exit!','restartQtServer');\n          }\n        }\n\n        this.receivedMessages.push(data.message); // 将接收到的消息添加到数组中\n      };\n\n      this.websocket.onerror = (error) => {\n        const errorDetails = {\n          type: error.type,\n          timestamp: new Date().toISOString(),\n          url: this.WebSocketUrl,\n          readyState: this.websocket.readyState,\n          protocol: this.websocket.protocol,\n          extensions: this.websocket.extensions\n        };\n        console.error('WebSocket Error Details:', errorDetails);\n        this.SendConsoleLogMsg('WebSocket Error: ' + JSON.stringify(errorDetails), 'error');\n        this.websocketState = 'error';\n        this.networkDisconnected = true;\n      };\n\n      this.websocket.onclose = () => {\n        console.log('QHYCCD | WebSocket disconnected');\n        this.websocketState = 'disconnected';\n        this.networkDisconnected = true; // WebSocket连接关闭时设置网络连接状态\n        console.log('QHYCCD | WebSocket disconnected');\n        this.$bus.$emit('ShowNetStatus', 'false');\n\n        // 设置一个定时器，1秒后检查网络状态\n        this.disconnectTimeout = setTimeout(() => {\n          if (this.networkDisconnected) { // 如果1秒后仍然断开\n            this.callShowMessageBox('WebSocket disconnected', 'error');\n            this.disconnectTimeoutTriggered = true;\n          }\n        }, 1000); // 1秒后执行\n\n        // 启动自动重连\n        this.reconnectWebSocket();\n      };\n    },\n\n    // 自动重连\n    reconnectWebSocket() {\n      setTimeout(() => {\n        console.log('QHYCCD | WebSocket reconnected');\n        this.SendConsoleLogMsg('WebSocket reconnected.', 'info');\n        this.connect();\n      }, 2000); // 2秒后尝试重新连接\n    },\n    // 自动重连\n\n    //监听网络连接状态\n    setupNetworkStatusListener() {\n      window.addEventListener('online', () => {\n        // 检查断开连接的定时器是否已经触发\n        if (this.disconnectTimeoutTriggered) {\n          this.callShowMessageBox('WebSocket connected', 'success');\n        }\n        clearTimeout(this.disconnectTimeout); // 清除断开连接的定时器\n        this.networkDisconnected = false; // 网络恢复时重置网络连接状态\n        this.$bus.$emit('ShowNetStatus', 'true');\n        this.StatusRecovery();\n        this.reconnectWebSocket(); // 网络恢复后自动重连WebSocket\n      });\n\n      window.addEventListener('offline', () => {\n        this.networkDisconnected = true; // 网络断开时设置网络连接状态\n        this.$bus.$emit('ShowNetStatus', 'false');\n        this.disconnectTimeoutTriggered = false; // 初始化断开连接定时器触发标志\n        // 设置一个定时器，1秒后检查网络状态\n        this.disconnectTimeout = setTimeout(() => {\n          if (this.networkDisconnected) { // 如果1秒后仍然断开\n            this.disconnectTimeoutTriggered = true; // 标记定时器已触发\n            this.callShowMessageBox('WebSocket disconnected', 'error');\n          }\n        }, 1000); // 1秒后执行\n      });\n    },\n    //监听网络连接状态\n\n    sendMessage(type, message) {\n      console.log(\"QHYCCD | sendMessage: \", message);\n\n      const messageId = this.generateMessageId(); // 生成唯一的消息ID\n      const messageObj = { type: type, msgid: messageId, message: message }; // 创建包含类型和消息的对象\n      const messageJson = JSON.stringify(messageObj); // 将消息对象转换为 JSON 字符串\n      const messageState = { msgid: messageId, text: messageJson, success: false }; // 创建包含消息和状态信息的对象\n\n      if (this.websocket.readyState === WebSocket.OPEN) {\n        this.websocket.send(messageJson);\n        // messageState.success = true; // 设置消息为成功\n      }\n      this.sentMessages.push(messageState); // 添加消息对象到已发送的消息数组\n    },\n\n    generateMessageId() {\n      // 使用时间戳和计数器生成唯一的消息ID\n      return Date.now() + \"-\" + (this.messageCounter++);\n    },\n\n    handleMessageResponse(messageId) {\n      // 根据返回的消息ID更新消息发送状态\n      const lastMessage = this.sentMessages[this.sentMessages.length - 1];\n      if (lastMessage && lastMessage.msgid === messageId) {\n        lastMessage.success = true;\n      }\n    },\n\n    // 消息框\n    callShowMessageBox(msg, type) {\n      console.log('QHYCCD | callShowMessageBox:', msg, type);\n      this.SendConsoleLogMsg(msg, type);\n      this.$bus.$emit('showMsgBox', msg, type);\n    },\n    // 消息框\n\n    locationClicked: function () {\n      this.$bus.$emit('Vue_Command', 'localMessage'); // 获取位置信息\n      this.$store.commit('toggleBool', 'showLocationDialog');\n\n      this.$bus.$emit('ResetTime');\n    },\n\n    SetCurrentLocation(lat, lng) {\n      console.log('SetCurrentLocation:', lat, ',', lng);\n      this.$bus.$emit('SendConsoleLogMsg', 'Set Current Location:' + lat + ',' + lng, 'info');\n      this.$bus.$emit('PolarPointAltitude', lat);\n      this.$bus.$emit('resetLocation', lat, lng);\n      const loc = {\n        short_name: 'Unknown',\n        country: 'Unknown',\n        lng: lng,\n        lat: lat,\n        alt: 0,\n        accuracy: 0,\n        street_address: ''\n      }\n      this.$store.commit('setCurrentLocation', loc);\n\n      this.$bus.$emit('ShowPositionInfo', lat, lng);\n\n      setTimeout(() => {\n        this.$bus.$emit('ResetTime');\n      }, 1000);\n    },\n    // 状态恢复\n    StatusRecovery() {\n      // this.sendMessage('SendConsoleLogMsg', '网络连接恢复，恢复当前状态!', 'warning');\n      this.getQTClientVersion();                // 获取QTClient版本\n      this.sendMessage('Vue_Command', 'getROIInfo'); // 获取ROI信息\n      this.sendMessage('Vue_Command', 'localMessage'); // 获取位置信息\n      this.sendMessage('Vue_Command', 'getMainCameraParameters'); // 获取主相机参数\n      this.RecalibratePolarAxis(); // 重新校准极轴\n      // this.sendMessage('Vue_Command', 'getStagingSolveResult'); // 获取定标结果\n      this.sendMessage('Vue_Command', 'getFocuserLoopingState'); // 获取焦距器循环状态\n      this.sendMessage('Vue_Command', 'getStagingScheduleData'); // 获取定标计划数据\n      this.sendMessage('Vue_Command', 'getStagingSolveResult'); // 获取定标结果\n      this.sendMessage('Vue_Command', 'getGPIOsStatus'); // 获取GPIO状态\n      this.sendMessage('Vue_Command', 'getStagingImage'); // 获取最后拍摄的图像\n\n      this.disconnectTimeoutTriggered = false;\n    },\n\n    openPowerManagerPage() {\n      this.isOpenDevicePage = false;\n      this.isOpenPowerPage = true;\n\n      this.drawer_2 = true;\n    },\n\n    QuitToMainApp() {\n      this.sendMessage('Broadcast_Msg', 'CloseWebView');\n    },\n\n    selectDevice(device) {\n      if (!this.haveDeviceConnect || (this.haveDeviceConnect) || device.driverType === 'Telescopes') {\n        this.isOpenDevicePage = true;\n        this.isOpenPowerPage = false;\n\n        if (device.isget === false) {\n          // device.isget = true;\n          this.sendMessage('Vue_Command', 'SelectIndiDriver:' + device.type + \":\" + device.ListNum);\n          this.drivers = [];\n        }\n\n        this.CurrentDriverType = device.driverType;\n        this.DeviceIsConnected = device.isConnected;\n        this.BaudRateSelected = device.BaudRate;\n        if (device.driverType === 'Telescopes') {\n          this.DeviceIsConnected = true;\n        }\n\n        this.drawer_2 = true;\n\n        this.ToBeConnectDevice = [];\n        this.devicesList.forEach(devicesList => {\n          if (devicesList.type === this.CurrentDriverType) {\n            this.ToBeConnectDevice.push(devicesList);\n          }\n        });\n      } else {\n        this.callShowMessageBox('The device is not connected.', 'error');\n      }\n\n    },\n\n    CurrentConfigItems() {\n      console.log('CurrentConfigItems: ', this.CurrentDriverType + 'ConfigItems');\n      switch (this.CurrentDriverType) {\n        case 'Guider':\n          return this.GuiderConfigItems;\n        case 'MainCamera':\n          return this.MainCameraConfigItems;\n        case 'Mount':\n          return this.MountConfigItems;\n        case 'Telescopes':\n          return this.TelescopesConfigItems;\n        case 'Focuser':\n          return this.FocuserConfigItems;\n        case 'PoleCamera':\n          return this.PoleCameraConfigItems;\n        case 'CFW':\n          return this.CFWConfigItems;\n        default:\n          return [];\n      }\n    },\n\n    confirmDriver() {\n      // 确定驱动的逻辑\n      console.log(\"QHYCCD | confirmDriver: \", this.selectedDriver);\n      this.SendConsoleLogMsg('Confirm Indi Driver:' + this.selectedDriver, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConfirmIndiDriver:' + this.selectedDriver + ':' + this.BaudRateSelected);\n      this.confirmDriverType = this.CurrentDriverType;\n      this.loadingSelectDriver = true;\n\n      this.devices.forEach(device => {\n        if (device.driverType === this.CurrentDriverType) {\n          device.device = this.selectedDriver;\n          device.driverName = this.selectedDriver;\n          device.BaudRate = this.BaudRateSelected;\n        }\n      });\n    },\n    clearDriver() {\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ClearIndiDriver');\n      this.SendConsoleLogMsg('Clear Indi Driver', 'info');\n      this.devices.forEach(device => {\n        if (device.driverType === this.CurrentDriverType) {\n          device.device = '';\n          device.driverName = '';\n          device.BaudRate = 9600;\n        }\n      });\n    },\n    confirmDevice() {\n      // 确定设备的逻辑\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConfirmIndiDevice:' + this.selectedDevice + ':' + this.selectedDriver);\n      // this.$bus.$emit('AppUpdateDevices', this.CurrentDriverType, this.selectedDevice);\n      this.updateDevices(this.CurrentDriverType, this.selectedDevice);\n    },\n\n    updateDevices(driverType, newDevice) {    // 手动选择\n      this.devices.forEach(device => {\n        if (device.driverType === driverType) {\n          device.device = newDevice;\n        }\n      });\n    },\n\n    updateDevices_(ListNum, newDevice) {    // 从文件导入\n      this.devices.forEach(device => {\n        if (device.ListNum === ListNum) {\n          device.device = newDevice;\n        }\n      });\n      this.loadingConnectAllDevice = false;\n    },\n\n    updateDevicesConnect(type, DeviceName, DriverName, isBind = true) {    // 连接成功\n      this.SendConsoleLogMsg('updateDevicesConnect' + type + ' ' + DeviceName + ' ' + DriverName + ' ' + isBind, 'info');\n      this.devices.forEach(device => {\n        if (device.driverType === type) {\n          if (isBind == true) {\n            device.device = DeviceName;\n          } else {\n            device.device = \"Not Bind Device\";\n          }\n          device.driverName = DriverName;\n          device.isConnected = true;\n        }\n      });\n      this.callShowMessageBox(DeviceName + ' success connected', 'success');\n      this.haveDeviceConnect = true;\n      this.loadingConnectAllDevice = false;\n\n      if (type === 'MainCamera') {\n        this.$bus.$emit('MainCameraConnected', 1);\n        console.log('MainCamera is Connected.');\n      } else if (type === 'Mount') {\n        this.$bus.$emit('MountConnected', 1);\n        console.log('Mount is Connected.');\n      } else if (type === 'CFW') {\n        this.$bus.$emit('CFWConnected', 1);\n        console.log('Mount is Connected.');\n      } else if (type === 'Focuser') {\n        this.$bus.$emit('FocuserConnected', 1);\n        console.log('Focuser is Connected.');\n      } else if (type === 'Guider') {\n        this.$bus.$emit('GuiderConnected', 1);\n        console.log('Guider is Connected.');\n      }\n      console.log('updateDevicesConnect: ', type, DeviceName, DriverName, isBind);\n\n      this.$bus.$emit('DeviceConnectSuccess', type, DeviceName, DriverName, isBind);\n    },\n    startConnectBtnPress(event) {\n      // 如果是触摸事件，标记并处理\n      if (event.type === 'touchstart') {\n        this.isTouching = true;\n        this.isConnectBtnLongPress = false; // 重置长按标记\n        this.ConnectBtnPressTimer = setTimeout(() => {\n          this.isConnectBtnLongPress = true; // 标记为长按\n          this.handleConnectBtnLongPress();\n        }, this.ConnectBtnlongPressThreshold);\n      }\n      // 如果是鼠标事件，且没有正在进行的触摸事件，则处理\n      else if (event.type === 'mousedown' && !this.isTouching) {\n        this.isConnectBtnLongPress = false; // 重置长按标记\n        this.ConnectBtnPressTimer = setTimeout(() => {\n          this.isConnectBtnLongPress = true; // 标记为长按\n          this.handleConnectBtnLongPress();\n        }, this.ConnectBtnlongPressThreshold);\n      }\n    },\n    endConnectBtnPress(event) {\n      // 如果是触摸事件，处理并重置标记\n      if (event.type === 'touchend') {\n        clearTimeout(this.ConnectBtnPressTimer); // 清除定时器\n        if (!this.isConnectBtnLongPress) {\n          this.handleConnectBtnClick(); // 如果不是长按，则触发点击事件\n        }\n        this.ConnectBtnPressTimer = null; // 重置定时器\n        this.isTouching = false; // 重置触摸标记\n      }\n      // 如果是鼠标事件，且没有正在进行的触摸事件，则处理\n      else if (event.type === 'mouseup' && !this.isTouching) {\n        clearTimeout(this.ConnectBtnPressTimer); // 清除定时器\n        if (!this.isConnectBtnLongPress) {\n          this.handleConnectBtnClick(); // 如果不是长按，则触发点击事件\n        }\n        this.ConnectBtnPressTimer = null; // 重置定时器\n      }\n    },\n    handleConnectBtnClick() {\n      if (this.haveDeviceConnect) {\n        this.callShowMessageBox('Please disconnect all devices first.', 'error');\n        return;\n      }\n      if (!this.ConnectBtnCanClick) return; // 如果不可点击，直接返回\n      this.ConnectBtnCanClick = false; // 设置为不可点击\n      console.log(\"Connect Button clicked\");\n\n      this.connectAllDevice();\n\n      // 恢复点击权限\n      setTimeout(() => {\n        this.ConnectBtnCanClick = true;\n      }, 1000); // 1秒后恢复\n    },\n    handleConnectBtnLongPress() {\n      if (this.haveDeviceConnect) {\n        this.callShowMessageBox('Please disconnect all devices first.', 'error');\n        return;\n      }\n      // 长按事件的处理\n      console.log(\"Connect Button long pressed\");\n\n      this.autoConnectAllDevice();\n    },\n    connectAllDevice() {\n      console.log(\"QHYCCD | connectAllDevice.\");\n      this.SendConsoleLogMsg('Connect All Device', 'info');\n      this.sendMessage('Vue_Command', 'connectAllDevice');\n      this.loadingConnectAllDevice = true;\n    },\n    autoConnectAllDevice() {\n      console.log(\"QHYCCD | autoConnectAllDevice.\");\n      this.SendConsoleLogMsg('Auto Connect All Device', 'info');\n      this.sendMessage('Vue_Command', 'autoConnectAllDevice');\n      this.loadingConnectAllDevice = true;\n    },\n\n    // connectAllDevice() {\n    //   console.log(\"QHYCCD | connectAllDevice.\");\n    //   this.SendConsoleLogMsg('Connect All Device', 'info');\n    //   this.sendMessage('Vue_Command', 'connectAllDevice');\n    //   this.loadingConnectAllDevice = true;\n    // },\n\n    // autoConnectAllDevice() {\n    //   console.log(\"QHYCCD | autoConnectAllDevice.\");\n    //   this.SendConsoleLogMsg('Auto Connect All Device', 'info');\n    //   this.sendMessage('Vue_Command', 'autoConnectAllDevice');\n    //   this.loadingConnectAllDevice = true;\n    // },\n\n    // startConnectBtnPress() {\n    //   this.isConnectBtnLongPress = false; // 重置长按标记\n    //   this.ConnectBtnPressTimer = setTimeout(() => {\n    //     this.isConnectBtnLongPress = true; // 标记为长按\n    //     this.handleConnectBtnLongPress();\n    //   }, this.ConnectBtnlongPressThreshold);\n    // },\n    // endConnectBtnPress() {\n    //   clearTimeout(this.ConnectBtnPressTimer); // 清除定时器\n    //   if (!this.isConnectBtnLongPress) {\n    //     this.handleConnectBtnClick(); // 如果不是长按，则触发点击事件\n    //   }\n    //   this.ConnectBtnPressTimer = null; // 重置定时器\n    // },\n    // handleConnectBtnClick() {\n    //   if (this.haveDeviceConnect) {\n    //     this.callShowMessageBox('Please disconnect all devices first.', 'error');\n    //     return;\n    //   }\n    //   if (!this.ConnectBtnCanClick) return; // 如果不可点击，直接返回\n    //   this.ConnectBtnCanClick = false; // 设置为不可点击\n    //   console.log(\"Connect Button clicked\");\n\n    //   this.connectAllDevice();\n\n    //   // 恢复点击权限\n    //   setTimeout(() => {\n    //     this.ConnectBtnCanClick = true;\n    //   }, 1000); // 1秒后恢复\n    // },\n    // handleConnectBtnLongPress() {\n    //   if (this.haveDeviceConnect) {\n    //     this.callShowMessageBox('Please disconnect all devices first.', 'error');\n    //     return;\n    //   }\n    //   // 长按事件的处理\n    //   console.log(\"Connect Button long pressed\");\n\n    //   this.autoConnectAllDevice();\n    // },\n\n    disconnectAllDevice(confirm) {\n      // 检查是否有设备的 isConnected 属性为 true\n      // const hasConnectedDevices = this.devices.some(device => device.isConnected);\n\n      if (this.haveDeviceConnect) {\n        if (confirm === false) {\n          this.ShowConfirmDialog('Confirm', 'Are you sure you want to disconnect all devices?', 'disconnectAllDevice');\n        } else {\n          this.sendMessage('Vue_Command', 'disconnectAllDevice');\n          this.SendConsoleLogMsg('Disconnect All Device', 'info');\n          this.haveDeviceConnect = false;\n          // this.devices.forEach(device => {\n          //   device.isConnected = false;\n          //   // device.device = '';\n          // });\n\n          this.$bus.$emit('MainCameraConnected', 0);\n          this.$bus.$emit('MountConnected', 0);\n          this.$bus.$emit('CFWConnected', 0);\n          this.$bus.$emit('FocuserConnected', 0);\n          this.$bus.$emit('GuiderConnected', 0);\n          this.claerDeviceList();\n        }\n      } else {\n        this.callShowMessageBox('No devices have been connected.', 'error');\n      }\n    },\n\n    // claerDeviceList() {\n    //   this.devices.forEach(device => {\n    //     device.isConnected = false;\n    //     device.isget = false;\n    //     device.device = ''; \n    //     device.driverName = '';\n    //   });\n    //   this.ToBeConnectDevice = [];\n    //   this.devicesList = [];\n    //   this.drivers = [];\n    //   this.$bus.$emit('claerDeviceAllocationList');\n    // },\n\n    claerDeviceList() {\n      this.devices.forEach(device => {\n        device.device = \"\";\n        device.isConnected = false;\n        device.isget = false;\n        device.driverName = '';\n        device.BaudRate = 9600;\n      });\n      this.ToBeConnectDevice = [];\n      this.devicesList = [];\n      this.drivers = [];\n      this.$bus.$emit('claerDeviceAllocationList');\n    },\n\n    SwitchOutPutPower(index, isPowerON) {\n      if (isPowerON) {\n        this.drawer_2 = false;\n        this.ShowConfirmDialog('Output Power:' + index, 'Are you sure you want to turn off this output power?', 'SwitchOutPutPower');\n      } else {\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'SwitchOutPutPower:' + index);\n        this.SendConsoleLogMsg('Switch OutPutPower' + index, 'info');\n      }\n    },\n\n    RestartRaspberryPi() {\n      this.drawer_2 = false;\n      this.ShowConfirmDialog('Restart', 'Are you sure you want to restart the Raspberry Pi?', 'RestartRaspberryPi');\n    },\n\n    ShutdownRaspberryPi() {\n      this.drawer_2 = false;\n      this.ShowConfirmDialog('Shut Down', 'Are you sure you want to shut down the Raspberry Pi?', 'ShutdownRaspberryPi');\n    },\n\n    ReturnConnectedDevices() {\n      this.devices.forEach(device => {\n        if (device.driverType === 'MainCamera') {\n          if (device.isConnected === true) {\n            this.$bus.$emit('MainCameraConnected', 1);\n            console.log('MainCamera is Connected.');\n            this.SendConsoleLogMsg('MainCamera is Connected.', 'info');\n          }\n        } else if (device.driverType === 'Mount') {\n          if (device.isConnected === true) {\n            this.$bus.$emit('MountConnected', 1);\n            console.log('Mount is Connected.');\n            this.SendConsoleLogMsg('Mount is Connected.', 'info');\n          }\n        }\n      });\n      this.sendMessage('Vue_Command', 'loadSelectedDriverList');\n      this.sendMessage('Vue_Command', 'loadBindDeviceList');\n      this.sendMessage('Vue_Command', 'loadBindDeviceTypeList');\n    },\n\n    OpenIamgeFolder() {\n      this.$bus.$emit('ImageManagerPanelOpen');\n      this.nav = false;\n    },\n\n    OpenDebugLog() {\n      this.$bus.$emit('toggleINDIDebugDialog');\n      this.nav = false;\n    },\n\n    SendConsoleLogMsg(message, type) {\n      if (type == 'error') {\n        console.error('Error: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else if (type == 'info') {\n        console.log('Info: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else if (type == 'warning') {\n        console.warn('Warning: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else {\n        console.log('Debug: ' + message);\n      }\n    },\n\n    DeviceAllocation() {\n      this.$bus.$emit('toggleDeviceAllocationPanel');\n      this.nav = false;\n    },\n\n    CurrentExpTimeList(index, value) {\n      const expTimeIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ExpTime [' + (index + 1) + ']');\n      if (expTimeIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.MainCameraConfigItems[expTimeIndex].value = value;\n      } else {\n        console.error('ExpTime [' + index + '] configuration item not found.');\n      }\n    },\n\n    CurrentCFWList(index, value) {\n      const expTimeIndex = this.CFWConfigItems.findIndex(item => item.label === 'CFW [' + (index + 1) + ']');\n      if (expTimeIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.CFWConfigItems[expTimeIndex].value = value;\n      } else {\n        console.error('CFW [' + index + '] configuration item not found.');\n      }\n    },\n\n    // confirmConfiguration(item) {\n    //   console.log(`QHYCCD | confirmConfiguration: ${item.value}`);\n    //   switch (item.driverType) {\n    //     case 'Guider':\n\n    //     case 'MainCamera':\n    //       this.$bus.$emit(item.label, item.label + ':' + item.value);\n    //     case 'Mount':\n\n    //     case 'Telescope':\n\n    //     case 'Focuser':\n    //         this.$bus.$emit(item.label, item.value);  //RedBox Side Length (px)\n\n    //     case 'PoleCamera':\n\n    //     case 'CFW':\n    //       if (item.label.startsWith('CFW [')) {\n    //         this.$bus.$emit('CFWvalue', item.label+':'+item.value);\n    //       }\n    //       else {\n    //         this.$bus.$emit(item.label, item.label+':'+item.value);\n    //       }\n    //   }\n    // },\n\n    confirmConfiguration(List) {\n      List.forEach(item => {\n        if (item.value !== '') {\n          // console.log(item.label, item.value);\n          this.SendConsoleLogMsg(item.label + ':' + item.value, 'info');\n          this.$bus.$emit(item.label, item.label + ':' + item.value);\n        }else if (item.value == '' && item.label === 'Focal Length (mm)'){\n          this.SendConsoleLogMsg(item.label + 'is NULL', 'info');\n          this.$bus.$emit(item.label, item.label+ ':' );\n        }\n      });\n      this.callShowMessageBox('Configuration has been modified!', 'success');\n    },\n\n    loadAndDisplayImage(imagePath) {\n      const canvas = document.getElementById('guiderCamera-canvas');\n      // const canvas = document.getElementById('mainCamera-canvas');\n      if (canvas.getContext) {\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n\n        img.onload = () => {\n          canvas.width = img.width;\n          canvas.height = img.height;\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0);\n          // this.$bus.$emit('showSolveImage', img);\n        };\n\n        // 添加错误处理\n        img.onerror = (error) => {\n          console.log(`加载图像失败: ${imagePath}`);\n          this.SendConsoleLogMsg(`加载图像失败: ${imagePath}`, 'error');\n        };\n\n        img.src = imagePath;\n      }\n    },\n\n    ImageGainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value); // 将值转换为 double 类型\n\n      if (signal === 'ImageGainR') {\n        // 处理 ImageGainR 信号\n        this.ImageGainR = doubleValue;\n        this.SendConsoleLogMsg('ImageGainR is set to:' + doubleValue, 'info');\n        this.sendMessage('Vue_Command', 'ImageGainR:' + doubleValue);\n      } else if (signal === 'ImageGainB') {\n        // 处理 ImageGainB 信号\n        this.ImageGainB = doubleValue;\n        this.SendConsoleLogMsg('ImageGainB is set to:' + doubleValue, 'info');\n        this.sendMessage('Vue_Command', 'ImageGainB:' + doubleValue);\n      }\n    },\n\n    // CameraOffsetSet(payload) {\n    //   const [signal, value] = payload.split(':'); // 拆分信号和值\n    //   const doubleValue = parseFloat(value); // 将值转换为 double 类型\n\n    //   console.log('CameraOffset is set to:', doubleValue);\n    //   this.SendConsoleLogMsg('CameraOffset is set to:' + doubleValue, 'info');\n    // },\n\n    ImageOffsetSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value); // 将值转换为 double 类型\n\n      this.ImageOffset = doubleValue;\n      console.log('Image Offset is set to:', doubleValue);\n      this.SendConsoleLogMsg('Image Offset is set to:' + doubleValue, 'info');\n      this.sendMessage('Vue_Command', 'ImageOffset:' + doubleValue);\n    },\n\n    BinningSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Image Binning is set to:', IntValue);\n      this.SendConsoleLogMsg('Image Binning is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetBinning:' + IntValue);\n      this.$bus.$emit('SetBinningNum', IntValue);\n    },\n\n    GainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Gain is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Gain is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraGain:' + IntValue);\n    },\n\n    OffsetSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Offset is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Offset is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraOffset:' + IntValue);\n    },\n\n    ImageCFASet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n\n      if (['GR', 'GB', 'BG', 'RGGB'].includes(value)) {\n        this.ImageCFA = value;\n        console.log('ImageCFA is set to:', value);\n        this.SendConsoleLogMsg('ImageCFA is set to:' + value, 'info');\n        this.sendMessage('Vue_Command', 'ImageCFA:' + value);\n      } else {\n        console.log(`Invalid value for ImageCFA: '${value}'. Please set it to one of 'GR', 'GB', 'BG', 'RGGB'.`);\n        this.callShowMessageBox(`Invalid value for ImageCFA: '${value}'. Please set it to one of 'GR', 'GB', 'BG', 'RGGB'.`, 'error');\n      }\n    },\n\n    CameraTemperatureSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Temperature is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Temperature is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraTemperature:' + IntValue);\n    },\n\n    FocalLengthSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      \n      for (const device of this.devices) {\n        if (device.driverType === 'Telescopes') {\n          \n          if (value === '' || value === NaN) {\n            device.device = '';\n            this.SendConsoleLogMsg('Focal Length is set to:' + 0, 'info');\n            this.$bus.$emit('SetFocalLengthNum', '');\n          }else{\n            const IntValue = parseInt(value); // 将值转换为 Int 类型\n            device.device = value + ' mm';\n            this.SendConsoleLogMsg('Focal Length is set to:' + IntValue, 'info');\n            this.$bus.$emit('SetFocalLengthNum', IntValue);\n          }\n        }\n      }\n\n\n    },\n\n    GuiderFocalLengthSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      \n      this.SendConsoleLogMsg('Guider Focal Length is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderFocalLength:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderFocalLength:' + IntValue);\n    },\n\n    MultiStarGuiderSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      this.SendConsoleLogMsg('Multi Star Guider is set to:' + value, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'MultiStarGuider:' + value);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:MultiStarGuider:' + value);\n    },\n\n    GuiderPixelSizeSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value);\n      this.SendConsoleLogMsg('Guider Pixel size is set to:' + doubleValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderPixelSize:' + doubleValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderPixelSize:' + doubleValue);\n    },\n\n    GuiderGainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Guider Gain is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderGain:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderGain:' + IntValue);\n    },\n\n    CalibrationDurationSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Guider Calibration step is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'CalibrationDuration:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:CalibrationDuration:' + IntValue);\n    },\n\n    RaAggressionSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Ra Aggression is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'RaAggression:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:RaAggression:' + IntValue);\n    },\n\n    DecAggressionSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Dec Aggression is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DecAggression:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:DecAggression:' + IntValue);\n    },\n\n    SyncFocuserStep(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Sync Focuser Step:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'SyncFocuserStep:' + IntValue);\n    },\n\n    async readBinFile(fileName, retryCount = 1) {\n      while (this.isDownloadingImage) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        if (!this.isWaitingLogged) {\n          this.SendConsoleLogMsg('The image is already being processed. Please wait for the previous process to complete.', 'warning');\n          this.isWaitingLogged = true; // 确保只记录一次等待信息\n        }\n      }\n\n      if (this.isDownloadingImageName === fileName) {\n        this.SendConsoleLogMsg('The image(' + fileName + ') is already processed.', 'info');\n        return;\n      }\n\n      this.isDownloadingImage = true;\n      this.isWaitingLogged = false; // 重置等待日志标志\n      this.SendConsoleLogMsg('CaptureTestTime | Read image(' + fileName + ') data start.', 'info');\n\n      const startTime = new Date();\n      try {\n        // Check if the fileName is valid\n        if (!fileName || typeof fileName !== 'string') {\n          throw new Error('Invalid file name provided');\n        }\n\n        // Fetch with progress tracking\n        const response = await fetch(fileName, { cache: 'no-store' });\n        if (!response.ok) {\n          throw new Error(`Network response was not ok. Status: ${response.status}`);\n        }\n\n        const contentLength = response.headers.get('content-length');\n        if (!contentLength) {\n          throw new Error('Content-Length header is missing');\n        }\n\n        const total = parseInt(contentLength, 10);\n        if (isNaN(total) || total <= 0) {\n          throw new Error('Invalid content-length value');\n        }\n\n        let loaded = 0;\n\n        const reader = response.body.getReader();\n        const stream = new ReadableStream({\n          start: (controller) => {\n            const push = () => {\n              reader.read().then(({ done, value }) => {\n                if (done) {\n                  controller.close();\n                  return;\n                }\n                loaded += value.byteLength;\n                const percent = (loaded / total) * 100;\n                if (Math.round(percent) % 10 === 0) {\n                  this.SendConsoleLogMsg(`Progress: ${Math.round(percent)}%`, 'info');\n                  this.updateCaptureImageProgress(Math.round(percent));\n                }\n                this.SendConsoleLogMsg(`当前进度: ${Math.round(percent)}%`, 'info');\n                controller.enqueue(value);\n                push();\n              }).catch(error => {\n                console.error('Stream reading error:', error);\n                this.SendConsoleLogMsg('Stream reading error: ' + error.message, 'error');\n                controller.error(error);\n              });\n            };\n            push();\n          }\n        });\n\n        const newResponse = new Response(stream);\n        const blob = await newResponse.blob();\n\n        // FileReader with progress tracking\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n          this.ImageArrayBuffer = fileReader.result;\n\n          const endTime = new Date();\n          const elapsedTime = endTime.getTime() - startTime.getTime();\n          this.SendConsoleLogMsg('CaptureTestTime | Read image data end: ' + elapsedTime + ' ms', 'info');\n          if (!this.isPolarAxisMode) {\n            this.callShowMessageBox(`Read image data end: '${elapsedTime}' ms.`, 'info');\n          }\n          this.isDownloadingImageName = fileName;\n          this.processImage(this.ImageArrayBuffer);\n        };\n\n        fileReader.onerror = (error) => {\n          console.error('FileReader error:', error);\n          this.SendConsoleLogMsg('FileReader error: ' + error.message, 'error');\n        };\n\n        fileReader.readAsArrayBuffer(blob);\n      } catch (error) {\n        console.error('There was a problem with the fetch operation:', error);\n        this.SendConsoleLogMsg('There was a problem with the fetch operation: ' + error.message, 'error');\n\n        // 下载失败，重试\n        if (retryCount > 0) {\n          console.log('Retrying download...');\n          this.SendConsoleLogMsg('Retrying download...', 'warning');\n          this.isDownloadingImage = false;\n          this.updateCaptureImageProgress(100);\n          await this.readBinFile(fileName, retryCount - 1);\n        } else {\n          this.SendConsoleLogMsg('Max retries reached. Download failed.', 'error');\n        }\n      } finally {\n        this.isDownloadingImage = false; // 确保在任何情况下都重置状态\n      }\n    },\n    // async readBinFile(fileName, retryCount = 1) {\n    //   while (this.isDownloadingImage) {\n    //     await new Promise(resolve => setTimeout(resolve, 1000));\n    //     if (!this.isWaitingLogged) {\n    //       this.SendConsoleLogMsg('The image is already being processed. Please wait for the previous process to complete.', 'warning');\n    //       this.isWaitingLogged = true; // 确保只记录一次等待信息\n    //     }\n    //   }\n\n    //   if (this.isDownloadingImageName === fileName) {\n    //     this.SendConsoleLogMsg('The image(' + fileName + ') is already processed.', 'info');\n    //     return;\n    //   }\n\n    //   this.isDownloadingImage = true;\n    //   this.isWaitingLogged = false; // 重置等待日志标志\n    //   this.SendConsoleLogMsg('CaptureTestTime | Read image(' + fileName + ') data start.', 'info');\n\n    //   const startTime = new Date();\n    //   try {\n    //     // Fetch with progress tracking\n    //     const response = await fetch(fileName);\n    //     if (!response.ok) {\n    //       throw new Error('Network response was not ok');\n    //     }\n\n    //     const contentLength = response.headers.get('content-length');\n    //     if (!contentLength) {\n    //       throw new Error('Content-Length header is missing');\n    //     }\n\n    //     const total = parseInt(contentLength, 10);\n    //     let loaded = 0;\n\n    //     const reader = response.body.getReader();\n    //     const stream = new ReadableStream({\n    //       start: (controller) => {\n    //         const push = () => {\n    //           reader.read().then(({ done, value }) => {\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             loaded += value.byteLength;\n    //             const percent = (loaded / total) * 100;\n    //             if (Math.round(percent) % 10 === 0) {\n    //               this.SendConsoleLogMsg(`Progress: ${Math.round(percent)}%`,'info');\n    //               this.updateCaptureImageProgress(Math.round(percent));\n    //             }\n    //             controller.enqueue(value);\n    //             push();\n    //           }).catch(error => {\n    //             console.error('Stream reading error:', error);\n    //             controller.error(error);\n    //           });\n    //         };\n    //         push();\n    //       }\n    //     });\n\n    //     const newResponse = new Response(stream);\n    //     const blob = await newResponse.blob();\n\n    //     // FileReader with progress tracking\n    //     const fileReader = new FileReader();\n    //     fileReader.onload = () => {\n    //       this.ImageArrayBuffer = fileReader.result;\n\n    //       const endTime = new Date();\n    //       const elapsedTime = endTime.getTime() - startTime.getTime();\n    //       this.SendConsoleLogMsg('CaptureTestTime | Read image data end: ' + elapsedTime + ' ms', 'info');\n    //       if (!this.isPolarAxisMode) {\n    //         this.callShowMessageBox(`Read image data end: '${elapsedTime}' ms.`, 'info');\n    //       }\n    //       this.isDownloadingImageName = fileName;\n    //       this.processImage(this.ImageArrayBuffer);\n    //     };\n\n    //     fileReader.onerror = (error) => {\n    //       console.error('FileReader error:', error);\n    //       this.SendConsoleLogMsg('FileReader error:' + error, 'error');\n    //     };\n\n    //     fileReader.readAsArrayBuffer(blob);\n    //   } catch (error) {\n    //     console.error('There was a problem with the fetch operation:', error);\n    //     this.SendConsoleLogMsg('There was a problem with the fetch operation:' + error, 'error');\n\n    //     // 下载失败，重试\n    //     if (retryCount > 0) {\n    //       console.log('Retrying download...');\n    //       this.SendConsoleLogMsg('Retrying download...', 'warning');\n    //       this.isDownloadingImage = false;\n    //       this.updateCaptureImageProgress(100);\n    //       await this.readBinFile(fileName, retryCount - 1);\n    //     }\n    //   } finally {\n    //     this.isDownloadingImage = false; // 确保在任何情况下都重置状态\n    //   }\n    // },\n\n    updateCaptureImageProgress(num) {\n      this.$bus.$emit('ShowCaptureImageProgress', num);\n    },\n\n    setImageProportion(value) {\n      this.ImageProportion = value;\n    },\n\n    // checkImageData(img) {\n    //   // 检查是否为 cv.Mat 类型\n    //   if (!(img instanceof cv.Mat)) {\n    //     this.SendConsoleLogMsg('The image is not a valid cv.Mat object.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像是否为空\n    //   if (img.empty()) {\n    //     this.SendConsoleLogMsg('The image is empty.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像深度是否为 8 位或 16 位\n    //   const depth = img.type() & cv.CV_MAT_DEPTH_MASK;\n    //   if (depth !== cv.CV_8U && depth !== cv.CV_16U) {\n    //     this.SendConsoleLogMsg('The image depth is not 8-bit or 16-bit.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像尺寸是否合理\n    //   if (img.rows <= 0 || img.cols <= 0) {\n    //     this.SendConsoleLogMsg('The image dimensions are not valid.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像数据是否超出范围或全为0\n    //   const data = img.data;\n    //   let isAllZero = true;\n    //   const maxValue = depth === cv.CV_8U ? 255 : 65535;\n\n    //   for (let i = 0; i < data.length; i++) {\n    //     if (data[i] < 0 || data[i] > maxValue) {\n    //       this.SendConsoleLogMsg('The image data contains out-of-range values.', 'error');\n    //       return false;\n    //     }\n    //     if (data[i] !== 0) {\n    //       isAllZero = false;\n    //     }\n    //   }\n\n    //   if (isAllZero) {\n    //     this.SendConsoleLogMsg('The image data is all zero.', 'error');\n    //     return false;\n    //   }\n    //   return true;\n    // },\n\n\n    processImage(imgArray) {\n      try {\n        const totalStartTime = new Date(); // 总开始时间\n\n        this.SendConsoleLogMsg('CaptureTestTime | Process image data start.', 'info');\n        const startTime = new Date();\n\n        const uint16Array = new Uint16Array(imgArray);\n\n        // 设置画布宽高常量\n        const canvasWidth = parseInt(this.mainCameraSizeX);\n        const canvasHeight = parseInt(this.mainCameraSizeY);\n\n        // 获取原始画布和修改后的画布以及对应上下文\n        const modifiedCanvas = document.getElementById('mainCamera-canvas');\n        const modifiedCtx = modifiedCanvas.getContext('2d');\n\n        modifiedCtx.clearRect(0, 0, modifiedCanvas.width, modifiedCanvas.height);\n\n        modifiedCanvas.width = canvasWidth;\n        modifiedCanvas.height = canvasHeight;\n\n        let mat = new cv.Mat(canvasHeight, canvasWidth, cv.CV_16UC1);\n        mat.data16U.set(uint16Array);\n\n        const matEndTime = new Date(); // mat 结束时间\n        this.SendConsoleLogMsg('CaptureTestTime | Mat creation time: ' + (matEndTime.getTime() - startTime.getTime()) + ' ms', 'info');\n\n        // 用户自定义参数\n        let gainR = this.ImageGainR;\n        let gainB = this.ImageGainB;\n        let offset = this.ImageOffset;\n        let CFA = this.ImageCFA;\n        let mode = 1;\n\n        // 参数\n        let B = 0;\n        let W = 65535;\n        let cvmode = 0;\n\n        const { blackLevel, whiteLevel } = this.GetAutoStretch(uint16Array, mode);\n        B = blackLevel;\n        W = whiteLevel;\n        const GetAutoStretchEndTime = new Date(); // GetAutoStretch 结束时间\n        this.SendConsoleLogMsg('CaptureTestTime | GetAutoStretch time: ' + (GetAutoStretchEndTime.getTime() - matEndTime.getTime()) + ' ms', 'info');\n\n        // 根据CFA设置颜色转换模式\n        if (CFA === 'GR') {\n          cvmode = cv.COLOR_BayerGR2RGBA;\n        } else if (CFA === 'GB') {\n          cvmode = cv.COLOR_BayerGB2RGBA;\n        } else if (CFA === 'BG') {\n          cvmode = cv.COLOR_BayerBG2RGBA;\n        } else if (CFA === 'RGGB') {\n          cvmode = cv.COLOR_BayerRG2RGBA;\n        }\n\n        // 对目标图像进行颜色转换\n        let dst = new cv.Mat();\n        try {\n          cv.cvtColor(mat, dst, cvmode);\n        } catch (error) {\n          this.handleError('cvtColor 出错', 'cvtColor', error);\n          mat.delete();\n          return;\n        }\n\n        const cvtColorEndTime = new Date(); // cvtColor 结束时间\n        this.SendConsoleLogMsg('CaptureTestTime | cvtColor time: ' + (cvtColorEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n        mat.delete();\n\n        // 调整图像大小\n        // cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n        // dst.delete();\n\n        // let originalImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n        // resizeImg.delete();\n\n        let resizeImg = new cv.Mat(); // 用来存储调整后的图像\n        if (this.isPolarAxisMode) {\n          // 调整图像大小\n          cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n          dst.delete();\n\n          let originalImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n          resizeImg.delete();\n\n          const Bit16To8_StretchEndTime = new Date(); // Bit16To8_Stretch 结束时间\n          this.SendConsoleLogMsg('CaptureTestTime | Bit16To8_Stretch time: ' + (Bit16To8_StretchEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n          let targetImg8 = this.ImageSoftAWB(originalImg8, gainR, gainB, offset);\n          this.$bus.$emit('showSolveImage', targetImg8);\n\n          const ImageSoftAWBEndTime = new Date(); // ImageSoftAWB 结束时间\n          this.SendConsoleLogMsg('CaptureTestTime | ImageSoftAWB time: ' + (ImageSoftAWBEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n        } else {\n          cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n          console.log('resizeImg.data.length: ', resizeImg.data.length);\n          console.log('resizeImg.cols: ', resizeImg.cols);\n          console.log('resizeImg.rows: ', resizeImg.rows);\n          let originalResizeImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n          console.log('originalResizeImg8.data.length: ', originalResizeImg8.data.length);\n          console.log('originalResizeImg8.cols: ', originalResizeImg8.cols);\n          console.log('originalResizeImg8.rows: ', originalResizeImg8.rows);\n          this.OriginalImage = new ImageData(new Uint8ClampedArray(originalResizeImg8.data), originalResizeImg8.cols, originalResizeImg8.rows);\n          resizeImg.delete();\n          console.log('dst.data.length: ', dst.data.length);\n          console.log('dst.cols: ', dst.cols);\n          console.log('dst.rows: ', dst.rows);\n          let originalImg8 = this.Bit16To8_Stretch(dst, B, W);\n          dst.delete();\n\n          const Bit16To8_StretchEndTime = new Date(); // Bit16To8_Stretch 结束时间\n          this.SendConsoleLogMsg('CaptureTestTime | Bit16To8_Stretch time: ' + (Bit16To8_StretchEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n          // let targetImg8 = this.ImageSoftAWB(originalImg8, gainR, gainB, offset);\n\n          // const ImageSoftAWBEndTime = new Date(); // ImageSoftAWB 结束时间\n          // this.SendConsoleLogMsg('CaptureTestTime | ImageSoftAWB time: ' + (ImageSoftAWBEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n          \n          // originalImg8.delete();\n\n          this.lastImageProcessParams = {\n            gainR: gainR,\n            gainB: gainB,\n            offset: offset,\n            CFA: CFA,\n            mode: mode,\n            B: B,\n            W: W,\n            cvmode: cvmode,\n          };\n\n          modifiedCanvas.width = this.CanvasWidth;\n          modifiedCanvas.height = this.CanvasHeight;\n          let colorData = new ImageData(new Uint8ClampedArray(originalImg8.data), originalImg8.cols, originalImg8.rows);\n          this.drawImgData = colorData;\n          // 设置缓冲画布宽高\n          this.bufferCanvas.width = colorData.width;\n          this.bufferCanvas.height = colorData.height;\n          // 绘制缓存画布图像\n          this.bufferCtx.putImageData(colorData, 0, 0);\n          // 绘制主画布图像\n          this.drawImageData();\n\n          const DrawImageDataEndTime = new Date(); // DrawImageData 结束时间\n          this.SendConsoleLogMsg('CaptureTestTime | DrawImageData time: ' + (DrawImageDataEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n\n          const endTime = new Date();\n          const elapsedTime = endTime.getTime() - startTime.getTime();\n          this.SendConsoleLogMsg('CaptureTestTime | Process image data end:' + elapsedTime + ' milliseconds', 'info');\n\n          // const totalEndTime = new Date(); // 总结束时间\n          // this.SendConsoleLogMsg('CaptureTestTime | Total process image data time: ' + (totalEndTime.getTime() - totalStartTime.getTime()) + ' ms', 'info');\n\n          this.$bus.$emit('showCaptureImage');\n          this.MakeHistogram(colorData);\n          this.histogramImage = colorData;\n\n          const checkDetectedStarsFinish = () => {\n            if (this.DetectedStarsFinish) {\n              this.detectStarsImg = this.DrawDetectStars(targetImg8, this.DetectedStarsList);\n              targetImg8.delete();\n              clearInterval(intervalId);\n            }\n          };\n\n          const intervalId = setInterval(checkDetectedStarsFinish, 1000);\n        }\n\n        // if (this.isNotDrawStars) {\n        //   this.drawImageData(this.drawImgData);\n        // } else {\n        //   if (this.detectStarsImg != null) {\n        //     this.drawImageData(this.detectStarsImg);\n        //   } else {\n        //     this.drawImageData(this.drawImgData);\n        //   }\n        // }\n\n        // const windowWidth = window.innerWidth;\n        // const windowHeight = window.innerHeight;\n\n        // const minTranslateX = this.imageWidth - this.CanvasWidth;\n        // const minTranslateY = this.imageHeight - this.CanvasHeight;\n\n        // // 计算初始的 ScaleImageSize_X 和 ScaleImageSize_Y\n        // this.ScaleImageSize_X = Math.floor(minTranslateX / this.CanvasWidth * windowWidth + windowWidth);\n        // this.ScaleImageSize_Y = Math.floor(minTranslateY / this.CanvasHeight * windowHeight + windowHeight);\n\n        // this.$bus.$emit('ScaleImageSize', this.ScaleImageSize_X, this.ScaleImageSize_Y);\n\n      } catch (error) {\n        this.handleError('Process image data error', 'processImage', error);\n        if (mat) {\n          mat.delete();\n        }\n        if (resizeImg) {\n          resizeImg.delete();\n        }\n        if (originalImg8) {\n          originalImg8.delete();\n        }\n        if (targetImg8) {\n          targetImg8.delete();\n        }\n      }\n    },\n\n    // histogramStretch(imageData, min, max) {\n    //   const startTime = new Date();\n    //   // Convert ImageData to cv.Mat\n    //   const image = cv.matFromImageData(imageData);\n    //   let Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 转换图像数据时间: ' + (Time1.getTime() - startTime.getTime()) + ' ms', 'info');\n    //   // Perform the histogram stretch\n    //   const channels = new cv.MatVector();\n    //   cv.split(image, channels); // Split channels (BGR) into separate Mat objects\n    //   let Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 分割通道时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Calculate alpha and beta for each channel\n    //   let alpha = 255.0 / (max - min);\n    //   let beta = -min * alpha;\n\n    //   if (alpha < 0) {\n    //     alpha = 0;\n    //     beta = 0;\n    //   } else if (alpha > 255) {\n    //     alpha = 255;\n    //     beta = 0;\n    //   }\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 计算alpha和beta时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   // Iterate over each channel and apply histogram stretching\n    //   for (let i = 0; i < channels.size(); i++) {\n    //     let channel = channels.get(i);\n\n\n    //     // Apply histogram stretching to the channel\n    //     channel.convertTo(channel, -1, alpha, beta);\n\n    //     // Release the memory of channel\n    //     channel.delete();\n    //   }\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 各通道拉伸时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Merge the channels back into a single image\n    //   const stretchImage = new cv.Mat();\n    //   cv.merge(channels, stretchImage);\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 合并通道时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   // Release the memory of channels and MatVector\n    //   channels.delete();\n\n    //   // Convert cv.Mat back to ImageData\n    //   const stretchedImageData = new ImageData(new Uint8ClampedArray(stretchImage.data), stretchImage.cols, stretchImage.rows);\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 转换图像数据时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Clean up\n    //   image.delete();\n    //   stretchImage.delete();\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 释放内存时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   this.SendConsoleLogMsg('histogramStretch | 总时间: ' + (Time1.getTime() - startTime.getTime()) + ' ms', 'info');\n    //   return stretchedImageData;\n    // },\n\n    histogramStretch(imageData, min, max) {\n      const startTime = new Date();\n      // Calculate alpha and beta\n      let alpha = 255.0 / (max - min);\n      let beta = -min * alpha;\n\n      if (alpha < 0) {\n        alpha = 0;\n        beta = 0;\n      } else if (alpha > 255) {\n        alpha = 255;\n        beta = 0;\n      }\n\n      // Apply histogram stretching directly on ImageData\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        for (let j = 0; j < 3; j++) { // For each color channel\n          let value = imageData.data[i + j];\n          value = value * alpha + beta;\n          imageData.data[i + j] = Math.max(0, Math.min(255, value));\n        }\n      }\n\n      const endTime = new Date();\n      this.SendConsoleLogMsg('histogramStretch | 总时间: ' + (endTime.getTime() - startTime.getTime()) + ' ms', 'info');\n      return imageData;\n    },\n    localWhiteBalanceAdjustment(imageData, gainR, gainB, offset) {\n      // 分离通道\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        for (let j = 0; j < 3; j++) { // For each color channel\n          if (j == 0) {\n            value = imageData.data[i + j];\n            value = value * gainB + offset;\n          } else if (j == 2) {\n            value = imageData.data[i + j];\n            value = value * gainR + offset;\n          } else {\n            value = imageData.data[i + j];\n            value = value * 1 + offset;\n          }\n          imageData.data[i + j] = Math.max(0, Math.min(255, value));\n        }\n      }\n\n\n      return imageData;\n    },\n\n    initCanvas() {\n      this.bufferCanvas = document.createElement('canvas');\n      this.bufferCtx = this.bufferCanvas.getContext('2d');\n\n      this.tempCanvas = document.createElement('canvas');\n      this.tempCtx = this.tempCanvas.getContext('2d');\n    },\n\n    //*/*/*/*/*/*/*/*/*/*/*/\n    SwitchImageToShow(isOriginal) {\n      // console.log('Show Original Image: ', isOriginal);\n      this.SendConsoleLogMsg('Show Original Image:' + isOriginal, 'info');\n      this.isNotDrawStars = isOriginal;\n      if (isOriginal) {\n        // document.removeEventListener('click', this.handleTouchOrMouseDown);\n        this.enableMainCanvasClick = false;\n        this.drawImageData();\n      } else {\n        // document.addEventListener('click', this.handleTouchOrMouseDown);\n        this.enableMainCanvasClick = true;\n        // this.drawImageData(this.detectStarsImg);\n      }\n    },\n\n    // drawImageData() {\n    //   if (this.bufferCanvas == null) {\n    //     this.SendConsoleLogMsg('drawImageData error: bufferCanvas is null or undefined.', 'error');\n    //     return;\n    //   }\n    //   // 可用相关参数\n    //   // window.innerWidth; // 窗口宽度\n    //   // window.innerHeight; // 窗口高度\n    //   // this.scale 缩放比例\n    //   // this.translateX 平移x坐标\n    //   // this.translateY 平移y坐标\n    //   // this.CanvasWidth 主画布宽度 1920\n    //   // this.CanvasHeight 主画布高度 1080\n    //   // this.mainCameraSizeX 原始图像宽度\n    //   // this.mainCameraSizeY 原始图像高度\n    //   // this.bufferCanvas.width 缓冲画布宽度\n    //   // this.bufferCanvas.height 缓冲画布高度\n    //   // this.ImageProportion 图像比例\n    //   // this.ROI_x ROI的x坐标\n    //   // this.ROI_y ROI的y坐标\n    //   // this.ROI_length ROI的长度\n\n    //   // console.log('当前画布参数:\\n bufferCanvas.width: ', this.bufferCanvas.width, '\\n bufferCanvas.height: ', this.bufferCanvas.height, '\\n ImageProportion: ', this.ImageProportion, '\\n scale: ', this.scale, '\\n visibleX: ', this.visibleX, '\\n visibleY: ', this.visibleY, '\\n visibleWidth: ', this.visibleWidth, '\\n visibleHeight: ', this.visibleHeight, '\\n ROI_x: ', this.ROI_x, '\\n ROI_y: ', this.ROI_y, '\\n ROI_length: ', this.ROI_length);\n\n    //   let startTime = new Date();\n    //   let Time1 = new Date();\n\n    //   // 计算可见区域\n    //   const newVisibleWidth = this.bufferCanvas.width * this.scale;\n    //   const newVisibleHeight = newVisibleWidth / this.ImageProportion;\n\n    //   // 计算可见区域x坐标\n    //   let newVisibleX = this.visibleX;\n    //   // 计算可见区域y坐标\n    //   let newVisibleY = this.visibleY;\n\n    //   // 避免图像越界\n    //   if (newVisibleX - newVisibleWidth / 2 < 0) {\n    //     newVisibleX = newVisibleWidth / 2;\n    //   } else if (newVisibleX + newVisibleWidth / 2 > this.bufferCanvas.width) {\n    //     newVisibleX = this.bufferCanvas.width - newVisibleWidth / 2;\n    //   }\n\n    //   if (newVisibleY - newVisibleHeight / 2 < 0) {\n    //     newVisibleY = newVisibleHeight / 2;\n    //   } else if (newVisibleY + newVisibleHeight / 2 > this.bufferCanvas.height) {\n    //     newVisibleY = this.bufferCanvas.height - newVisibleHeight / 2;\n    //   }\n\n    //   // 更新ROI区域\n    //   // 计算可见区域的边界\n    //   const visibleLeft = newVisibleX - newVisibleWidth / 2;\n    //   const visibleRight = newVisibleX + newVisibleWidth / 2;\n    //   const visibleTop = newVisibleY - newVisibleHeight / 2;\n    //   const visibleBottom = newVisibleY + newVisibleHeight / 2;\n\n    //   // 计算 ROI 区域的边界\n    //   const roiLeft = this.ROI_x;\n    //   const roiRight = this.ROI_x + this.ROI_length;\n    //   const roiTop = this.ROI_y;\n    //   const roiBottom = this.ROI_y + this.ROI_length;\n\n    //   // 判断 ROI 区域是否在可见区域内\n    //   const isRoiInVisible = roiRight >= visibleLeft && roiLeft <= visibleRight && roiBottom >= visibleTop && roiTop <= visibleBottom;\n\n    //   // 计算 ROI 区域在屏幕上的位置，中心点坐标\n    //   const roiScreenX = (this.ROI_x - visibleLeft) * (window.innerWidth / newVisibleWidth) + this.RedBoxSideLength * window.innerWidth / newVisibleWidth / 2;\n    //   const roiScreenY = (this.ROI_y - visibleTop) * (window.innerHeight / newVisibleHeight) + this.RedBoxSideLength * window.innerHeight / newVisibleHeight / 2;\n    //   // this.SendConsoleLogMsg('ROI 区域在屏幕上的位置: ' + roiScreenX + '*' + roiScreenY + '长度 ' + this.RedBoxSideLength * window.innerWidth / newVisibleWidth + '*' + this.RedBoxSideLength * window.innerHeight / newVisibleHeight, 'info');\n    //   this.$bus.$emit('setRedBoxLength', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n    //   this.$bus.$emit('setRedBoxPosition', roiScreenX, roiScreenY);\n    //   // if (isRoiInVisible) {\n    //   //   console.log('ROI 区域在可见区域内, RedBoxSideLength: ', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, ', ', this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n    //   // } else {\n    //   //   console.log('ROI 区域不在可见区域内, RedBoxSideLength: ', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, ', ', this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n    //   // }\n\n    //   let Time2 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 计算相关参数时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Draw buffer canvas on main canvas\n    //   const canvas = this.$refs.mainCanvas;\n    //   const ctx = canvas.getContext('2d');\n    //   ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //   // 获取绘制的图像数据\n    //   let imageData = this.bufferCtx.getImageData(newVisibleX - newVisibleWidth / 2, newVisibleY - newVisibleHeight / 2, newVisibleWidth, newVisibleHeight);\n\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 获取绘制的图像数据时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n\n    //   // if (this.currentHistogramMax != 255 || this.currentHistogramMin != 0) {\n    //   //   imageData = this.histogramStretch(imageData, this.currentHistogramMin, this.currentHistogramMax);\n    //   // }\n\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 直方图拉伸时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n      \n      \n    //   // Create a temporary canvas to draw the ImageData\n    //   let tempCanvas = document.createElement('canvas');\n    //   tempCanvas.width = imageData.width;\n    //   tempCanvas.height = imageData.height;\n    //   let tempCtx = tempCanvas.getContext('2d');\n    //   tempCtx.putImageData(imageData, 0, 0);\n\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 创建临时画布并绘制时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n\n    //   // Draw the ImageData on the main canvas\n    //   ctx.drawImage(tempCanvas, 0, 0, tempCanvas.width, tempCanvas.height, 0, 0, canvas.width, canvas.height);\n\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 绘制图像时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // ctx.drawImage(this.bufferCanvas, newVisibleX - newVisibleWidth / 2, newVisibleY - newVisibleHeight / 2, newVisibleWidth, newVisibleHeight, 0, 0, canvas.width, canvas.height);\n    //   // this.SendConsoleLogMsg('绘制图像,可见区域:' + newVisibleX + ',' + newVisibleY + ',' + newVisibleWidth + ',' + newVisibleHeight, 'info');\n    //   this.visibleX = newVisibleX;\n    //   this.visibleY = newVisibleY;\n    //   this.visibleWidth = newVisibleWidth;\n    //   this.visibleHeight = newVisibleHeight;\n\n    //   this.$bus.$emit('setCurrentMainCanvasHasImage', true); // 发送给电调，用于判断是否可以进行循环拍摄\n    //   // 发送消息给QT客户端，用于信息图标\n    //   this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendRedBoxState:' + this.RedBoxSideLength + ':' + this.ROI_x + ':' + this.ROI_y);\n    //   this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendVisibleArea:' + this.visibleX + ':' + this.visibleY + ':' + this.scale);\n      \n    //   // 如果选择了星点，则根据选择位置，在ROI区域中绘制一个圆\n    //   if (this.DrawSelectStarX != -1 && this.DrawSelectStarY != -1 && this.showSelectStar) {\n    //     let radius, canvasStarX, canvasStarY, color;\n    //     // 如果有星点\n    //     if (this.DrawSelectStarHFR != -1) {\n    //       radius = this.DrawSelectStarHFR/this.scale*2;\n    //       canvasStarX = (this.DrawSelectStarX + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n    //       canvasStarY = (this.DrawSelectStarY + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n    //       color = 'green'; // 有星点，绘制绿色的圆\n    //     } else {\n    //       // 否则，在选择的位置绘制一个圆\n    //       radius = 10/this.scale; // 你可以根据需要调整这个值\n    //       canvasStarX = (this.DrawSelectStarX + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n    //       canvasStarY = (this.DrawSelectStarY + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n    //       color = 'red'; // 无星点，绘制红色的圆\n    //     }\n\n    //     // 获取绘制圆的位置的图像数据\n    //     const imageData = ctx.getImageData(canvasStarX - radius, canvasStarY - radius, 2 * radius, 2 * radius);\n    //     // 发送图像数据给显示框\n    //     this.$bus.$emit('selectStarImage', imageData);\n\n    //     // 在指定位置开始绘制圆\n    //     ctx.beginPath();\n    //     ctx.arc(canvasStarX, canvasStarY, radius, 0, 2 * Math.PI);\n    //     ctx.strokeStyle = color;\n    //     ctx.lineWidth = 3;\n    //     ctx.stroke();\n    //     ctx.closePath();\n    //   }\n\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 绘制星点时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n\n    //   this.SendConsoleLogMsg('drawImageData | 总时间: ' + (Time1.getTime() - startTime.getTime()) + ' ms', 'info');\n    // },\n\n    \n   drawImageData() {\n      if (this.bufferCanvas == null) {\n        this.SendConsoleLogMsg('drawImageData error: bufferCanvas is null or undefined.', 'error');\n        return;\n      }\n      // 可用相关参数\n      // window.innerWidth; // 窗口宽度\n      // window.innerHeight; // 窗口高度\n      // this.scale 缩放比例\n      // this.translateX 平移x坐标\n      // this.translateY 平移y坐标\n      // this.CanvasWidth 主画布宽度 1920\n      // this.CanvasHeight 主画布高度 1080\n      // this.mainCameraSizeX 原始图像宽度\n      // this.mainCameraSizeY 原始图像高度\n      // this.bufferCanvas.width 缓冲画布宽度\n      // this.bufferCanvas.height 缓冲画布高度\n      // this.ImageProportion 图像比例\n      // this.ROI_x ROI的x坐标\n      // this.ROI_y ROI的y坐标\n      // this.ROI_length ROI的长度\n\n      // console.log('当前画布参数:\\n bufferCanvas.width: ', this.bufferCanvas.width, '\\n bufferCanvas.height: ', this.bufferCanvas.height, '\\n ImageProportion: ', this.ImageProportion, '\\n scale: ', this.scale, '\\n visibleX: ', this.visibleX, '\\n visibleY: ', this.visibleY, '\\n visibleWidth: ', this.visibleWidth, '\\n visibleHeight: ', this.visibleHeight, '\\n ROI_x: ', this.ROI_x, '\\n ROI_y: ', this.ROI_y, '\\n ROI_length: ', this.ROI_length);\n\n      let startTime = new Date();\n      let Time1 = new Date();\n\n      // 计算可见区域\n      const newVisibleWidth = this.bufferCanvas.width * this.scale;\n      const newVisibleHeight = newVisibleWidth / this.ImageProportion;\n\n      // 计算可见区域x坐标\n      let newVisibleX = this.visibleX;\n      // 计算可见区域y坐标\n      let newVisibleY = this.visibleY;\n\n      // 避免图像越界\n      if (newVisibleX - newVisibleWidth / 2 < 0) {\n        newVisibleX = newVisibleWidth / 2;\n      } else if (newVisibleX + newVisibleWidth / 2 > this.bufferCanvas.width) {\n        newVisibleX = this.bufferCanvas.width - newVisibleWidth / 2;\n      }\n\n      if (newVisibleY - newVisibleHeight / 2 < 0) {\n        newVisibleY = newVisibleHeight / 2;\n      } else if (newVisibleY + newVisibleHeight / 2 > this.bufferCanvas.height) {\n        newVisibleY = this.bufferCanvas.height - newVisibleHeight / 2;\n      }\n\n      // 更新ROI区域\n      // 计算可见区域的边界\n      const visibleLeft = newVisibleX - newVisibleWidth / 2;\n      const visibleRight = newVisibleX + newVisibleWidth / 2;\n      const visibleTop = newVisibleY - newVisibleHeight / 2;\n      const visibleBottom = newVisibleY + newVisibleHeight / 2;\n\n      // 计算 ROI 区域的边界\n      const roiLeft = this.ROI_x;\n      const roiRight = this.ROI_x + this.ROI_length;\n      const roiTop = this.ROI_y;\n      const roiBottom = this.ROI_y + this.ROI_length;\n\n      // 判断 ROI 区域是否在可见区域内\n      const isRoiInVisible = roiRight >= visibleLeft && roiLeft <= visibleRight && roiBottom >= visibleTop && roiTop <= visibleBottom;\n\n      // 计算 ROI 区域在屏幕上的位置，中心点坐标\n      const roiScreenX = (this.ROI_x - visibleLeft) * (window.innerWidth / newVisibleWidth) + this.RedBoxSideLength * window.innerWidth / newVisibleWidth / 2;\n      const roiScreenY = (this.ROI_y - visibleTop) * (window.innerHeight / newVisibleHeight) + this.RedBoxSideLength * window.innerHeight / newVisibleHeight / 2;\n      // this.SendConsoleLogMsg('ROI 区域在屏幕上的位置: ' + roiScreenX + '*' + roiScreenY + '长度 ' + this.RedBoxSideLength * window.innerWidth / newVisibleWidth + '*' + this.RedBoxSideLength * window.innerHeight / newVisibleHeight, 'info');\n      this.$bus.$emit('setRedBoxLength', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n      this.$bus.$emit('setRedBoxPosition', roiScreenX, roiScreenY);\n      // if (isRoiInVisible) {\n      //   console.log('ROI 区域在可见区域内, RedBoxSideLength: ', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, ', ', this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n      // } else {\n      //   console.log('ROI 区域不在可见区域内, RedBoxSideLength: ', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, ', ', this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n      // }\n\n      let Time2 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 计算相关参数时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n      // Draw buffer canvas on main canvas\n      const canvas = this.$refs.mainCanvas;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      // 获取绘制的图像数据\n      // let imageData = this.bufferCtx.getImageData(newVisibleX - newVisibleWidth / 2, newVisibleY - newVisibleHeight / 2, newVisibleWidth, newVisibleHeight);\n\n      Time1 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 获取绘制的图像数据时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n      \n      // Create a temporary canvas to draw the ImageData\n      this.tempCtx.clearRect(0, 0, this.tempCanvas.width, this.tempCanvas.height);\n      this.tempCanvas.width = canvas.width;\n      this.tempCanvas.height = canvas.height;\n      this.tempCtx.drawImage(this.bufferCanvas, newVisibleX - newVisibleWidth / 2, newVisibleY - newVisibleHeight / 2, newVisibleWidth, newVisibleHeight, 0, 0, canvas.width, canvas.height);\n\n      Time1 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 创建临时画布并绘制时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n\n      let imageData = this.tempCtx.getImageData(0, 0, this.tempCanvas.width, this.tempCanvas.height);\n\n      if (this.currentHistogramMax != 255 || this.currentHistogramMin != 0) {\n        imageData = this.histogramStretch(imageData, this.currentHistogramMin, this.currentHistogramMax);\n      }\n\n      if (this.ImageGainR != 1 || this.ImageGainB != 1 || this.ImageOffset != 0) {\n        imageData = this.localWhiteBalanceAdjustment(imageData, this.ImageGainR, this.ImageGainB, this.ImageOffset);\n      }\n      this.tempCtx.putImageData(imageData, 0, 0);\n\n      Time2 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 直方图拉伸时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n      // Draw the ImageData on the main canvas\n      ctx.drawImage(this.tempCanvas, 0, 0, this.tempCanvas.width, this.tempCanvas.height, 0, 0, canvas.width, canvas.height);\n\n      Time1 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 绘制图像时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n      // ctx.drawImage(this.bufferCanvas, newVisibleX - newVisibleWidth / 2, newVisibleY - newVisibleHeight / 2, newVisibleWidth, newVisibleHeight, 0, 0, canvas.width, canvas.height);\n      // this.SendConsoleLogMsg('绘制图像,可见区域:' + newVisibleX + ',' + newVisibleY + ',' + newVisibleWidth + ',' + newVisibleHeight, 'info');\n      this.visibleX = newVisibleX;\n      this.visibleY = newVisibleY;\n      this.visibleWidth = newVisibleWidth;\n      this.visibleHeight = newVisibleHeight;\n\n      this.$bus.$emit('setCurrentMainCanvasHasImage', true); // 发送给电调，用于判断是否可以进行循环拍摄\n      // 发送消息给QT客户端，用于信息图标\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendRedBoxState:' + this.RedBoxSideLength + ':' + this.ROI_x + ':' + this.ROI_y);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendVisibleArea:' + this.visibleX + ':' + this.visibleY + ':' + this.scale);\n      \n      // 如果选择了星点，则根据选择位置，在ROI区域中绘制一个圆\n      if (this.DrawSelectStarX != -1 && this.DrawSelectStarY != -1 && this.showSelectStar) {\n        let radius, canvasStarX, canvasStarY, color;\n        // 如果有星点\n        if (this.DrawSelectStarHFR != -1) {\n          radius = this.DrawSelectStarHFR/this.scale*2;\n          canvasStarX = (this.DrawSelectStarX + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n          canvasStarY = (this.DrawSelectStarY + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n          color = 'green'; // 有星点，绘制绿色的圆\n        } else {\n          // 否则，在选择的位置绘制一个圆\n          radius = 10/this.scale; // 你可以根据需要调整这个值\n          canvasStarX = (this.DrawSelectStarX + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n          canvasStarY = (this.DrawSelectStarY + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n          color = 'red'; // 无星点，绘制红色的圆\n        }\n\n        // 获取绘制圆的位置的图像数据\n        const imageData = ctx.getImageData(canvasStarX - radius, canvasStarY - radius, 2 * radius, 2 * radius);\n        // 发送图像数据给显示框\n        this.$bus.$emit('selectStarImage', imageData);\n\n        // 在指定位置开始绘制圆\n        ctx.beginPath();\n        ctx.arc(canvasStarX, canvasStarY, radius, 0, 2 * Math.PI);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 3;\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      Time2 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 绘制星点时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n\n      this.SendConsoleLogMsg('drawImageData | 总时间: ' + (Time2.getTime() - startTime.getTime()) + ' ms', 'info');\n    },\n\n    addEventListeners() {\n \n    },\n\n    // 节流函数\n    throttle(func, delay) {\n      let lastExecuted = 0;\n      return function (...args) {\n        const now = Date.now();\n        if (now - lastExecuted >= delay) {\n          func.apply(this, args);\n          lastExecuted = now;\n        }\n      };\n    },\n\n    ImageSoftAWB(img8, gainR, gainB, offset) {\n      // 分离通道\n      let channels = new cv.MatVector();\n      cv.split(img8, channels);\n\n      const b = channels.get(0);\n      const g = channels.get(1);\n      const r = channels.get(2);\n\n      // 自适应直方图均衡化\n      const clahe = new cv.CLAHE(2.0, new cv.Size(8, 8));\n      clahe.apply(b, b);\n      clahe.apply(g, g);\n      clahe.apply(r, r);\n\n      // 应用增益和偏置\n      r.convertTo(r, -1, gainR, offset);\n      b.convertTo(b, -1, gainB, offset);\n      g.convertTo(g, -1, 1, offset); // 对绿色通道应用偏置但不改变增益\n\n      // 更新 channels 中的通道数据\n      channels.set(0, b);\n      channels.set(1, g);\n      channels.set(2, r);\n\n      // 合并通道\n      let mergedImg = new cv.Mat();\n      cv.merge(channels, mergedImg);\n\n      // 释放资源\n      b.delete(); // 释放 b\n      g.delete(); // 释放 g\n      r.delete(); // 释放 r\n      channels.delete();\n      clahe.delete(); // 释放 clahe\n\n\n\n      return mergedImg;\n    },\n\n    // Bit16To8_Stretch(img16, B, W) {\n    //   console.log('Bit16To8_Stretch | B = ' + B + ', W = ' + W);\n    //   let img8 = new cv.Mat();\n    //   img8.create(img16.rows, img16.cols, cv.CV_8UC4);\n    //   img16.convertTo(img8, cv.CV_8U, 255.0 / (W - B), -B * 255.0 / (W - B));\n\n    //   const result = img8.clone(); // 克隆 img8 以返回结果\n    //   img8.delete(); // 释放 img8\n\n    //   return result;\n    // },\n    Bit16To8_Stretch(img16, B, W) {\n      console.log('Bit16To8_Stretch | B = ' + B + ', W = ' + W);\n      let img8 = new cv.Mat(img16.rows, img16.cols, cv.CV_8UC4);\n      img16.convertTo(img8, cv.CV_8U, 255.0 / (W - B), -B * 255.0 / (W - B));\n      return img8;\n    },\n\n    DrawDetectStars(image, Stars) {\n      console.log('Draw circle on the Capture Image(', image.cols, ',', image.rows, ').');\n      if (!(image instanceof cv.Mat)) {\n        throw new Error('Invalid image data');\n      }\n      Stars.forEach(star => {\n        let centerX = Math.round(star.x / (this.mainCameraSizeX / image.cols));\n        let centerY = Math.round(star.y / (this.mainCameraSizeY / image.rows));\n        let radius = Math.round(star.hfr);\n\n        console.log('Draw circle at(', centerX, ',', centerY, ') with radius:', radius);\n\n        let center = new cv.Point(centerX, centerY);\n        let color = new cv.Scalar(255, 0, 0, 255);\n        let thickness = 2; // 圆圈厚度\n\n        cv.circle(image, center, radius, color, thickness);\n\n        // 添加 hfr 值到圆的上方\n        // 确保 star.hfr 是一个数字\n        let hfrValue = parseFloat(star.hfr);\n        if (isNaN(hfrValue)) {\n          hfrValue = 0; // 如果 star.hfr 不能转换为数字，则默认值设为0\n        }\n\n        // 保留到小数点后2位\n        let text = hfrValue.toFixed(2);\n        let fontFace = cv.FONT_HERSHEY_SIMPLEX;\n        let fontScale = 1;\n        let textColor = new cv.Scalar(255, 0, 0, 255);\n        let textThickness = 2;\n\n        // 手动设置文本的位置，假设字体高度大约为10像素\n        let textX = centerX - (text.length * 10); // 估算每个字符宽度为5像素\n        let textY = centerY - radius - 3; // 圆的上方 3 像素\n\n        // 在图像上绘制文本\n        cv.putText(image, text, new cv.Point(textX, textY), fontFace, fontScale, textColor, textThickness);\n      });\n\n      const imageData = new ImageData(new Uint8ClampedArray(image.data), image.cols, image.rows);\n\n      return imageData;\n    },\n\n    DrawPHD2Box(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const BoxWidth = 20 / ratioZoomX;\n      const BoxHeight = 20 / ratioZoomY;\n\n      const BoxStartX = Box_X / ratioZoomX - BoxWidth / 2;\n      const BoxStartY = Box_Y / ratioZoomY - BoxHeight / 2;\n\n      this.$bus.$emit('PHD2BoxPosition', BoxStartX, BoxStartY, BoxWidth, BoxHeight);\n    },\n\n    DrawPHD2Cross(PHD2ImageSize_X, PHD2ImageSize_Y, Cross_X, Cross_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const CrossStartX = Cross_X / ratioZoomX;\n      const CrossStartY = Cross_Y / ratioZoomY;\n\n      this.$bus.$emit('PHD2CrossPosition', CrossStartX, CrossStartY);\n    },\n\n    DrawPHD2MultiStars(PHD2ImageSize_X, PHD2ImageSize_Y, Star_X, Star_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const StarStartX = Star_X / ratioZoomX - 12 / 2;\n      const StarStartY = Star_Y / ratioZoomY - 12 / 2;\n\n      this.$bus.$emit('PHD2MultiStarsPosition', StarStartX, StarStartY);\n    },\n\n    GetAutoStretch(imgData, mode) {\n      if (imgData.length === 0) {\n        return { blackLevel: 0, whiteLevel: 65535 };\n      }\n\n      const length = imgData.length;\n      let mean = 0;\n      let M2 = 0;\n\n      for (let i = 0; i < length; i++) {\n        const delta = imgData[i] - mean;\n        mean += delta / (i + 1);\n        M2 += delta * (imgData[i] - mean);\n      }\n\n      const variance = M2 / length;\n      const std = Math.sqrt(variance);\n\n      let a, b;\n      switch (mode) {\n        case 0:\n          a = 3;\n          b = 5;\n          break;\n        case 1:\n          a = 2;\n          b = 5;\n          break;\n        case 2:\n          a = 3;\n          b = 8;\n          break;\n        default:\n          a = 2;\n          b = 8;\n      }\n\n      let bx = Math.max(0, mean - std * a);\n      let wx = Math.min(65535, mean + std * b);\n\n      let blackLevel = Math.round(bx);\n      let whiteLevel = Math.round(wx);\n\n      if (blackLevel >= whiteLevel) {\n        blackLevel = whiteLevel - 1;\n      }\n\n      return { blackLevel, whiteLevel };\n    },\n\n    fetchImage(imagePath) {\n      const url = imagePath;\n      const xhr = new XMLHttpRequest();\n\n      xhr.responseType = 'blob'; // 设置响应类型为 blob\n\n      xhr.onload = () => {\n        if (xhr.status === 200) {\n          const imageUrl = URL.createObjectURL(xhr.response);\n          // 在这里，您可以将 imageUrl 设置到某个 <img> 元素上，或者做其他处理\n          this.$bus.$emit('showCaptureImage');\n          this.displayImageOnCanvas(imageUrl); // 将图像显示在Canvas上\n        } else {\n          console.error('Failed to fetch the image. Status:', xhr.status);\n        }\n      };\n\n      xhr.onerror = () => {\n        console.error('There was an error fetching the image.');\n      };\n\n      xhr.open('GET', url, true);\n      xhr.send();\n    },\n\n    displayImageOnCanvas(imageUrl) {\n      const showcanvas = document.getElementById('mainCamera-canvas');\n      const canvas = document.getElementById('TestCanvas');\n      const showctx = showcanvas.getContext('2d');\n      const ctx = canvas.getContext('2d');\n      showcanvas.width = this.CanvasWidth;\n      showcanvas.height = this.CanvasHeight;\n      console.log('QHYCCD | canvas size:', showcanvas.width, showcanvas.height);\n\n      const img = new Image();\n      img.setAttribute('crossOrigin', '');\n      img.onload = () => {\n        this.histogramImage = img;\n\n        // 计算图像的缩放比例以使其铺满固定大小的 Canvas\n        const scaleWidth = showcanvas.width / img.width;\n        const scaleHeight = showcanvas.height / img.height;\n\n        const width = img.width * scaleWidth;\n        const height = img.height * scaleHeight;\n\n        // 清空 Canvas\n        showctx.clearRect(0, 0, showcanvas.width, showcanvas.height);\n        ctx.clearRect(0, 0, showcanvas.width, showcanvas.height);\n\n        // 在 Canvas 上绘制图像\n        showctx.drawImage(img, 0, 0, width, height);\n        ctx.drawImage(img, 0, 0, width, height);\n        console.log('QHYCCD | crossOrigin:', img.crossOrigin);\n        this.imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        console.log('QHYCCD | imageData:', this.imageData);\n        this.MakeHistogram(this.imageData);\n      };\n      img.src = imageUrl;\n    },\n\n    MakeHistogram(imageData) {\n      console.log('MakeHistogram');\n\n      // 计算三个通道的直方图\n      this.histogramData = this.calculateHistogram(imageData);\n\n      this.$bus.$emit('showHistogram', this.histogramData);\n    },\n\n    calculateHistogram(imageData) {\n      console.log('QHYCCD | calculateHistogram');\n      const histogram = [\n        Array(256).fill(0), // 存储蓝色通道直方图\n        Array(256).fill(0), // 存储绿色通道直方图\n        Array(256).fill(0)  // 存储红色通道直方图\n      ];\n\n      // 分别计算三个通道的直方图\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const r = imageData.data[i];\n        const g = imageData.data[i + 1];\n        const b = imageData.data[i + 2];\n\n        // 更新每个通道的直方图\n        histogram[0][b]++;\n        histogram[1][g]++;\n        histogram[2][r]++;\n      }\n\n      return histogram;\n    },\n\n    applyHistStretch(Min, Max) {\n      this.currentHistogramMin = Min;\n      this.currentHistogramMax = Max;\n      this.drawImageData();\n      this.$bus.$emit('ChangeDialPosition', Min, Max);\n    },\n\n    setAutoHistogramNum(min, max) {\n      this.histogram_min = min;\n      this.histogram_max = max;\n      this.currentHistogramMin = min;\n      this.currentHistogramMax = max;\n    },\n\n    calcWhiteBalanceGains() {\n      // const Gains = this.calculateWhiteBalanceGains(this.histogramData, this.ImageOffset);\n      const startTime = new Date();\n      const Gains = this.calculateWhiteBalanceGains();\n      const endTime = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 总时间: ' + (endTime.getTime() - startTime.getTime()) + ' ms', 'info');\n\n      this.ImageGainR = Gains.GainR;\n      this.ImageGainB = Gains.GainB;\n\n      const GainRIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ImageGainR');\n      if (GainRIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.MainCameraConfigItems[GainRIndex].value = this.ImageGainR;\n      } else {\n        console.error('ImageGainR configuration item not found.');\n      }\n\n      const GainBIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ImageGainB');\n      if (GainBIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.MainCameraConfigItems[GainBIndex].value = this.ImageGainB;\n      } else {\n        console.error('ImageGainB configuration item not found.');\n      }\n\n      this.drawImageData();\n      // this.processImage(this.ImageArrayBuffer);\n    },\n\n    // calculateWhiteBalanceGains(histogram, offset) {\n    //   let sumR = 0, sumG = 0, sumB = 0;\n    //   let countR = 0, countG = 0, countB = 0;\n\n    //   // for (let i = 0; i < 256; i++) {\n    //   //   sumR += histogram[2][i] * i;\n    //   //   sumG += histogram[1][i] * i;\n    //   //   sumB += histogram[0][i] * i;\n\n    //   //   countR += histogram[2][i];\n    //   //   countG += histogram[1][i];\n    //   //   countB += histogram[0][i];\n    //   // }\n\n    //   for (let i = 0; i < 256; i++) {\n    //     // Subtract offset from pixel value\n    //     const adjustedR = Math.max(i - offset, 0);\n    //     const adjustedG = Math.max(i - offset, 0);\n    //     const adjustedB = Math.max(i - offset, 0);\n\n    //     sumR += histogram[2][i] * adjustedR;\n    //     sumG += histogram[1][i] * adjustedG;\n    //     sumB += histogram[0][i] * adjustedB;\n\n    //     countR += histogram[2][i];\n    //     countG += histogram[1][i];\n    //     countB += histogram[0][i];\n    //   }\n\n    //   const meanR = sumR / countR;\n    //   const meanG = sumG / countG;\n    //   const meanB = sumB / countB;\n\n    //   // Calculate gains\n    //   const GainR = meanG / meanR;\n    //   const GainB = meanG / meanB;\n\n    //   console.log(`GainR: ${GainR}, GainB: ${GainB}`);\n    //   return { GainR, GainB };\n    // },\n\n    calculateWhiteBalanceGains() {\n      if (!(this.OriginalImage instanceof ImageData)) {\n        throw new Error('Invalid image data');\n      }\n\n      let time1 = new Date();\n      // 创建一个新的 cv.Mat 对象\n      let img8 = cv.matFromImageData(this.OriginalImage);\n      let time2 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 创建 cv.Mat 对象时间: ' + (time2.getTime() - time1.getTime()) + ' ms', 'info');\n\n      let gainR = this.ImageGainR;\n      let gainB = this.ImageGainB;\n      let offset = this.ImageOffset;\n\n      const channels = new cv.MatVector();\n      cv.split(img8, channels);\n      time1 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 分割通道时间: ' + (time1.getTime() - time2.getTime()) + ' ms', 'info');\n\n      const b = channels.get(0);\n      const g = channels.get(1);\n      const r = channels.get(2);\n      time2 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 获取通道时间: ' + (time2.getTime() - time1.getTime()) + ' ms', 'info');\n\n      // 自适应直方图均衡化\n      const clahe = new cv.CLAHE(2.0, new cv.Size(8, 8));\n      clahe.apply(b, b);\n      clahe.apply(g, g);\n      clahe.apply(r, r);\n      time1 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 自适应直方图均衡化时间: ' + (time1.getTime() - time2.getTime()) + ' ms', 'info');\n\n      // 使用中位数计算增益\n      const medianB = new cv.Mat();\n      const medianG = new cv.Mat();\n      const medianR = new cv.Mat();\n      cv.medianBlur(b, medianB, 5);\n      cv.medianBlur(g, medianG, 5);\n      cv.medianBlur(r, medianR, 5);\n      time2 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 中位数计算增益时间: ' + (time2.getTime() - time1.getTime()) + ' ms', 'info');\n\n      const avgB = cv.mean(medianB)[0];\n      const avgG = cv.mean(medianG)[0];\n      const avgR = cv.mean(medianR)[0];\n\n      time1 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 计算增益时间: ' + (time1.getTime() - time2.getTime()) + ' ms', 'info');\n\n      gainR = Math.min(Math.max(avgG / avgR, 0.1), 3);\n      gainB = Math.min(Math.max(avgG / avgB, 0.1), 3);\n\n      // 应用增益和偏置\n      r.convertTo(r, -1, gainR, offset);\n      b.convertTo(b, -1, gainB, offset);\n      g.convertTo(g, -1, 1, offset); // 对绿色通道应用偏置但不改变增益\n\n      time2 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 应用增益和偏置时间: ' + (time2.getTime() - time1.getTime()) + ' ms', 'info');\n\n      // 更新 channels 中的通道数据\n      channels.set(0, b);\n      channels.set(1, g);\n      channels.set(2, r);\n\n      time1 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 更新 channels 中的通道数据时间: ' + (time1.getTime() - time2.getTime()) + ' ms', 'info');\n\n      // 合并通道回 img8\n      cv.merge(channels, img8);\n\n      time2 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 合并通道时间: ' + (time2.getTime() - time1.getTime()) + ' ms', 'info');\n\n      b.delete();\n      g.delete();\n      r.delete();\n      medianB.delete();\n      medianG.delete();\n      medianR.delete();\n      channels.delete();\n\n      time1 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 删除通道时间: ' + (time1.getTime() - time2.getTime()) + ' ms', 'info');\n\n      // if (this.isPolarAxisMode) {\n      //   this.$bus.$emit('showSolveImage', img8);\n      // }\n      // else {\n      //   // 创建用于绘制的 ImageData 对象，并在修改后的画布上绘制图像\n      //   let colorData = new ImageData(new Uint8ClampedArray(img8.data), img8.cols, img8.rows);\n      //   img8.delete();\n      //   this.drawImgData = colorData;\n      //   this.drawImageData();\n\n      //   this.$bus.$emit('showCaptureImage');\n\n      //   this.MakeHistogram(colorData);\n      //   this.histogramImage = colorData;\n\n      // }\n      return { GainR: gainR, GainB: gainB };\n    },\n\n    loadOpenCv() {\n      return new Promise((resolve, reject) => {\n        if (typeof cv === 'undefined') {\n          // 如果 cv 未定义，尝试加载 OpenCV.js\n          const script = document.createElement('script');\n          script.src = '/opencv.js'; // 使用 public 文件夹中的路径\n          script.async = true;\n          script.onload = () => {\n            resolve();\n          };\n          script.onerror = (error) => {\n            reject(error);\n          };\n          document.head.appendChild(script);\n        } else {\n          // 如果 cv 已定义，直接解析\n          resolve();\n        }\n      });\n    },\n\n    // loadOpenCv() {\n    //   return new Promise((resolve, reject) => {\n    //     if (typeof cv === 'undefined') {\n    //       const script = document.createElement('script');\n    //       script.src = 'https://docs.opencv.org/4.5.5/opencv.js';\n    //       script.async = true;\n    //       script.onload = () => {\n    //         if (typeof cv !== 'undefined') {\n    //           resolve();\n    //         } else {\n    //           reject(new Error('Failed to load OpenCV.js'));\n    //         }\n    //       }\n    //       script.onerror = (error) => {\n    //         reject(error);\n    //       }\n    //       document.head.appendChild(script);\n    //     } else {\n    //       resolve();\n    //     }\n    //   });\n    // },\n\n    onCvReady() {\n\n      // Test if some of opencv method can work.\n      if (cv) {\n        console.log(\"QHYCCD | OpenCV.js is ready.\");\n        this.SendConsoleLogMsg('OpenCV.js is ready.', 'info');\n      } else {\n        console.log(\"QHYCCD | Failed to load OpenCV.js\");\n        this.SendConsoleLogMsg('Failed to load OpenCV.js.', 'error');\n      }\n\n      this.cvReady = true;\n    },\n\n\n    loadImageToCanvasMainCamera: function () {\n      const canvas = document.getElementById('mainCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n      image.src = BackgroundImage;\n    },\n    loadImageToCanvasGuiderCamera: function () {\n      const canvas = document.getElementById('guiderCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n      image.src = BackgroundImage;\n    },\n\n\n    showGuiderCameraCanvas() {\n      // 动态更新z-index\n      this.canvasZIndexStel = -10;\n      this.canvasZIndexMainCamera = -11;\n      this.canvasZIndexGuiderCamera = 0;\n      this.$bus.$emit('setParsingProgress', false);\n\n      // this.convertToGrayscale();\n    },\n\n    showStelCanvas() {\n      if (this.isPolarAxisMode) {\n        this.$bus.$emit('setParsingProgress', true);\n      } else {\n        this.$bus.$emit('setParsingProgress', false);\n      }\n      this.canvasZIndexStel = 0;\n      this.canvasZIndexMainCamera = -10;\n      this.canvasZIndexGuiderCamera = -11;\n    },\n\n    showMainCameraCanvas() {\n      this.canvasZIndexStel = -10;\n      this.canvasZIndexMainCamera = 0;\n      this.canvasZIndexGuiderCamera = -11;\n      this.$bus.$emit('setParsingProgress', false);\n    },\n\n\n    handleButtonTestClick() {\n      // this.changeOrder();\n      if (this.currentcanvas === 'Stel') {\n        this.currentcanvas = 'MainCamera';\n        this.showMainCameraCanvas();\n      }\n      else if (this.currentcanvas === 'MainCamera') {\n        this.currentcanvas = 'GuiderCamera';\n        this.showGuiderCameraCanvas();\n      }\n      else if (this.currentcanvas === 'GuiderCamera') {\n        this.currentcanvas = 'Stel';\n        this.showStelCanvas();\n      }\n    },\n\n    getPluginsMenuItems: function () {\n      let res = []\n      for (const i in this.$stellariumWebPlugins()) {\n        const plugin = this.$stellariumWebPlugins()[i]\n        if (plugin.menuItems) {\n          res = res.concat(plugin.menuItems)\n        }\n      }\n      return res\n    },\n    getPluginsMenuComponents: function () {\n      let res = []\n      for (const i in this.$stellariumWebPlugins()) {\n        const plugin = this.$stellariumWebPlugins()[i]\n        if (plugin.menuComponents) {\n          res = res.concat(plugin.menuComponents)\n        }\n      }\n      return res\n    },\n    toggleStoreValue: function (storeVarName) {\n      this.nav = false;\n      this.$store.commit('toggleBool', storeVarName)\n    },\n    getStoreValue: function (storeVarName) {\n      return _.get(this.$store.state, storeVarName)\n    },\n    setStateFromQueryArgs: function () {\n      // Check whether the observing panel must be displayed\n      this.$store.commit('setValue', { varName: 'showSidePanel', newValue: this.$route.path.startsWith('/p/') })\n\n      // Set the core's state from URL query arguments such\n      // as date, location, view direction & fov\n      let that = this\n\n      if (!this.initDone) {\n        this.$stel.core.time_speed = 1\n        let d = new Date()\n        if (this.$route.query.date) {\n          d = new Moment(this.$route.query.date).toDate()\n          this.$stel.core.observer.utc = d.getMJD()\n          this.startTimeIsSet = true\n        }\n\n        if (this.$route.query.lng && this.$route.query.lat) {\n          const pos = { lat: Number(this.$route.query.lat), lng: Number(this.$route.query.lng), alt: this.$route.query.elev ? Number(this.$route.query.elev) : 0, accuracy: 1 }\n          swh.geoCodePosition(pos, that).then((loc) => {\n            that.$store.commit('setCurrentLocation', loc)\n          }, (error) => { console.log(error) })\n        }\n\n        this.$stel.core.observer.yaw = this.$route.query.az ? Number(this.$route.query.az) * Math.PI / 180 : 0\n        this.$stel.core.observer.pitch = this.$route.query.alt ? Number(this.$route.query.alt) * Math.PI / 180 : 30 * Math.PI / 180\n        this.$stel.core.fov = this.$route.query.fov ? Number(this.$route.query.fov) * Math.PI / 180 : 120 * Math.PI / 180\n\n        this.initDone = true\n      }\n\n      if (this.$route.path.startsWith('/skysource/')) {\n        const name = decodeURIComponent(this.$route.path.substring(11))\n        console.log('Will select object: ' + name)\n        this.SendConsoleLogMsg('Will select object: ' + name, 'info');\n        return swh.lookupSkySourceByName(name).then(ss => {\n          if (!ss) {\n            return\n          }\n          let obj = swh.skySource2SweObj(ss)\n          if (!obj) {\n            obj = this.$stel.createObj(ss.model, ss)\n            this.$selectionLayer.add(obj)\n          }\n          if (!obj) {\n            console.warning(\"Can't find object in SWE: \" + ss.names[0])\n          }\n          swh.setSweObjAsSelection(obj)\n        }, err => {\n          console.log(err)\n          console.log(\"Couldn't find skysource for name: \" + name)\n          this.SendConsoleLogMsg(\"Couldn't find skysource for name: \" + name, 'error');\n        })\n      }\n    },\n\n    lookatcircle() {\n      // glStel.core.selection = glTestCircle;\n      glStel.pointAndLock(glTestCircle);\n    },\n\n    setGloabalStel: function (stel) {\n      return stel;\n    },\n\n    setGlobalLayer: function (stel) {\n      return stel.createLayer({ id: 'testLayerStars', z: 7, visible: true });\n    },\n\n    vec3_from_sphe: function (ra_degree, dec_degree, out) {\n      const cp = Math.cos(dec_degree * Math.PI / 180);\n      out[0] = Math.cos(ra_degree * Math.PI / 180) * cp;\n      out[1] = Math.sin(ra_degree * Math.PI / 180) * cp;\n      out[2] = Math.sin(dec_degree * Math.PI / 180);\n    },\n\n    testAddCircle: function (stel, layer) {\n      console.log(\"Add a circle star near polaris\");\n\n      let circle = stel.createObj('circle', { id: 'my circle  ', model_data: {} });\n\n      circle.update();\n      layer.add(circle);\n\n      // Select\n      stel.core.selection = circle;\n      stel.pointAndLock(circle);\n\n      // Circle Property\n      let mm = circle.pos;\n      this.vec3_from_sphe(2.52971, 89.2641, mm);\n      circle.pos = mm;\n      console.log(\"circle pos:\" + mm);\n      circle.label = \"\";\n      circle.frame = 1;\n      circle.size = [0.05, 0.05];\n      circle.color = [0, 1, 0, 0.25];\n      circle.border_color = [0, 1, 0, 1];\n\n      return circle;\n    },\n\n    UpdateCirclePos(Ra_degree, Dec_degree) {\n      let mm = glTestCircle.pos;\n      this.vec3_from_sphe(Ra_degree, Dec_degree, mm);\n      glTestCircle.pos = mm;\n    },\n\n    UpdateTelescopeStatus(status) {\n      this.$bus.$emit('MountStatus', status);\n      if (status === 'Slewing') {\n        glTestCircle.color = [1, 0, 0, 0.25];\n        glTestCircle.border_color = [1, 0, 0, 1];\n      }\n      else {\n        glTestCircle.color = [0, 1, 0, 0.25];\n        glTestCircle.border_color = [0, 1, 0, 1];\n      }\n    },\n\n    UpdateMainCameraStatus(status) {\n      this.$bus.$emit('MainCameraStatus', status);\n      if (status === 'Exposuring') {\n\n      }\n      else {\n\n      }\n    },\n\n    UpdateMainCameraTemperature(value) {\n      // console.log('Main Camera Temperature:', value + '°');\n      this.$bus.$emit('MainCameraTemperature', value);\n    },\n\n    setPolarPointAltitude(Altitude) {\n      this.PolarPoint_Altitude = Altitude;\n      console.log('Polar Point Altitude:', this.PolarPoint_Altitude);\n      this.SendConsoleLogMsg('Polar Point Altitude:' + this.PolarPoint_Altitude, 'info');\n    },\n\n    AddMarkCircle: function (stel, layer, frame, label) {\n      let circle = stel.createObj('circle', { id: 'my circle  ', model_data: {} });\n\n      circle.update();\n      layer.add(circle);\n\n      // Select\n      stel.core.selection = circle;\n      stel.pointAndLock(circle);\n\n      // Circle Property\n      let mm = circle.pos;\n      this.vec3_from_sphe(2.52971, 89.2641, mm);\n      circle.pos = mm;\n      circle.label = label;\n      circle.frame = frame;\n      circle.size = [0.04, 0.04];\n      circle.color = [1, 1, 1, 0.5];\n      circle.border_color = [1, 1, 1, 1];\n\n      return circle;\n    },\n\n    AddMarkRectangle: function (stel, layer, RaDec) {\n      let line = stel.createObj('geojson', {\n        data: {\n          \"type\": \"FeatureCollection\",\n          \"features\": [\n            {\n              \"type\": \"Feature\",\n              \"properties\": {\n                \"stroke\": \"#FFFFFF\",\n                \"stroke-opacity\": 1,\n                \"fill\": \"#1E90FF\",\n                \"fill-opacity\": 0.25\n              },\n              \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                  [\n                    // [139.76, 35.52], [139.32, 33.41], [140.92, 33.08], [141.35, 35.19], [139.76, 35.52]\n                    [parseFloat(RaDec[0].Ra), parseFloat(RaDec[0].Dec)], [parseFloat(RaDec[1].Ra), parseFloat(RaDec[1].Dec)],\n                    [parseFloat(RaDec[2].Ra), parseFloat(RaDec[2].Dec)], [parseFloat(RaDec[3].Ra), parseFloat(RaDec[3].Dec)],\n                    [parseFloat(RaDec[0].Ra), parseFloat(RaDec[0].Dec)]\n                  ]\n                ]\n              }\n            },\n          ]\n        }\n      });\n\n      line.update();\n      layer.add(line);\n\n      return line;\n    },\n\n    getCiecleAzAlt(Circle) {\n      let obs = this.$stel.core.observer;\n      let cirs = this.$stel.convertFrame(obs, 'ICRF', 'CIRS', Circle.getInfo('radec'));\n      let observed = this.$stel.convertFrame(obs, 'CIRS', 'OBSERVED', cirs);\n      // const azalt = this.$stel.c2s(this.$stel.convertFrame(this.$stel.core.observer, 'ICRF', 'OBSERVED', obj.getInfo('radec')))\n      let azalt = this.$stel.c2s(observed);\n      let az = this.$stel.anp(azalt[0]);\n      let alt = this.$stel.anp(azalt[1]);\n\n      const az_raf = this.$stel.a2af(az, 1);\n      const Az_degree = (az_raf.degrees < 0 ? az_raf.degrees + 180 : az_raf.degrees) + az_raf.arcminutes / 60 + az_raf.arcseconds / 3600;\n\n      const alt_raf = this.$stel.a2af(alt, 1);\n      const Alt_degree = alt_raf.degrees + alt_raf.arcminutes / 60 + alt_raf.arcseconds / 3600;\n\n      console.log('AzAlt:', Az_degree, Alt_degree);\n\n      return { Az_degree, Alt_degree };\n    },\n\n    SolveResultMark(RaDegree, DecDegree, Azimuth, Altitude) {\n      let MarkCircle_RaDec = this.AddMarkCircle(this.$stel, glLayer, 1, \"RaDec\");\n      let mm = MarkCircle_RaDec.pos;\n      this.vec3_from_sphe(RaDegree, DecDegree, mm);\n      MarkCircle_RaDec.pos = mm;\n      console.log(\"RaDec circle coordinates:\" + mm);\n\n      const AzAlt = this.getCiecleAzAlt(MarkCircle_RaDec);\n      glLayer.remove(MarkCircle_RaDec);\n\n      this.MarkCircleNum++;\n      let Label = \"AzAlt_Vue_\" + this.MarkCircleNum;\n\n      let MarkCircle_AltAz = this.AddMarkCircle(this.$stel, glLayer, 4, Label);\n      mm = MarkCircle_AltAz.pos;\n      this.vec3_from_sphe(AzAlt.Az_degree, AzAlt.Alt_degree, mm);\n      MarkCircle_AltAz.pos = mm;\n      console.log(\"AzAlt_Vue circle coordinates:\" + mm);\n\n      console.log(\"AzAlt_Vue circle x:\" + mm[0]);\n      console.log(\"AzAlt_Vue circle y:\" + mm[1]);\n      console.log(\"AzAlt_Vue circle z:\" + mm[2]);\n\n      this.LastPoint_AzAlt = this.getCiecleAzAlt(MarkCircle_AltAz);\n\n      this.CalculationPolarPoint(mm);\n\n      // 将创建的圆存储到数组中\n      // this.Circles.push(MarkCircle_RaDec);\n      this.Circles.push(MarkCircle_AltAz);\n\n    },\n\n    RemoveAllCircles() {\n      this.Circles.forEach(circle => {\n        glLayer.remove(circle);\n      });\n      this.Circles = [];\n    },\n\n    SolveResultMark_RealTime(RaDegree, DecDegree, Azimuth, Altitude) {\n      this.LastCircle_RaDec = this.AddMarkCircle(this.$stel, glLayer, 1, \"RaDec\");\n      let mm = this.LastCircle_RaDec.pos;\n      this.vec3_from_sphe(RaDegree, DecDegree, mm);\n      this.LastCircle_RaDec.pos = mm;\n      console.log(\"RaDec circle coordinates:\" + mm);\n\n      const AzAlt = this.getCiecleAzAlt(this.LastCircle_RaDec);\n      glLayer.remove(this.LastCircle_RaDec);\n\n      if (this.LastCircle_AzAlt !== null && this.LastCircle_AzAlt !== undefined) {\n        glLayer.remove(this.LastCircle_AzAlt);\n      }\n      this.LastCircle_AzAlt = this.AddMarkCircle(this.$stel, glLayer, 4, 'Current');\n      mm = this.LastCircle_AzAlt.pos;\n      this.vec3_from_sphe(AzAlt.Az_degree, AzAlt.Alt_degree, mm);\n      this.LastCircle_AzAlt.pos = mm;\n      this.LastCircle_AzAlt.color = [0, 1, 1, 0.25];\n      console.log(\"AzAlt_Vue circle coordinates:\" + mm);\n\n      console.log(\"AzAlt_Vue circle x:\" + mm[0]);\n      console.log(\"AzAlt_Vue circle y:\" + mm[1]);\n      console.log(\"AzAlt_Vue circle z:\" + mm[2]);\n\n      this.Current_AzAlt = this.getCiecleAzAlt(this.LastCircle_AzAlt);\n      console.log(\"Current AzAlt:\", this.Current_AzAlt.Az_degree, this.Current_AzAlt.Alt_degree);\n      this.$bus.$emit('ShowCurrentAzAltText', this.Current_AzAlt.Az_degree, this.Current_AzAlt.Alt_degree);\n    },\n\n\n    CalculationPolarPoint(coordinate) {\n      this.CartesianList.push(coordinate);\n\n      if (this.CartesianList.length < 3) {\n        return;\n      }\n\n      this.$bus.$emit('HideSingleSolveBtn');\n\n      // 获取三个点的坐标\n      const p1 = this.CartesianList[0];\n      const p2 = this.CartesianList[1];\n      const p3 = this.CartesianList[2];\n\n      // 计算两个向量\n      const v1 = [\n        p2[0] - p1[0],\n        p2[1] - p1[1],\n        p2[2] - p1[2]\n      ];\n\n      const v2 = [\n        p3[0] - p1[0],\n        p3[1] - p1[1],\n        p3[2] - p1[2]\n      ];\n\n      // 计算法向量\n      const normal = [\n        v1[1] * v2[2] - v1[2] * v2[1],\n        v1[2] * v2[0] - v1[0] * v2[2],\n        v1[0] * v2[1] - v1[1] * v2[0]\n      ];\n\n      // 计算法向量的长度\n      const normalLength = Math.sqrt(normal[0] ** 2 + normal[1] ** 2 + normal[2] ** 2);\n\n      // 归一化法向量\n      const unitNormal = [\n        normal[0] / normalLength,\n        normal[1] / normalLength,\n        normal[2] / normalLength\n      ];\n\n      // 假设球的半径为r，圆心为(0, 0, 0)\n      const r = 1; // 根据你的实际情况调整\n\n      // 计算与球面的交点\n      const intersection1 = [\n        unitNormal[0] * r,\n        unitNormal[1] * r,\n        unitNormal[2] * r\n      ];\n\n      const intersection2 = [\n        -unitNormal[0] * r,\n        -unitNormal[1] * r,\n        -unitNormal[2] * r\n      ];\n\n      console.log('Intersection Points:', intersection1, intersection2);\n\n      // 选择离(0,0,1)更近的交点\n      const closerIntersection = intersection1[2] > 0 ? intersection1 : intersection2;\n\n      let MarkCircle_FakePolarPoint = this.AddMarkCircle(this.$stel, glLayer, 4, \"FakePolarPoint\");\n      let mm = MarkCircle_FakePolarPoint.pos;\n      mm[0] = closerIntersection[0];\n      mm[1] = closerIntersection[1];\n      mm[2] = closerIntersection[2];\n      MarkCircle_FakePolarPoint.pos = mm;\n      console.log(\"FakePolarPoint circle coordinates:\" + mm);\n\n      const AzAlt_FakePolarPoint = this.getCiecleAzAlt(MarkCircle_FakePolarPoint);\n\n      console.log(\"Fake Polar Point AzAlt:\", AzAlt_FakePolarPoint.Az_degree, ',', AzAlt_FakePolarPoint.Alt_degree);\n\n      this.Circles.push(MarkCircle_FakePolarPoint);\n\n      let AzAlt_PolarPoint = {\n        Az_degree: 0,\n        Alt_degree: this.PolarPoint_Altitude\n      };\n\n      // console.log(\"Real Polar Point AzAlt:\", AzAlt_PolarPoint.Az_degree, ',', AzAlt_PolarPoint.Alt_degree);\n      this.SendConsoleLogMsg('Real Polar Point AzAlt:' + AzAlt_PolarPoint.Az_degree + ',' + AzAlt_PolarPoint.Alt_degree, 'info');\n      // console.log(\"Last Point AzAlt:\", this.LastPoint_AzAlt.Az_degree, this.LastPoint_AzAlt.Alt_degree);\n      this.SendConsoleLogMsg('Last Point AzAlt:' + this.LastPoint_AzAlt.Az_degree + ',' + this.LastPoint_AzAlt.Alt_degree, 'info');\n\n      ////////////////////////////////////////////////\n\n      // // 将球坐标转换为笛卡尔坐标\n      // let fakePolarPoint = this.sphericalToCartesian(AzAlt_FakePolarPoint.Az_degree, AzAlt_FakePolarPoint.Alt_degree);\n      // let polarPoint = this.sphericalToCartesian(AzAlt_PolarPoint.Az_degree, AzAlt_PolarPoint.Alt_degree);\n      // let lastPoint = this.sphericalToCartesian(this.LastPoint_AzAlt.Az_degree, this.LastPoint_AzAlt.Alt_degree);\n\n      // // 计算旋转四元数\n      // let quaternion = this.computeQuaternion(fakePolarPoint, polarPoint);\n\n      // // 应用旋转\n      // let fourthPoint = this.applyQuaternion(lastPoint, quaternion);\n\n      // // 将结果转换回球坐标\n      // let fourthPointAzAlt = this.cartesianToSpherical(fourthPoint);\n      // console.log(\"Fourth Point AzAlt:\", fourthPointAzAlt.Az_degree, ',', fourthPointAzAlt.Alt_degree);\n\n      ////////////////////////////////////////////////\n\n      // 计算角度差值，考虑角度的循环性质\n      function calculateAngleDifference(angle1, angle2) {\n        let difference = angle2 - angle1;\n        while (difference > 180) difference -= 360;\n        while (difference < -180) difference += 360;\n        return difference;\n      }\n\n      let azimuthDifference = calculateAngleDifference(AzAlt_FakePolarPoint.Az_degree, AzAlt_PolarPoint.Az_degree);\n      let altitudeDifference = AzAlt_PolarPoint.Alt_degree - AzAlt_FakePolarPoint.Alt_degree;\n\n      // 应用差值到LastPoint\n      let fourthPointAzAlt = {\n        Az_degree: this.LastPoint_AzAlt.Az_degree + azimuthDifference,\n        Alt_degree: this.LastPoint_AzAlt.Alt_degree + altitudeDifference\n      };\n\n      // 确保方位角在0到360度之间\n      fourthPointAzAlt.Az_degree = (fourthPointAzAlt.Az_degree + 360) % 360;\n\n      // 确保高度角在-90到90度之间\n      fourthPointAzAlt.Alt_degree = Math.max(Math.min(fourthPointAzAlt.Alt_degree, 90), -90);\n\n      console.log(\"Fourth Point AzAlt:\", fourthPointAzAlt.Az_degree, ',', fourthPointAzAlt.Alt_degree);\n\n      this.$bus.$emit('ShowAzAltText', azimuthDifference, altitudeDifference, fourthPointAzAlt.Az_degree, fourthPointAzAlt.Alt_degree);\n\n      ////////////////////////////////////////////////\n\n      // 将角度转换为弧度\n      function degreesToRadians(degrees) {\n        return degrees * Math.PI / 180;\n      }\n\n      // 将球坐标转换为笛卡尔坐标\n      function sphericalToCartesian(azimuth, altitude) {\n        let az = degreesToRadians(azimuth);\n        let alt = degreesToRadians(altitude);\n        let x = Math.cos(alt) * Math.cos(az);\n        let y = Math.cos(alt) * Math.sin(az);\n        let z = Math.sin(alt);\n        return { x: x, y: y, z: z };\n      }\n\n      // 将第四个点转换为笛卡尔坐标\n      let fourthPointCartesian = sphericalToCartesian(fourthPointAzAlt.Az_degree, fourthPointAzAlt.Alt_degree);\n      console.log(\"Fourth Point Cartesian:\", fourthPointCartesian.x, ',', fourthPointCartesian.y, ',', fourthPointCartesian.z);\n\n      let MarkCircle_fourthPoint = this.AddMarkCircle(this.$stel, glLayer, 4, \"Target Point\");\n      mm = MarkCircle_fourthPoint.pos;\n      mm[0] = fourthPointCartesian.x;\n      mm[1] = fourthPointCartesian.y;\n      mm[2] = fourthPointCartesian.z;\n      MarkCircle_fourthPoint.pos = mm;\n      MarkCircle_fourthPoint.color = [1, 0, 0, 0.25];\n\n      this.Circles.push(MarkCircle_fourthPoint);\n\n      // 清空列表，准备下次计算\n      this.CartesianList = [];\n      this.MarkCircleNum = 0;\n    },\n\n    // 将角度转换为弧度\n    degreesToRadians(degrees) {\n      return degrees * Math.PI / 180;\n    },\n\n    // 将球坐标转换为笛卡尔坐标\n    sphericalToCartesian(azimuth, altitude) {\n      let az = this.degreesToRadians(azimuth);\n      let alt = this.degreesToRadians(altitude);\n      let x = Math.cos(alt) * Math.cos(az);\n      let y = Math.cos(alt) * Math.sin(az);\n      let z = Math.sin(alt);\n      return { x: x, y: y, z: z };\n    },\n\n    // 计算旋转四元数\n    computeQuaternion(from, to) {\n      let w = from.x * to.x + from.y * to.y + from.z * to.z + 1;\n      let x = from.y * to.z - from.z * to.y;\n      let y = from.z * to.x - from.x * to.z;\n      let z = from.x * to.y - from.y * to.x;\n\n      let norm = Math.sqrt(w * w + x * x + y * y + z * z);\n      return { w: w / norm, x: x / norm, y: y / norm, z: z / norm };\n    },\n\n    // 应用四元数旋转\n    applyQuaternion(point, quat) {\n      let x = quat.w * quat.w * point.x + 2 * quat.y * quat.w * point.z - 2 * quat.z * quat.w * point.y + quat.x * quat.x * point.x + 2 * quat.y * quat.x * point.y + 2 * quat.z * quat.x * point.z - quat.z * quat.z * point.x - quat.y * quat.y * point.x;\n      let y = 2 * quat.x * quat.y * point.x + quat.y * quat.y * point.y + 2 * quat.z * quat.y * point.z + 2 * quat.w * quat.z * point.x - quat.z * quat.z * point.y + quat.w * quat.w * point.y - 2 * quat.x * quat.w * point.z - quat.x * quat.x * point.y;\n      let z = 2 * quat.x * quat.z * point.x + 2 * quat.y * quat.z * point.y + quat.z * quat.z * point.z - 2 * quat.w * quat.y * point.x - quat.y * quat.y * point.z + 2 * quat.w * quat.x * point.y - quat.x * quat.x * point.z + quat.w * quat.w * point.z;\n      return { x: x, y: y, z: z };\n    },\n\n    // 将笛卡尔坐标转换回球坐标\n    cartesianToSpherical(cartesian) {\n      let r = Math.sqrt(cartesian.x ** 2 + cartesian.y ** 2 + cartesian.z ** 2);\n      let azimuth = Math.atan2(cartesian.y, cartesian.x);\n      let altitude = Math.asin(cartesian.z / r);\n      return {\n        Az_degree: azimuth * 180 / Math.PI,\n        Alt_degree: altitude * 180 / Math.PI\n      };\n    },\n\n    SolveFovMark(RaDec) {\n      console.log('RaDec[4]:', RaDec);\n\n      let rectangle = this.AddMarkRectangle(this.$stel, glLayer, RaDec);\n\n      this.Circles.push(rectangle);\n\n    },\n\n    CalibratePolarAxis() {\n      this.$bus.$emit('CalibratePolarAxisMode');\n      // this.$bus.$emit('AppSendMessage', 'Vue_Command', 'StartLoopCapture');\n      this.nav = false;\n    },\n\n    RecalibratePolarAxis() {\n      // 清空列表，准备下次计算\n      this.CartesianList = [];\n      this.MarkCircleNum = 0;\n      this.RemoveAllCircles();\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ClearSloveResultList');\n    },\n\n    ShowConfirmDialog(Title, Text, ToDo) {\n      // window.location.reload();\n      this.nav = false;\n      this.$bus.$emit('ShowConfirmDialog', Title, Text, ToDo);\n    },\n\n    decrement(item) {\n      console.log('decrement:', item.value);\n      if (item.value > item.inputMin) {\n        item.value -= item.inputStep;\n      }\n    },\n\n    increment(item) {\n      console.log('increment:', item.value);\n      if (item.value < item.inputMax) {\n        item.value += item.inputStep;\n      }\n    },\n\n    PolarAxisMode(bool) {\n      this.isPolarAxisMode = bool;\n    },\n\n    handleGuiderCanvasClick(event) {\n      const canvas = this.$refs.guiderCanvas;\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left; // 点击坐标X\n      const y = event.clientY - rect.top;  // 点击坐标Y\n      console.log(`Clicked at: (${x}, ${y})`);\n      const CanvasWidth = window.innerWidth;\n      const CanvasHeight = window.innerHeight;\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderCanvasClick:' + CanvasWidth + ':' + CanvasHeight + ':' + x + ':' + y);\n    },\n    connectDriver() {\n      this.isConnecting = true;\n      // this.isOpenDevicePage = false;\n      this.startLoading();\n      const DeviceType = this.CurrentDriverType;\n      for (const device of this.devices) {\n        if (device.driverType === DeviceType && device.isConnected == false) {\n          const DriverName = device.driverName;\n          if (DriverName == '') {\n            this.SendConsoleLogMsg('No driver selected', 'warning');\n            this.isConnecting = false;\n            return;\n          }\n          this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConnectDriver:' + DriverName + ':' + DeviceType);\n          this.SendConsoleLogMsg('Start Connecting driver:' + DeviceType + ' ' + DriverName, 'info');\n          return;\n        }\n      }\n    },\n    connectDriverSuccess(devicetype) {\n      console.log('connectDriverSuccess:', devicetype);\n      this.SendConsoleLogMsg(\"connectDriverSuccess:\" + devicetype, 'info');\n      this.isConnecting = false;\n      if (this.drawer_2 == true) {\n        this.drawer_2 = false\n      }\n\n      this.stopLoading();\n    },\n    connectDriverFailed(message) {\n      console.log('connectDriverFailed:', message);\n      this.SendConsoleLogMsg(\"connectDriverFailed:\" + message, 'error');\n      this.isConnecting = false;\n      this.stopLoading();\n    },\n    disconnectDriver() {\n      const DeviceType = this.CurrentDriverType;\n      for (const device of this.devices) {\n        if (device.driverType === DeviceType && device.isConnected) {\n          this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DisconnectDevice:' + device.device + \":\" + DeviceType);\n        }\n      }\n    },\n    disconnectDriversuccess(devicetype) {\n      console.log('disconnectDevicesuccess:', devicetype);\n      this.drawer_2 = false\n      if (devicetype == \"all\") {\n        this.sendMessage('Vue_Command', 'disconnectAllDevice');\n        this.SendConsoleLogMsg('Disconnect All Device', 'info');\n        this.haveDeviceConnect = false;\n        this.$bus.$emit('MainCameraConnected', 0);\n        this.$bus.$emit('MountConnected', 0);\n        this.$bus.$emit('CFWConnected', 0);\n        this.$bus.$emit('GuiderConnected', 0);\n        this.claerDeviceList();\n        this.$bus.$emit('deleteDeviceTypeAllocationList', 'all');\n        return;\n      };\n\n      for (const device of this.devices) {\n        if (device.driverType === devicetype && device.isConnected) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n      for (const device of this.ToBeConnectDevice) {\n        if (device.driverType === devicetype) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n\n      this.$bus.$emit('deleteDeviceTypeAllocationList', devicetype);\n      if (devicetype == \"MainCamera\") {\n        this.$bus.$emit('MainCameraConnected', 0);\n      } else if (devicetype == \"Mount\") {\n        this.$bus.$emit('MountConnected', 0);\n      } else if (devicetype == \"CFW\") {\n        this.$bus.$emit('CFWConnected', 0);\n      } else if (devicetype == \"Guider\") {\n        this.$bus.$emit('GuiderConnected', 0);\n      }\n    },\n\n    disconnectDriverFail(devicetype) {\n      console.log('disconnectDeviceFail:', devicetype);\n      this.drawer_2 = false\n      if (devicetype == \"all\") {\n        this.sendMessage('Vue_Command', 'disconnectAllDevice');\n        this.SendConsoleLogMsg('Disconnect All Device', 'info');\n        this.haveDeviceConnect = false;\n        this.$bus.$emit('MainCameraConnected', 0);\n        this.$bus.$emit('MountConnected', 0);\n        this.$bus.$emit('CFWConnected', 0);\n        this.$bus.$emit('GuiderConnected', 0);\n        this.claerDeviceList();\n        this.$bus.$emit('deleteDeviceTypeAllocationList', 'all');\n        return;\n      };\n\n      for (const device of this.devices) {\n        if (device.driverType === devicetype && device.isConnected) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n      for (const device of this.ToBeConnectDevice) {\n        if (device.driverType === devicetype) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n\n      this.$bus.$emit('deleteDeviceTypeAllocationList', devicetype);\n      if (devicetype == \"MainCamera\") {\n        this.$bus.$emit('MainCameraConnected', 0);\n      } else if (devicetype == \"Mount\") {\n        this.$bus.$emit('MountConnected', 0);\n      } else if (devicetype == \"CFW\") {\n        this.$bus.$emit('CFWConnected', 0);\n      } else if (devicetype == \"Guider\") {\n        this.$bus.$emit('GuiderConnected', 0);\n      }\n    },\n    loadSelectedDriverList(deviceObject) {\n      console.log('loadSelectedDriverList:', deviceObject);\n      deviceObject.forEach(device => {\n        // 假设你想要打印每个设备对象的键值对\n        for (const [driverType, driverName] of Object.entries(device)) {\n          this.devices.forEach(device => {\n            if (device.driverType === driverType && device.isConnected == false) {\n              device.device = driverName;\n              device.driverName = driverName;\n            }\n          });\n        }\n      });\n    },\n    loadBindDeviceList(deviceObject) {\n      console.log('loadBindDeviceList:', deviceObject);\n      this.$bus.$emit('loadBindDeviceList', deviceObject);\n\n    },\n    loadBindDeviceTypeList(deviceTypeObject) {\n      console.log('loadBindDeviceTypeList:', deviceTypeObject);\n      this.$bus.$emit('loadBindDeviceTypeList', deviceTypeObject);\n      deviceTypeObject.forEach(deviceType => {\n        const { Type, DeviceName, DriverName, isbind } = deviceType;\n        this.updateDevicesConnect(Type, DeviceName, DriverName, isbind);\n      });\n    },\n    updateSelectedDriver(driverType) {\n\n      this.selectedDriver = null;\n      this.devices.forEach(device => {\n        if (device.driverType === driverType) {\n          this.selectedDriver = device.driverName\n        }\n      });\n      console.log('Current drivers:', this.selectedDriver);\n    },\n    startLoading() {\n      this.loadingDeviceSelection = true;\n    },\n    stopLoading() {\n      this.loadingDeviceSelection = false;\n    },\n    deleteDeviceAllocationList(deviceName) {\n      console.log('deleteDeviceAllocationList:', deviceName);\n      this.$bus.$emit('deleteDeviceAllocationList', deviceName);\n    },\n    UnBindingDevice(type, name, driverName) {\n      console.log('UnBindingDevice:', type, name, driverName);\n      this.updateDevicesConnect(type, name, driverName, false);\n    },\n\n    displayErrorImage() {\n      console.error(\"image is error, load errorImage.svg\");\n      const canvas = document.getElementById('mainCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n\n      image.onerror = () => {\n        console.error(\"Failed to load image from \" + image.src);\n        // 可以在这里添加备用图像或其他错误处理逻辑\n      };\n\n      // 确保ErrorImage是有效的URL\n      image.src = ErrorImage; // 请替换为实际的图像路径\n    },\n    handleError(message, location, error = null) {\n      const errorMsg = error ? `${message} at ${location}: ${error}` : `${message} at ${location}`;\n      console.error(errorMsg);\n      this.SendConsoleLogMsg(errorMsg, 'error');\n      this.displayErrorImage(); // 显示错误图像\n    },\n    showSelectdisconnectDriver(drivername) {\n      this.showDisconnectDialog = true;\n      this.currentDisconnectDriverName = drivername;\n    },\n    confirmDisconnect() {\n      this.sendMessage('Vue_Command', 'disconnectSelectDriver:' + this.currentDisconnectDriverName);\n      this.showDisconnectDialog = false;\n    },\n\n    // 主画布点击事件\n    handleMainCanvasClick(event) {\n      // this.SendConsoleLogMsg('触发鼠标点击事件:', 'info');\n      if (!this.enableMainCanvasClick || this.isDragging || this.drawImgData == null) return; // 如果画布不可点击，则不处理点击事件\n      // console.log('触发鼠标点击事件:', event);\n      const canvas = this.$refs.mainCanvas;\n      if (!canvas) return; // 确保 canvas 元素存在\n      const rect = canvas.getBoundingClientRect();// 获取 canvas 元素的边界矩形\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      console.log('Mouse clicked at:', x, y);\n      if (!this.isFocusLoopShooting) {\n        this.ROI_x = (x / window.innerWidth * this.visibleWidth - this.RedBoxSideLength / 2) + this.visibleX - this.visibleWidth / 2;  // 计算ROI的x坐标\n        this.ROI_y = (y / window.innerHeight * this.visibleHeight - this.RedBoxSideLength / 2) + this.visibleY - this.visibleHeight / 2; // 计算ROI的y坐标\n        // this.$bus.$emit('setRedBoxPosition', x, y, this.ROI_x, this.ROI_y);\n      } else {\n        this.selectStarX = (x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2 - this.ROI_x; // 计算选择位置的x坐标\n        this.selectStarY = (y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2 - this.ROI_y; // 计算选择位置的y坐标\n\n        if (this.selectStarX >= 0 && this.selectStarX < this.RedBoxSideLength &&\n          this.selectStarY >= 0 && this.selectStarY < this.RedBoxSideLength) {\n          this.SendConsoleLogMsg('Select Star is in ROI', 'info');\n        } else {\n          this.SendConsoleLogMsg('Select Star is not in ROI', 'error');\n          this.selectStarX = -1;\n          this.selectStarY = -1;\n        }\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendSelectStars:' + this.selectStarX + ':' + this.selectStarY);\n      }\n      this.drawImageData();\n    },\n\n    // 主画布拖动\n    handleMouseDown(event) {\n      // this.SendConsoleLogMsg('触发鼠标按下事件:', 'info');\n      if (this.isDragging || this.drawImgData == null) return;\n      this.isDragging = true;\n      this.startX = event.clientX;\n      this.startY = event.clientY;\n      this.currentX = event.clientX;\n      this.currentY = event.clientY;\n\n      // 设置一个定时器，每100ms执行一次鼠标移动的逻辑\n      this.moveIntervalId = setInterval(() => {\n        if (!this.isDragging) return;\n\n        const dx = this.startX - this.currentX;\n        const dy = this.startY - this.currentY;\n        if (isNaN(dx) || isNaN(dy)) {\n          return;\n        }\n        let newVisibleX = this.visibleX + dx / window.innerWidth * this.visibleWidth;\n        let newVisibleY = this.visibleY + dy / window.innerHeight * this.visibleHeight;\n        if (newVisibleX < 0) {\n          newVisibleX = 0;\n        }\n        if (newVisibleY < 0) {\n          newVisibleY = 0;\n        }\n        if (newVisibleX > this.mainCameraSizeX) {\n          newVisibleX = this.mainCameraSizeX;\n        }\n        if (newVisibleY > this.mainCameraSizeY) {\n          newVisibleY = this.mainCameraSizeY;\n        }\n\n        this.visibleX = newVisibleX;\n        this.visibleY = newVisibleY;\n\n        this.startX = this.currentX;\n        this.startY = this.currentY;\n        this.drawImageData();\n        // this.SendConsoleLogMsg('拖动事件,拖动距离:' + dx + ',' + dy, 'info');\n      }, 100);\n    },\n    handleMouseMove(event) {\n      // this.SendConsoleLogMsg('触发鼠标移动事件:', 'info');\n      if (!this.isDragging) return;\n      this.currentX = event.clientX;\n      this.currentY = event.clientY;\n    },\n    handleMouseUp(event) {\n      // this.SendConsoleLogMsg('触发鼠标抬起事件:', 'info');\n      this.isDragging = false;\n\n      // 清除定时器\n      clearInterval(this.moveIntervalId);\n      this.moveIntervalId = null;\n    },\n    handleWheel(event) {\n      // this.SendConsoleLogMsg('触发鼠标滚轮事件:', 'info');\n      if (this.drawImgData == null) return;\n      const scaleChange = event.deltaY > 0 ? 0.1 : -0.1; // 根据滚轮的滚动方向，计算缩放比例的变化量\n      let newScale = this.scale + scaleChange; // 更新缩放比例\n      if (newScale < 0.1) {\n        newScale = 0.1;\n      }\n      if (newScale > 1) {\n        newScale = 1;\n      }\n\n      // 如果已经有一个待执行的缩放操作，则直接返回\n      if (this.pendingScaleChange) {\n        return;\n      }\n\n      // 标记有一个待执行的缩放操作\n      this.pendingScaleChange = true;\n\n      // 使用 requestAnimationFrame 来控制缩放操作的执行频率\n      requestAnimationFrame(() => {\n        if (newScale != this.scale) {\n          this.scale = newScale; // 更新缩放比例\n          this.$bus.$emit('setScale', this.scale);\n          this.drawImageData();\n          this.SendConsoleLogMsg('缩放比例变化,缩放比例:' + newScale, 'info');\n        } else {\n          this.SendConsoleLogMsg('缩放比例没有变化,缩放比例:' + this.scale, 'info');\n        }\n        this.pendingScaleChange = false; // 清除待执行的缩放操作标记\n      });\n    },\n\n    handleMainCanvasTouch(event) {\n      // this.SendConsoleLogMsg('触发触摸事件:', 'info');\n      if (!this.enableMainCanvasClick || this.isDragging || this.drawImgData == null) return; // 如果画布不可点击，则不处理点击事件\n      // console.log('触发触摸事件:', event);\n      if (!this.enableMainCanvasClick || !event.touches || event.touches.length === 0) return;\n      const canvas = this.$refs.mainCanvas;\n      if (!canvas) return; // 确保 canvas 元素存在\n      const touch = event.touches[0];\n      const rect = canvas.getBoundingClientRect();// 获取 canvas 元素的边界矩形\n      const x = touch.clientX - rect.left;\n      const y = touch.clientY - rect.top;\n      console.log('Touch at:', x, y);\n      event.preventDefault();// 阻止默认事件，如页面滚动\n      if (!this.isFocusLoopShooting) {\n        this.ROI_x = (x / window.innerWidth * this.visibleWidth - this.RedBoxSideLength / 2) + this.visibleX - this.visibleWidth / 2 - this.ROI_x;  // 计算ROI的x坐标\n        this.ROI_y = (y / window.innerHeight * this.visibleHeight - this.RedBoxSideLength / 2) + this.visibleY - this.visibleHeight / 2 - this.ROI_y; // 计算ROI的y坐标\n        // this.$bus.$emit('setRedBoxPosition', x, y, this.ROI_x, this.ROI_y);\n      } else {\n        this.selectStarX = (x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2 - this.ROI_x; // 计算选择位置的x坐标\n        this.selectStarY = (y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2 - this.ROI_y; // 计算选择位置的y坐标\n\n        if (this.selectStarX >= 0 && this.selectStarX < this.RedBoxSideLength &&\n          this.selectStarY >= 0 && this.selectStarY < this.RedBoxSideLength) {\n          this.SendConsoleLogMsg('Select Star is in ROI', 'info');\n        } else {\n          this.SendConsoleLogMsg('Select Star is not in ROI', 'error');\n          this.selectStarX = -1;\n          this.selectStarY = -1;\n        }\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendSelectStars:' + this.selectStarX + ':' + this.selectStarY);\n      }\n      this.drawImageData();\n    },\n    handleTouchStart(event) {\n      if (this.drawImgData == null) return;\n      // this.SendConsoleLogMsg('触发触摸开始事件:', 'info');\n      if (event.touches.length === 1) { // 单指触摸，开始拖动\n        this.isOneTouch = true;\n        // this.SendConsoleLogMsg('触发单指触摸事件', 'info');\n        this.isDragging = true;\n        this.startTouchX[0] = event.touches[0].clientX;\n        this.startTouchY[0] = event.touches[0].clientY;\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        // 清除可能存在的双指触摸的定时器\n        if (this.zoomIntervalId) {\n          clearInterval(this.zoomIntervalId);\n          this.zoomIntervalId = null;\n        }\n\n\n        this.handleMainCanvasTouch(event);\n      } else if (event.touches.length >= 2) { // 双指触摸，开始缩放\n        this.isOneTouch = false;\n        // this.SendConsoleLogMsg('触发双指触摸事件', 'info');\n        this.isDragging = true;\n        // 计算两个触摸点之间的距离\n        const dx = this.currentTouchX[0] - this.currentTouchX[1];\n        const dy = this.currentTouchY[0] - this.currentTouchY[1];\n        this.startTouchDistance = Math.sqrt(dx * dx + dy * dy);\n        // 清除可能存在的单指触摸的定时器\n        if (this.moveIntervalId) {\n          clearInterval(this.moveIntervalId);\n          this.moveIntervalId = null;\n        }\n\n\n      } else {\n        // this.SendConsoleLogMsg('触发多指触摸事件，获取当前触摸点数量:' + event.touches.length, 'info');\n      }\n      \n    },\n\n    handleTouchMove(event) {\n      // this.SendConsoleLogMsg('触发触摸移动事件:', 'info');\n      if (!this.isDragging || this.drawImgData == null) return;\n      if (event.touches.length == 1) {\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        if (this.zoomIntervalId) {\n          clearInterval(this.zoomIntervalId);\n          this.zoomIntervalId = null;\n        }\n        if (this.moveIntervalId != null) {\n          return;\n        }\n        // 设置一个定时器，每100ms执行一次触摸移动的逻辑\n        this.moveIntervalId = setInterval(() => {\n          // console.log('执行触摸移动!');\n          if (!this.isDragging || !this.isOneTouch) return;\n\n          const dx = this.startTouchX[0] - this.currentTouchX[0];\n          const dy = this.startTouchY[0] - this.currentTouchY[0];\n          if (isNaN(dx) || isNaN(dy)) {\n            return;\n          }\n          if (dx == 0 && dy == 0) {\n            return;\n          }\n\n          let newVisibleX = this.visibleX + dx / window.innerWidth * this.visibleWidth;\n          let newVisibleY = this.visibleY + dy / window.innerHeight * this.visibleHeight;\n          if (newVisibleX < 0) {\n            newVisibleX = 0;\n          }\n          if (newVisibleY < 0) {\n            newVisibleY = 0;\n          }\n          if (newVisibleX > this.mainCameraSizeX) {\n            newVisibleX = this.mainCameraSizeX;\n          }\n          if (newVisibleY > this.mainCameraSizeY) {\n            newVisibleY = this.mainCameraSizeY;\n          }\n\n          this.visibleX = newVisibleX;\n          this.visibleY = newVisibleY;\n\n          this.startTouchX[0] = this.currentTouchX[0];\n          this.startTouchY[0] = this.currentTouchY[0];\n\n          this.drawImageData();\n        }, 100);\n\n      } else if (event.touches.length >= 2) {\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        this.currentTouchX[1] = event.touches[1].clientX;\n        this.currentTouchY[1] = event.touches[1].clientY;\n\n        // 清除可能存在的单指触摸的定时器\n        if (this.moveIntervalId) {\n          clearInterval(this.moveIntervalId);\n          this.moveIntervalId = null;\n        }\n        if (this.zoomIntervalId != null) {\n          return;\n        }\n        // 设置一个定时器，每100ms执行一次缩放逻辑\n        this.zoomIntervalId = setInterval(() => {\n          if (!this.isDragging || !this.isOneTouch) return;\n          const dx = this.currentTouchX[0] - this.currentTouchX[1];\n          const dy = this.currentTouchY[0] - this.currentTouchY[1];\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          this.SendConsoleLogMsg('距离变化 distance:' + distance, 'info');\n          if (this.startTouchDistance == 0) {\n            this.startTouchDistance = distance;\n          }\n          // 计算缩放比例的变化量\n          const scaleChange = distance / this.startTouchDistance;\n          this.SendConsoleLogMsg('距离变化比例 scaleChange:' + scaleChange, 'info');\n          let newScale = this.scale * scaleChange; // 更新缩放比例\n          if (newScale < 0.1) {\n            newScale = 0.1;\n          }\n          if (newScale > 1) {\n            newScale = 1;\n          }\n          if (newScale != this.scale) {\n            this.SendConsoleLogMsg('缩放比例变化,缩放比例:' + newScale, 'info');\n            this.scale = newScale; // 更新缩放比例\n            this.$bus.$emit('setScale', this.scale);\n            this.drawImageData();\n          } else {\n            this.SendConsoleLogMsg('缩放比例没有变化,缩放比例:' + this.scale, 'info');\n          }\n          this.startTouchDistance = distance; // 更新两个触摸点之间的距离\n        }, 100);\n      } else {\n        this.SendConsoleLogMsg('触发多指触摸事件，获取当前触摸点数量:' + event.touches.length, 'info');\n      }\n    },\n\n    handleTouchEnd(event) {\n      // this.SendConsoleLogMsg('触发触摸结束事件:', 'info');\n      this.isDragging = false; // 停止拖动\n      // 清除定时器\n      if (this.moveIntervalId) {\n        clearInterval(this.moveIntervalId);\n        this.moveIntervalId = null;\n      }\n      if (this.zoomIntervalId) {\n        clearInterval(this.zoomIntervalId);\n        this.zoomIntervalId = null;\n      }\n    },\n\n    ScaleChange(type) {\n      if (this.drawImgData == null) return;\n      if (type == '+') {\n        this.scale -= 0.1;\n      } else if (type == '-') {\n        this.scale += 0.1;\n      }\n      if (this.scale < 0.1) {\n        this.scale = 0.1;\n      }\n      if (this.scale > 1) {\n        this.scale = 1;\n      }\n      this.$bus.$emit('setScale', this.scale);\n      this.drawImageData();\n    },\n\n    // 显示ROI图像\n    showRoiImage(fileName, destX, destY) {\n      if (this.RedBoxSideLength == 0 || this.RedBoxSideLength == null) {\n        this.SendConsoleLogMsg('RedBoxSideLength is 0 or null', 'error');\n        return;\n      }\n      if (this.isProcessingImage) {\n        this.SendConsoleLogMsg('Image is being transmitted, current processing is slow, skipping one frame.', 'warning');\n        return;\n      }\n      this.isProcessingImage = true;\n      const imagePath = 'img/' + fileName;\n      // 创建一个AbortController实例来取消fetch请求\n      const fetchController = new AbortController();\n      const fetchSignal = fetchController.signal;\n\n      // 使用 fetch API 获取二进制数据\n      fetch(imagePath, { cache: 'no-store', signal: fetchSignal })\n        .then(response => response.arrayBuffer())\n        .then(buffer => {\n          let src, originalImg8, imgData, awbImg;\n          try {\n            const uint16Array = new Uint16Array(buffer);\n            // 创建一个空的 Mat 对象\n            src = new cv.Mat(this.RedBoxSideLength, this.RedBoxSideLength, cv.CV_16UC1);\n            src.data16U.set(uint16Array);\n            cv.cvtColor(src, src, this.lastImageProcessParams.cvmode);\n            originalImg8 = this.Bit16To8_Stretch(src, this.lastImageProcessParams.B, this.lastImageProcessParams.W);\n\n            src.delete(); // 释放原始的 Mat 对象\n            src = null; // 添加这行代码，确保 src 对象被清理\n\n            awbImg = this.ImageSoftAWB(originalImg8, this.lastImageProcessParams.gainR, this.lastImageProcessParams.gainB, this.lastImageProcessParams.offset);\n            originalImg8.delete(); // 释放 Mat 对象\n            originalImg8 = null; // 添加这行代码，确保 originalImg8 对象被清理\n\n            // 将 Mat 对象转换回 ImageData 对象\n            imgData = new ImageData(new Uint8ClampedArray(awbImg.data), awbImg.cols, awbImg.rows);\n            awbImg.delete(); // 释放 Mat 对象\n            awbImg = null; // 添加这行代码，确保 awbImg 对象被清理\n            // 在指定位置开始绘制图像\n            this.bufferCtx.clearRect(this.ROI_x, this.ROI_y, this.RedBoxSideLength, this.RedBoxSideLength);\n            this.bufferCtx.putImageData(imgData, this.ROI_x, this.ROI_y);\n            // this.SendConsoleLogMsg('绘制一次ROI数据:' + fileName + ':' + this.ROI_x + ':' + this.ROI_y, 'info');\n            this.drawImageData();\n            this.focuserPictureFileName = fileName;\n\n          } catch (error) {\n            console.error(`处理图像失败: ${imagePath}`, error);\n          } finally {\n            // 确保 Mat 对象和 ImageData 对象被删除\n            if (src && !src.isDeleted()) {\n              src.delete();\n              src = null; // 添加这行代码，确保 src 对象被清理\n            }\n            if (originalImg8 && !originalImg8.isDeleted()) {\n              originalImg8.delete();\n              originalImg8 = null; // 添加这行代码，确保 originalImg8 对象被清理\n            }\n            if (awbImg && !awbImg.isDeleted()) {\n              awbImg.delete();\n              awbImg = null; // 添加这行代码，确保 awbImg 对象被清理\n            }\n            // 确保 buffer 被清理\n            buffer = null;\n            this.isProcessingImage = false;\n          }\n        })\n        .catch(error => {\n          if (error.name === 'AbortError') {\n            console.log('Fetch request cancelled');\n          } else {\n            console.error(`获取图像失败: ${imagePath}`, error);\n          }\n          this.isProcessingImage = false;\n        });\n\n      // 在组件卸载时取消 fetch 请求\n      this.$once('hook:beforeDestroy', () => {\n        fetchController.abort();\n      });\n    },\n    setRedBoxState(length, x, y) {\n      this.SendConsoleLogMsg('setRedBoxState:' + length + ',' + x + ',' + y, 'info');\n      this.$bus.$emit('setRedBoxPosition', x, y);\n      this.$bus.$emit('setRedBoxSideLength', length);\n    },\n    setFocuserState(state) {\n      if (state === 'selectstars') {\n        this.isFocusLoopShooting = true;\n      } else {\n        this.isFocusLoopShooting = false;\n      }\n    },\n    setShowSelectStar(state) {\n      this.showSelectStar = state;\n    },\n    RedBoxSizeChange(length) {\n      this.RedBoxSideLength = parseInt(length);\n    },\n    setMainCameraParameters(parameters) {\n      for (const parameter in parameters) {\n        const item = this.MainCameraConfigItems.find(item => item.label === parameter);\n        if (item) {\n          item.value = parameters[parameter];\n        } else {\n          if (parameter == 'RedBoxSize') {\n            this.$bus.$emit('setRedBoxSideLength', parameters[parameter]);\n          } else {\n            console.error(`未找到参数：${parameter}`);\n          }\n        }\n      }\n      this.confirmConfiguration(this.MainCameraConfigItems);\n    },\n  },\n  computed: {\n    nav: {\n      get: function () {\n        console.log('nav:', this.$store.state.showNavigationDrawer);\n        return this.$store.state.showNavigationDrawer\n      },\n      set: function (v) {\n        if (this.$store.state.showNavigationDrawer !== v) {\n          console.log('nav:', this.$store.state.showNavigationDrawer);\n          this.$store.commit('toggleBool', 'showNavigationDrawer')\n        }\n      }\n    },\n    storeCurrentLocation: function () {\n      return this.$store.state.currentLocation\n    },\n    getQTClientVersionColor() {\n      if (this.QTClientVersion === 'Not connected') {\n        return 'rgba(255, 0, 0, 0.5)'; // 红色，透明度 0.5\n      } else {\n        return 'rgba(255, 255, 255, 0.5)'; // 默认白色，透明度 0.5\n      }\n    },\n\n  },\n  watch: {\n    storeCurrentLocation: function (loc) {\n      const DD2R = Math.PI / 180\n      this.$stel.core.observer.latitude = loc.lat * DD2R\n      this.$stel.core.observer.longitude = loc.lng * DD2R\n      this.$stel.core.observer.elevation = loc.alt\n\n      // At startup, we need to wait for the location to be set before deciding which\n      // startup time to set so that it's night time.\n      if (!this.startTimeIsSet) {\n        this.$stel.core.observer.utc = swh.getTimeAfterSunset(this.$stel)\n        this.startTimeIsSet = true\n      }\n      // Init of time and date is complete\n      this.$store.commit('setValue', { varName: 'initComplete', newValue: true })\n    },\n    $route: function () {\n      // react to route changes...\n      this.setStateFromQueryArgs()\n    },\n    CurrentDriverType(newVal) {\n      // 当 CurrentDriverType 变化时，更新 selectedDriver\n      this.updateSelectedDriver(newVal);\n    }\n  },\n  mounted: function () {\n    let that = this\n\n    this.getLocationHostName();\n\n    this.loadImageToCanvasMainCamera();\n    this.loadImageToCanvasGuiderCamera();\n\n    this.initCanvas();\n    this.addEventListeners();\n\n    for (const i in this.$stellariumWebPlugins()) {\n      const plugin = this.$stellariumWebPlugins()[i]\n      if (plugin.onAppMounted) {\n        plugin.onAppMounted(that)\n      }\n    }\n\n    this.connect();\n    this.setupNetworkStatusListener();\n\n    // 使用 Promise 检查 OpenCV.js 是否加载完成\n    this.loadOpenCv().then(() => {\n      if (!this._isDestroyed) { // 检查组件是否已销毁\n        console.log('OpenCV.js is ready');\n        this.onCvReady();  // 调用 OpenCV 准备好的回调\n      }\n    }).catch(error => {\n      console.error('Error loading OpenCV.js:', error);\n    });\n\n    // const script = document.createElement('script');\n    // script.src = 'https://docs.opencv.org/4.5.5/opencv.js';\n    // script.async = true;\n    // script.onload = () => this.onCvReady();\n    // document.head.appendChild(script);\n\n    import('@/assets/js/stellarium-web-engine.wasm').then(f => {\n      if (!this._isDestroyed) { // 再次检查组件是否已销毁\n        // Initialize the StelWebEngine viewer singleton\n        // After this call, the StelWebEngine state will always be available in vuex store\n        // in the $store.stel object in a reactive way (useful for vue components).\n        // To modify the state of the StelWebEngine, it's enough to call/set values directly on the $stel object\n        try {\n          swh.initStelWebEngine(that.$store, f.default, that.$refs.stelCanvas, function () {\n            // Start auto location detection (even if we don't use it)\n            swh.getGeolocation().then(p => swh.geoCodePosition(p, that)).then((loc) => {\n              that.$store.commit('setAutoDetectedLocation', loc)\n            }, (error) => { console.log(error) })\n\n            that.$stel.setFont('regular', process.env.BASE_URL + 'fonts/Roboto-Regular.ttf', 1.38)\n            that.$stel.setFont('bold', process.env.BASE_URL + 'fonts/Roboto-Bold.ttf', 1.38)\n            that.$stel.core.constellations.show_only_pointed = false\n\n            that.setStateFromQueryArgs()\n            that.guiComponent = 'Gui'\n            for (const i in that.$stellariumWebPlugins()) {\n              const plugin = that.$stellariumWebPlugins()[i]\n              if (plugin.onEngineReady) {\n                plugin.onEngineReady(that)\n              }\n            }\n\n            if (!that.dataSourceInitDone) {\n              // Set all default data sources\n              const core = that.$stel.core\n              core.stars.addDataSource({ url: process.env.BASE_URL + 'skydata/stars' })\n\n              // Allow to specify a custom path for sky culture data\n              if (that.$route.query.sc) {\n                const key = that.$route.query.sc.substring(that.$route.query.sc.lastIndexOf('/') + 1)\n                core.skycultures.addDataSource({ url: that.$route.query.sc, key: key })\n                core.skycultures.current_id = key\n              } else {\n                core.skycultures.addDataSource({ url: process.env.BASE_URL + 'skydata/skycultures/western', key: 'western' })\n              }\n\n              core.dsos.addDataSource({ url: process.env.BASE_URL + 'skydata/dso' })\n              core.landscapes.addDataSource({ url: process.env.BASE_URL + 'skydata/landscapes/guereins', key: 'guereins' })\n              core.milkyway.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/milkyway' })\n              // core.dss.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/dss' })\n              core.minor_planets.addDataSource({ url: process.env.BASE_URL + 'skydata/mpcorb.dat', key: 'mpc_asteroids' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/moon', key: 'moon' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/sun', key: 'sun' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/moon', key: 'default' })\n              core.comets.addDataSource({ url: process.env.BASE_URL + 'skydata/CometEls.txt', key: 'mpc_comets' })\n              core.satellites.addDataSource({ url: process.env.BASE_URL + 'skydata/tle_satellite.jsonl.gz', key: 'jsonl/sat' })\n\n              // Mount Pointing\n              glStel = that.setGloabalStel(that.$stel);\n              glLayer = that.setGlobalLayer(that.$stel);\n              glTestCircle = that.testAddCircle(that.$stel, glLayer);\n\n            }\n          })\n        } catch (e) {\n          this.$store.commit('setValue', { varName: 'wasmSupport', newValue: false })\n        }\n      }\n    });\n\n  }\n}\n</script>\n\n<style>\nbody {\n  background-color: black;\n  -webkit-touch-callout: none;\n  /* iOS */\n  -webkit-user-select: none;\n  /* 所有WebKit浏览器 */\n  user-select: none;\n}\n\na {\n  color: #82b1ff;\n}\n\na:link {\n  text-decoration-line: none;\n}\n\n.divider_menu {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\nhtml {\n  overflow-y: visible;\n}\n\nhtml,\nbody,\n#app {\n  overflow-y: visible !important;\n  overflow-x: visible;\n  position: fixed !important;\n  width: 100%;\n  height: 100%;\n  padding: 0 !important;\n  font-size: 10px;\n}\n\n.fullscreen {\n  overflow-y: hidden;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  padding: 0 !important;\n}\n\n.click-through {\n  pointer-events: none;\n}\n\n.get-click {\n  pointer-events: all;\n}\n\n.dialog {\n  background: transparent;\n}\n\n.menu__content {\n  background-color: transparent !important;\n}\n\n#stel {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n}\n\n#stel-canvas {\n  width: 100%;\n  height: 100%;\n}\n\n#mainCamera-canvas {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n#guiderCamera-canvas {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.right_panel {\n  padding-right: 400px;\n}\n\n.v-btn {\n  margin-left: 8px;\n  margin-right: 8px;\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n\n.v-application--wrap {\n  min-height: 100% !important;\n}\n\n\n.my-custom-button {\n  background-color: #4CAF50;\n  /* 绿色背景 */\n  color: white;\n  /* 白色文字 */\n  padding: 15px 32px;\n  /* 内边距 */\n  text-align: center;\n  /* 文字居中 */\n  text-decoration: none;\n  /* 无文本装饰 */\n  display: inline-block;\n  /* 行内块显示 */\n  font-size: 16px;\n  /* 字体大小 */\n  margin: 4px 2px;\n  /* 外边距 */\n  cursor: pointer;\n  /* 鼠标样式 */\n  border: none;\n  /* 无边框 */\n}\n\n.connected-device {\n  color: #4dc251;\n}\n\n.btn-confirm {\n  width: 60px;\n  height: 30px;\n  background-color: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n}\n\n.btn-slider {\n  width: 20px;\n  height: 20px;\n  background-color: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n}\n\n.btn-confirm:active,\n.btn-slider:active {\n  transform: scale(0.95);\n  background-color: rgba(255, 255, 255, 0.5);\n}\n</style>\n"]}]}