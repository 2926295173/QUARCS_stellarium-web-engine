{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Histogram.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Histogram.vue","mtime":1739424155000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGVjaGFydHMgZnJvbSAnZWNoYXJ0cyc7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0JhckNoYXJ0JywKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY29udGFpbmVyTWF4V2lkdGg6IDE5MCwKICAgICAgYmFyRGF0YTogW10sICAvLyDnpLrkvovmlbDmja4KICAgICAgeEF4aXNfbWluOiAwLAogICAgICB4QXhpc19tYXg6IDI1NSwgCgogICAgICBoaXN0b2dyYW1fbWluOiAwLAogICAgICBoaXN0b2dyYW1fbWF4OiAyNTUsCiAgICB9OwogIH0sCiAgbW91bnRlZCgpIHsKCiAgfSwKICBjcmVhdGVkKCkgewogICAgLy8gdGhpcy4kYnVzLiRvbignSW5pdENoYXJ0JywgdGhpcy5zZXRNYXhXaWR0aCk7CiAgICB0aGlzLiRidXMuJG9uKCdzaG93SGlzdG9ncmFtJywgdGhpcy5hZGREYXRhVG9DaGFydCk7CiAgICB0aGlzLiRidXMuJG9uKCd1cGRhdGVIaXN0b2dyYW1XaWR0aCcsIHRoaXMuaW5pdENoYXJ0KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXRDaGFydChXaWR0aCkgewogICAgICB0aGlzLmNvbnRhaW5lck1heFdpZHRoID0gV2lkdGggLSAxMDsKICAgICAgY29uc3QgY2hhcnREb20gPSB0aGlzLiRyZWZzLmJhcmNoYXJ0OwogICAgICBjaGFydERvbS5zdHlsZS53aWR0aCA9IHRoaXMuY29udGFpbmVyTWF4V2lkdGggKyAncHgnOwogICAgICB0aGlzLm15Q2hhcnQgPSBlY2hhcnRzLmluaXQoY2hhcnREb20pOwogICAgICB0aGlzLnJlbmRlckNoYXJ0KHRoaXMueEF4aXNfbWluLCB0aGlzLnhBeGlzX21heCk7CiAgICB9LAoKICAgIHJlbmRlckNoYXJ0KHhfbWluLCB4X21heCkgewogICAgICBjb25zdCB5QXhpc01heCA9IE1hdGgubWF4KC4uLnRoaXMuYmFyRGF0YS5tYXAoaXRlbSA9PiBpdGVtWzFdKSk7ICAvLyDojrflj5YgeSDovbTnmoTmnIDlpKflgLwKICAgICAgY29uc3Qgb3B0aW9uID0gewogICAgICAgIGdyaWQ6IHsKICAgICAgICAgIGxlZnQ6ICctMSUnLAogICAgICAgICAgcmlnaHQ6ICcxJScsCiAgICAgICAgICBib3R0b206ICcwJScsCiAgICAgICAgICB0b3A6ICcwJScsCiAgICAgICAgICBjb250YWluTGFiZWw6IHRydWUKICAgICAgICB9LAogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICB0eXBlOiAndmFsdWUnLAogICAgICAgICAgbWluOiB4X21pbiwKICAgICAgICAgIG1heDogeF9tYXgsCiAgICAgICAgICBheGlzTGluZTogewogICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgYXhpc0xhYmVsOiBudWxsLAogICAgICAgICAgc3BsaXRMaW5lOiB7ICAvLyDpmpDol48geCDovbTnmoTnvZHmoLznur8KICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHlBeGlzOiB7CiAgICAgICAgICB0eXBlOiAndmFsdWUnLAogICAgICAgICAgbWF4OiB5QXhpc01heCwgIC8vIOS9v+eUqOWKqOaAgeiOt+WPlueahCB5IOi9tOacgOWkp+WAvAogICAgICAgICAgYXhpc0xpbmU6IHsKICAgICAgICAgICAgbGluZVN0eWxlOiB7CiAgICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIGF4aXNMYWJlbDogbnVsbCwKICAgICAgICAgIHNwbGl0TGluZTogeyAgLy8g6ZqQ6JePIHgg6L2055qE572R5qC857q/CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFtdCiAgICAgIH07CgogICAgICAvLyDkuLrmr4/kuKrpgJrpgZPliJvlu7rlr7nlupTnmoQgc2VyaWVzCiAgICAgIGZvciAobGV0IGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgMzsgY2hhbm5lbCsrKSB7CiAgICAgICAgb3B0aW9uLnNlcmllcy5wdXNoKHsKICAgICAgICAgIGRhdGE6IHRoaXMuYmFyRGF0YVtjaGFubmVsXSwgLy8g5rOo5oSP6L+Z6YeM55qE5pWw5o2u57uT5p6ECiAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgY29sb3I6IGNoYW5uZWwgPT09IDAgPyAncmdiYSgwLDEyMCwyMTIsMC43KScgOiAoY2hhbm5lbCA9PT0gMSA/ICdyZ2JhKDUxLDIxOCwxMjEsMC43KScgOiAncmdiYSgyNTUsMCwwLDAuNyknKSAvLyDmoLnmja7pgJrpgZPpgInmi6npopzoibIKICAgICAgICAgIH0sCiAgICAgICAgICBzeW1ib2xTaXplOiAwCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIC8vIOWcqOi/memHjOWPr+S7pee7p+e7rea3u+WKoOWFtuS7lumAmumBk+eahOabsue6v++8jOS5n+WPr+S7peagueaNrumcgOimgeS/ruaUueminOiJsgoKICAgICAgb3B0aW9uLnNlcmllcy5wdXNoKHsKICAgICAgICBkYXRhOiBbW3RoaXMuaGlzdG9ncmFtX21pbiwgMF0sIFt0aGlzLmhpc3RvZ3JhbV9taW4sIHlBeGlzTWF4XV0sICAvLyDmlbDmja7moLzlvI/kuLogW3gsIHldCiAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgIGxpbmVTdHlsZTogewogICAgICAgICAgY29sb3I6ICdibHVlJywgIC8vIOiuvue9rue6v+eahOminOiJsgogICAgICAgICAgdHlwZTogJ2Rhc2hlZCcsICAvLyDorr7nva7nur/nmoTnsbvlnovvvIzlj6/ku6XkuLogJ3NvbGlkJywgJ2Rhc2hlZCcsICdkb3R0ZWQnCiAgICAgICAgICB3aWR0aDogMQogICAgICAgIH0sCiAgICAgICAgc3ltYm9sU2l6ZTogMAogICAgICB9KTsKCiAgICAgIG9wdGlvbi5zZXJpZXMucHVzaCh7CiAgICAgICAgZGF0YTogW1t0aGlzLmhpc3RvZ3JhbV9tYXgsIDBdLCBbdGhpcy5oaXN0b2dyYW1fbWF4LCB5QXhpc01heF1dLAogICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgIGNvbG9yOiAncmVkJywKICAgICAgICAgIHR5cGU6ICdkYXNoZWQnLAogICAgICAgICAgd2lkdGg6IDEKICAgICAgICB9LAogICAgICAgIHN5bWJvbFNpemU6IDAKICAgICAgfSk7CgogICAgICB0aGlzLm15Q2hhcnQuc2V0T3B0aW9uKG9wdGlvbik7CiAgICB9LAogICAgCiAgICBhZGREYXRhVG9DaGFydChoaXN0b2dyYW1EYXRhKSB7CiAgICAgICAgICAgIHRoaXMuY2xlYXJCYXJEYXRhKCk7CgogICAgICAvLyDliJ3lp4vljJbmnIDlsI/lkozmnIDlpKflgLznmoTntKLlvJUKICAgICAgbGV0IGZpcnN0Tm9uWmVyb0luZGV4ID0gLTE7CiAgICAgIGxldCBsYXN0Tm9uWmVyb0luZGV4ID0gLTE7CgogICAgICAvLyDlpITnkIbkuInkuKrpgJrpgZPnmoTnm7Tmlrnlm77mlbDmja4KICAgICAgZm9yIChsZXQgY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCBoaXN0b2dyYW1EYXRhLmxlbmd0aDsgY2hhbm5lbCsrKSB7CiAgICAgICAgY29uc3QgY2hhbm5lbERhdGEgPSBoaXN0b2dyYW1EYXRhW2NoYW5uZWxdOwogICAgICAgIGNvbnN0IGNoYW5uZWxTZXJpZXNEYXRhID0gW107IC8vIOWtmOWCqOW9k+WJjemAmumBk+eahCBzZXJpZXMg5pWw5o2uCgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhbm5lbERhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHZhbHVlID0gW2ksIGNoYW5uZWxEYXRhW2ldXTsKICAgICAgICAgIGNoYW5uZWxTZXJpZXNEYXRhLnB1c2godmFsdWUpOwoKICAgICAgICAgIC8vIOabtOaWsOacgOWwj+WSjOacgOWkp+WAvOeahOe0ouW8lQogICAgICAgICAgaWYgKGNoYW5uZWxEYXRhW2ldICE9PSAwKSB7CiAgICAgICAgICAgIGlmIChmaXJzdE5vblplcm9JbmRleCA9PT0gLTEpIHsKICAgICAgICAgICAgICAvLyDnrKzkuIDmrKHkuI3nrYnkuo4w55qE57Si5byVCiAgICAgICAgICAgICAgZmlyc3ROb25aZXJvSW5kZXggPSBpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIOiusOW9leavj+asoeS4jeetieS6jjDnmoTntKLlvJXvvIzmnIDlkI7kuIDmrKHkvJropobnm5bkuYvliY3orrDlvZXnmoTlgLwKICAgICAgICAgICAgbGFzdE5vblplcm9JbmRleCA9IGk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyDlsIblvZPliY3pgJrpgZPnmoQgc2VyaWVzIOaVsOaNruWtmOWFpSBiYXJEYXRhCiAgICAgICAgdGhpcy5iYXJEYXRhLnB1c2goY2hhbm5lbFNlcmllc0RhdGEpOwogICAgICB9CgogICAgICAvLyDlj5HpgIHmnIDlsI/lkozmnIDlpKflgLznmoTntKLlvJXliLDlhbbku5bnu4Tku7YKICAgICAgdGhpcy5oaXN0b2dyYW1fbWluID0gZmlyc3ROb25aZXJvSW5kZXg7CiAgICAgIHRoaXMuaGlzdG9ncmFtX21heCA9IGxhc3ROb25aZXJvSW5kZXg7CgogICAgICB0aGlzLiRidXMuJGVtaXQoJ0F1dG9IaXN0b2dyYW1OdW0nLCB0aGlzLmhpc3RvZ3JhbV9taW4sIHRoaXMuaGlzdG9ncmFtX21heCk7CgogICAgICBjb25zb2xlLmxvZygnRmlyc3QgTm9uLVplcm8gSW5kZXg6JywgZmlyc3ROb25aZXJvSW5kZXgpOwogICAgICB0aGlzLiRidXMuJGVtaXQoJ1NlbmRDb25zb2xlTG9nTXNnJywgJ0ZpcnN0IE5vbi1aZXJvIEluZGV4OicgKyBmaXJzdE5vblplcm9JbmRleCwgJ2luZm8nKTsKICAgICAgY29uc29sZS5sb2coJ0xhc3QgTm9uLVplcm8gSW5kZXg6JywgbGFzdE5vblplcm9JbmRleCk7CiAgICAgIHRoaXMuJGJ1cy4kZW1pdCgnU2VuZENvbnNvbGVMb2dNc2cnLCAnTGFzdCBOb24tWmVybyBJbmRleDonICsgbGFzdE5vblplcm9JbmRleCwgJ2luZm8nKTsKCiAgICAgICAgICAgIHRoaXMucmVuZGVyQ2hhcnQodGhpcy54QXhpc19taW4sIHRoaXMueEF4aXNfbWF4KTsKICAgIH0sCgogICAgY2xlYXJCYXJEYXRhKCkgewogICAgICB0aGlzLmJhckRhdGEgPSBbXTsgIC8vIOa4heepuuaVsOaNrgogICAgICB0aGlzLnJlbmRlckNoYXJ0KHRoaXMueEF4aXNfbWluLCB0aGlzLnhBeGlzX21heCk7ICAvLyDph43mlrDmuLLmn5Plm77ooagKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Chart-Histogram.vue"],"names":[],"mappings":";;;;;;;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Chart-Histogram.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div ref=\"barchart\" :style=\"{ width: containerMaxWidth + 'px', height: 80 + 'px' }\" class=\"barchart-panel\"></div>\n  </div>\n</template>\n\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'BarChart',\n  data() {\n    return {\n      containerMaxWidth: 190,\n      barData: [],  // 示例数据\n      xAxis_min: 0,\n      xAxis_max: 255, \n\n      histogram_min: 0,\n      histogram_max: 255,\n    };\n  },\n  mounted() {\n\n  },\n  created() {\n    // this.$bus.$on('InitChart', this.setMaxWidth);\n    this.$bus.$on('showHistogram', this.addDataToChart);\n    this.$bus.$on('updateHistogramWidth', this.initChart);\n  },\n  methods: {\n    initChart(Width) {\n      this.containerMaxWidth = Width - 10;\n      const chartDom = this.$refs.barchart;\n      chartDom.style.width = this.containerMaxWidth + 'px';\n      this.myChart = echarts.init(chartDom);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n\n    renderChart(x_min, x_max) {\n      const yAxisMax = Math.max(...this.barData.map(item => item[1]));  // 获取 y 轴的最大值\n      const option = {\n        grid: {\n          left: '-1%',\n          right: '1%',\n          bottom: '0%',\n          top: '0%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'value',\n          min: x_min,\n          max: x_max,\n          axisLine: {\n            lineStyle: {\n              color: 'white'\n            }\n          },\n          axisLabel: null,\n          splitLine: {  // 隐藏 x 轴的网格线\n            show: false\n          }\n        },\n        yAxis: {\n          type: 'value',\n          max: yAxisMax,  // 使用动态获取的 y 轴最大值\n          axisLine: {\n            lineStyle: {\n              color: 'white'\n            }\n          },\n          axisLabel: null,\n          splitLine: {  // 隐藏 x 轴的网格线\n            show: false\n          }\n        },\n        series: []\n      };\n\n      // 为每个通道创建对应的 series\n      for (let channel = 0; channel < 3; channel++) {\n        option.series.push({\n          data: this.barData[channel], // 注意这里的数据结构\n          type: 'line',\n          itemStyle: {\n            color: channel === 0 ? 'rgba(0,120,212,0.7)' : (channel === 1 ? 'rgba(51,218,121,0.7)' : 'rgba(255,0,0,0.7)') // 根据通道选择颜色\n          },\n          symbolSize: 0\n        });\n      }\n\n      // 在这里可以继续添加其他通道的曲线，也可以根据需要修改颜色\n\n      option.series.push({\n        data: [[this.histogram_min, 0], [this.histogram_min, yAxisMax]],  // 数据格式为 [x, y]\n        type: 'line',\n        lineStyle: {\n          color: 'blue',  // 设置线的颜色\n          type: 'dashed',  // 设置线的类型，可以为 'solid', 'dashed', 'dotted'\n          width: 1\n        },\n        symbolSize: 0\n      });\n\n      option.series.push({\n        data: [[this.histogram_max, 0], [this.histogram_max, yAxisMax]],\n        type: 'line',\n        lineStyle: {\n          color: 'red',\n          type: 'dashed',\n          width: 1\n        },\n        symbolSize: 0\n      });\n\n      this.myChart.setOption(option);\n    },\n    \n    addDataToChart(histogramData) {\n            this.clearBarData();\n\n      // 初始化最小和最大值的索引\n      let firstNonZeroIndex = -1;\n      let lastNonZeroIndex = -1;\n\n      // 处理三个通道的直方图数据\n      for (let channel = 0; channel < histogramData.length; channel++) {\n        const channelData = histogramData[channel];\n        const channelSeriesData = []; // 存储当前通道的 series 数据\n\n        for (let i = 0; i < channelData.length; i++) {\n          const value = [i, channelData[i]];\n          channelSeriesData.push(value);\n\n          // 更新最小和最大值的索引\n          if (channelData[i] !== 0) {\n            if (firstNonZeroIndex === -1) {\n              // 第一次不等于0的索引\n              firstNonZeroIndex = i;\n            }\n            // 记录每次不等于0的索引，最后一次会覆盖之前记录的值\n            lastNonZeroIndex = i;\n          }\n        }\n\n        // 将当前通道的 series 数据存入 barData\n        this.barData.push(channelSeriesData);\n      }\n\n      // 发送最小和最大值的索引到其他组件\n      this.histogram_min = firstNonZeroIndex;\n      this.histogram_max = lastNonZeroIndex;\n\n      this.$bus.$emit('AutoHistogramNum', this.histogram_min, this.histogram_max);\n\n      console.log('First Non-Zero Index:', firstNonZeroIndex);\n      this.$bus.$emit('SendConsoleLogMsg', 'First Non-Zero Index:' + firstNonZeroIndex, 'info');\n      console.log('Last Non-Zero Index:', lastNonZeroIndex);\n      this.$bus.$emit('SendConsoleLogMsg', 'Last Non-Zero Index:' + lastNonZeroIndex, 'info');\n\n            this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n\n    clearBarData() {\n      this.barData = [];  // 清空数据\n      this.renderChart(this.xAxis_min, this.xAxis_max);  // 重新渲染图表\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n.barchart-panel {\n  background-color: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(5px);\n  border-radius: 5px;\n  box-sizing: border-box;\n  /* border: 1px solid rgba(255, 255, 255, 0.8); */\n}\n</style>\n\n\n\n\n\n"]}]}