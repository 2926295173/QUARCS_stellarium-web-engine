{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Histogram.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Histogram.vue","mtime":1750829368290},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS9xdWFyY3Mvd29ya3NwYWNlL1FVQVJDUy9RVUFSQ1Nfc3RlbGxhcml1bS13ZWItZW5naW5lL2FwcHMvd2ViLWZyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQtbWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdC1tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgKiBhcyBlY2hhcnRzIGZyb20gJ2VjaGFydHMnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0JhckNoYXJ0JywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY29udGFpbmVyTWF4V2lkdGg6IDE5MCwKICAgICAgYmFyRGF0YTogW10sCiAgICAgIC8vIOekuuS+i+aVsOaNrgogICAgICB4QXhpc19taW46IDAsCiAgICAgIHhBeGlzX21heDogNjU1MzUsCiAgICAgIGhpc3RvZ3JhbV9taW46IDAsCiAgICAgIGhpc3RvZ3JhbV9tYXg6IDY1NTM1CiAgICB9OwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHt9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAvLyB0aGlzLiRidXMuJG9uKCdJbml0Q2hhcnQnLCB0aGlzLnNldE1heFdpZHRoKTsKICAgIHRoaXMuJGJ1cy4kb24oJ3Nob3dIaXN0b2dyYW0nLCB0aGlzLmFkZERhdGFUb0NoYXJ0KTsKICAgIHRoaXMuJGJ1cy4kb24oJ3VwZGF0ZUhpc3RvZ3JhbVdpZHRoJywgdGhpcy5pbml0Q2hhcnQpOwogIH0sCiAgbWV0aG9kczogewogICAgaW5pdENoYXJ0OiBmdW5jdGlvbiBpbml0Q2hhcnQoV2lkdGgpIHsKICAgICAgdGhpcy5jb250YWluZXJNYXhXaWR0aCA9IFdpZHRoIC0gMTA7CiAgICAgIHZhciBjaGFydERvbSA9IHRoaXMuJHJlZnMuYmFyY2hhcnQ7CiAgICAgIGNoYXJ0RG9tLnN0eWxlLndpZHRoID0gdGhpcy5jb250YWluZXJNYXhXaWR0aCArICdweCc7CiAgICAgIHRoaXMubXlDaGFydCA9IGVjaGFydHMuaW5pdChjaGFydERvbSk7CiAgICAgIHRoaXMucmVuZGVyQ2hhcnQodGhpcy54QXhpc19taW4sIHRoaXMueEF4aXNfbWF4KTsKICAgIH0sCiAgICByZW5kZXJDaGFydDogZnVuY3Rpb24gcmVuZGVyQ2hhcnQoeF9taW4sIHhfbWF4KSB7CiAgICAgIC8vIOWmguaenOayoeacieaVsOaNru+8jOWImemAgOWHugogICAgICBpZiAodGhpcy5iYXJEYXRhLmxlbmd0aCA9PT0gMCkgcmV0dXJuOwogICAgICB2YXIgeUF4aXNNYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5iYXJEYXRhLmZsYXRNYXAoZnVuY3Rpb24gKGNoYW5uZWwpIHsKICAgICAgICByZXR1cm4gY2hhbm5lbC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBpdGVtWzFdOwogICAgICAgIH0pOwogICAgICB9KSkpOyAvLyDojrflj5bmiYDmnInpgJrpgZPkuK3nmoR56L205pyA5aSn5YC8CgogICAgICB2YXIgb3B0aW9uID0gewogICAgICAgIGdyaWQ6IHsKICAgICAgICAgIGxlZnQ6ICctMSUnLAogICAgICAgICAgcmlnaHQ6ICcxJScsCiAgICAgICAgICBib3R0b206ICcwJScsCiAgICAgICAgICB0b3A6ICcwJScsCiAgICAgICAgICBjb250YWluTGFiZWw6IHRydWUKICAgICAgICB9LAogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICB0eXBlOiAndmFsdWUnLAogICAgICAgICAgbWluOiB4X21pbiwKICAgICAgICAgIG1heDogeF9tYXgsCiAgICAgICAgICBheGlzTGluZTogewogICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgYXhpc0xhYmVsOiBudWxsLAogICAgICAgICAgc3BsaXRMaW5lOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB5QXhpczogewogICAgICAgICAgdHlwZTogJ3ZhbHVlJywKICAgICAgICAgIG1heDogeUF4aXNNYXgsCiAgICAgICAgICBheGlzTGluZTogewogICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgYXhpc0xhYmVsOiBudWxsLAogICAgICAgICAgc3BsaXRMaW5lOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFtdCiAgICAgIH07IC8vIOagueaNruWunumZhemAmumBk+aVsOmHj+WIm+W7uuezu+WIlwoKICAgICAgdmFyIGNvbG9ycyA9IFsncmdiYSgwLDEyMCwyMTIsMC43KScsICdyZ2JhKDUxLDIxOCwxMjEsMC43KScsICdyZ2JhKDI1NSwwLDAsMC43KSddOyAvLyDngbDluqblm77lkozlvanoibLlm77kvb/nlKjkuI3lkIznmoTpopzoibLmlrnmoYgKCiAgICAgIGlmICh0aGlzLmJhckRhdGEubGVuZ3RoID09PSAxKSB7CiAgICAgICAgLy8g54Gw5bqm5Zu+5Y+q5pyJ5LiA5Liq6YCa6YGT77yM5L2/55So55m96ImyCiAgICAgICAgb3B0aW9uLnNlcmllcy5wdXNoKHsKICAgICAgICAgIGRhdGE6IHRoaXMuYmFyRGF0YVswXSwKICAgICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICBjb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMC43KScKICAgICAgICAgIH0sCiAgICAgICAgICBzeW1ib2xTaXplOiAwCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8g5b2p6Imy5Zu+5pyJ5aSa5Liq6YCa6YGT77yM5L2/55So5qCH5YeGUkdC6aKc6ImyCiAgICAgICAgZm9yICh2YXIgY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCB0aGlzLmJhckRhdGEubGVuZ3RoOyBjaGFubmVsKyspIHsKICAgICAgICAgIG9wdGlvbi5zZXJpZXMucHVzaCh7CiAgICAgICAgICAgIGRhdGE6IHRoaXMuYmFyRGF0YVtjaGFubmVsXSwKICAgICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogY29sb3JzW2NoYW5uZWwgJSBjb2xvcnMubGVuZ3RoXQogICAgICAgICAgICB9LAogICAgICAgICAgICBzeW1ib2xTaXplOiAwCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gLy8g5re75Yqg5pyA5bCP5ZKM5pyA5aSn5YC855qE5Z6C55u057q/CgoKICAgICAgb3B0aW9uLnNlcmllcy5wdXNoKHsKICAgICAgICBkYXRhOiBbW3RoaXMuaGlzdG9ncmFtX21pbiwgMF0sIFt0aGlzLmhpc3RvZ3JhbV9taW4sIHlBeGlzTWF4XV0sCiAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgIGxpbmVTdHlsZTogewogICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgIHR5cGU6ICdkYXNoZWQnLAogICAgICAgICAgd2lkdGg6IDEKICAgICAgICB9LAogICAgICAgIHN5bWJvbFNpemU6IDAKICAgICAgfSk7CiAgICAgIG9wdGlvbi5zZXJpZXMucHVzaCh7CiAgICAgICAgZGF0YTogW1t0aGlzLmhpc3RvZ3JhbV9tYXgsIDBdLCBbdGhpcy5oaXN0b2dyYW1fbWF4LCB5QXhpc01heF1dLAogICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgIGNvbG9yOiAncmVkJywKICAgICAgICAgIHR5cGU6ICdkYXNoZWQnLAogICAgICAgICAgd2lkdGg6IDEKICAgICAgICB9LAogICAgICAgIHN5bWJvbFNpemU6IDAKICAgICAgfSk7CiAgICAgIHRoaXMubXlDaGFydC5zZXRPcHRpb24ob3B0aW9uKTsKICAgIH0sCiAgICBhZGREYXRhVG9DaGFydDogZnVuY3Rpb24gYWRkRGF0YVRvQ2hhcnQoaGlzdG9ncmFtRGF0YSkgewogICAgICB0aGlzLmNsZWFyQmFyRGF0YSgpOwogICAgICBjb25zb2xlLmxvZygi5b2T5YmN55u05pa55Zu+5pWw5o2u6ZW/5bqmOiIsIGhpc3RvZ3JhbURhdGEubGVuZ3RoKTsgLy8g5Yik5pat5piv54Gw5bqm5Zu+6L+Y5piv5b2p6Imy5Zu+CiAgICAgIC8vIOWmguaenOaYr+eugOWNleaVsOe7hCjplb/luqblvojlpKcp77yM5YiZ5Li654Gw5bqm5Zu+CiAgICAgIC8vIOWmguaenOaYr+aVsOe7hOeahOaVsOe7hCjplb/luqbkuLozKe+8jOWImeS4uuW9qeiJsuWbvgogICAgICAvLyDlpITnkIbngbDluqblm74gLSDljZXkuIDmlbDnu4TvvIzplb/luqblvojlpKcKCiAgICAgIGlmICghQXJyYXkuaXNBcnJheShoaXN0b2dyYW1EYXRhWzBdKSkgewogICAgICAgIHZhciBmb3JtYXR0ZWREYXRhID0gW107IC8vIOi9rOaNouS4ultpbmRleCwgdmFsdWVd5qC85byP77yM5LuF5L+d55WZ6Z2e6Zu254K55ZKM5q+PMTbkuKrngrnnmoTph4fmoLfngrkKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoaXN0b2dyYW1EYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpZiAoaGlzdG9ncmFtRGF0YVtpXSA+IDAgfHwgaSAlIDE2ID09PSAwKSB7CiAgICAgICAgICAgIGZvcm1hdHRlZERhdGEucHVzaChbaSwgaGlzdG9ncmFtRGF0YVtpXV0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdGhpcy5iYXJEYXRhLnB1c2goZm9ybWF0dGVkRGF0YSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8g5aSE55CG5b2p6Imy5Zu+IC0g5LiJ6YCa6YGT5pWw57uECiAgICAgICAgLy8g6YGN5Y6GUkdC5LiJ5Liq6YCa6YGTCiAgICAgICAgZm9yICh2YXIgY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCBoaXN0b2dyYW1EYXRhLmxlbmd0aDsgY2hhbm5lbCsrKSB7CiAgICAgICAgICB2YXIgY2hhbm5lbERhdGEgPSBoaXN0b2dyYW1EYXRhW2NoYW5uZWxdOwogICAgICAgICAgdmFyIF9mb3JtYXR0ZWREYXRhID0gW107IC8vIOi9rOaNouS4ultpbmRleCwgdmFsdWVd5qC85byP77yM5LuF5L+d55WZ6Z2e6Zu254K55ZKM5q+PMTbkuKrngrnnmoTph4fmoLfngrkKCiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgY2hhbm5lbERhdGEubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgICAgIGlmIChjaGFubmVsRGF0YVtfaV0gPiAwIHx8IF9pICUgMTYgPT09IDApIHsKICAgICAgICAgICAgICBfZm9ybWF0dGVkRGF0YS5wdXNoKFtfaSwgY2hhbm5lbERhdGFbX2ldXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLmJhckRhdGEucHVzaChfZm9ybWF0dGVkRGF0YSk7CiAgICAgICAgfQogICAgICB9IC8vIOWPkemAgeS/oeaBrwoKCiAgICAgIGNvbnNvbGUubG9nKCLmnInmlYjmlbDmja7ojIPlm7Q6IiwgdGhpcy5oaXN0b2dyYW1fbWluLCAiLSIsIHRoaXMuaGlzdG9ncmFtX21heCk7IC8vIHRoaXMuJGJ1cy4kZW1pdCgnQXV0b0hpc3RvZ3JhbU51bScsIHRoaXMuaGlzdG9ncmFtX21pbiwgdGhpcy5oaXN0b2dyYW1fbWF4KTsKCiAgICAgIHRoaXMucmVuZGVyQ2hhcnQodGhpcy54QXhpc19taW4sIHRoaXMueEF4aXNfbWF4KTsKICAgIH0sCiAgICBjbGVhckJhckRhdGE6IGZ1bmN0aW9uIGNsZWFyQmFyRGF0YSgpIHsKICAgICAgdGhpcy5iYXJEYXRhID0gW107IC8vIOa4heepuuaVsOaNrgoKICAgICAgdGhpcy5yZW5kZXJDaGFydCh0aGlzLnhBeGlzX21pbiwgdGhpcy54QXhpc19tYXgpOyAvLyDph43mlrDmuLLmn5Plm77ooagKICAgIH0KICB9Cn07"},{"version":3,"sources":["Chart-Histogram.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div ref=\"barchart\" :style=\"{ width: containerMaxWidth + 'px', height: 80 + 'px' }\" class=\"barchart-panel\"></div>\n  </div>\n</template>\n\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'BarChart',\n  data() {\n    return {\n      containerMaxWidth: 190,\n      barData: [],  // 示例数据\n      xAxis_min: 0,\n      xAxis_max: 65535,\n\n      histogram_min: 0,\n      histogram_max: 65535,\n    };\n  },\n  mounted() {\n\n  },\n  created() {\n    // this.$bus.$on('InitChart', this.setMaxWidth);\n    this.$bus.$on('showHistogram', this.addDataToChart);\n    this.$bus.$on('updateHistogramWidth', this.initChart);\n  },\n  methods: {\n    initChart(Width) {\n      this.containerMaxWidth = Width - 10;\n      const chartDom = this.$refs.barchart;\n      chartDom.style.width = this.containerMaxWidth + 'px';\n      this.myChart = echarts.init(chartDom);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n\n    renderChart(x_min, x_max) {\n      // 如果没有数据，则退出\n      if (this.barData.length === 0) return;\n      \n      const yAxisMax = Math.max(...this.barData.flatMap(channel => \n        channel.map(item => item[1])\n      ));  // 获取所有通道中的y轴最大值\n      \n      const option = {\n        grid: {\n          left: '-1%',\n          right: '1%',\n          bottom: '0%',\n          top: '0%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'value',\n          min: x_min,\n          max: x_max,\n          axisLine: {\n            lineStyle: {\n              color: 'white'\n            }\n          },\n          axisLabel: null,\n          splitLine: {\n            show: false\n          }\n        },\n        yAxis: {\n          type: 'value',\n          max: yAxisMax,\n          axisLine: {\n            lineStyle: {\n              color: 'white'\n            }\n          },\n          axisLabel: null,\n          splitLine: {\n            show: false\n          }\n        },\n        series: []\n      };\n\n      // 根据实际通道数量创建系列\n      const colors = ['rgba(0,120,212,0.7)', 'rgba(51,218,121,0.7)', 'rgba(255,0,0,0.7)'];\n      \n      // 灰度图和彩色图使用不同的颜色方案\n      if (this.barData.length === 1) {\n        // 灰度图只有一个通道，使用白色\n        option.series.push({\n          data: this.barData[0],\n          type: 'line',\n          itemStyle: {\n            color: 'rgba(255,255,255,0.7)'\n          },\n          symbolSize: 0\n        });\n      } else {\n        // 彩色图有多个通道，使用标准RGB颜色\n        for (let channel = 0; channel < this.barData.length; channel++) {\n          option.series.push({\n            data: this.barData[channel],\n            type: 'line',\n            itemStyle: {\n              color: colors[channel % colors.length]\n            },\n            symbolSize: 0\n          });\n        }\n      }\n\n      // 添加最小和最大值的垂直线\n      option.series.push({\n        data: [[this.histogram_min, 0], [this.histogram_min, yAxisMax]],\n        type: 'line',\n        lineStyle: {\n          color: 'blue',\n          type: 'dashed',\n          width: 1\n        },\n        symbolSize: 0\n      });\n\n      option.series.push({\n        data: [[this.histogram_max, 0], [this.histogram_max, yAxisMax]],\n        type: 'line',\n        lineStyle: {\n          color: 'red',\n          type: 'dashed',\n          width: 1\n        },\n        symbolSize: 0\n      });\n\n      this.myChart.setOption(option);\n    },\n\n    addDataToChart(histogramData) {\n      this.clearBarData();\n      console.log(\"当前直方图数据长度:\", histogramData.length);\n      \n      // 判断是灰度图还是彩色图\n      // 如果是简单数组(长度很大)，则为灰度图\n      // 如果是数组的数组(长度为3)，则为彩色图\n      \n      \n      // 处理灰度图 - 单一数组，长度很大\n      if (!Array.isArray(histogramData[0])) {\n        const formattedData = [];\n        \n        // 转换为[index, value]格式，仅保留非零点和每16个点的采样点\n        for (let i = 0; i < histogramData.length; i++) {\n          if (histogramData[i] > 0 || i % 16 === 0) {\n            formattedData.push([i, histogramData[i]]);\n          }\n        }\n        \n        this.barData.push(formattedData);\n        \n      } else { // 处理彩色图 - 三通道数组\n        // 遍历RGB三个通道\n        for (let channel = 0; channel < histogramData.length; channel++) {\n          const channelData = histogramData[channel];\n          const formattedData = [];\n          \n          // 转换为[index, value]格式，仅保留非零点和每16个点的采样点\n          for (let i = 0; i < channelData.length; i++) {\n            if (channelData[i] > 0 || i % 16 === 0) {\n              formattedData.push([i, channelData[i]]);\n            }\n          }\n          \n          this.barData.push(formattedData);\n        }\n      }\n      \n      // 发送信息\n      console.log(\"有效数据范围:\", this.histogram_min, \"-\", this.histogram_max);\n      // this.$bus.$emit('AutoHistogramNum', this.histogram_min, this.histogram_max);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n\n    clearBarData() {\n      this.barData = [];  // 清空数据\n      this.renderChart(this.xAxis_min, this.xAxis_max);  // 重新渲染图表\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n.barchart-panel {\n  background-color: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(5px);\n  border-radius: 5px;\n  box-sizing: border-box;\n  /* border: 1px solid rgba(255, 255, 255, 0.8); */\n}\n</style>\n"],"sourceRoot":"src/components"}]}