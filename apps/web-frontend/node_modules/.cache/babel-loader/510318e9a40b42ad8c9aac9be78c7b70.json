{"remainingRequest":"/app/node_modules/thread-loader/dist/cjs.js!/app/node_modules/babel-loader/lib/index.js!/app/node_modules/cache-loader/dist/cjs.js??ref--1-0!/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/Chart-Histogram.vue?vue&type=script&lang=js&","dependencies":[{"path":"/app/src/components/Chart-Histogram.vue","mtime":1739424155000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/app/node_modules/thread-loader/dist/cjs.js","mtime":1707125360000},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCAqIGFzIGVjaGFydHMgZnJvbSAnZWNoYXJ0cyc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQmFyQ2hhcnQnLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjb250YWluZXJNYXhXaWR0aDogMTkwLAogICAgICBiYXJEYXRhOiBbXSwKICAgICAgLy8g56S65L6L5pWw5o2uCiAgICAgIHhBeGlzX21pbjogMCwKICAgICAgeEF4aXNfbWF4OiAyNTUsCiAgICAgIGhpc3RvZ3JhbV9taW46IDAsCiAgICAgIGhpc3RvZ3JhbV9tYXg6IDI1NQogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7fSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgLy8gdGhpcy4kYnVzLiRvbignSW5pdENoYXJ0JywgdGhpcy5zZXRNYXhXaWR0aCk7CiAgICB0aGlzLiRidXMuJG9uKCdzaG93SGlzdG9ncmFtJywgdGhpcy5hZGREYXRhVG9DaGFydCk7CiAgICB0aGlzLiRidXMuJG9uKCd1cGRhdGVIaXN0b2dyYW1XaWR0aCcsIHRoaXMuaW5pdENoYXJ0KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXRDaGFydDogZnVuY3Rpb24gaW5pdENoYXJ0KFdpZHRoKSB7CiAgICAgIHRoaXMuY29udGFpbmVyTWF4V2lkdGggPSBXaWR0aCAtIDEwOwogICAgICB2YXIgY2hhcnREb20gPSB0aGlzLiRyZWZzLmJhcmNoYXJ0OwogICAgICBjaGFydERvbS5zdHlsZS53aWR0aCA9IHRoaXMuY29udGFpbmVyTWF4V2lkdGggKyAncHgnOwogICAgICB0aGlzLm15Q2hhcnQgPSBlY2hhcnRzLmluaXQoY2hhcnREb20pOwogICAgICB0aGlzLnJlbmRlckNoYXJ0KHRoaXMueEF4aXNfbWluLCB0aGlzLnhBeGlzX21heCk7CiAgICB9LAogICAgcmVuZGVyQ2hhcnQ6IGZ1bmN0aW9uIHJlbmRlckNoYXJ0KHhfbWluLCB4X21heCkgewogICAgICB2YXIgeUF4aXNNYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5iYXJEYXRhLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtWzFdOwogICAgICB9KSkpOyAvLyDojrflj5YgeSDovbTnmoTmnIDlpKflgLwKCiAgICAgIHZhciBvcHRpb24gPSB7CiAgICAgICAgZ3JpZDogewogICAgICAgICAgbGVmdDogJy0xJScsCiAgICAgICAgICByaWdodDogJzElJywKICAgICAgICAgIGJvdHRvbTogJzAlJywKICAgICAgICAgIHRvcDogJzAlJywKICAgICAgICAgIGNvbnRhaW5MYWJlbDogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgeEF4aXM6IHsKICAgICAgICAgIHR5cGU6ICd2YWx1ZScsCiAgICAgICAgICBtaW46IHhfbWluLAogICAgICAgICAgbWF4OiB4X21heCwKICAgICAgICAgIGF4aXNMaW5lOiB7CiAgICAgICAgICAgIGxpbmVTdHlsZTogewogICAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBheGlzTGFiZWw6IG51bGwsCiAgICAgICAgICBzcGxpdExpbmU6IHsKICAgICAgICAgICAgLy8g6ZqQ6JePIHgg6L2055qE572R5qC857q/CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB5QXhpczogewogICAgICAgICAgdHlwZTogJ3ZhbHVlJywKICAgICAgICAgIG1heDogeUF4aXNNYXgsCiAgICAgICAgICAvLyDkvb/nlKjliqjmgIHojrflj5bnmoQgeSDovbTmnIDlpKflgLwKICAgICAgICAgIGF4aXNMaW5lOiB7CiAgICAgICAgICAgIGxpbmVTdHlsZTogewogICAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBheGlzTGFiZWw6IG51bGwsCiAgICAgICAgICBzcGxpdExpbmU6IHsKICAgICAgICAgICAgLy8g6ZqQ6JePIHgg6L2055qE572R5qC857q/CiAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFtdCiAgICAgIH07IC8vIOS4uuavj+S4qumAmumBk+WIm+W7uuWvueW6lOeahCBzZXJpZXMKCiAgICAgIGZvciAodmFyIGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgMzsgY2hhbm5lbCsrKSB7CiAgICAgICAgb3B0aW9uLnNlcmllcy5wdXNoKHsKICAgICAgICAgIGRhdGE6IHRoaXMuYmFyRGF0YVtjaGFubmVsXSwKICAgICAgICAgIC8vIOazqOaEj+i/memHjOeahOaVsOaNrue7k+aehAogICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgIGNvbG9yOiBjaGFubmVsID09PSAwID8gJ3JnYmEoMCwxMjAsMjEyLDAuNyknIDogY2hhbm5lbCA9PT0gMSA/ICdyZ2JhKDUxLDIxOCwxMjEsMC43KScgOiAncmdiYSgyNTUsMCwwLDAuNyknIC8vIOagueaNrumAmumBk+mAieaLqeminOiJsgoKICAgICAgICAgIH0sCiAgICAgICAgICBzeW1ib2xTaXplOiAwCiAgICAgICAgfSk7CiAgICAgIH0gLy8g5Zyo6L+Z6YeM5Y+v5Lul57un57ut5re75Yqg5YW25LuW6YCa6YGT55qE5puy57q/77yM5Lmf5Y+v5Lul5qC55o2u6ZyA6KaB5L+u5pS56aKc6ImyCgoKICAgICAgb3B0aW9uLnNlcmllcy5wdXNoKHsKICAgICAgICBkYXRhOiBbW3RoaXMuaGlzdG9ncmFtX21pbiwgMF0sIFt0aGlzLmhpc3RvZ3JhbV9taW4sIHlBeGlzTWF4XV0sCiAgICAgICAgLy8g5pWw5o2u5qC85byP5Li6IFt4LCB5XQogICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAvLyDorr7nva7nur/nmoTpopzoibIKICAgICAgICAgIHR5cGU6ICdkYXNoZWQnLAogICAgICAgICAgLy8g6K6+572u57q/55qE57G75Z6L77yM5Y+v5Lul5Li6ICdzb2xpZCcsICdkYXNoZWQnLCAnZG90dGVkJwogICAgICAgICAgd2lkdGg6IDEKICAgICAgICB9LAogICAgICAgIHN5bWJvbFNpemU6IDAKICAgICAgfSk7CiAgICAgIG9wdGlvbi5zZXJpZXMucHVzaCh7CiAgICAgICAgZGF0YTogW1t0aGlzLmhpc3RvZ3JhbV9tYXgsIDBdLCBbdGhpcy5oaXN0b2dyYW1fbWF4LCB5QXhpc01heF1dLAogICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgIGNvbG9yOiAncmVkJywKICAgICAgICAgIHR5cGU6ICdkYXNoZWQnLAogICAgICAgICAgd2lkdGg6IDEKICAgICAgICB9LAogICAgICAgIHN5bWJvbFNpemU6IDAKICAgICAgfSk7CiAgICAgIHRoaXMubXlDaGFydC5zZXRPcHRpb24ob3B0aW9uKTsKICAgIH0sCiAgICBhZGREYXRhVG9DaGFydDogZnVuY3Rpb24gYWRkRGF0YVRvQ2hhcnQoaGlzdG9ncmFtRGF0YSkgewogICAgICB0aGlzLmNsZWFyQmFyRGF0YSgpOyAvLyDliJ3lp4vljJbmnIDlsI/lkozmnIDlpKflgLznmoTntKLlvJUKCiAgICAgIHZhciBmaXJzdE5vblplcm9JbmRleCA9IC0xOwogICAgICB2YXIgbGFzdE5vblplcm9JbmRleCA9IC0xOyAvLyDlpITnkIbkuInkuKrpgJrpgZPnmoTnm7Tmlrnlm77mlbDmja4KCiAgICAgIGZvciAodmFyIGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgaGlzdG9ncmFtRGF0YS5sZW5ndGg7IGNoYW5uZWwrKykgewogICAgICAgIHZhciBjaGFubmVsRGF0YSA9IGhpc3RvZ3JhbURhdGFbY2hhbm5lbF07CiAgICAgICAgdmFyIGNoYW5uZWxTZXJpZXNEYXRhID0gW107IC8vIOWtmOWCqOW9k+WJjemAmumBk+eahCBzZXJpZXMg5pWw5o2uCgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhbm5lbERhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IFtpLCBjaGFubmVsRGF0YVtpXV07CiAgICAgICAgICBjaGFubmVsU2VyaWVzRGF0YS5wdXNoKHZhbHVlKTsgLy8g5pu05paw5pyA5bCP5ZKM5pyA5aSn5YC855qE57Si5byVCgogICAgICAgICAgaWYgKGNoYW5uZWxEYXRhW2ldICE9PSAwKSB7CiAgICAgICAgICAgIGlmIChmaXJzdE5vblplcm9JbmRleCA9PT0gLTEpIHsKICAgICAgICAgICAgICAvLyDnrKzkuIDmrKHkuI3nrYnkuo4w55qE57Si5byVCiAgICAgICAgICAgICAgZmlyc3ROb25aZXJvSW5kZXggPSBpOwogICAgICAgICAgICB9IC8vIOiusOW9leavj+asoeS4jeetieS6jjDnmoTntKLlvJXvvIzmnIDlkI7kuIDmrKHkvJropobnm5bkuYvliY3orrDlvZXnmoTlgLwKCgogICAgICAgICAgICBsYXN0Tm9uWmVyb0luZGV4ID0gaTsKICAgICAgICAgIH0KICAgICAgICB9IC8vIOWwhuW9k+WJjemAmumBk+eahCBzZXJpZXMg5pWw5o2u5a2Y5YWlIGJhckRhdGEKCgogICAgICAgIHRoaXMuYmFyRGF0YS5wdXNoKGNoYW5uZWxTZXJpZXNEYXRhKTsKICAgICAgfSAvLyDlj5HpgIHmnIDlsI/lkozmnIDlpKflgLznmoTntKLlvJXliLDlhbbku5bnu4Tku7YKCgogICAgICB0aGlzLmhpc3RvZ3JhbV9taW4gPSBmaXJzdE5vblplcm9JbmRleDsKICAgICAgdGhpcy5oaXN0b2dyYW1fbWF4ID0gbGFzdE5vblplcm9JbmRleDsKICAgICAgdGhpcy4kYnVzLiRlbWl0KCdBdXRvSGlzdG9ncmFtTnVtJywgdGhpcy5oaXN0b2dyYW1fbWluLCB0aGlzLmhpc3RvZ3JhbV9tYXgpOwogICAgICBjb25zb2xlLmxvZygnRmlyc3QgTm9uLVplcm8gSW5kZXg6JywgZmlyc3ROb25aZXJvSW5kZXgpOwogICAgICB0aGlzLiRidXMuJGVtaXQoJ1NlbmRDb25zb2xlTG9nTXNnJywgJ0ZpcnN0IE5vbi1aZXJvIEluZGV4OicgKyBmaXJzdE5vblplcm9JbmRleCwgJ2luZm8nKTsKICAgICAgY29uc29sZS5sb2coJ0xhc3QgTm9uLVplcm8gSW5kZXg6JywgbGFzdE5vblplcm9JbmRleCk7CiAgICAgIHRoaXMuJGJ1cy4kZW1pdCgnU2VuZENvbnNvbGVMb2dNc2cnLCAnTGFzdCBOb24tWmVybyBJbmRleDonICsgbGFzdE5vblplcm9JbmRleCwgJ2luZm8nKTsKICAgICAgdGhpcy5yZW5kZXJDaGFydCh0aGlzLnhBeGlzX21pbiwgdGhpcy54QXhpc19tYXgpOwogICAgfSwKICAgIGNsZWFyQmFyRGF0YTogZnVuY3Rpb24gY2xlYXJCYXJEYXRhKCkgewogICAgICB0aGlzLmJhckRhdGEgPSBbXTsgLy8g5riF56m65pWw5o2uCgogICAgICB0aGlzLnJlbmRlckNoYXJ0KHRoaXMueEF4aXNfbWluLCB0aGlzLnhBeGlzX21heCk7IC8vIOmHjeaWsOa4suafk+WbvuihqAogICAgfQogIH0KfTs="},{"version":3,"sources":["Chart-Histogram.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div ref=\"barchart\" :style=\"{ width: containerMaxWidth + 'px', height: 80 + 'px' }\" class=\"barchart-panel\"></div>\n  </div>\n</template>\n\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'BarChart',\n  data() {\n    return {\n      containerMaxWidth: 190,\n      barData: [],  // 示例数据\n      xAxis_min: 0,\n      xAxis_max: 255, \n\n      histogram_min: 0,\n      histogram_max: 255,\n    };\n  },\n  mounted() {\n\n  },\n  created() {\n    // this.$bus.$on('InitChart', this.setMaxWidth);\n    this.$bus.$on('showHistogram', this.addDataToChart);\n    this.$bus.$on('updateHistogramWidth', this.initChart);\n  },\n  methods: {\n    initChart(Width) {\n      this.containerMaxWidth = Width - 10;\n      const chartDom = this.$refs.barchart;\n      chartDom.style.width = this.containerMaxWidth + 'px';\n      this.myChart = echarts.init(chartDom);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n\n    renderChart(x_min, x_max) {\n      const yAxisMax = Math.max(...this.barData.map(item => item[1]));  // 获取 y 轴的最大值\n      const option = {\n        grid: {\n          left: '-1%',\n          right: '1%',\n          bottom: '0%',\n          top: '0%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'value',\n          min: x_min,\n          max: x_max,\n          axisLine: {\n            lineStyle: {\n              color: 'white'\n            }\n          },\n          axisLabel: null,\n          splitLine: {  // 隐藏 x 轴的网格线\n            show: false\n          }\n        },\n        yAxis: {\n          type: 'value',\n          max: yAxisMax,  // 使用动态获取的 y 轴最大值\n          axisLine: {\n            lineStyle: {\n              color: 'white'\n            }\n          },\n          axisLabel: null,\n          splitLine: {  // 隐藏 x 轴的网格线\n            show: false\n          }\n        },\n        series: []\n      };\n\n      // 为每个通道创建对应的 series\n      for (let channel = 0; channel < 3; channel++) {\n        option.series.push({\n          data: this.barData[channel], // 注意这里的数据结构\n          type: 'line',\n          itemStyle: {\n            color: channel === 0 ? 'rgba(0,120,212,0.7)' : (channel === 1 ? 'rgba(51,218,121,0.7)' : 'rgba(255,0,0,0.7)') // 根据通道选择颜色\n          },\n          symbolSize: 0\n        });\n      }\n\n      // 在这里可以继续添加其他通道的曲线，也可以根据需要修改颜色\n\n      option.series.push({\n        data: [[this.histogram_min, 0], [this.histogram_min, yAxisMax]],  // 数据格式为 [x, y]\n        type: 'line',\n        lineStyle: {\n          color: 'blue',  // 设置线的颜色\n          type: 'dashed',  // 设置线的类型，可以为 'solid', 'dashed', 'dotted'\n          width: 1\n        },\n        symbolSize: 0\n      });\n\n      option.series.push({\n        data: [[this.histogram_max, 0], [this.histogram_max, yAxisMax]],\n        type: 'line',\n        lineStyle: {\n          color: 'red',\n          type: 'dashed',\n          width: 1\n        },\n        symbolSize: 0\n      });\n\n      this.myChart.setOption(option);\n    },\n    \n    addDataToChart(histogramData) {\n            this.clearBarData();\n\n      // 初始化最小和最大值的索引\n      let firstNonZeroIndex = -1;\n      let lastNonZeroIndex = -1;\n\n      // 处理三个通道的直方图数据\n      for (let channel = 0; channel < histogramData.length; channel++) {\n        const channelData = histogramData[channel];\n        const channelSeriesData = []; // 存储当前通道的 series 数据\n\n        for (let i = 0; i < channelData.length; i++) {\n          const value = [i, channelData[i]];\n          channelSeriesData.push(value);\n\n          // 更新最小和最大值的索引\n          if (channelData[i] !== 0) {\n            if (firstNonZeroIndex === -1) {\n              // 第一次不等于0的索引\n              firstNonZeroIndex = i;\n            }\n            // 记录每次不等于0的索引，最后一次会覆盖之前记录的值\n            lastNonZeroIndex = i;\n          }\n        }\n\n        // 将当前通道的 series 数据存入 barData\n        this.barData.push(channelSeriesData);\n      }\n\n      // 发送最小和最大值的索引到其他组件\n      this.histogram_min = firstNonZeroIndex;\n      this.histogram_max = lastNonZeroIndex;\n\n      this.$bus.$emit('AutoHistogramNum', this.histogram_min, this.histogram_max);\n\n      console.log('First Non-Zero Index:', firstNonZeroIndex);\n      this.$bus.$emit('SendConsoleLogMsg', 'First Non-Zero Index:' + firstNonZeroIndex, 'info');\n      console.log('Last Non-Zero Index:', lastNonZeroIndex);\n      this.$bus.$emit('SendConsoleLogMsg', 'Last Non-Zero Index:' + lastNonZeroIndex, 'info');\n\n            this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n\n    clearBarData() {\n      this.barData = [];  // 清空数据\n      this.renderChart(this.xAxis_min, this.xAxis_max);  // 重新渲染图表\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n.barchart-panel {\n  background-color: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(5px);\n  border-radius: 5px;\n  box-sizing: border-box;\n  /* border: 1px solid rgba(255, 255, 255, 0.8); */\n}\n</style>\n\n\n\n\n\n"],"sourceRoot":"src/components"}]}