{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/AutomaticPolarAlignmentCalibration.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/AutomaticPolarAlignmentCalibration.vue","mtime":1761021421393},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AutomaticPolarAlignmentCalibration.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"polar-alignment-root\">\n  <!-- 最小化状态 -->\n  <div v-if=\"visible && isMinimized\" class=\"polar-alignment-minimized\" :class=\"{ 'dragging': isDraggingState }\"\n    :style=\"{ left: position.x + 'px', top: position.y + 'px' }\">\n    <div class=\"minimized-header\">\n      <div class=\"minimized-drag-area\" @mousedown=\"startDrag\" @touchstart=\"startDrag\">\n        <v-icon class=\"minimized-icon\">mdi-compass-rose</v-icon>\n        <span class=\"minimized-title\">{{ $t('Polar Alignment') }}</span>\n      </div>\n      <div class=\"minimized-controls\">\n        <button class=\"minimized-btn\" @click=\"toggleMinimize\" :title=\"$t('Expand')\">\n          <v-icon>mdi-chevron-up</v-icon>\n        </button>\n      </div>\n    </div>\n    <div class=\"minimized-status\">\n      <div class=\"status-indicator\" :class=\"{ 'online': isConnected }\"></div>\n      <span class=\"status-text\">{{ isConnected ? $t('Connected') : $t('Disconnected') }}</span>\n    </div>\n  </div>\n\n  <!-- 完整界面 -->\n  <div v-else-if=\"visible\" class=\"polar-alignment-widget\"\n    :class=\"{ 'collapsed': isCollapsed, 'dragging': isDraggingState }\"\n    :style=\"{ left: position.x + 'px', top: position.y + 'px', pointerEvents: (showTrajectoryOverlay && overlayMode === 'fullscreen' ? 'none' : 'auto') }\">\n\n    <!-- 拖动手柄 -->\n    <div class=\"widget-header\">\n      <div class=\"header-drag-area\" @mousedown=\"startDrag\" @touchstart=\"startDrag\">\n        <div class=\"header-left\">\n          <v-icon class=\"header-icon\">mdi-compass-rose</v-icon>\n          <span class=\"header-title\">{{ $t('Polar Alignment Calibration') }}</span>\n          <div class=\"connection-indicator\">\n            <div class=\"status-dot\" :class=\"{ 'online': isConnected }\"></div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"header-controls\">\n        <button class=\"header-btn\" @click=\"toggleCollapse\" :title=\"isCollapsed ? $t('Expand') : $t('Collapse')\">\n          <v-icon>{{ isCollapsed ? 'mdi-chevron-down' : 'mdi-chevron-up' }}</v-icon>\n        </button>\n        <button class=\"header-btn\" @click=\"toggleTrajectoryOverlay\" :title=\"showTrajectoryOverlay ? $t('Hide Trajectory Canvas') : $t('Show Trajectory Canvas')\">\n          <v-icon>{{ showTrajectoryOverlay ? 'mdi-eye-off' : 'mdi-crosshairs-gps' }}</v-icon>\n        </button>\n        <button class=\"header-btn\" @click=\"toggleMinimize\" :title=\"$t('Minimize')\">\n          <v-icon>mdi-minus</v-icon>\n        </button>\n      </div>\n    </div>\n\n    <!-- 收缩状态内容 -->\n    <div v-if=\"isCollapsed\" class=\"widget-content collapsed\" :class=\"{ 'dragging': isDraggingState }\">\n      <div class=\"collapsed-info\">\n        <div class=\"collapsed-progress\">\n          <div class=\"progress-circle\" :style=\"{ '--progress': progressPercentage + '%' }\">\n            <span class=\"progress-text\">{{ Math.round(progressPercentage) }}%</span>\n          </div>\n        </div>\n        <div class=\"collapsed-status\">\n          <div class=\"status-item\">\n            <span class=\"status-label\">方位角:</span>\n            <span class=\"status-value\" :class=\"{ 'needs-adjustment': needsAzimuthAdjustment }\">\n              {{ formatAdjustmentValue(adjustment.azimuth) }}\n            </span>\n          </div>\n          <div class=\"status-item\">\n            <span class=\"status-label\">高度角:</span>\n            <span class=\"status-value\" :class=\"{ 'needs-adjustment': needsAltitudeAdjustment }\">\n              {{ formatAdjustmentValue(adjustment.altitude) }}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 展开状态内容 -->\n    <div v-else class=\"widget-content expanded\" :class=\"{ 'dragging': isDraggingState }\">\n      <div class=\"content-sections\">\n        <!-- 校准步骤进度条 -->\n        <div class=\"calibration-progress\">\n          <div class=\"progress-header\">\n            <div class=\"progress-title\">{{ $t('Calibration Progress') }}</div>\n            <div v-if=\"progressPercentage >= 75 && progressPercentage < 95\" class=\"calibration-loop-info\">\n              {{ $t('Calibration Round', [calibrationLoopCount]) }}\n            </div>\n          </div>\n          <div class=\"progress-bar\">\n            <div class=\"progress-fill\" :style=\"{ width: progressPercentage + '%' }\"></div>\n            <div class=\"progress-nodes\">\n              <!-- 初始化节点 -->\n              <div class=\"progress-node\" :class=\"getStepClass(0)\">\n                <div class=\"node-circle\">\n                  <v-icon v-if=\"progressPercentage >= 15\">mdi-check</v-icon>\n                  <v-icon v-else>mdi-cog</v-icon>\n                </div>\n                <div class=\"node-label\">{{ $t('Initialization') }}</div>\n              </div>\n\n              <!-- 第一次校准节点 -->\n              <div class=\"progress-node\" :class=\"getStepClass(1)\">\n                <div class=\"node-circle\">\n                  <v-icon v-if=\"progressPercentage >= 25\">mdi-check</v-icon>\n                  <span v-else>1</span>\n                </div>\n                <div class=\"node-label\">{{ $t('First Calibration') }}</div>\n              </div>\n\n              <!-- 第二次校准节点 -->\n              <div class=\"progress-node\" :class=\"getStepClass(2)\">\n                <div class=\"node-circle\">\n                  <v-icon v-if=\"progressPercentage >= 50\">mdi-check</v-icon>\n                  <span v-else>2</span>\n                </div>\n                <div class=\"node-label\">{{ $t('Second Calibration') }}</div>\n              </div>\n\n              <!-- 第三次校准节点 -->\n              <div class=\"progress-node\" :class=\"getStepClass(3)\">\n                <div class=\"node-circle\">\n                  <v-icon v-if=\"progressPercentage >= 75\">mdi-check</v-icon>\n                  <span v-else>3</span>\n                </div>\n                <div class=\"node-label\">{{ $t('Third Calibration') }}</div>\n              </div>\n\n              <!-- 校准调整节点 -->\n              <div class=\"progress-node calibration-node\"\n                :class=\"{ 'active': progressPercentage >= 75, 'looping': progressPercentage >= 75 && progressPercentage < 95 }\">\n                <div class=\"node-circle\">\n                  <v-icon v-if=\"progressPercentage >= 95\">mdi-check</v-icon>\n                  <v-icon v-else-if=\"progressPercentage >= 75\">mdi-refresh</v-icon>\n                  <v-icon v-else>mdi-tune</v-icon>\n                </div>\n                <div class=\"node-label\">{{ $t('Calibration') }}</div>\n              </div>\n\n              <!-- 最终验证节点 -->\n              <div class=\"progress-node verification-node\" :class=\"{ 'active': progressPercentage >= 95 }\">\n                <div class=\"node-circle\">\n                  <v-icon v-if=\"isPolarAligned\">mdi-check</v-icon>\n                  <v-icon v-else>mdi-target</v-icon>\n                </div>\n                <div class=\"node-label\">{{ $t('Verification') }}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- 日志显示 -->\n        <div class=\"log-section\">\n          <div class=\"log-display\">\n            <div v-if=\"displayLogs.length > 0\" class=\"latest-log\" :class=\"displayLogs[0].level\">\n              <div class=\"log-timestamp\">{{ formatTime(displayLogs[0].timestamp) }}</div>\n              <div class=\"log-message\">{{ displayLogs[0].message }}</div>\n            </div>\n            <div v-else class=\"log-empty\">\n              {{ $t('No activity logs') }}\n            </div>\n          </div>\n        </div>\n\n        <!-- 位置信息 -->\n        <div class=\"position-section\">\n          <div class=\"position-grid\">\n            <div class=\"position-cell current\">\n              <div class=\"cell-label\">{{ $t('current RA') }}</div>\n              <div class=\"cell-value\">{{ currentPosition.ra }}</div>\n            </div>\n            <div class=\"position-cell current\">\n              <div class=\"cell-label\">{{ $t('current DEC') }}</div>\n              <div class=\"cell-value\">{{ currentPosition.dec }}</div>\n            </div>\n            <div class=\"position-cell target\">\n              <div class=\"cell-label\">{{ $t('target RA') }}</div>\n              <div class=\"cell-value\">{{ targetPosition.ra }}</div>\n            </div>\n            <div class=\"position-cell target\">\n              <div class=\"cell-label\">{{ $t('target DEC') }}</div>\n              <div class=\"cell-value\">{{ targetPosition.dec }}</div>\n            </div>\n          </div>\n        </div>\n\n        <!-- 调整指导 -->\n        <div class=\"adjustment-section\">\n          <div class=\"adjustment-instructions\">\n            <div class=\"adjustment-item\" :class=\"{ 'active': needsAzimuthAdjustment }\">\n              <div class=\"adjustment-icon\">\n                <v-icon>mdi-compass</v-icon>\n              </div>\n              <div class=\"adjustment-details\">\n                <div class=\"adjustment-header\">\n                  <span class=\"adjustment-type\">{{ $t('Azimuth') }}</span>\n                  <span class=\"adjustment-value\">{{ formatAdjustmentValue(adjustment.azimuth) }}</span>\n                </div>\n                <div class=\"adjustment-action\">\n                  {{ needsAzimuthAdjustment ? getAzimuthAction(adjustment.azimuth) : $t('No adjustment needed') }}\n                </div>\n\n              </div>\n            </div>\n\n            <div class=\"adjustment-item\" :class=\"{ 'active': needsAltitudeAdjustment }\">\n              <div class=\"adjustment-icon\">\n                <v-icon>mdi-compass</v-icon>\n              </div>\n              <div class=\"adjustment-details\">\n                <div class=\"adjustment-header\">\n                  <span class=\"adjustment-type\">{{ $t('Altitude') }}</span>\n                  <span class=\"adjustment-value\">{{ formatAdjustmentValue(adjustment.altitude) }}</span>\n                </div>\n                <div class=\"adjustment-action\">\n                  {{ needsAltitudeAdjustment ? getAltitudeAction(adjustment.altitude) : $t('No adjustment needed') }}\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- 控制按钮 -->\n        <div class=\"control-section\">\n          <div class=\"action-buttons\">\n            <button class=\"action-btn primary\" @click=\"startAutoCalibration\" :disabled=\"!canAutoCalibrate\">\n              <v-icon v-if=\"!isCalibrationRunning\">mdi-play-circle</v-icon>\n              <v-icon v-else>mdi-stop-circle</v-icon>\n              <span>{{ isCalibrationRunning ? $t('Stop Calibration') : $t('Start Auto Calibration') }}</span>\n            </button>\n\n\n\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- 轨迹画布：全屏模式 -->\n  <div v-if=\"visible && showTrajectoryOverlay && overlayMode === 'fullscreen'\" class=\"trajectory-overlay\"\n       @wheel.prevent=\"onOverlayWheel\" @mousedown.stop @touchstart.stop>\n    <canvas ref=\"trajectoryCanvas\"></canvas>\n    <button class=\"overlay-close-btn\" @click.stop=\"toggleTrajectoryOverlay\" :title=\"$t('Hide Trajectory Canvas')\">\n      <v-icon>mdi-close</v-icon>\n    </button>\n    <div class=\"overlay-hint\">{{ $t('Trajectory.Instruction') }}</div>\n    <div class=\"overlay-panel\">\n      <div class=\"panel-row\">\n        <span class=\"panel-label\">{{ $t('Current') }}:</span>\n        <span class=\"panel-value\">RA {{ currentPosition.ra }} / DEC {{ currentPosition.dec }}</span>\n      </div>\n      <div class=\"panel-row\">\n        <span class=\"panel-label\">{{ $t('Target') }}:</span>\n        <span class=\"panel-value\">RA {{ targetPosition.ra }} / DEC {{ targetPosition.dec }}</span>\n      </div>\n      <div class=\"panel-actions\">\n        <!-- <button class=\"panel-btn\" disabled :title=\"$t('Disabled')\">{{ $t('Clear All Trajectory') }}</button> -->\n        <button class=\"panel-btn\" @click.stop=\"clearOldTrajectory\">{{ $t('Clear Old Trajectory') }}</button>\n        <button class=\"panel-btn\" @click.stop=\"switchToWindowed\">{{ $t('Switch to Windowed Mode') }}</button>\n      </div>\n    </div>\n  </div>\n\n  <!-- 轨迹画布：窗口模式 -->\n  <div v-if=\"visible && showTrajectoryOverlay && overlayMode === 'windowed'\"\n       class=\"trajectory-window\" :style=\"{ left: windowedRect.x + 'px', top: windowedRect.y + 'px', width: windowedRect.width + 'px', height: windowedRect.height + 'px' }\"\n       @mousedown.stop @touchstart.stop>\n    <div class=\"window-header\" @mousedown.stop=\"startWindowDrag\" @touchstart.stop=\"startWindowDrag\">\n      <span class=\"window-title\">{{ $t('Trajectory') }}</span>\n      <div class=\"window-actions\">\n        <button class=\"panel-btn small\" @click.stop=\"switchToFullscreen\">{{ $t('Switch to Fullscreen Mode') }}</button>\n        <button class=\"panel-btn small\" @click.stop=\"clearOldTrajectory\">{{ $t('Clear Old Trajectory') }}</button>\n        <!-- <button class=\"panel-btn small\" disabled :title=\"$t('Disabled')\">{{ $t('Clear All Trajectory') }}</button> -->\n        <button class=\"panel-btn small\" @click.stop=\"toggleTrajectoryOverlay\" :title=\"$t('Hide Trajectory Canvas')\"><v-icon>mdi-close</v-icon></button>\n      </div>\n    </div>\n    <div class=\"window-content\">\n      <canvas ref=\"trajectoryCanvas\"></canvas>\n    </div>\n  </div>\n  </div>\n</template>\n\n<script>\n// 常量定义\nconst COLORS = {\n  PRIMARY: '#64b5f6',\n  SUCCESS: '#4caf50',\n  WARNING: '#ff9800',\n  ERROR: '#f44336',\n  INFO: '#2196f3',\n  WHITE: '#ffffff',\n  BACKGROUND: 'rgba(35, 35, 45, 0.95)',\n  SURFACE: 'rgba(60, 60, 70, 0.9)'\n}\n\nconst CALIBRATION_PHASES = {\n  INITIAL: 'initial',\n  COLLECTING: 'collecting',\n  ADJUSTING: 'adjusting',\n  VERIFYING: 'verifying'\n}\n\nconst PROGRESS_THRESHOLDS = {\n  INITIALIZATION: 15,\n  FIRST_CALIBRATION: 25,\n  SECOND_CALIBRATION: 50,\n  THIRD_CALIBRATION: 75,\n  CALIBRATION_LOOP: 95,\n  COMPLETION: 100\n}\n\nconst DIMENSIONS = {\n  MINIMIZED: { width: 250, height: 80 },\n  COLLAPSED: { width: 300, height: 120 },\n  EXPANDED: { width: 350, height: 400 }\n}\n\nconst LOG_LIMIT = 100\nconst DISPLAY_LOG_LIMIT = 10\n\nexport default {\n  name: 'AutomaticPolarAlignmentCalibration',\n\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    autoStart: {\n      type: Boolean,\n      default: false\n    },\n    // 新增：传入调整数据的单位（'deg' | 'arcmin' | 'arcsec'）\n    adjustmentUnit: { type: String, default: 'arcmin' },\n\n    // 新增：用户站位视角（'north' | 'south'），用于左右映射\n    facingPole: { type: String, default: 'north' },\n\n    // 新增：动作死区（以角分定义，UI判定是否需要动作）\n    deadbandArcmin: { type: Number, default: 0.5 }\n  },\n\n  data() {\n    return {\n      // 连接状态\n      isConnected: false,\n\n      // 位置信息\n      currentPosition: {\n        ra: '00h 00m 00s',\n        dec: '+00° 00\\' 00\"'\n      },\n      targetPosition: {\n        ra: '00h 00m 00s',\n        dec: '+00° 00\\' 00\"'\n      },\n      previousPosition: {\n        ra: '00h 00m 00s',\n        dec: '+00° 00\\' 00\"'\n      },\n\n      // 校准数据\n      isCalibrationComplete: false,\n      isPolarAligned: false,\n\n      // 调整信息\n      adjustment: {\n        azimuth: 0.0,\n        altitude: 0.0\n      },\n\n      // 日志系统 - 使用循环数组优化内存\n      logs: [],\n      logIndex: 0,\n      logCapacity: LOG_LIMIT,\n\n      // 校准运行状态\n      isCalibrationRunning: false,\n\n      // 视场数据\n      fieldData: null,\n\n      // 当前进度\n      currentProgress: 0,\n\n      // === 新增：界面控制状态 ===\n      // 拖动状态\n      isDragging: false,\n      dragOffset: { x: 0, y: 0 },\n\n      // 控件位置\n      position: { x: 50, y: 50 },\n\n      // 界面状态\n      isMinimized: false,\n      isCollapsed: false,\n\n      // === 新增：性能优化 ===\n      // 缓存尺寸计算结果\n      cachedDimensions: {\n        width: 350,\n        height: 400\n      },\n      // 拖动状态标记\n      isDraggingState: false,\n\n      // 内存清理定时器\n      memoryCleanupTimer: null,\n\n      // 计算缓存\n      cachedAzimuthArcmin: null,\n      cachedAltitudeArcmin: null,\n      lastAzimuthValue: null,\n      lastAltitudeValue: null,\n\n      // 拖动性能优化\n      lastDragTime: 0,\n\n      // 极轴偏移量\n      polarAxisOffset: {\n        azimuth: 0,\n        altitude: 0\n      },\n\n      // 校准循环计数\n      calibrationLoopCount: 0,\n      lastCalibrationProgress: 0,\n\n      // 校准阶段状态\n      calibrationPhase: 'initial', // 'initial', 'collecting', 'adjusting', 'verifying'\n      calibrationPoints: [], // 存储三个校准点的坐标\n      maxCalibrationPoints: 3, // 最大校准点数量\n      targetPoint: null, // 存储目标点坐标\n\n      // 移除假极轴相关数据\n      // fakePolarAxis: {\n      //   ra: null,\n      //   dec: null,\n      //   calculated: false\n      // },\n\n      // === 轨迹画布状态 ===\n      showTrajectoryOverlay: false,\n      overlayMode: 'fullscreen', // 'fullscreen' | 'windowed'\n      trajectoryScale: 1, // 已弃用（不再使用手动缩放）\n      autoFitPxPerDeg: 40, // 自动适配计算出的 px/deg（基于当前画布尺寸与数据范围）\n      trajectoryPoints: [], // [{x, y}] in overlay canvas space after transform\n      rawTrajectoryPoints: [], // 保存原始的 {ra, dec} 序列\n      lastRawPosition: null, // {ra, dec} numeric\n      targetRawPosition: null, // {ra, dec} numeric, fixed as overlay center reference\n      windowedRect: { x: 40, y: 80, width: 420, height: 300 },\n      // 逻辑画布尺寸：用于窗口模式将“全屏画布”按比例缩放进窗口\n      baseCanvasLogicalSize: { width: 1280, height: 720 },\n      windowDrag: { active: false, offsetX: 0, offsetY: 0 },\n      // === 视图变换（仅缩小比例；以目标与首点填满画布） ===\n      currentPxPerDeg: null, // 当前像素/度，只会缩小\n      viewMinWorldX: null, // 世界坐标：X 为 dRA(unwrapped)，Y 为 dDec\n      viewMaxWorldX: null,\n      viewMinWorldY: null,\n      viewMaxWorldY: null,\n      raUnwrapAnchor: null, // dRA 展开锚点（首点相对目标）\n      viewPadRatioX: 0.12,\n      viewPadRatioY: 0.10,\n      viewOffsetXPx: 0,\n      viewOffsetYPx: 0,\n      // 轨迹点合并容差（角分）\n      trajectoryMergeTolArcmin: 2.0,  // 轨迹点合并容差（角分）\n      calibrationCircleArcmin: 1.0,  // 校准圆半径（角分）-- 约等于校准精度\n\n      hasAcceptUpdateMessage: false, // 是否已经接受更新消息,防止由于组件加载顺序导致组件更新丢失\n    }\n  },\n\n  computed: {\n    // 显示的日志 - 使用缓存优化\n    displayLogs() {\n      // 返回最近的10条日志，按时间倒序（用于显示最新一条）\n      const logs = this.logs\n      if (logs.length <= DISPLAY_LOG_LIMIT) {\n        return logs.slice().reverse()\n      }\n      return logs.slice(-DISPLAY_LOG_LIMIT).reverse()\n    },\n\n    // 校准进度百分比\n    progressPercentage() {\n      // 使用从后端传入的进度\n      return this.currentProgress\n    },\n\n    // 是否可以自动校准\n    canAutoCalibrate() {\n      return this.isConnected\n    },\n\n    // 是否需要方位角调整 - 使用缓存避免重复计算\n    needsAzimuthAdjustment() {\n      const v = this.adjustment?.azimuth\n      if (!Number.isFinite(v)) return false\n      // 使用缓存的值，避免重复计算\n      return this.cachedAzimuthArcmin !== null ? \n        Math.abs(this.cachedAzimuthArcmin) > this.deadbandArcmin : \n        Math.abs(this.unitToArcmin(v, this.adjustmentUnit)) > this.deadbandArcmin\n    },\n\n    // 是否需要高度角调整 - 使用缓存避免重复计算\n    needsAltitudeAdjustment() {\n      const v = this.adjustment?.altitude\n      if (!Number.isFinite(v)) return false\n      // 使用缓存的值，避免重复计算\n      return this.cachedAltitudeArcmin !== null ? \n        Math.abs(this.cachedAltitudeArcmin) > this.deadbandArcmin : \n        Math.abs(this.unitToArcmin(v, this.adjustmentUnit)) > this.deadbandArcmin\n    }\n  },\n\n  watch: {\n    visible(newVal) {\n      if (newVal && this.autoStart) {\n        this.startAutoCalibration()\n      }\n    },\n    \n    // 监听当前坐标变化，自动更新朝向极点\n    '$store.state.currentLocation.lat': {\n      handler(newLat, oldLat) {\n        if (newLat !== oldLat && newLat !== undefined) {\n          const facingPole = this.calculateFacingPole()\n          this.addLog(this.$t('Location Changed', [facingPole, newLat]), 'info')\n          \n          // 如果正在调整阶段，重新计算调整建议\n          if (this.calibrationPhase === 'adjusting') {\n            this.addLog(this.$t('Recalculating Adjustment Directions'), 'info')\n          }\n        }\n      },\n      immediate: false\n    },\n\n    // 监听调整值变化，更新缓存 - 使用防抖避免频繁更新\n    'adjustment.azimuth': {\n      handler: function(newVal) {\n        if (Number.isFinite(newVal)) {\n          // 清除之前的定时器\n          if (this._azimuthUpdateTimer) {\n            clearTimeout(this._azimuthUpdateTimer)\n          }\n          // 使用防抖，延迟100ms更新\n          this._azimuthUpdateTimer = setTimeout(() => {\n            this.cachedAzimuthArcmin = this.unitToArcmin(newVal, this.adjustmentUnit)\n            this.lastAzimuthValue = newVal\n          }, 100)\n        }\n      },\n      immediate: true\n    },\n\n    'adjustment.altitude': {\n      handler: function(newVal) {\n        if (Number.isFinite(newVal)) {\n          // 清除之前的定时器\n          if (this._altitudeUpdateTimer) {\n            clearTimeout(this._altitudeUpdateTimer)\n          }\n          // 使用防抖，延迟100ms更新\n          this._altitudeUpdateTimer = setTimeout(() => {\n            this.cachedAltitudeArcmin = this.unitToArcmin(newVal, this.adjustmentUnit)\n            this.lastAltitudeValue = newVal\n          }, 100)\n        }\n      },\n      immediate: true\n    }\n  },\n\n    mounted() {\n      // 实现组件初始化逻辑\n      this.initialize()\n\n      // 初始化缓存的尺寸信息\n      this.updateCachedDimensions()\n\n      // 监听信号总线事件\n      this.$bus.$on('showPolarAlignment', this.showInterface)\n      this.$bus.$on('hidePolarAlignment', this.hideInterface)\n\n      // 监听赤道仪连接状态\n      this.$bus.$on('MountConnected', this.updateMountConnection)\n\n      // 接收状态更新\n      this.$bus.$on('PolarAlignmentState', this.updatePolarAlignmentState)\n\n      // 监听视场数据更新\n      this.$bus.$on('FieldDataUpdate', this.updateFieldData)\n\n      // 监听卡片信息更新\n      this.$bus.$on('updateCardInfo', this.updateCardInfo)\n\n      // 监听自动校准状态\n      this.$bus.$on('PolarAlignmentIsRunning', this.updatePolarAlignmentIsRunning)\n\n      // 组件加载完成后，若尚未收到更新消息，则主动请求极轴对齐状态\n      if (!this.hasAcceptUpdateMessage) {\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'getPolarAlignmentState')\n      }\n\n      // 启动定期内存清理（每5分钟清理一次）\n      this.startMemoryCleanup()\n    },\n\n    beforeDestroy() {\n      // 移除信号总线监听\n      this.$bus.$off('showPolarAlignment', this.showInterface)\n      this.$bus.$off('hidePolarAlignment', this.hideInterface)\n      this.$bus.$off('MountConnected', this.updateMountConnection)\n      this.$bus.$off('PolarAlignmentState', this.updatePolarAlignmentState)\n      this.$bus.$off('FieldDataUpdate', this.updateFieldData)\n      this.$bus.$off('updateCardInfo', this.updateCardInfo)\n      this.$bus.$off('PolarAlignmentIsRunning', this.updatePolarAlignmentIsRunning)\n\n      // 清理拖动事件监听\n      this.cleanupDragListeners()\n\n      // 清理缓存数据\n      this.clearCachedData()\n\n      // 停止内存清理定时器\n      this.stopMemoryCleanup()\n\n      // 清理防抖定时器\n      this.clearDebounceTimers()\n\n      // 实现组件销毁逻辑\n      this.cleanup()\n    },\n\n    methods: {\n      // ========================================\n      // 信号总线事件处理\n      // ========================================\n      showInterface() {\n        this.$emit('update:visible', true)\n      },\n\n      hideInterface() {\n        this.$emit('update:visible', false)\n      },\n\n      updateMountConnection(status) {\n        this.isConnected = status === 1\n        const statusText = this.isConnected ? this.$t('Connected') : this.$t('Disconnected')\n        this.addLog(this.$t('Mount Connection Status', [statusText]), this.isConnected ? 'success' : 'warning')\n      },\n\n      // ========================================\n      // 初始化和清理\n      // ========================================\n      initialize() {\n        this.addLog(this.$t('Polar Alignment Component Initialized'), 'info')\n        \n        // 记录当前朝向极点\n        const facingPole = this.calculateFacingPole()\n        const lat = this.$store?.state?.currentLocation?.lat || 'unknown'\n        this.addLog(this.$t('Facing Pole', [facingPole, lat]), 'info')\n      },\n\n      cleanup() {\n        this.addLog(this.$t('Polar Alignment Component Cleaned'), 'info')\n      },\n\n      // 内存使用监控（仅在开发环境）\n      getMemoryUsage() {\n        if (process.env.NODE_ENV === 'development' && performance.memory) {\n          return {\n            usedJSHeapSize: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024) + 'MB',\n            totalJSHeapSize: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024) + 'MB',\n            jsHeapSizeLimit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024) + 'MB',\n            logsCount: this.logs.length,\n            calibrationPointsCount: this.calibrationPoints.length\n          }\n        }\n        return null\n      },\n\n      // 启动定期内存清理\n      startMemoryCleanup() {\n        this.memoryCleanupTimer = setInterval(() => {\n          this.performMemoryCleanup()\n        }, 5 * 60 * 1000) // 每5分钟清理一次\n      },\n\n      // 停止内存清理定时器\n      stopMemoryCleanup() {\n        if (this.memoryCleanupTimer) {\n          clearInterval(this.memoryCleanupTimer)\n          this.memoryCleanupTimer = null\n        }\n      },\n\n      // 执行内存清理\n      performMemoryCleanup() {\n        // 清理过期的日志（保留最近50条）\n        if (this.logs.length > 50) {\n          this.logs = this.logs.slice(-50)\n          this.logIndex = Math.min(this.logIndex, 50)\n        }\n\n        // 清理过期的校准点（如果超过最大数量）\n        if (this.calibrationPoints.length > this.maxCalibrationPoints) {\n          this.calibrationPoints = this.calibrationPoints.slice(-this.maxCalibrationPoints)\n        }\n\n        // 强制垃圾回收（如果可用）\n        if (window.gc && typeof window.gc === 'function') {\n          window.gc()\n        }\n\n        // 在开发环境输出内存使用情况\n        if (process.env.NODE_ENV === 'development') {\n          const memoryInfo = this.getMemoryUsage()\n          if (memoryInfo) {\n            console.log('Memory cleanup performed:', memoryInfo)\n          }\n        }\n      },\n\n      // 清理拖动事件监听器\n      cleanupDragListeners() {\n        document.removeEventListener('mousemove', this.onDrag)\n        document.removeEventListener('mouseup', this.stopDrag)\n        document.removeEventListener('touchmove', this.onDrag)\n        document.removeEventListener('touchend', this.stopDrag)\n      },\n\n      // 清理防抖定时器\n      clearDebounceTimers() {\n        if (this._azimuthUpdateTimer) {\n          clearTimeout(this._azimuthUpdateTimer)\n          this._azimuthUpdateTimer = null\n        }\n        if (this._altitudeUpdateTimer) {\n          clearTimeout(this._altitudeUpdateTimer)\n          this._altitudeUpdateTimer = null\n        }\n      },\n\n      // 清理缓存数据\n      clearCachedData() {\n        // 清理计算缓存\n        this.cachedAzimuthArcmin = null\n        this.cachedAltitudeArcmin = null\n        this.lastAzimuthValue = null\n        this.lastAltitudeValue = null\n        this.lastDragTime = 0\n        \n        // 清理日志数据\n        this.logs = []\n        this.logIndex = 0\n        \n        // 清理校准数据\n        this.calibrationPoints = []\n        this.targetPoint = null\n        this.fieldData = null\n        \n        // 清理位置数据\n        this.currentPosition = { ra: '00h 00m 00s', dec: '+00° 00\\' 00\"' }\n        this.targetPosition = { ra: '00h 00m 00s', dec: '+00° 00\\' 00\"' }\n        this.previousPosition = { ra: '00h 00m 00s', dec: '+00° 00\\' 00\"' }\n        \n        // 清理调整数据\n        this.adjustment = { azimuth: 0.0, altitude: 0.0 }\n        this.polarAxisOffset = { azimuth: 0, altitude: 0 }\n        \n        // 重置状态\n        this.isCalibrationComplete = false\n        this.isPolarAligned = false\n        this.calibrationLoopCount = 0\n        this.lastCalibrationProgress = 0\n        this.calibrationPhase = 'initial'\n      },\n\n      // ========================================\n      // 拖动控制方法\n      // ========================================\n      startDrag(event) {\n        if (event.target.closest('.header-controls, .minimized-controls, .header-btn, .minimized-btn')) {\n          return\n        }\n\n        this.isDragging = true\n        this.isDraggingState = true\n\n        // 添加dragging类，移除过渡动画\n        this.$el.classList.add('dragging')\n\n        const rect = event.currentTarget.getBoundingClientRect()\n        const clientX = event.clientX || event.touches?.[0]?.clientX || 0\n        const clientY = event.clientY || event.touches?.[0]?.clientY || 0\n\n        this.dragOffset = {\n          x: clientX - rect.left,\n          y: clientY - rect.top\n        }\n\n        // 预计算并缓存尺寸，避免拖动时重复计算\n        this.updateCachedDimensions()\n\n        // 优化触摸事件处理\n        if (event.type === 'touchstart') {\n          document.addEventListener('touchmove', this.onDrag, { passive: false })\n          document.addEventListener('touchend', this.stopDrag, { passive: false })\n        } else {\n          document.addEventListener('mousemove', this.onDrag)\n          document.addEventListener('mouseup', this.stopDrag)\n        }\n      },\n\n      onDrag(event) {\n        if (!this.isDragging) return\n\n        // 阻止默认行为，提高触摸响应性\n        if (event.type === 'touchmove') {\n          event.preventDefault()\n        }\n\n        // 使用更高效的节流机制\n        const now = Date.now()\n        if (this.lastDragTime && now - this.lastDragTime < 16) return // 60fps限制\n        this.lastDragTime = now\n        \n        const clientX = event.clientX || event.touches?.[0]?.clientX || 0\n        const clientY = event.clientY || event.touches?.[0]?.clientY || 0\n\n        const newX = clientX - this.dragOffset.x\n        const newY = clientY - this.dragOffset.y\n\n        // 使用缓存的尺寸，避免重复计算\n        const maxX = window.innerWidth - this.cachedDimensions.width\n        const maxY = window.innerHeight - this.cachedDimensions.height\n\n        this.position = {\n          x: Math.max(0, Math.min(newX, maxX)),\n          y: Math.max(0, Math.min(newY, maxY))\n        }\n      },\n\n      stopDrag() {\n        this.isDragging = false\n        this.isDraggingState = false\n\n        // 移除dragging类，恢复过渡动画\n        this.$el.classList.remove('dragging')\n\n        // 清理所有事件监听器\n        this.cleanupDragListeners()\n      },\n\n      // 新增：更新缓存的尺寸信息\n      updateCachedDimensions() {\n        if (this.isMinimized) {\n          this.cachedDimensions = { ...DIMENSIONS.MINIMIZED }\n        } else if (this.isCollapsed) {\n          this.cachedDimensions = { ...DIMENSIONS.COLLAPSED }\n        } else {\n          // 展开状态，使用基础尺寸\n          this.cachedDimensions = { ...DIMENSIONS.EXPANDED }\n        }\n      },\n\n      // 获取组件高度（优化版本）\n      getComponentHeight() {\n        // 如果正在拖动，使用缓存的尺寸\n        if (this.isDraggingState) {\n          return this.cachedDimensions.height\n        }\n\n        // 正常状态下的计算\n        if (this.isMinimized) {\n          return 80 // 最小化状态高度\n        } else if (this.isCollapsed) {\n          return 120 // 收缩状态高度\n        } else {\n          // 展开状态，根据内容自适应\n          const baseHeight = 400 // 基础高度\n          const logHeight = this.displayLogs.length > 0 ? 60 : 40\n          const adjustmentHeight = this.needsAzimuthAdjustment || this.needsAltitudeAdjustment ? 120 : 80\n          return Math.min(baseHeight + logHeight + adjustmentHeight, window.innerHeight * 0.8)\n        }\n      },\n\n      // ========================================\n      // 界面状态控制方法\n      // ========================================\n      toggleMinimize() {\n        this.isMinimized = !this.isMinimized\n        this.isCollapsed = false\n        // 更新缓存的尺寸信息\n        this.updateCachedDimensions()\n        this.addLog(this.isMinimized ? this.$t('Interface Minimized') : this.$t('Interface Expanded'), 'info')\n      },\n\n      toggleCollapse() {\n        this.isCollapsed = !this.isCollapsed\n        // 更新缓存的尺寸信息\n        this.updateCachedDimensions()\n        this.addLog(this.isCollapsed ? this.$t('Interface Collapsed') : this.$t('Interface Expanded'), 'info')\n      },\n\n      // === 轨迹画布相关 ===\n      toggleTrajectoryOverlay() {\n        this.showTrajectoryOverlay = !this.showTrajectoryOverlay\n        if (this.showTrajectoryOverlay) {\n          if (this.overlayMode === 'fullscreen') this.enableOverlayEventCapture(); else this.disableOverlayEventCapture()\n          this.$nextTick(() => {\n            this.initTrajectoryCanvas()\n            this.redrawTrajectory()\n          })\n        } else {\n          this.disableOverlayEventCapture()\n        }\n      },\n      switchToWindowed() {\n        this.overlayMode = 'windowed'\n        this.disableOverlayEventCapture()\n        this.resetViewMapping()\n        this.$nextTick(() => {\n          this.initTrajectoryCanvas()\n          this.redrawTrajectory()\n        })\n      },\n      switchToFullscreen() {\n        this.overlayMode = 'fullscreen'\n        this.enableOverlayEventCapture()\n        this.resetViewMapping()\n        this.clearTrajectoryCanvas()\n        this.$nextTick(() => {\n          this.initTrajectoryCanvas()\n          this.redrawTrajectory()\n        })\n      },\n      onOverlayWheel(e) {\n        // 已取消全屏缩放需求：忽略滚轮，仅防止穿透\n        e.preventDefault()\n      },\n      resetViewMapping() {\n        this.currentPxPerDeg = null\n        this.viewMinWorldX = null\n        this.viewMaxWorldX = null\n        this.viewMinWorldY = null\n        this.viewMaxWorldY = null\n        this.raUnwrapAnchor = null\n        this.viewOffsetXPx = 0\n        this.viewOffsetYPx = 0\n      },\n      // 清空视图映射，但保留 RA 展开锚点，防止清理旧点或模式切换时方向翻转\n      resetViewMappingKeepAnchor() {\n        const anchor = this.raUnwrapAnchor\n        this.currentPxPerDeg = null\n        this.viewMinWorldX = null\n        this.viewMaxWorldX = null\n        this.viewMinWorldY = null\n        this.viewMaxWorldY = null\n        this.viewOffsetXPx = 0\n        this.viewOffsetYPx = 0\n        this.raUnwrapAnchor = anchor\n      },\n      startWindowDrag(event) {\n        const e = event.touches ? event.touches[0] : event\n        this.windowDrag.active = true\n        this.windowDrag.offsetX = e.clientX - this.windowedRect.x\n        this.windowDrag.offsetY = e.clientY - this.windowedRect.y\n        window.addEventListener('mousemove', this.onWindowDragMove, { passive: false })\n        window.addEventListener('mouseup', this.stopWindowDrag, { passive: false })\n        window.addEventListener('touchmove', this.onWindowDragMove, { passive: false })\n        window.addEventListener('touchend', this.stopWindowDrag, { passive: false })\n      },\n      onWindowDragMove(event) {\n        if (!this.windowDrag.active) return\n        const e = event.touches ? event.touches[0] : event\n        const nx = e.clientX - this.windowDrag.offsetX\n        const ny = e.clientY - this.windowDrag.offsetY\n        this.windowedRect.x = Math.max(0, Math.min(nx, window.innerWidth - this.windowedRect.width))\n        this.windowedRect.y = Math.max(0, Math.min(ny, window.innerHeight - this.windowedRect.height))\n      },\n      stopWindowDrag() {\n        this.windowDrag.active = false\n        window.removeEventListener('mousemove', this.onWindowDragMove)\n        window.removeEventListener('mouseup', this.stopWindowDrag)\n        window.removeEventListener('touchmove', this.onWindowDragMove)\n        window.removeEventListener('touchend', this.stopWindowDrag)\n      },\n      enableOverlayEventCapture() {\n        // 拦截全局滚轮/触摸/鼠标事件，避免穿透到底图\n        const preventAll = e => { e.preventDefault(); e.stopPropagation(); }\n        this._overlayHandlers = this._overlayHandlers || {}\n        this._overlayHandlers.wheel = preventAll\n        this._overlayHandlers.touchmove = preventAll\n        this._overlayHandlers.mousedown = preventAll\n        window.addEventListener('wheel', this._overlayHandlers.wheel, { passive: false, capture: true })\n        window.addEventListener('touchmove', this._overlayHandlers.touchmove, { passive: false, capture: true })\n        window.addEventListener('mousedown', this._overlayHandlers.mousedown, { passive: false, capture: true })\n      },\n      disableOverlayEventCapture() {\n        if (!this._overlayHandlers) return\n        window.removeEventListener('wheel', this._overlayHandlers.wheel, { capture: true })\n        window.removeEventListener('touchmove', this._overlayHandlers.touchmove, { capture: true })\n        window.removeEventListener('mousedown', this._overlayHandlers.mousedown, { capture: true })\n        this._overlayHandlers = null\n      },\n      clearAllTrajectory() {\n        this.rawTrajectoryPoints = []\n        this.trajectoryPoints = []\n        this.lastRawPosition = null\n        this.resetViewMapping()\n        this.redrawTrajectory()\n      },\n      clearOldTrajectory() {\n        if (this.rawTrajectoryPoints.length <= 2) return\n        this.rawTrajectoryPoints = this.rawTrajectoryPoints.slice(-2)\n        this.trajectoryPoints = []\n        this.resetViewMappingKeepAnchor()\n        this.redrawTrajectory()\n      },\n      initTrajectoryCanvas() {\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return\n        const dpr = window.devicePixelRatio || 1\n        let w, h, scaleX = 1, scaleY = 1\n        if (this.overlayMode === 'fullscreen') {\n          w = window.innerWidth\n          h = window.innerHeight\n          canvas.width = Math.round(w * dpr)\n          canvas.height = Math.round(h * dpr)\n          canvas.style.width = w + 'px'\n          canvas.style.height = h + 'px'\n        } else {\n          // 窗口模式：使用逻辑画布尺寸，绘制后整体缩放到窗口区域\n          const HEADER = 32\n          const vw = Math.max(50, Math.round(this.windowedRect.width))\n          const vh = Math.max(50, Math.round(this.windowedRect.height - HEADER))\n          const lw = this.baseCanvasLogicalSize.width\n          const lh = this.baseCanvasLogicalSize.height\n          // 计算将逻辑画布缩放到可视窗口的缩放比\n          scaleX = vw / lw\n          scaleY = vh / lh\n          // Canvas 显示尺寸 = 窗口尺寸，内部像素 = 显示尺寸 * DPR\n          w = vw\n          h = vh\n          canvas.style.width = vw + 'px'\n          canvas.style.height = vh + 'px'\n          canvas.width = Math.round(vw * dpr)\n          canvas.height = Math.round(vh * dpr)\n        }\n        const ctx = canvas.getContext('2d')\n        // 设置设备像素比缩放\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0)\n        // 窗口模式下增加整体缩放，将逻辑画布缩放到窗口尺寸\n        if (this.overlayMode === 'windowed') {\n          ctx.scale(scaleX, scaleY)\n        }\n        this.clearTrajectoryCanvas()\n        // 背景由 drawTargetMarker 统一绘制\n      },\n      clearTrajectoryCanvas() {\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return\n        const ctx = canvas.getContext('2d')\n        ctx.save()\n        ctx.setTransform(1, 0, 0, 1, 0, 0)\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n        ctx.restore()\n      },\n      // === 视图映射与工具 ===\n      getCanvasGeom() {\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return null\n        // 在窗口模式下，Canvas 内部逻辑为 baseCanvasLogicalSize，\n        // 外部通过 ctx.scale 显示到窗口，所以几何计算返回逻辑尺寸\n        const w = this.overlayMode === 'windowed' ? this.baseCanvasLogicalSize.width : canvas.clientWidth\n        const h = this.overlayMode === 'windowed' ? this.baseCanvasLogicalSize.height : canvas.clientHeight\n        const padX = Math.round(w * (this.viewPadRatioX || 0.12))\n        const padY = Math.round(h * (this.viewPadRatioY || 0.10))\n        return { w, h, padX, padY }\n      },\n      worldForPoint(raDeg, decDeg, timeMsOrDate = null) {\n        // 使用地平坐标（Az/Alt）绘制：世界坐标以“目标点”为原点\n        if (!this.targetRawPosition) return { x: 0, y: 0 }\n        const loc = this.$store?.state?.currentLocation || {}\n        const lat = Number(loc.lat)\n        const lon = Number(loc.lng)\n        if (!Number.isFinite(lat) || !Number.isFinite(lon)) return { x: 0, y: 0 }\n        const t = (timeMsOrDate instanceof Date) ? timeMsOrDate : new Date(timeMsOrDate || Date.now())\n        const cur = this.equatorialToHorizontal(raDeg, decDeg, t, lat, lon)\n        const tgt = this.equatorialToHorizontal(this.targetRawPosition.ra, this.targetRawPosition.dec, t, lat, lon)\n        let dx = this.normalizeAzDelta(cur.az - tgt.az) // dAz（考虑 0/360 包裹）\n        let dy = cur.alt - tgt.alt                    // dAlt\n        // 使用基于首点的展开锚点，避免跨 0/360 跳变\n        if (this.raUnwrapAnchor != null) {\n          while (dx - this.raUnwrapAnchor > 180) dx -= 360\n          while (dx - this.raUnwrapAnchor < -180) dx += 360\n        }\n        return { x: dx, y: dy }\n      },\n      makeWorldSeq(rawPoints) {\n        if (!this.targetRawPosition || !rawPoints || rawPoints.length === 0) return []\n        const loc = this.$store?.state?.currentLocation || {}\n        const lat = Number(loc.lat)\n        const lon = Number(loc.lng)\n        if (!Number.isFinite(lat) || !Number.isFinite(lon)) return []\n        const times = rawPoints.map((p, idx) => {\n          if (p.t) return new Date(p.t)\n          if (idx > 0 && rawPoints[idx - 1].t) return new Date(rawPoints[idx - 1].t)\n          return new Date()\n        })\n        const targAltAz = times.map(t => this.equatorialToHorizontal(this.targetRawPosition.ra, this.targetRawPosition.dec, t, lat, lon))\n        const curAltAz = rawPoints.map((p, i) => this.equatorialToHorizontal(p.ra, p.dec, times[i], lat, lon))\n        const dAzNorm = curAltAz.map((c, i) => this.normalizeAzDelta(c.az - targAltAz[i].az))\n        let anchor = this.raUnwrapAnchor\n        if (anchor == null && dAzNorm.length > 0) anchor = dAzNorm[0]\n        const aligned = dAzNorm.map(x => {\n          let v = x\n          while (v - anchor > 180) v -= 360\n          while (v - anchor < -180) v += 360\n          return v\n        })\n        const dAzs = this.unwrapRaDeltaSequence(aligned)\n        return rawPoints.map((p, i) => ({ x: dAzs[i], y: curAltAz[i].alt - targAltAz[i].alt }))\n      },\n      // 基于“全量轨迹”的连续展开，返回用于垂线的最后两点世界坐标（允许超出常规范围）\n      getWorldABForPerp() {\n        if (!this.targetRawPosition || this.rawTrajectoryPoints.length < 2) return null\n        const loc = this.$store?.state?.currentLocation || {}\n        const lat = Number(loc.lat)\n        const lon = Number(loc.lng)\n        if (!Number.isFinite(lat) || !Number.isFinite(lon)) return null\n        const all = this.rawTrajectoryPoints\n        const tA = new Date(all[all.length - 2].t || Date.now())\n        const tB = new Date(all[all.length - 1].t || Date.now())\n        const tgtA = this.equatorialToHorizontal(this.targetRawPosition.ra, this.targetRawPosition.dec, tA, lat, lon)\n        const tgtB = this.equatorialToHorizontal(this.targetRawPosition.ra, this.targetRawPosition.dec, tB, lat, lon)\n        const curA = this.equatorialToHorizontal(all[all.length - 2].ra, all[all.length - 2].dec, tA, lat, lon)\n        const curB = this.equatorialToHorizontal(all[all.length - 1].ra, all[all.length - 1].dec, tB, lat, lon)\n        let dxA = this.normalizeAzDelta(curA.az - tgtA.az)\n        let dxB = this.normalizeAzDelta(curB.az - tgtB.az)\n        if (this.raUnwrapAnchor != null) {\n          while (dxA - this.raUnwrapAnchor > 180) dxA -= 360\n          while (dxA - this.raUnwrapAnchor < -180) dxA += 360\n          while (dxB - this.raUnwrapAnchor > 180) dxB -= 360\n          while (dxB - this.raUnwrapAnchor < -180) dxB += 360\n        }\n        const A = { x: dxA, y: curA.alt - tgtA.alt }\n        const B = { x: dxB, y: curB.alt - tgtB.alt }\n        return { A, B }\n      },\n      screenForWorld(wx, wy) {\n        const g = this.getCanvasGeom()\n        if (!g || !Number.isFinite(this.currentPxPerDeg)) return { x: 0, y: 0 }\n        const { w, h, padX, padY } = g\n        const x = padX + this.viewOffsetXPx + (wx - (this.viewMinWorldX || 0)) * this.currentPxPerDeg\n        const y = h - padY - this.viewOffsetYPx - (wy - (this.viewMinWorldY || 0)) * this.currentPxPerDeg\n        return { x, y }\n      },\n      ensureViewMappingInitialized(seqWorld) {\n        if (!seqWorld || seqWorld.length === 0) return\n        if (this.currentPxPerDeg != null && this.viewMinWorldX != null) return\n        const g = this.getCanvasGeom()\n        if (!g) return\n        const { w, h, padX, padY } = g\n        // 起始点：序列第一个；目标原点为 (0,0)\n        const first = seqWorld[0]\n        // 初始化展开锚点为首点 X（相对目标）\n        this.raUnwrapAnchor = first.x\n        const minX = Math.min(0, first.x)\n        const maxX = Math.max(0, first.x)\n        const minY = Math.min(0, first.y)\n        const maxY = Math.max(0, first.y)\n        const spanX = Math.max(1e-6, maxX - minX)\n        const spanY = Math.max(1e-6, maxY - minY)\n        const scaleX = (w - 2 * padX) / spanX\n        const scaleY = (h - 2 * padY) / spanY\n        this.currentPxPerDeg = Math.max(5, Math.min(scaleX, scaleY))\n        this.viewMinWorldX = minX\n        this.viewMaxWorldX = maxX\n        this.viewMinWorldY = minY\n        this.viewMaxWorldY = maxY\n        // 初次视图内容居中：仅在初始化时设置一次偏移\n        const contentWpx = spanX * this.currentPxPerDeg\n        const contentHpx = spanY * this.currentPxPerDeg\n        this.viewOffsetXPx = Math.round(((w - 2 * padX) - contentWpx) / 2)\n        this.viewOffsetYPx = Math.round(((h - 2 * padY) - contentHpx) / 2)\n      },\n      maybeExpandViewForPoint(wx, wy) {\n        // 若点在当前屏幕内，则不更新比例尺；若越界，扩展边界并仅缩小比例尺\n        const g = this.getCanvasGeom()\n        if (!g || this.currentPxPerDeg == null) return\n        const { w, h, padX, padY } = g\n        const px = padX + this.viewOffsetXPx + (wx - this.viewMinWorldX) * this.currentPxPerDeg\n        const py = h - padY - this.viewOffsetYPx - (wy - this.viewMinWorldY) * this.currentPxPerDeg\n        const inside = px >= padX && px <= (w - padX) && py >= padY && py <= (h - padY)\n        if (inside) return\n        // 扩展世界边界到包含该点\n        const newMinX = Math.min(this.viewMinWorldX, wx)\n        const newMaxX = Math.max(this.viewMaxWorldX, wx)\n        const newMinY = Math.min(this.viewMinWorldY, wy)\n        const newMaxY = Math.max(this.viewMaxWorldY, wy)\n        const spanX = Math.max(1e-6, newMaxX - newMinX)\n        const spanY = Math.max(1e-6, newMaxY - newMinY)\n        const scaleX = (w - 2 * padX) / spanX\n        const scaleY = (h - 2 * padY) / spanY\n        const candidate = Math.max(5, Math.min(scaleX, scaleY))\n        // 仅缩小\n        this.currentPxPerDeg = this.currentPxPerDeg == null ? candidate : Math.min(this.currentPxPerDeg, candidate)\n        this.viewMinWorldX = newMinX\n        this.viewMaxWorldX = newMaxX\n        this.viewMinWorldY = newMinY\n        this.viewMaxWorldY = newMaxY\n        // 固定锚点：不再重算偏移，保持目标点屏幕位置恒定\n      },\n      drawTargetMarker(scaleOverride = null) {\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return\n        const ctx = canvas.getContext('2d')\n        const g = this.getCanvasGeom()\n        if (!g) return\n        const { w, h } = g\n        ctx.save()\n        // 背景\n        ctx.fillStyle = 'black'\n        ctx.fillRect(0, 0, w, h)\n        // 目标圆环\n        const center = this.screenForWorld(0, 0)\n        const ringDeg = this.getTargetRingDeg()\n        const scale = (scaleOverride != null ? scaleOverride : this.currentPxPerDeg) || 40\n        // 半径限制：不超出可见区域\n        const rPx = Math.max(6, Math.min(Math.min(w, h) * 0.45, ringDeg * scale))\n        ctx.strokeStyle = '#4CAF50'\n        ctx.lineWidth = 2\n        ctx.beginPath()\n        ctx.arc(center.x, center.y, rPx, 0, Math.PI * 2)\n        ctx.stroke()\n        ctx.fillStyle = '#4CAF50'\n        ctx.beginPath()\n        ctx.arc(center.x, center.y, 3, 0, Math.PI * 2)\n        ctx.fill()\n        ctx.restore()\n      },\n      drawTargetAtCenter(ringDegOverride = null) {\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return\n        const ctx = canvas.getContext('2d')\n        const cx = Math.round((this.overlayMode === 'windowed' ? this.baseCanvasLogicalSize.width : canvas.clientWidth) / 2)\n        const cy = Math.round((this.overlayMode === 'windowed' ? this.baseCanvasLogicalSize.height : canvas.clientHeight) / 2)\n        ctx.save()\n        // 黑色背景\n        ctx.fillStyle = 'black'\n        const bw = this.overlayMode === 'windowed' ? this.baseCanvasLogicalSize.width : canvas.clientWidth\n        const bh = this.overlayMode === 'windowed' ? this.baseCanvasLogicalSize.height : canvas.clientHeight\n        ctx.fillRect(0, 0, bw, bh)\n        // 目标点环（空心）+ 中心小点\n        const base = this.autoFitPxPerDeg || 40\n        const scalePxPerDeg = base\n        const ringDeg = ringDegOverride !== null ? ringDegOverride : this.getTargetRingDeg()\n        const halfW = bw / 2\n        const halfH = bh / 2\n        const pad = 24\n        const rMax = Math.max(6, Math.min(halfW - pad, halfH - pad))\n        const rPx = Math.max(6, Math.min(rMax, ringDeg * scalePxPerDeg))\n        // 空心圆\n        ctx.strokeStyle = '#4CAF50'\n        ctx.lineWidth = 2\n        ctx.beginPath()\n        ctx.arc(cx, cy, rPx, 0, Math.PI * 2)\n        ctx.stroke()\n        // 中心小点\n        ctx.fillStyle = '#4CAF50'\n        ctx.beginPath()\n        ctx.arc(cx, cy, 3, 0, Math.PI * 2)\n        ctx.fill()\n        ctx.restore()\n      },\n      getTargetRingDeg() {\n        // 环大小不超过视场半径（取 RA/DEC 跨度的较小一半，留 90% 边距）\n        if (!this.fieldData) return 0.3\n        const ras = [this.fieldData.ra0, this.fieldData.ra1, this.fieldData.ra2, this.fieldData.ra3]\n        const decs = [this.fieldData.dec0, this.fieldData.dec1, this.fieldData.dec2, this.fieldData.dec3]\n        const raSpan = Math.max(...ras) - Math.min(...ras)\n        const decSpan = Math.max(...decs) - Math.min(...decs)\n        const halfMin = Math.max(0.01, Math.min(raSpan, decSpan) / 2)\n        return halfMin * 0.9\n      },\n      raDecToCanvasDelta(raDeg, decDeg) {\n        // 将相对目标点的 (ΔRA, ΔDEC) 转换为画布像素偏移。\n        // 使用自适应像素/度比例，并在全屏模式下再乘以用户缩放因子。\n        const base = this.autoFitPxPerDeg || 40\n        const scalePxPerDeg = base\n        // 固定约定：RA 增大向右\n        const dx = (this.normalizeRaDelta(raDeg)) * scalePxPerDeg\n        const dy = (-decDeg) * scalePxPerDeg\n        return { dx, dy }\n      },\n      normalizeRaDelta(deltaDeg) {\n        // 将 RA 差值归一到 [-180, 180)\n        let x = deltaDeg\n        x = ((x + 540) % 360) - 180\n        return x\n      },\n      normalizeAzDelta(deltaDeg) {\n        // 将 Az 差值归一到 [-180, 180)\n        let x = deltaDeg\n        x = ((x + 540) % 360) - 180\n        return x\n      },\n\n      // === 轨迹点合并/追加（按 Alt/Az 容差） ===\n      appendRawTrajectoryPoint(raDeg, decDeg, timeMs = Date.now()) {\n        if (!Number.isFinite(raDeg) || !Number.isFinite(decDeg)) return\n        const loc = this.$store?.state?.currentLocation || {}\n        const lat = Number(loc.lat)\n        const lon = Number(loc.lng)\n        if (!Number.isFinite(lat) || !Number.isFinite(lon)) {\n          // 无法转换 Alt/Az，则直接追加\n          this.rawTrajectoryPoints.push({ ra: raDeg, dec: decDeg, t: timeMs })\n          return\n        }\n        const t = new Date(timeMs)\n        // 计算当前点与上一点在 Alt/Az 上的距离\n        const curAltAz = this.equatorialToHorizontal(raDeg, decDeg, t, lat, lon)\n        const tolDeg = (Number(this.trajectoryMergeTolArcmin) || 0) / 60\n        const last = this.rawTrajectoryPoints[this.rawTrajectoryPoints.length - 1]\n        if (!last) {\n          this.rawTrajectoryPoints.push({ ra: raDeg, dec: decDeg, t: timeMs })\n          return\n        }\n        const lastAltAz = this.equatorialToHorizontal(last.ra, last.dec, new Date(last.t || timeMs), lat, lon)\n        const dAz = this.normalizeAzDelta(curAltAz.az - lastAltAz.az)\n        const dAlt = curAltAz.alt - lastAltAz.alt\n        const sep = Math.hypot(dAz, dAlt)\n        if (sep <= tolDeg) {\n          // 合并：更新最后一点为当前值（保持时间最新）\n          last.ra = raDeg\n          last.dec = decDeg\n          last.t = timeMs\n        } else {\n          this.rawTrajectoryPoints.push({ ra: raDeg, dec: decDeg, t: timeMs })\n        }\n      },\n      unwrapRaDeltaSequence(dRaDegList) {\n        // 使相邻 dRA 序列在数值上连续，避免跨 0/360 发生长连线\n        if (!dRaDegList || dRaDegList.length === 0) return []\n        const out = [dRaDegList[0]]\n        for (let i = 1; i < dRaDegList.length; i++) {\n          let curr = dRaDegList[i]\n          let prev = out[i - 1]\n          let diff = curr - prev\n          while (diff > 180) { curr -= 360; diff = curr - prev }\n          while (diff < -180) { curr += 360; diff = curr - prev }\n          out.push(curr)\n        }\n        return out\n      },\n      appendTrajectoryPoint(rawRaDeg, rawDecDeg) {\n        // 已保留以兼容调用，但当前重绘使用 redrawTrajectory 覆盖全量绘制\n        if (!this.targetRawPosition) return\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return\n        const cx = Math.round((this.overlayMode === 'windowed' ? this.baseCanvasLogicalSize.width : canvas.clientWidth) / 2)\n        const cy = Math.round((this.overlayMode === 'windowed' ? this.baseCanvasLogicalSize.height : canvas.clientHeight) / 2)\n        const dRa = rawRaDeg - this.targetRawPosition.ra\n        const dDec = rawDecDeg - this.targetRawPosition.dec\n        const { dx, dy } = this.raDecToCanvasDelta(dRa, dDec)\n        const point = { x: cx + dx, y: cy + dy }\n        this.trajectoryPoints.push(point)\n        this.drawPoint(point.x, point.y, '#FFD54F')\n      },\n      drawPoint(x, y, color) {\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return\n        const ctx = canvas.getContext('2d')\n        ctx.save()\n        ctx.fillStyle = color || '#00BFFF'\n        ctx.beginPath()\n        ctx.arc(x, y, 3, 0, Math.PI * 2)\n        ctx.fill()\n        ctx.restore()\n      },\n      drawArrow(x1, y1, x2, y2, color) {\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return\n        const ctx = canvas.getContext('2d')\n        ctx.save()\n        ctx.strokeStyle = color || '#FFD54F'\n        ctx.fillStyle = color || '#FFD54F'\n        ctx.lineWidth = 2\n        ctx.beginPath()\n        ctx.moveTo(x1, y1)\n        ctx.lineTo(x2, y2)\n        ctx.stroke()\n        // 箭头\n        const angle = Math.atan2(y2 - y1, x2 - x1)\n        const headLen = 8\n        ctx.beginPath()\n        ctx.moveTo(x2, y2)\n        ctx.lineTo(x2 - headLen * Math.cos(angle - Math.PI / 6), y2 - headLen * Math.sin(angle - Math.PI / 6))\n        ctx.lineTo(x2 - headLen * Math.cos(angle + Math.PI / 6), y2 - headLen * Math.sin(angle + Math.PI / 6))\n        ctx.lineTo(x2, y2)\n        ctx.fill()\n        ctx.restore()\n      },\n      // 画从目标到最后一段的垂线（虚线）；如垂足不在段内，仅将线段有限延长至垂点\n      drawPerpendicularAuxLine() {\n        if (!this.targetRawPosition || this.rawTrajectoryPoints.length < 2) return\n        // 使用“全量连续展开”的最后两点，允许 RA 超出常规范围，保证几何连续\n        const pair = this.getWorldABForPerp(); if (!pair) return\n        const { A, B } = pair\n        const O = { x: 0, y: 0 } // 目标在世界坐标为原点（与 worldForPoint/展开保持一致）\n        // 线段 AB 的向量与 O 到 AB 的投影参数 t\n        const vx = B.x - A.x\n        const vy = B.y - A.y\n        const len2 = vx * vx + vy * vy\n        if (len2 < 1e-9) return\n        const t = ((O.x - A.x) * vx + (O.y - A.y) * vy) / len2\n        let Hx, Hy, segment\n        if (t >= 0 && t <= 1) {\n          // 垂足在线段上\n          Hx = A.x + t * vx\n          Hy = A.y + t * vy\n          // 垂足在线段上时，不再绘制整段，只画 O→H 的垂线\n          segment = null\n        } else {\n          // 垂足在线段外：计算真正的垂足 H，并把线段朝 H 方向有限延长至 H\n          Hx = A.x + t * vx\n          Hy = A.y + t * vy\n          if (t < 0) {\n            segment = { x1: Hx, y1: Hy, x2: A.x, y2: A.y }\n          } else {\n            segment = { x1: B.x, y1: B.y, x2: Hx, y2: Hy }\n          }\n        }\n        // 画垂线（O->H）与（可能的延长）线段，均使用虚线\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return\n        const ctx = canvas.getContext('2d')\n        const Opx = this.screenForWorld(O.x, O.y)\n        const Hpx = this.screenForWorld(Hx, Hy)\n        // const S1 = this.screenForWorld(segment.x1, segment.y1)\n        // const S2 = this.screenForWorld(segment.x2, segment.y2)\n        ctx.save()\n        ctx.setLineDash([6, 6])\n        ctx.lineWidth = 1.5\n        ctx.strokeStyle = '#9E9E9E'\n        // 垂线 O-H\n        ctx.beginPath()\n        ctx.moveTo(Opx.x, Opx.y)\n        ctx.lineTo(Hpx.x, Hpx.y)\n        ctx.stroke()\n        // 在辅助线（虚线）上用箭头标明方向：从 H 指向 O（指向目标）\n        // 选择线段内一点作为箭头位置，避免与目标环重叠\n        const tArrow = 0.6\n        const ax = Hpx.x + (Opx.x - Hpx.x) * tArrow\n        const ay = Hpx.y + (Opx.y - Hpx.y) * tArrow\n        const ang = Math.atan2(Opx.y - Hpx.y, Opx.x - Hpx.x)\n        const head = 8\n        ctx.setLineDash([])\n        ctx.fillStyle = '#9E9E9E'\n        ctx.beginPath()\n        ctx.moveTo(ax, ay)\n        ctx.lineTo(ax - head * Math.cos(ang - Math.PI / 6), ay - head * Math.sin(ang - Math.PI / 6))\n        ctx.lineTo(ax - head * Math.cos(ang + Math.PI / 6), ay - head * Math.sin(ang + Math.PI / 6))\n        ctx.closePath()\n        ctx.fill()\n        // 恢复虚线样式，用于绘制延长段\n        ctx.setLineDash([6, 6])\n        // 仅当垂足不在段上时绘制“延长到垂点”的那段\n        if (segment) {\n          const S1 = this.screenForWorld(segment.x1, segment.y1)\n          const S2 = this.screenForWorld(segment.x2, segment.y2)\n          ctx.beginPath()\n          ctx.moveTo(S1.x, S1.y)\n          ctx.lineTo(S2.x, S2.y)\n          ctx.stroke()\n          // 在延长段上也标注一个朝向“垂足 H”的小箭头\n          const exStart = (t < 0) ? { x: A.x, y: A.y } : { x: B.x, y: B.y }\n          const exEnd = { x: Hx, y: Hy }\n          const ES = this.screenForWorld(exStart.x, exStart.y)\n          const EE = this.screenForWorld(exEnd.x, exEnd.y)\n          const exdx = EE.x - ES.x\n          const exdy = EE.y - ES.y\n          const exLen2 = exdx * exdx + exdy * exdy\n          if (exLen2 > 1) {\n            const tEx = 0.5\n            const eax = ES.x + exdx * tEx\n            const eay = ES.y + exdy * tEx\n            const eang = Math.atan2(exdy, exdx)\n            ctx.setLineDash([])\n            ctx.beginPath()\n            ctx.moveTo(eax, eay)\n            ctx.lineTo(eax - head * Math.cos(eang - Math.PI / 6), eay - head * Math.sin(eang - Math.PI / 6))\n            ctx.lineTo(eax - head * Math.cos(eang + Math.PI / 6), eay - head * Math.sin(eang + Math.PI / 6))\n            ctx.closePath()\n            ctx.fill()\n          }\n        }\n        ctx.restore()\n      },\n      computeAutoFitScale() {\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas || !this.targetRawPosition) return 40\n        const cx = this.targetRawPosition.ra\n        const cy = this.targetRawPosition.dec\n        let maxDx = 0, maxDy = 0\n        // 历史点\n        for (let i = 0; i < this.rawTrajectoryPoints.length; i++) {\n          const p = this.rawTrajectoryPoints[i]\n          maxDx = Math.max(maxDx, Math.abs(this.normalizeRaDelta(p.ra - cx)))\n          maxDy = Math.max(maxDy, Math.abs(p.dec - cy))\n        }\n        // 目标环半径（确保环不会顶边）\n        const ringDeg = this.getTargetRingDeg()\n        maxDx = Math.max(maxDx, ringDeg)\n        maxDy = Math.max(maxDy, ringDeg)\n        // 全屏时纳入视场角点以适配视场框；窗口模式不纳入\n        if (this.overlayMode === 'fullscreen') {\n          if (this.fieldData && Number.isFinite(this.fieldData.ra0)) {\n            const corners = [\n              { ra: this.fieldData.ra0, dec: this.fieldData.dec0 },\n              { ra: this.fieldData.ra1, dec: this.fieldData.dec1 },\n              { ra: this.fieldData.ra2, dec: this.fieldData.dec2 },\n              { ra: this.fieldData.ra3, dec: this.fieldData.dec3 },\n            ]\n            for (const c of corners) {\n              maxDx = Math.max(maxDx, Math.abs(this.normalizeRaDelta(c.ra - cx)))\n              maxDy = Math.max(maxDy, Math.abs(c.dec - cy))\n            }\n          }\n        }\n        if (maxDx === 0 && maxDy === 0) return 40\n        const w = this.overlayMode === 'windowed' ? this.baseCanvasLogicalSize.width : canvas.clientWidth\n        const h = this.overlayMode === 'windowed' ? this.baseCanvasLogicalSize.height : canvas.clientHeight\n        // 固定像素内边距，考虑箭头长度（8px）与点半径（4px）\n        const arrowHead = 8, pointR = 4\n        const pixelPadding = 32 + arrowHead + pointR\n        const halfW = Math.max(60, (w / 2) - pixelPadding)\n        const halfH = Math.max(50, (h / 2) - pixelPadding)\n        // 让最远点落在中心到边界距离的 80% 处（留足可视余量）\n        const margin = 0.8\n        let scale = Math.max(5, Math.min((halfW * margin) / (maxDx || 1e-6), (halfH * margin) / (maxDy || 1e-6)))\n        // 二次校验：按该比例转换一次，确保确实未越界，如越界再缩小比例\n        const pad = pixelPadding\n        const cxPx = w / 2, cyPx = h / 2\n        let maxAbsPxX = 0, maxAbsPxY = 0\n        const collect = []\n        for (let i = 0; i < this.rawTrajectoryPoints.length; i++) collect.push(this.rawTrajectoryPoints[i])\n        if (this.overlayMode === 'fullscreen' && this.fieldData && Number.isFinite(this.fieldData.ra0)) {\n          collect.push({ ra: this.fieldData.ra0, dec: this.fieldData.dec0 })\n          collect.push({ ra: this.fieldData.ra1, dec: this.fieldData.dec1 })\n          collect.push({ ra: this.fieldData.ra2, dec: this.fieldData.dec2 })\n          collect.push({ ra: this.fieldData.ra3, dec: this.fieldData.dec3 })\n        }\n        for (const p of collect) {\n          const dxDeg = this.normalizeRaDelta(p.ra - cx)\n          const dyDeg = (p.dec - cy)\n          maxAbsPxX = Math.max(maxAbsPxX, Math.abs(dxDeg * scale))\n          maxAbsPxY = Math.max(maxAbsPxY, Math.abs(dyDeg * scale))\n        }\n        const allowedX = halfW - pad\n        const allowedY = halfH - pad\n        const adj = Math.min(1, allowedX / (maxAbsPxX || 1e-6), allowedY / (maxAbsPxY || 1e-6))\n        scale *= adj\n        return scale\n      },\n      redrawTrajectory() {\n        if (!this.showTrajectoryOverlay || !this.targetRawPosition) return\n        this.initTrajectoryCanvas()\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return\n        const ctx = canvas.getContext('2d')\n        // 预先将所有点转换到世界坐标，并初始化映射\n        const rawAll = this.rawTrajectoryPoints\n        // 使用全量点序列初始化/扩展视图映射，确保跨 0/360 时展开方向一致\n        const ensureRaw = rawAll\n        const worldSeq = this.makeWorldSeq(ensureRaw)\n        // 当存在视场数据时，也将视场四角纳入初始映射，防止目标附近尺度过小导致视场绘制异常\n        let fovWorld = []\n        if (this.fieldData) {\n          const timeRef = rawAll.length ? new Date(rawAll[rawAll.length - 1].t || Date.now()) : new Date()\n          const corners = [\n            { ra: this.fieldData.ra0, dec: this.fieldData.dec0 },\n            { ra: this.fieldData.ra1, dec: this.fieldData.dec1 },\n            { ra: this.fieldData.ra2, dec: this.fieldData.dec2 },\n            { ra: this.fieldData.ra3, dec: this.fieldData.dec3 },\n          ]\n          fovWorld = corners.map(c => this.worldForPoint(c.ra, c.dec, timeRef))\n        }\n        this.ensureViewMappingInitialized(worldSeq.concat(fovWorld))\n        // 选择绘制的数据集：全屏=全部；窗口=最新三个，但保持展开锚点稳定\n        const raw = this.overlayMode === 'windowed' ? rawAll.slice(-3) : rawAll\n        const world = this.makeWorldSeq(raw)\n        // 先走一遍更新比例/边界，不绘制，确保下游图元坐标系一致\n        for (let i = 0; i < world.length; i++) this.maybeExpandViewForPoint(world[i].x, world[i].y)\n        for (let i = 0; i < fovWorld.length; i++) this.maybeExpandViewForPoint(fovWorld[i].x, fovWorld[i].y)\n        // 再绘背景/目标环\n        this.drawTargetMarker()\n        // 绘制轨迹\n        this.trajectoryPoints = []\n        let prevPt = null\n        for (let i = 0; i < world.length; i++) {\n          const spt = this.screenForWorld(world[i].x, world[i].y)\n          const px = spt.x\n          const py = spt.y\n          const isLast = i === raw.length - 1\n          if (!isLast) {\n            this.drawPoint(px, py, '#FFD54F')\n            if (prevPt) this.drawArrow(prevPt.x, prevPt.y, px, py, '#FFD54F')\n          } else {\n            // 当前位置以空心圆表示（半径约 1 角分）\n            const arcmin = (this.calibrationCircleArcmin || 1)\n            const rPx = Math.max(4, (arcmin / 60) * ((this.currentPxPerDeg || 40)))\n            this.drawHollowCircle(px, py, rPx, '#00BFFF', 2)\n            // 圈住目标（目标在世界原点），当圆心到原点的距离小于半径时视为完成\n            const rDeg = Math.hypot(world[i].x, world[i].y)\n            if (rDeg <= (arcmin / 60)) {\n              if (!this.isPolarAligned) {\n                this.isPolarAligned = true\n                this.addLog(this.$t('Polar Alignment Completed'), 'success')\n              }\n            }\n            if (prevPt) this.drawArrow(prevPt.x, prevPt.y, px, py, '#FFD54F')\n          }\n          prevPt = { x: px, y: py }\n          this.trajectoryPoints.push({ x: px, y: py })\n        }\n        // 辅助：目标到最后段的垂线（虚线）\n        this.drawPerpendicularAuxLine()\n      },\n      drawHollowCircle(x, y, r = 8, color = '#FFFFFF', lineWidth = 2) {\n        const canvas = this.$refs.trajectoryCanvas\n        if (!canvas) return\n        const ctx = canvas.getContext('2d')\n        ctx.save()\n        ctx.strokeStyle = color\n        ctx.lineWidth = lineWidth\n        ctx.beginPath()\n        ctx.arc(x, y, r, 0, Math.PI * 2)\n        ctx.stroke()\n        ctx.restore()\n      },\n      // FoV 绘制已不再需要\n\n      resetCalibration() {\n        // 使用统一的内存清理方法\n        this.clearCachedData()\n\n        this.addLog(this.$t('Calibration Data Reset'), 'info')\n        // this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ResetAutoPolarAlignment')\n        this.$bus.$emit('ClearCalibrationPoints')\n        this.$bus.$emit('ClearStatusTextFromStarMap')\n        // 清空轨迹\n        this.rawTrajectoryPoints = []\n        this.trajectoryPoints = []\n        this.lastRawPosition = null\n        this.targetRawPosition = null\n      },\n\n      restoreCalibration() {\n        this.addLog(this.$t('Calibration Data Restored'), 'success')\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'RestoreAutoPolarAlignment')\n      },\n\n      // ========================================\n      // 校准控制方法\n      // ========================================\n      startAutoCalibration() {\n        if (!this.isConnected) {\n          this.addLog(this.$t('Error: Mount Not Connected'), 'error')\n          return\n        }\n        if (this.isCalibrationRunning) {\n          this.stopAutoCalibration()\n          return\n        }\n        this.isCalibrationRunning = true\n        this.resetCalibration()\n        this.addLog(this.$t('Starting Auto Calibration'), 'info')\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'StartAutoPolarAlignment')\n      },\n\n      stopAutoCalibration() {\n        this.isCalibrationRunning = false\n        this.addLog(this.$t('Auto Calibration Stopped'), 'warning')\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'StopAutoPolarAlignment')\n      },\n      // ========================================\n      // 视场数据处理方法\n      // ========================================\n      updateFieldData(data) {\n        if (data && Array.isArray(data) && data.length >= 12) { // 修改长度检查，确保包含假极轴数据\n          const isValidData = data.every(val => typeof val === 'number' && !isNaN(val))\n          if (!isValidData) {\n            this.addLog(this.$t('Warning: Invalid Field Data Received'), 'warning')\n            return\n          }\n\n          this.fieldData = {\n            ra: data[0],\n            dec: data[1],\n            ra0: data[2],\n            dec0: data[3],\n            ra1: data[4],\n            dec1: data[5],\n            ra2: data[6],\n            dec2: data[7],\n            ra3: data[8],\n            dec3: data[9],\n            targetra: data[10],\n            targetdec: data[11],\n            fakePolarRA: data[12],\n            fakePolarDEC: data[13],\n            realPolarRA: data[14],\n            realPolarDEC: data[15]\n          }\n\n          // 保存上一次位置（在更新当前位置之前）\n          if (this.currentPosition.ra !== '00h 00m 00s') {\n            this.previousPosition = { ...this.currentPosition }\n          }\n\n          // 更新当前位置\n          this.currentPosition = {\n            ra: this.formatCoordinate(data[0], 'ra'),\n            dec: this.formatCoordinate(data[1], 'dec')\n          }\n\n          // === 轨迹逻辑挂接 ===\n          // 使用原始角度（假设 data[0], data[1], data[10], data[11] 为度单位）\n          const rawRa = data[0]\n          const rawDec = data[1]\n          // 在进入调整阶段（目标提供）时固定目标点；否则不绘制\n          if (data[10] !== -1 && data[11] !== -1) {\n            if (!this.targetRawPosition || (this.targetRawPosition.ra !== data[10] || this.targetRawPosition.dec !== data[11])) {\n              this.targetRawPosition = { ra: data[10], dec: data[11] }\n              // 重绘以目标点为中心\n              if (this.showTrajectoryOverlay) this.redrawTrajectory()\n            }\n            const posChanged = !this.lastRawPosition || this.lastRawPosition.ra !== rawRa || this.lastRawPosition.dec !== rawDec\n            if (posChanged) {\n              this.appendRawTrajectoryPoint(rawRa, rawDec, Date.now())\n              // 改为全量重绘（确保自适应比例包含所有点、并绘制视场框）\n              if (this.showTrajectoryOverlay) this.redrawTrajectory()\n              this.lastRawPosition = { ra: rawRa, dec: rawDec }\n            }\n          }\n\n          if (data[10] === -1 && data[11] === -1) {\n            // 校准点收集阶段\n            this.calibrationPhase = 'collecting'\n            const pointNumber = this.calibrationPoints.length + 1\n\n            // 添加调试信息\n            this.addLog(`准备收集校准点${pointNumber}，当前已有${this.calibrationPoints.length}个点`, 'info')\n\n            try {\n              this.drawCalibrationPointPolygon(data[0], data[1], pointNumber, this.fieldData)\n              this.addLog(this.$t('Calibration Point', [pointNumber, data[0].toFixed(4), data[1].toFixed(4)]), 'info')\n\n              // 保存校准点 - 限制最大数量\n              if (this.calibrationPoints.length < this.maxCalibrationPoints) {\n                this.calibrationPoints.push({\n                  ra: data[0],\n                  dec: data[1],\n                  index: pointNumber\n                })\n              } else {\n                // 如果超过最大数量，替换最旧的点\n                const oldestIndex = (pointNumber - 1) % this.maxCalibrationPoints\n                this.calibrationPoints[oldestIndex] = {\n                  ra: data[0],\n                  dec: data[1],\n                  index: pointNumber\n                }\n              }\n\n              this.addLog(`校准点${pointNumber}已添加，现在总共有${this.calibrationPoints.length}个点`, 'info')\n\n              // 如果收集了3个点，进入调整阶段\n              if (this.calibrationPoints.length === this.maxCalibrationPoints) {\n                this.calibrationPhase = 'adjusting'\n                this.addLog(this.$t('Three calibration points collected, entering adjustment phase'), 'success')\n              }\n            } catch (error) {\n              this.addLog(this.$t('Error processing calibration point', [error.message]), 'error')\n              console.error('处理校准点错误：', error)\n            }\n          } else if (data[10] !== -1 && data[11] !== -1) {\n            // 调整阶段：显示目标位置和假极轴\n            this.calibrationPhase = 'adjusting'\n            this.targetPoint = { ra: data[10], dec: data[11] }\n\n            try {\n              // 先清除所有之前的元素\n              this.addLog('调整模式：准备清除之前的校准元素', 'info')\n              this.$bus.$emit('ClearCalibrationPoints')\n              this.addLog('调整模式：清除命令已发送', 'info')\n\n              // 绘制校准点（如果已收集3个点）\n              if (this.calibrationPoints.length === this.maxCalibrationPoints) {\n                this.calibrationPoints.forEach((point, index) => {\n                  const pointCoordinates = this.calculateFieldCorners(point.ra, point.dec, this.fieldData, false)\n                  const pointColor = {\n                    stroke: \"#FFD700\",        // 金色边框：校准点\n                    strokeOpacity: 1,         // 边框不透明度\n                    fill: \"#FFD700\",          // 金色填充：校准点\n                    fillOpacity: 0.3          // 填充不透明度（半透明）\n                  }\n\n                  this.$bus.$emit('DrawCalibrationPointPolygon', pointCoordinates, pointColor,\n                    `Calibration_Point_${index + 1}`, `校准点${index + 1}`, \"#FFD700\")\n                })\n              }\n\n              // 绘制当前位置（蓝色）\n              const currentCoordinates = this.calculateFieldCorners(data[0], data[1], this.fieldData, false)\n              const currentColor = {\n                stroke: \"#00BFFF\",        // 蓝色边框：当前位置\n                strokeOpacity: 1,         // 边框不透明度\n                fill: \"#00BFFF\",          // 蓝色填充：当前位置\n                fillOpacity: 0.3          // 填充不透明度（半透明）\n              }\n\n              this.$bus.$emit('DrawCalibrationPointPolygon', currentCoordinates, currentColor,\n                'Current_Position', '当前位置', \"#00BFFF\")\n\n              // 绘制目标点（绿色圆形）\n              const targetColor = {\n                stroke: \"#4CAF50\",        // 绿色边框：目标点\n                strokeOpacity: 1,         // 边框不透明度\n                fill: \"#4CAF50\",          // 绿色填充：目标点\n                fillOpacity: 0.3          // 填充不透明度（半透明）\n              }\n\n              const { az, alt } = this.equatorialToHorizontal(data[10], data[11], new Date(Date.now()), this.$store.state.currentLocation.lat, this.$store.state.currentLocation.lng)\n              // console.log('当前位置目标点', data[6], data[7] + ' 转化为地平坐标为' + az + ' ' + alt);\n              // console.log('使用时间和地点', new Date(Date.now()), $store.state.currentLocation.lat, $store.state.currentLocation.lng);\n\n              this.$bus.$emit('DrawTargetPointCircle',\n                az,\n                alt,\n                targetColor,\n                'Target_Point',\n                '目标点'\n              )\n\n              // 绘制假极轴（紫色圆形）\n              if (data[12] !== -1 && data[13] !== -1 && !isNaN(data[12]) && !isNaN(data[13])) {\n                const { az, alt } = this.equatorialToHorizontal(data[12], data[13], new Date(Date.now()), this.$store.state.currentLocation.lat, this.$store.state.currentLocation.lng)\n                this.drawFakePolarAxis(az, alt)\n              }\n\n              this.addLog(`调整模式：当前位置(${data[0].toFixed(4)}, ${data[1].toFixed(4)}) 目标位置(${data[6].toFixed(4)}, ${data[7].toFixed(4)}) 假极轴(${data[8].toFixed(4)}, ${data[9].toFixed(4)})`, 'info')\n            } catch (error) {\n              this.addLog(this.$t('Error processing adjustment data', [error.message]), 'error')\n              console.error('处理调整数据错误：', error)\n            }\n          }\n        } else {\n          this.addLog(this.$t('Error: Invalid Field Data Format'), 'error')\n        }\n      },\n\n      // 绘制校准点\n      drawCalibrationPointPolygon(ra, dec, pointNumber, fieldData) {\n        this.addLog(this.$t('Drawing Calibration Point', [pointNumber, ra, dec]), 'info')\n\n        try {\n          const coordinates = this.calculateFieldCorners(ra, dec, fieldData)\n          this.addLog(this.$t('Calculated Field Corner Coordinates', [JSON.stringify(coordinates)]), 'info')\n\n          // 验证坐标有效性\n          const validCoordinates = coordinates.every((coord, index) => {\n            const isValid = coord && typeof coord.ra === 'number' && typeof coord.dec === 'number' &&\n              !isNaN(coord.ra) && !isNaN(coord.dec) && isFinite(coord.ra) && isFinite(coord.dec)\n            if (!isValid) {\n              this.addLog(this.$t('Warning: Invalid Coordinate Point', [index, JSON.stringify(coord)]), 'warning')\n            }\n            return isValid\n          })\n\n          if (!validCoordinates) {\n            this.addLog(this.$t('Invalid Field Coordinates'), 'error')\n            return\n          }\n\n          const color = this.getCalibrationPointColor()\n\n          // 添加文本标签\n          const label = `校准点${pointNumber}`\n          const labelColor = \"#FFFFFF\"\n\n          this.addLog(this.$t('Sending Draw Calibration Event', [pointNumber]), 'info')\n          this.$bus.$emit('DrawCalibrationPointPolygon', coordinates, color, `Calibration_${pointNumber}`, label, labelColor)\n\n        } catch (error) {\n          this.addLog(this.$t('Error Drawing Calibration Point', [error.message]), 'error')\n          console.error('绘制校准点错误：', error)\n        }\n      },\n\n      // 清除所有校准点\n      clearCalibrationPoints() {\n        this.addLog(this.$t('Clearing All Calibration Points'), 'info')\n        this.$bus.$emit('ClearCalibrationPoints')\n        this.$bus.$emit('ClearStatusTextFromStarMap')\n      },\n\n      /**\n       * 绘制极轴校准调整点\n       * 在星图上绘制当前位置、目标位置、校准点等关键位置标记\n       * @param {number} currentRa - 当前赤经位置\n       * @param {number} currentDec - 当前赤纬位置  \n       * @param {number} targetRa - 目标赤经位置\n       * @param {number} targetDec - 目标赤纬位置\n       * @param {object} fieldData - 视场数据（包含视场边界信息）\n       * @param {boolean} isTimerUpdate - 是否为定时器更新（用于区分手动更新和自动更新）\n       */\n      drawAdjustmentPoints(currentRa, currentDec, targetRa, targetDec, fieldData, isTimerUpdate = false) {\n        // 这个方法现在主要用于校准点收集阶段\n        // 调整阶段的绘制逻辑已经移到updateFieldData方法中\n\n        this.addLog(this.$t('Starting Draw Adjustment Points', [currentRa, currentDec, targetRa, targetDec]), 'info')\n\n        try {\n          // 只在校准点收集阶段使用这个方法\n          if (this.calibrationPhase === 'collecting') {\n            // 绘制校准点收集阶段的逻辑\n            const currentCoordinates = this.calculateFieldCorners(currentRa, currentDec, fieldData, false)\n            const currentColor = {\n              stroke: \"#00BFFF\",        // 蓝色边框：当前位置\n              strokeOpacity: 1,         // 边框不透明度\n              fill: \"#00BFFF\",          // 蓝色填充：当前位置\n              fillOpacity: 0.3          // 填充不透明度（半透明）\n            }\n\n            this.$bus.$emit('DrawCalibrationPointPolygon', currentCoordinates, currentColor,\n              'Current_Position', '当前位置', \"#00BFFF\")\n          }\n\n        } catch (error) {\n          this.addLog(this.$t('Error Drawing Adjustment Points', [error.message]), 'error')\n          console.error('绘制调整点错误：', error)\n        }\n      },\n\n      /**\n       * 计算视场的五个角点坐标\n       * @param {number} centerRa - 视场中心的赤经坐标\n       * @param {number} centerDec - 视场中心的赤纬坐标\n       * @param {object} fieldData - 视场数据（包含视场边界信息）\n       * @param {boolean} useDefaultSize - 是否使用默认视场大小（用于目标点等固定位置）\n       * @returns {Array} 包含5个角点坐标的数组，用于绘制多边形\n       */\n      calculateFieldCorners(centerRa, centerDec, fieldData, useDefaultSize = false) {\n        this.addLog(this.$t('Calculating Field Corners', [centerRa, centerDec]), 'info')\n\n        // 如果指定使用默认大小或者没有视场数据，使用默认的0.5度视场大小\n        if (useDefaultSize || !fieldData) {\n          this.addLog(this.$t('Using Default Field Size: 0.5 Degrees'), 'info')\n          const fieldSize = 0.5\n          const coordinates = [\n            { ra: centerRa + fieldSize / 2, dec: centerDec + fieldSize / 2 },\n            { ra: centerRa - fieldSize / 2, dec: centerDec + fieldSize / 2 },\n            { ra: centerRa - fieldSize / 2, dec: centerDec - fieldSize / 2 },\n            { ra: centerRa + fieldSize / 2, dec: centerDec - fieldSize / 2 },\n            { ra: centerRa + fieldSize / 2, dec: centerDec + fieldSize / 2 }\n          ]\n          this.addLog(this.$t('Default Field Corners', [JSON.stringify(coordinates)]), 'info')\n          return coordinates\n        }\n\n        // 如果有视场数据且不强制使用默认大小，基于传入的中心点坐标计算视场角点\n        // 这种情况主要用于当前位置的显示，需要反映实际的视场大小\n        const { ra0, dec0, ra1, dec1, ra2, dec2, ra3, dec3 } = fieldData\n\n        // 计算视场的实际大小（RA和DEC方向的跨度）\n   \n\n        // 基于传入的中心点坐标，计算视场的五个角点\n        const coordinates = [\n          { ra: ra0, dec: dec0 },     // 右上角\n          { ra: ra1, dec: dec1 },     // 左上角\n          { ra: ra2, dec: dec2 },     // 左下角\n          { ra: ra3, dec: dec3 },     // 右下角\n          { ra: ra0, dec: dec0 }      // 回到右上角（闭合多边形）\n        ]\n\n        this.addLog(this.$t('Using Field Data', [ra0, dec0, ra1, dec1, ra2, dec2, ra3, dec3]), 'info')\n        this.addLog(this.$t('Field Corner Calculation Result', [JSON.stringify(coordinates)]), 'info')\n        return coordinates\n      },\n\n\n\n      // ========================================\n      // 格式化方法\n      // ========================================\n      formatTime(timestamp) {\n        if (!timestamp) return ''\n        const date = new Date(timestamp)\n        return date.toLocaleTimeString('zh-CN', {\n          hour12: false,\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        })\n      },\n\n      formatAdjustmentValue(value) {\n        if (!Number.isFinite(value)) return `0.0${this.unitGlyph(this.adjustmentUnit)}`\n        // value 的单位 = props.adjustmentUnit\n        const valArcmin = this.unitToArcmin(value, this.adjustmentUnit)\n        // 展示单位仍然用 props.adjustmentUnit（也可改成固定'arcmin'）\n        return this.formatWithUnit(valArcmin, this.adjustmentUnit, 1)\n      },\n\n      // 格式化坐标显示\n      formatCoordinate(value, type) {\n        if (value === null || value === undefined || isNaN(value)) {\n          return type === 'ra' ? '00h 00m 00s' : '+00° 00\\' 00\"'\n        }\n\n        if (type === 'ra') {\n          // 格式化RA为时分秒格式\n          const hours = Math.floor(value / 15)\n          const minutes = Math.floor((value % 15) * 4)\n          const seconds = Math.floor(((value % 15) * 4 - minutes) * 60)\n          return `${hours.toString().padStart(2, '0')}h ${minutes.toString().padStart(2, '0')}m ${seconds.toString().padStart(2, '0')}s`\n        } else {\n          // 格式化DEC为度分秒格式\n          const sign = value >= 0 ? '+' : '-'\n          const absValue = Math.abs(value)\n          const degrees = Math.floor(absValue)\n          const minutes = Math.floor((absValue - degrees) * 60)\n          const seconds = Math.floor(((absValue - degrees) * 60 - minutes) * 60)\n          return `${sign}${degrees.toString().padStart(2, '0')}° ${minutes.toString().padStart(2, '0')}' ${seconds.toString().padStart(2, '0')}\"`\n        }\n      },\n\n\n      // ========================================\n      // 辅助方法\n      // ========================================\n      parseCoordinate(value, type) {\n        if (typeof value === 'string') {\n          if (type === 'ra') {\n            // 解析时分秒格式 \"00h 00m 00s\"\n            const match = value.match(/(\\d+)h\\s*(\\d+)m\\s*(\\d+)s/)\n            if (match) {\n              const hours = parseInt(match[1])\n              const minutes = parseInt(match[2])\n              const seconds = parseInt(match[3])\n              return hours + minutes / 60 + seconds / 3600\n            }\n          } else {\n            // 解析度分秒格式 \"+00° 00' 00\"\"\n            const match = value.match(/([+-]?)(\\d+)°\\s*(\\d+)'\\s*(\\d+)\"/)\n            if (match) {\n              const sign = match[1] === '-' ? -1 : 1\n              const degrees = parseInt(match[2])\n              const minutes = parseInt(match[3])\n              const seconds = parseInt(match[4])\n              return sign * (degrees + minutes / 60 + seconds / 3600)\n            }\n          }\n        }\n        return null\n      },\n\n      addStatusTextToStarMap() {\n        // 添加状态文本到星图\n        const statusText = {\n          text: `极轴校准调整中 - 校准点: ${this.calibrationPoints.length}/3`,\n          position: { ra: this.currentPosition.ra, dec: this.currentPosition.dec },\n          color: \"#FFFFFF\",\n          fontSize: 14,\n          backgroundColor: \"rgba(0, 0, 0, 0.7)\"\n        }\n\n        // 发送状态文本到星图\n        // this.$bus.$emit('AddStatusTextToStarMap', statusText)\n      },\n\n      getStepClass(index) {\n        // 根据进度百分比确定节点状态\n        const progress = this.progressPercentage\n\n        switch (index) {\n          case 0: // 初始化节点\n            if (progress >= PROGRESS_THRESHOLDS.INITIALIZATION) return { completed: true }\n            if (progress >= 0) return { current: true }\n            return {}\n\n          case 1: // 第一次校准节点\n            if (progress >= PROGRESS_THRESHOLDS.FIRST_CALIBRATION) return { completed: true }\n            if (progress >= PROGRESS_THRESHOLDS.INITIALIZATION) return { current: true }\n            return {}\n\n          case 2: // 第二次校准节点\n            if (progress >= PROGRESS_THRESHOLDS.SECOND_CALIBRATION) return { completed: true }\n            if (progress >= PROGRESS_THRESHOLDS.FIRST_CALIBRATION) return { current: true }\n            return {}\n\n          case 3: // 第三次校准节点\n            if (progress >= PROGRESS_THRESHOLDS.THIRD_CALIBRATION) return { completed: true }\n            if (progress >= PROGRESS_THRESHOLDS.SECOND_CALIBRATION) return { current: true }\n            return {}\n\n          default:\n            return {}\n        }\n      },\n\n      getAzimuthAction(azVal) {\n        if (!Number.isFinite(azVal)) return ''\n        const arcmin = this.unitToArcmin(azVal, this.adjustmentUnit)\n        if (Math.abs(arcmin) <= this.deadbandArcmin) return this.$t('No adjustment needed')\n        const dir = this.azLabelBySign(arcmin)\n        // 输出单位与 props.adjustmentUnit 保持一致\n        return `${dir} ${this.formatWithUnit(arcmin, this.adjustmentUnit, 1)}`\n      },\n\n      getAltitudeAction(altVal) {\n        if (!Number.isFinite(altVal)) return ''\n        const arcmin = this.unitToArcmin(altVal, this.adjustmentUnit)\n        if (Math.abs(arcmin) <= this.deadbandArcmin) return this.$t('No adjustment needed')\n        const dir = this.altLabelBySign(arcmin)\n        return `${dir} ${this.formatWithUnit(arcmin, this.adjustmentUnit, 1)}`\n      },\n\n\n\n      // ========================================\n      // 日志方法\n      // ========================================\n      addLog(message, level = 'info') {\n        const log = {\n          id: Date.now() + Math.random(),\n          message,\n          level,\n          timestamp: new Date()\n        }\n        \n        // 生产环境减少console输出\n        if (process.env.NODE_ENV === 'development') {\n          console.log(log.message)\n        }\n        \n        // 使用循环数组优化内存使用\n        if (this.logs.length < this.logCapacity) {\n          this.logs.push(log)\n        } else {\n          // 循环覆盖旧日志\n          this.logs[this.logIndex] = log\n          this.logIndex = (this.logIndex + 1) % this.logCapacity\n        }\n      },\n\n      clearLogs() {\n        this.logs = []\n        this.logIndex = 0\n      },\n\n      // ========================================\n      // 极轴校准状态更新方法\n      // ========================================\n      calculatePolarAxisOffset() {\n        this.polarAxisOffset = {\n          azimuth: this.adjustment.azimuth,\n          altitude: this.adjustment.altitude\n        }\n      },\n\n      updatePolarAlignmentState(stateNumber, logMessage, progress) {\n        if (logMessage && typeof logMessage === 'string') {\n          let level = 'info'\n          if (logMessage.toLowerCase().includes('error') || logMessage.toLowerCase().includes('失败')) {\n            level = 'error'\n          } else if (logMessage.toLowerCase().includes('warning') || logMessage.toLowerCase().includes('警告')) {\n            level = 'warning'\n          } else if (logMessage.toLowerCase().includes('success') || logMessage.toLowerCase().includes('成功') || logMessage.toLowerCase().includes('完成')) {\n            level = 'success'\n          }\n          this.addLog(logMessage, level)\n        }\n\n        if (progress !== undefined && progress !== null) {\n          this.currentProgress = progress\n\n          if (progress >= 0 && progress <= 100) {\n            // 根据进度更新校准状态\n            if (progress >= 0 && progress < 15) {\n              // 初始化阶段\n              this.calibrationPoints = []\n              this.isCalibrationComplete = false\n              this.isPolarAligned = false\n            } else if (progress >= 15 && progress < 25) {\n              // 第一次校准阶段 - 移除模拟数据添加，实际校准点由updateFieldData处理\n              // 这里只更新状态，不添加模拟校准点\n            } else if (progress >= 25 && progress < 50) {\n              // 第二次校准阶段 - 移除模拟数据添加，实际校准点由updateFieldData处理\n              // 这里只更新状态，不添加模拟校准点\n            } else if (progress >= 50 && progress < 75) {\n              // 第三次校准阶段 - 移除模拟数据添加，实际校准点由updateFieldData处理\n              // 这里只更新状态，不添加模拟校准点\n            } else if (progress >= 75 && progress < 95) {\n              // 循环校准调整阶段\n              this.isCalibrationComplete = true\n              this.calculatePolarAxisOffset()\n\n              // 检测校准循环\n              if (progress < this.lastCalibrationProgress && this.lastCalibrationProgress >= 75) {\n                this.calibrationLoopCount++\n                this.addLog(this.$t('Calibration Round Started', [this.calibrationLoopCount]), 'info')\n              }\n\n              // 在循环校准阶段，进度可能会在75-95之间波动\n              // 这表示系统正在进行多次校准调整\n              if (progress > 85) {\n                this.addLog(this.$t('Calibration Progress Info', [Math.round(progress), this.calibrationLoopCount]), 'info')\n              }\n\n              this.lastCalibrationProgress = progress\n            } else if (progress >= 95 && progress <= 100) {\n              // 最终验证阶段\n              this.isCalibrationComplete = true\n              this.calculatePolarAxisOffset()\n\n              if (Math.abs(this.polarAxisOffset.azimuth) < 1.0 && Math.abs(this.polarAxisOffset.altitude) < 1.0) {\n                this.isPolarAligned = true\n                this.addLog(this.$t('Polar Alignment Completed'), 'success')\n              } else {\n                this.addLog(this.$t('Polar Alignment Needs Manual Adjustment'), 'warning')\n              }\n            }\n          }\n        }\n      },\n\n      updatePolarAlignmentIsRunning(isRunning) {\n        this.isCalibrationRunning = isRunning\n        this.hasAcceptUpdateMessage = true\n      },\n\n      // ========================================\n      // 坐标转换方法\n      // ========================================\n      /**\n       * 赤道坐标 (RA, Dec) → 地平坐标 (Az, Alt)\n       * @param {number} raDeg 赤经 (度, 0~360)\n       * @param {number} decDeg 赤纬 (度, -90~+90)\n       * @param {Date} dateUTC 观测时间 (UTC 时间)\n       * @param {number} latDeg 观测点纬度 (度, 北正南负)\n       * @param {number} lonDeg 观测点经度 (度, 东正西负)\n       * @returns {{az: number, alt: number}} 方位角/高度角 (度)\n       */\n      equatorialToHorizontal(raDeg, decDeg, dateUTC, latDeg, lonDeg) {\n        // 工具\n        const toJD = d => (Number(d) / 86400000) + 2440587.5; // Date/ms → JD\n        const d2r = x => x * Math.PI / 180, r2d = x => x * 180 / Math.PI;\n        const norm360 = a => ((a % 360) + 360) % 360;\n        const clamp = (x, lo = -1, hi = 1) => Math.min(hi, Math.max(lo, x));\n\n        // 入参归一化 + 硬校验\n        raDeg = Number(raDeg);\n        decDeg = Number(decDeg);\n        latDeg = Number(latDeg);\n        lonDeg = Number(lonDeg);\n        const tms = Number(dateUTC); // Date 或时间戳都可\n\n        if (process.env.NODE_ENV === 'development') {\n          console.log('EQ→HOR 入参:', { raDeg, decDeg, latDeg, lonDeg, dateUTC, tms });\n        }\n\n        if (![raDeg, decDeg, latDeg, lonDeg, tms].every(Number.isFinite)) {\n          console.error('EQ→HOR 入参非法:', { raDeg, decDeg, latDeg, lonDeg, dateUTC, tms });\n          return { az: NaN, alt: NaN };\n        }\n\n        try {\n          // 1) JD & GMST\n          const JD = toJD(tms);\n          const d = JD - 2451545.0;\n          let GMST = norm360(280.46061837 + 360.98564736629 * d); // 度\n\n          // 2) LST（东经为正）\n          let LST = norm360(GMST + lonDeg);\n\n          // 3) HA（-180~180 更稳）\n          let HA = LST - raDeg;\n          HA = ((HA + 180) % 360) - 180;\n\n          // 4) Alt / Az（稳定形式）\n          const ha = d2r(HA);\n          const dec = d2r(decDeg);\n          const lat = d2r(latDeg);\n\n          const sinAlt = clamp(\n            Math.sin(dec) * Math.sin(lat) + Math.cos(dec) * Math.cos(lat) * Math.cos(ha)\n          );\n          const alt = Math.asin(sinAlt);\n          const y = -Math.sin(ha) * Math.cos(dec);\n          const x = Math.sin(dec) * Math.cos(lat) - Math.cos(dec) * Math.sin(lat) * Math.cos(ha);\n          const az = Math.atan2(y, x);\n\n          const altDeg = r2d(alt);\n          const azDeg = norm360(r2d(az));\n\n          if (process.env.NODE_ENV === 'development') {\n            console.log('EQ→HOR 结果:', {\n              JD, GMST, LST, HA,\n              haRad: ha, decRad: dec, latRad: lat,\n              az: azDeg, alt: altDeg\n            });\n          }\n\n          return { az: azDeg, alt: altDeg };\n        } catch (e) {\n          console.error('EQ→HOR 计算异常:', e, {\n            raDeg, decDeg, latDeg, lonDeg, dateUTC, tms\n          });\n          return { az: NaN, alt: NaN };\n        }\n      },\n\n\n\n\n\n      // === 增强的卡片信息更新方法 ===\n      updateCardInfo(currentRa, currentDec, targetRa, targetDec, azimuthVal, altitudeVal, raAdjustment, decAdjustment, unitHint) {\n        const parseValue = v => (v === null || v === '' || v === undefined) ? 0 : (Number(v) || 0)\n\n        const currentRaNum = parseValue(currentRa)\n        const currentDecNum = parseValue(currentDec)\n        const targetRaNum = parseValue(targetRa)\n        const targetDecNum = parseValue(targetDec)\n        const azVal = parseValue(azimuthVal)\n        const altVal = parseValue(altitudeVal)\n\n        // 1) 位置显示（原样）\n        this.currentPosition.ra = this.formatCoordinate(currentRaNum, 'ra')\n        this.currentPosition.dec = this.formatCoordinate(currentDecNum, 'dec')\n        this.targetPosition.ra = this.formatCoordinate(targetRaNum, 'ra')\n        this.targetPosition.dec = this.formatCoordinate(targetDecNum, 'dec')\n\n        // 2) 调整量：以传入单位为准写入（默认用 props.adjustmentUnit）\n        const inUnit = unitHint || this.adjustmentUnit\n        // 如果传入是\"度\"，但你 props 设为了\"arcmin\"，也没关系——显示会自动换算\n        // 这里保存\"原始数 + 它的单位（通过 props）\"\n        this.adjustment.azimuth = azVal\n        this.adjustment.altitude = altVal\n        this.adjustmentUnit = inUnit  // 如果希望每次随数据切换单位，可加入这一行\n\n        // 3) 在调整阶段，每次接收到调整数据时增加校准轮数\n        if (this.calibrationPhase === 'adjusting') {\n          this.calibrationLoopCount++\n          this.addLog(this.$t('Calibration Round Started', [this.calibrationLoopCount]), 'info')\n        }\n\n        // 4) 极轴完成判定（用角分比较）\n        const azArcmin = this.unitToArcmin(azVal, inUnit)\n        const altArcmin = this.unitToArcmin(altVal, inUnit)\n        this.isPolarAligned = Math.abs(azArcmin) < 1.0 && Math.abs(altArcmin) < 1.0\n\n        if (process.env.NODE_ENV === 'development') {\n          console.log('PolarAlignment update:', {\n            unit: inUnit,\n            adj_raw: { azimuth: azVal, altitude: altVal },\n            adj_arcmin: { az: azArcmin, alt: altArcmin },\n            isPolarAligned: this.isPolarAligned,\n            calibrationRound: this.calibrationLoopCount\n          })\n        }\n      },\n\n\n      /**\n       * 根据三个校准点计算假极轴位置\n       * 使用三点极轴校准算法\n       */\n      calculateFakePolarAxis() {\n        if (this.calibrationPoints.length !== this.maxCalibrationPoints) {\n          this.addLog('需要3个校准点才能计算假极轴位置', 'warning')\n          return false\n        }\n\n        try {\n          const [p1, p2, p3] = this.calibrationPoints\n\n          // 将三个点转换为笛卡尔坐标\n          const cart1 = this.equatorialToCartesian(p1.ra, p1.dec)\n          const cart2 = this.equatorialToCartesian(p2.ra, p2.dec)\n          const cart3 = this.equatorialToCartesian(p3.ra, p3.dec)\n\n          // 计算两个向量\n          const v1 = {\n            x: cart2.x - cart1.x,\n            y: cart2.y - cart1.y,\n            z: cart2.z - cart1.z\n          }\n          const v2 = {\n            x: cart3.x - cart1.x,\n            y: cart3.y - cart1.y,\n            z: cart3.z - cart1.z\n          }\n\n          // 计算法向量（叉积）\n          const normal = this.crossProduct(v1, v2)\n\n          // 检查法向量是否为零向量\n          const normalLength = this.vectorLength(normal)\n          if (normalLength < 1e-10) {\n            this.addLog('三个校准点共线，无法计算假极轴位置', 'error')\n            return false\n          }\n\n          // 归一化法向量\n          const unitNormal = this.normalizeVector(normal)\n\n          // 计算与单位球面的交点（假极点）\n          const fakePolarPoint = {\n            x: unitNormal.x,\n            y: unitNormal.y,\n            z: unitNormal.z\n          }\n\n          // 选择正确的交点（z坐标为正的）\n          if (fakePolarPoint.z < 0) {\n            fakePolarPoint.x = -fakePolarPoint.x\n            fakePolarPoint.y = -fakePolarPoint.y\n            fakePolarPoint.z = -fakePolarPoint.z\n          }\n\n          // 将假极点转换为赤道坐标\n          const fakePolarEquatorial = this.cartesianToEquatorial(fakePolarPoint)\n\n          // 保存假极轴位置\n          this.fakePolarAxis.ra = fakePolarEquatorial.ra\n          this.fakePolarAxis.dec = fakePolarEquatorial.dec\n          this.fakePolarAxis.calculated = true\n\n          this.addLog(`假极轴位置计算完成: RA=${fakePolarEquatorial.ra.toFixed(4)}°, DEC=${fakePolarEquatorial.dec.toFixed(4)}°`, 'success')\n\n          return true\n        } catch (error) {\n          this.addLog(`计算假极轴位置时出错: ${error.message}`, 'error')\n          console.error('计算假极轴位置错误：', error)\n          return false\n        }\n      },\n\n      /**\n       * 将赤道坐标转换为笛卡尔坐标\n       */\n      equatorialToCartesian(ra, dec, radius = 1) {\n        const raRad = ra * Math.PI / 180.0\n        const decRad = dec * Math.PI / 180.0\n\n        return {\n          x: radius * Math.cos(decRad) * Math.cos(raRad),\n          y: radius * Math.cos(decRad) * Math.sin(raRad),\n          z: radius * Math.sin(decRad)\n        }\n      },\n\n      /**\n       * 将笛卡尔坐标转换为赤道坐标\n       */\n      cartesianToEquatorial(cart) {\n        const radius = Math.sqrt(cart.x * cart.x + cart.y * cart.y + cart.z * cart.z)\n\n        const dec = Math.asin(cart.z / radius) * 180.0 / Math.PI\n        let ra = Math.atan2(cart.y, cart.x) * 180.0 / Math.PI\n\n        // 确保RA在0-360度范围内\n        if (ra < 0) ra += 360.0\n\n        return { ra, dec }\n      },\n\n      /**\n       * 计算两个向量的叉积\n       */\n      crossProduct(v1, v2) {\n        return {\n          x: v1.y * v2.z - v1.z * v2.y,\n          y: v1.z * v2.x - v1.x * v2.z,\n          z: v1.x * v2.y - v1.y * v2.x\n        }\n      },\n\n      /**\n       * 计算向量长度\n       */\n      vectorLength(v) {\n        return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z)\n      },\n\n      /**\n       * 归一化向量\n       */\n      normalizeVector(v) {\n        const length = this.vectorLength(v)\n        return {\n          x: v.x / length,\n          y: v.y / length,\n          z: v.z / length\n        }\n      },\n\n      /**\n       * 绘制假极轴位置\n       */\n      drawFakePolarAxis(fakePolarRA, fakePolarDEC) {\n        this.addLog(`绘制假极轴位置: RA=${fakePolarRA.toFixed(4)}°, DEC=${fakePolarDEC.toFixed(4)}°`, 'info')\n\n        try {\n          // 定义假极轴的颜色（紫色）\n          const fakePolarColor = {\n            stroke: \"#9C27B0\",        // 紫色边框\n            strokeOpacity: 1,         // 边框不透明度\n            fill: \"#9C27B0\",          // 紫色填充\n            fillOpacity: 0.3          // 填充不透明度（半透明）\n          }\n\n          // 使用专门的假极轴绘制事件，避免与目标点冲突\n          this.$bus.$emit('DrawFakePolarAxisCircle',\n            fakePolarRA,\n            fakePolarDEC,\n            fakePolarColor,\n            'FakePolarAxis',\n            '假极轴'\n          )\n\n          this.addLog(`假极轴位置已绘制: RA=${fakePolarRA.toFixed(4)}°, DEC=${fakePolarDEC.toFixed(4)}°`, 'info')\n\n        } catch (error) {\n          this.addLog(`绘制假极轴位置时出错: ${error.message}`, 'error')\n          console.error('绘制假极轴位置错误：', error)\n        }\n      },\n      // ========================================\n      // 单位换算方法\n      // ========================================\n      unitToArcmin(val, unit) {\n        if (!Number.isFinite(val)) return NaN\n        if (unit === 'deg') return val * 60\n        if (unit === 'arcsec') return val / 60\n        return val // 'arcmin'\n      },\n      arcminToUnit(valArcmin, unit) {\n        if (!Number.isFinite(valArcmin)) return NaN\n        if (unit === 'deg') return valArcmin / 60\n        if (unit === 'arcsec') return valArcmin * 60\n        return valArcmin\n      },\n      unitGlyph(unit) {\n        if (unit === 'deg') return '°'\n        if (unit === 'arcsec') return '″'\n        return '′' // arcmin\n      },\n\n      // ========================================\n      // 左右/上下映射（面向极点）方法\n      // ========================================\n      // 根据当前坐标计算朝向哪个极点\n      calculateFacingPole() {\n        if (!this.$store || !this.$store.state.currentLocation) {\n          return 'north' // 默认返回北极\n        }\n        \n        const lat = this.$store.state.currentLocation.lat\n        // 北半球（纬度 > 0）面向北极，南半球（纬度 < 0）面向南极\n        return lat >= 0 ? 'north' : 'south'\n      },\n\n      // azSign > 0 = 朝东；azSign < 0 = 朝西\n      azLabelBySign(azSign) {\n        // 动态计算朝向极点，而不是使用 props\n        const facingPole = this.calculateFacingPole()\n        // 面向北极点：东=→右，西=←左；面向南极点则相反\n        const east = (facingPole === 'north') ? this.$t('→ Right (East)') : this.$t('← Left (East)')\n        const west = (facingPole === 'north') ? this.$t('← Left (West)') : this.$t('→ Right (West)')\n        return azSign >= 0 ? east : west\n      },\n      // altSign > 0 = 抬高；altSign < 0 = 降低\n      altLabelBySign(altSign) {\n        return altSign >= 0 ? this.$t('↑ Up (Raise)') : this.$t('↓ Down (Lower)')\n      },\n\n      // ========================================\n      // 统一格式化\"数值 + 单位\"方法\n      // ========================================\n      formatWithUnit(valInArcmin, unit, digits = 1) {\n        const v = this.arcminToUnit(Math.abs(valInArcmin), unit)\n        const glyph = this.unitGlyph(unit)\n        return `${v.toFixed(digits)}${glyph}`\n      },\n\n      // ========================================\n      // 颜色工具方法\n      // ========================================\n      getCalibrationPointColor() {\n        return {\n          stroke: COLORS.WHITE,\n          strokeOpacity: 1,\n          fill: COLORS.WHITE,\n          fillOpacity: 0.2\n        }\n      },\n\n      getCurrentPositionColor() {\n        return {\n          stroke: \"#00BFFF\",\n          strokeOpacity: 1,\n          fill: \"#00BFFF\",\n          fillOpacity: 0.3\n        }\n      },\n\n      getTargetPointColor() {\n        return {\n          stroke: COLORS.SUCCESS,\n          strokeOpacity: 1,\n          fill: COLORS.SUCCESS,\n          fillOpacity: 0.3\n        }\n      },\n\n      getFakePolarAxisColor() {\n        return {\n          stroke: \"#9C27B0\",\n          strokeOpacity: 1,\n          fill: \"#9C27B0\",\n          fillOpacity: 0.3\n        }\n      },\n    },\n  }\n</script>\n\n<style scoped>\n/* === 轨迹覆盖层样式 === */\n.trajectory-overlay {\n  position: fixed;\n  inset: 0;\n  background: black;\n  z-index: 10002 !important;\n  pointer-events: auto;\n}\n.trajectory-overlay canvas {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n.overlay-panel {\n  position: absolute;\n  left: 16px;\n  top: 16px;\n  background: rgba(30, 30, 30, 0.7);\n  color: #fff;\n  border: 1px solid rgba(255,255,255,0.15);\n  border-radius: 8px;\n  padding: 10px 12px;\n  cursor: move;\n}\n.panel-row { display: flex; gap: 8px; margin-bottom: 6px; font-size: 12px; }\n.panel-label { opacity: 0.85; }\n.panel-value { opacity: 0.95; }\n.panel-actions { display: flex; gap: 8px; margin-top: 6px; flex-wrap: wrap; }\n.panel-btn { background: rgba(255,255,255,0.14); color: #fff; border: none; border-radius: 6px; padding: 6px 10px; cursor: pointer; }\n.panel-btn.small { padding: 4px 8px; font-size: 12px; }\n.panel-btn:hover { background: rgba(255,255,255,0.22); }\n\n.trajectory-window {\n  position: fixed;\n  z-index: 10002 !important;\n  background: rgba(18,18,18,0.95);\n  border: 1px solid rgba(255,255,255,0.12);\n  border-radius: 8px;\n  box-shadow: 0 6px 24px rgba(0,0,0,0.4);\n  overflow: hidden;\n  pointer-events: auto;\n}\n.window-header {\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 8px;\n  background: rgba(45,45,55,0.9);\n  color: #fff;\n  cursor: move;\n}\n.window-title { font-size: 13px; }\n.window-actions { display: flex; gap: 6px; }\n.window-content { width: 100%; height: calc(100% - 32px); position: relative; overflow: hidden; }\n.window-content canvas { position: absolute; left: 0; top: 0; width: 100%; height: 100%; }\n.overlay-close-btn {\n  position: absolute;\n  right: 16px;\n  top: 16px;\n  width: 36px;\n  height: 36px;\n  border: none;\n  background: rgba(255,255,255,0.12);\n  color: #fff;\n  border-radius: 6px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.overlay-close-btn:hover {\n  background: rgba(255,255,255,0.2);\n}\n.overlay-hint {\n  position: absolute;\n  left: 50%;\n  bottom: 20px;\n  transform: translateX(-50%);\n  color: rgba(255,255,255,0.85);\n  font-size: 12px;\n}\n/* === 最小化状态样式 === */\n.polar-alignment-minimized {\n  position: fixed;\n  width: 250px;\n  max-width: 80vw;\n  background: rgba(35, 35, 45, 0.95);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  border-radius: 8px;\n  backdrop-filter: blur(10px);\n  z-index: 1000;\n  cursor: move;\n  user-select: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n  transition: all 0.3s ease;\n  /* 添加背景隔离，防止操作映射到背景 */\n  isolation: isolate;\n  /* 移除contain属性，它可能阻止拖动事件 */\n  touch-action: none;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n/* 拖动状态：移除过渡动画和复杂效果 */\n.polar-alignment-minimized.dragging {\n  transition: none !important;\n  backdrop-filter: none !important;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2) !important;\n  touch-action: manipulation;\n}\n\n.polar-alignment-minimized:hover {\n  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.4);\n}\n\n.polar-alignment-minimized.dragging:hover {\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2) !important;\n}\n\n.minimized-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 12px;\n  background: rgba(60, 60, 70, 0.9);\n  border-radius: 8px 8px 0 0;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.minimized-drag-area {\n  display: flex;\n  align-items: center;\n  flex: 1;\n  cursor: move;\n  /* 确保拖动区域有正确的交互 */\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  touch-action: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.minimized-icon {\n  color: #64b5f6;\n  font-size: 16px;\n  margin-right: 8px;\n}\n\n.minimized-title {\n  font-size: 12px;\n  font-weight: 600;\n  color: #ffffff;\n  flex: 1;\n}\n\n.minimized-controls {\n  display: flex;\n  gap: 4px;\n  /* 确保控制区域可以接收事件 */\n  position: relative;\n  z-index: 20;\n  pointer-events: auto;\n}\n\n.minimized-btn {\n  width: 24px;\n  height: 24px;\n  border: none;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 4px;\n  color: #ffffff;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n  /* 移动端触摸优化 */\n  touch-action: manipulation;\n  -webkit-tap-highlight-color: transparent;\n  /* 确保按钮可以正确点击 */\n  position: relative;\n  z-index: 10;\n  /* 确保按钮可以接收点击事件 */\n  pointer-events: auto;\n}\n\n.minimized-btn:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.minimized-btn:active {\n  background: rgba(255, 255, 255, 0.3);\n  transform: scale(0.95);\n}\n\n.minimized-status {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 12px;\n  font-size: 11px;\n}\n\n.status-indicator {\n  width: 6px;\n  height: 6px;\n  border-radius: 50%;\n  background: #f44336;\n  transition: all 0.3s ease;\n}\n\n.status-indicator.online {\n  background: #4caf50;\n  box-shadow: 0 0 4px rgba(76, 175, 80, 0.6);\n}\n\n.status-text {\n  color: rgba(255, 255, 255, 0.8);\n}\n\n/* === 完整控件样式 === */\n.polar-alignment-widget {\n  position: fixed;\n  width: 350px;\n  max-width: 90vw;\n  background: rgba(35, 35, 45, 0.95);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  border-radius: 8px;\n  backdrop-filter: blur(10px);\n  z-index: 1000;\n  cursor: move;\n  user-select: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n  transition: all 0.3s ease;\n  overflow: hidden;\n  /* 添加背景隔离，防止操作映射到背景 */\n  isolation: isolate;\n  /* 移除contain属性，它可能阻止拖动事件 */\n  touch-action: none;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n/* 拖动状态：移除过渡动画和复杂效果 */\n.polar-alignment-widget.dragging {\n  transition: none !important;\n  backdrop-filter: none !important;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2) !important;\n  touch-action: manipulation;\n}\n\n.polar-alignment-widget:hover {\n  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.4);\n}\n\n.polar-alignment-widget.dragging:hover {\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2) !important;\n}\n\n.polar-alignment-widget.collapsed {\n  width: 300px;\n  max-width: 85vw;\n}\n\n/* === 控件头部样式 === */\n.widget-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 16px;\n  background: rgba(60, 60, 70, 0.9);\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.header-drag-area {\n  display: flex;\n  align-items: center;\n  flex: 1;\n  cursor: move;\n  /* 确保拖动区域有正确的交互 */\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  /* 添加拖动时的视觉反馈 */\n  transition: background-color 0.2s ease;\n  /* 确保拖动区域有正确的指针事件 */\n  pointer-events: auto;\n  touch-action: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.widget-header:hover {\n  background: rgba(60, 60, 70, 0.95);\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex: 1;\n}\n\n.header-icon {\n  color: #64b5f6;\n  font-size: 18px;\n}\n\n.header-title {\n  font-size: 14px;\n  font-weight: 600;\n  color: #ffffff;\n}\n\n.connection-indicator {\n  display: flex;\n  align-items: center;\n}\n\n.status-dot {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: #f44336;\n  transition: all 0.3s ease;\n}\n\n.status-dot.online {\n  background: #4caf50;\n  box-shadow: 0 0 6px rgba(76, 175, 80, 0.6);\n}\n\n.header-controls {\n  display: flex;\n  gap: 4px;\n  /* 确保控制区域可以接收事件 */\n  position: relative;\n  z-index: 20;\n  pointer-events: auto;\n}\n\n.header-btn {\n  width: 28px;\n  height: 28px;\n  border: none;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 4px;\n  color: #ffffff;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n  /* 移动端触摸优化 */\n  touch-action: manipulation;\n  -webkit-tap-highlight-color: transparent;\n  /* 确保按钮可以正确点击 */\n  position: relative;\n  z-index: 10;\n  /* 确保按钮可以接收点击事件 */\n  pointer-events: auto;\n}\n\n.header-btn:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.header-btn:active {\n  background: rgba(255, 255, 255, 0.3);\n  transform: scale(0.95);\n}\n\n.header-btn.close-btn:hover {\n  background: #f44336;\n}\n\n/* === 控件内容样式 === */\n.widget-content {\n  transition: all 0.3s ease;\n  /* 确保内容区域有适当的背景隔离 */\n  background: rgba(35, 35, 45, 0.95);\n  position: relative;\n  z-index: 1;\n  /* 确保内容区域不会阻止拖动事件 */\n  pointer-events: auto;\n}\n\n/* 拖动状态：移除过渡动画 */\n.widget-content.dragging {\n  transition: none !important;\n}\n\n.widget-content.collapsed {\n  padding: 12px;\n}\n\n.widget-content.expanded {\n  padding: 16px;\n  max-height: 80vh;\n  overflow-y: auto;\n  /* 优化内容布局，充分利用空间 */\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  /* 确保内容充分利用可用空间 */\n  min-height: 0;\n  flex: 1;\n  /* 自适应高度 */\n  height: auto;\n}\n\n/* === 收缩状态样式 === */\n.collapsed-info {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.collapsed-progress {\n  flex-shrink: 0;\n}\n\n.progress-circle {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background: conic-gradient(#64b5f6 0deg var(--progress, 0deg),\n      rgba(255, 255, 255, 0.1) var(--progress, 0deg) 360deg);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n\n.progress-circle::before {\n  content: '';\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background: rgba(35, 35, 45, 0.95);\n}\n\n.progress-text {\n  position: relative;\n  z-index: 1;\n  font-size: 12px;\n  font-weight: 600;\n  color: #ffffff;\n}\n\n.collapsed-status {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.status-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 11px;\n}\n\n.status-label {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.status-value {\n  color: #ffffff;\n  font-weight: 600;\n  font-family: monospace;\n}\n\n.status-value.needs-adjustment {\n  color: #ff9800;\n}\n\n/* === 展开状态样式 === */\n.content-sections {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  /* 优化布局，充分利用可用空间 */\n  width: 100%;\n  min-height: 0;\n}\n\n/* === 校准步骤进度条样式 === */\n.calibration-progress {\n  margin-bottom: 16px;\n}\n\n.progress-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.progress-title {\n  font-size: 12px;\n  font-weight: 600;\n  color: #ffffff;\n}\n\n.calibration-loop-info {\n  font-size: 10px;\n  color: #ff9800;\n  font-weight: 500;\n  padding: 2px 6px;\n  background: rgba(255, 152, 0, 0.2);\n  border-radius: 4px;\n  animation: loop-pulse 2s infinite;\n}\n\n@keyframes loop-pulse {\n\n  0%,\n  100% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0.7;\n  }\n}\n\n.progress-bar {\n  position: relative;\n  width: 100%;\n  height: 8px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 4px;\n  overflow: visible;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #64b5f6, #4caf50);\n  border-radius: 4px;\n  transition: width 0.1s ease;\n}\n\n.progress-nodes {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.progress-node {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2;\n}\n\n.node-circle {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: rgba(255, 255, 255, 0.2);\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 10px;\n  font-weight: bold;\n  color: #ffffff;\n  transition: all 0.3s ease;\n}\n\n.progress-node.completed .node-circle {\n  background: #4caf50;\n  border-color: #4caf50;\n  box-shadow: 0 0 8px rgba(76, 175, 80, 0.4);\n}\n\n.progress-node.current .node-circle {\n  background: #64b5f6;\n  border-color: #64b5f6;\n  box-shadow: 0 0 8px rgba(100, 181, 246, 0.4);\n}\n\n.progress-node.adjustment-node .node-circle {\n  background: rgba(255, 152, 0, 0.3);\n  border-color: rgba(255, 152, 0, 0.5);\n}\n\n.progress-node.adjustment-node.active .node-circle {\n  background: #ff9800;\n  border-color: #ff9800;\n  box-shadow: 0 0 8px rgba(255, 152, 0, 0.4);\n}\n\n.progress-node.calibration-node .node-circle {\n  background: rgba(255, 152, 0, 0.3);\n  border-color: rgba(255, 152, 0, 0.5);\n}\n\n.progress-node.calibration-node.active .node-circle {\n  background: #ff9800;\n  border-color: #ff9800;\n  box-shadow: 0 0 8px rgba(255, 152, 0, 0.4);\n}\n\n.progress-node.calibration-node.looping .node-circle {\n  animation: calibration-pulse 2s infinite;\n}\n\n@keyframes calibration-pulse {\n  0% {\n    background: #ff9800;\n    box-shadow: 0 0 8px rgba(255, 152, 0, 0.4);\n  }\n\n  50% {\n    background: #ff5722;\n    box-shadow: 0 0 12px rgba(255, 152, 0, 0.6);\n  }\n\n  100% {\n    background: #ff9800;\n    box-shadow: 0 0 8px rgba(255, 152, 0, 0.4);\n  }\n}\n\n.progress-node.calibration-node.looping .node-circle i {\n  animation: calibration-rotate 2s linear infinite;\n}\n\n@keyframes calibration-rotate {\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.progress-node.verification-node .node-circle {\n  background: rgba(76, 175, 80, 0.3);\n  border-color: rgba(76, 175, 80, 0.5);\n}\n\n.progress-node.verification-node.active .node-circle {\n  background: #4caf50;\n  border-color: #4caf50;\n  box-shadow: 0 0 8px rgba(76, 175, 80, 0.4);\n}\n\n.node-label {\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 9px;\n  color: rgba(255, 255, 255, 0.7);\n  font-weight: 500;\n  margin-top: 4px;\n  white-space: nowrap;\n  text-align: center;\n}\n\n.progress-node {\n  position: relative;\n}\n\n/* === 位置信息样式 === */\n.position-section {\n  margin-top: 16px;\n  padding-top: 16px;\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.position-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  gap: 8px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 6px;\n  padding: 12px;\n}\n\n.position-cell {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n  padding: 8px;\n  border-radius: 4px;\n  transition: all 0.3s ease;\n}\n\n.position-cell.current {\n  background: rgba(100, 181, 246, 0.1);\n  border: 1px solid rgba(100, 181, 246, 0.2);\n}\n\n.position-cell.target {\n  background: rgba(255, 152, 0, 0.1);\n  border: 1px solid rgba(255, 152, 0, 0.2);\n}\n\n.cell-label {\n  font-size: 10px;\n  color: rgba(255, 255, 255, 0.7);\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.cell-value {\n  font-size: 11px;\n  color: #ffffff;\n  font-family: monospace;\n  font-weight: 600;\n}\n\n/* === 调整指导样式 === */\n.adjustment-section {\n  margin-top: 16px;\n  padding-top: 16px;\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.adjustment-instructions {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.adjustment-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 6px;\n  transition: all 0.3s ease;\n  border: 1px solid transparent;\n}\n\n.adjustment-item.active {\n  background: rgba(255, 152, 0, 0.15);\n  border-color: #ff9800;\n}\n\n.adjustment-icon {\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  background: rgba(255, 255, 255, 0.1);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 14px;\n  color: #ffffff;\n  flex-shrink: 0;\n}\n\n.adjustment-item.active .adjustment-icon {\n  background: #ff9800;\n}\n\n.adjustment-details {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.adjustment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.adjustment-type {\n  font-size: 12px;\n  color: #ffffff;\n  font-weight: 500;\n}\n\n.adjustment-value {\n  font-size: 18px;\n  color: #ffffff;\n  font-family: monospace;\n  font-weight: 700;\n  text-shadow: 0 0 4px rgba(255, 255, 255, 0.3);\n  letter-spacing: 1px;\n}\n\n.adjustment-action {\n  font-size: 10px;\n  color: rgba(255, 255, 255, 0.7);\n  font-weight: 500;\n}\n\n.adjustment-item.active .adjustment-action {\n  color: #ff9800;\n}\n\n/* === 操作按钮样式 === */\n.control-section {\n  margin-top: 16px;\n  padding-top: 16px;\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.action-buttons {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n}\n\n.action-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  padding: 12px 16px;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 13px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n  pointer-events: auto;\n  min-height: 40px;\n  touch-action: manipulation;\n  position: relative;\n  flex: 1;\n}\n\n.action-btn.primary {\n  background: linear-gradient(135deg, #64b5f6, #42a5f5);\n  color: #ffffff;\n  box-shadow: 0 2px 6px rgba(100, 181, 246, 0.3);\n}\n\n.action-btn.primary:hover:not(:disabled) {\n  background: linear-gradient(135deg, #42a5f5, #2196f3);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(100, 181, 246, 0.4);\n}\n\n.action-btn.secondary {\n  background: rgba(255, 255, 255, 0.1);\n  color: #ffffff;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.action-btn.secondary:hover:not(:disabled) {\n  background: rgba(255, 255, 255, 0.2);\n  transform: translateY(-1px);\n}\n\n.action-btn.success {\n  background: linear-gradient(135deg, #4caf50, #43a047);\n  color: #ffffff;\n  box-shadow: 0 2px 6px rgba(76, 175, 80, 0.3);\n}\n\n.action-btn.success:hover:not(:disabled) {\n  background: linear-gradient(135deg, #43a047, #388e3c);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(76, 175, 80, 0.4);\n}\n\n.action-btn.restore {\n  background: linear-gradient(135deg, #ff9800, #f57c00);\n  color: #ffffff;\n  box-shadow: 0 2px 6px rgba(255, 152, 0, 0.3);\n}\n\n.action-btn.restore:hover:not(:disabled) {\n  background: linear-gradient(135deg, #f57c00, #ef6c00);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(255, 152, 0, 0.4);\n}\n\n.action-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  transform: none !important;\n  box-shadow: none !important;\n}\n\n/* === 日志显示样式 === */\n.log-section {\n  margin-top: 16px;\n  padding-top: 16px;\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.log-display {\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 6px;\n  padding: 10px;\n}\n\n.latest-log {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 10px;\n  border-radius: 4px;\n  font-size: 11px;\n  background: rgba(255, 255, 255, 0.05);\n  border-left: 3px solid transparent;\n}\n\n.latest-log.info {\n  border-left-color: #64b5f6;\n}\n\n.latest-log.warning {\n  border-left-color: #ff9800;\n}\n\n.latest-log.success {\n  border-left-color: #4caf50;\n}\n\n.latest-log.error {\n  border-left-color: #f44336;\n}\n\n.log-timestamp {\n  color: rgba(255, 255, 255, 0.6);\n  font-family: monospace;\n  font-size: 10px;\n  min-width: 65px;\n  flex-shrink: 0;\n}\n\n.log-message {\n  color: rgba(255, 255, 255, 0.9);\n  flex: 1;\n  line-height: 1.4;\n}\n\n.log-empty {\n  text-align: center;\n  color: rgba(255, 255, 255, 0.5);\n  font-size: 11px;\n  padding: 20px;\n  font-style: italic;\n}\n\n/* === 响应式设计 === */\n@media (max-width: 768px) {\n  .polar-alignment-widget {\n    width: 320px;\n    max-width: 95vw;\n  }\n\n  .polar-alignment-widget.collapsed {\n    width: 280px;\n    max-width: 90vw;\n  }\n\n  .polar-alignment-minimized {\n    width: 240px;\n  }\n\n  .widget-header {\n    padding: 10px 12px;\n  }\n\n  .header-title {\n    font-size: 12px;\n  }\n\n  .widget-content.expanded {\n    padding: 12px;\n    max-height: 500px;\n  }\n\n  .widget-content.collapsed {\n    padding: 8px;\n  }\n\n  .action-btn {\n    padding: 10px 12px;\n    font-size: 12px;\n    min-height: 36px;\n  }\n\n  .adjustment-value {\n    font-size: 16px;\n  }\n\n  .progress-circle {\n    width: 50px;\n    height: 50px;\n  }\n\n  .progress-text {\n    font-size: 10px;\n  }\n\n  .node-label {\n    font-size: 8px;\n    margin-top: 2px;\n  }\n\n  .node-circle {\n    width: 16px;\n    height: 16px;\n    font-size: 8px;\n  }\n\n  .progress-header {\n    margin-bottom: 6px;\n  }\n\n  .progress-title {\n    font-size: 11px;\n  }\n\n  .calibration-loop-info {\n    font-size: 9px;\n    padding: 1px 4px;\n  }\n}\n\n/* 移动端触摸优化 */\n@media (hover: none) and (pointer: coarse) {\n  .action-btn {\n    min-height: 48px;\n    padding: 14px 18px;\n    font-size: 14px;\n  }\n\n  .widget-header {\n    padding: 16px 20px;\n  }\n\n  .minimized-header {\n    padding: 12px 16px;\n  }\n\n  .header-btn {\n    width: 32px;\n    height: 32px;\n  }\n\n  .minimized-btn {\n    width: 28px;\n    height: 28px;\n  }\n}\n\n@media (max-width: 480px) {\n  .polar-alignment-widget {\n    width: 280px;\n    max-width: 98vw;\n  }\n\n  .polar-alignment-widget.collapsed {\n    width: 240px;\n    max-width: 95vw;\n  }\n\n  .polar-alignment-minimized {\n    width: 200px;\n  }\n\n  .widget-header {\n    padding: 8px 10px;\n  }\n\n  .header-title {\n    font-size: 11px;\n  }\n\n  .header-btn {\n    width: 20px;\n    height: 20px;\n  }\n\n  .widget-content.expanded {\n    padding: 10px;\n    max-height: 400px;\n  }\n\n  .widget-content.collapsed {\n    padding: 6px;\n  }\n\n  .action-btn {\n    padding: 8px 10px;\n    font-size: 11px;\n    min-height: 32px;\n  }\n\n  .adjustment-value {\n    font-size: 14px;\n  }\n\n  .progress-circle {\n    width: 40px;\n    height: 40px;\n  }\n\n  .progress-text {\n    font-size: 9px;\n  }\n\n  .minimized-header {\n    padding: 6px 8px;\n  }\n\n  .minimized-title {\n    font-size: 10px;\n  }\n\n  .minimized-btn {\n    width: 16px;\n    height: 16px;\n  }\n\n  .node-label {\n    font-size: 7px;\n    margin-top: 1px;\n  }\n\n  .node-circle {\n    width: 14px;\n    height: 14px;\n    font-size: 7px;\n  }\n\n  .progress-nodes {\n    gap: 2px;\n  }\n\n  .progress-header {\n    margin-bottom: 4px;\n  }\n\n  .progress-title {\n    font-size: 10px;\n  }\n\n  .calibration-loop-info {\n    font-size: 8px;\n    padding: 1px 3px;\n  }\n}\n\n/* 面板标题 */\n.panel-header {\n  margin-bottom: 16px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  pointer-events: auto;\n}\n\n.panel-header h3 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #ffffff;\n}\n\n.panel-indicator {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: #64b5f6;\n}\n\n.panel-indicator.live {\n  animation: pulse 2s infinite;\n}\n\n.panel-indicator.control {\n  background: #ff9800;\n}\n\n@keyframes pulse {\n  0% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0.5;\n  }\n\n  100% {\n    opacity: 1;\n  }\n}\n\n\n\n.card-header {\n  background: rgba(60, 60, 70, 0.8);\n  padding: 12px 16px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  pointer-events: auto;\n}\n\n.card-header span {\n  font-size: 14px;\n  font-weight: 500;\n  color: #ffffff;\n}\n\n.card-icon {\n  color: #64b5f6;\n  font-size: 18px;\n}\n\n.card-icon.warning {\n  color: #ff9800;\n}\n\n.card-icon.success {\n  color: #4caf50;\n}\n\n\n\n\n\n\n/* === 响应式设计 === */\n@media (max-width: 1200px) {\n  .info-panel {\n    flex: 0 0 350px;\n  }\n}\n\n@media (max-width: 768px) {\n  .polar-alignment-interface {\n    font-size: 12px;\n  }\n\n  .main-layout {\n    flex-direction: column;\n    gap: 8px;\n    padding: 8px;\n  }\n\n  .display-panel {\n    flex: 1;\n    min-height: 300px;\n    padding: 12px;\n  }\n\n  .info-panel {\n    flex: 0 0 auto;\n    max-height: 50vh;\n    overflow-y: auto;\n    padding: 12px;\n  }\n\n  /* 状态相关样式已删除 */\n\n  .calibration-progress {\n    margin-bottom: 12px;\n  }\n\n  .progress-bar {\n    height: 6px;\n  }\n\n  .node-circle {\n    width: 16px;\n    height: 16px;\n    font-size: 8px;\n  }\n\n  .position-section {\n    margin-top: 12px;\n    padding-top: 12px;\n  }\n\n  .position-grid {\n    gap: 6px;\n    padding: 8px;\n  }\n\n  .position-cell {\n    padding: 6px;\n  }\n\n  .adjustment-section {\n    margin-top: 12px;\n    padding-top: 12px;\n  }\n\n  .adjustment-item {\n    padding: 8px;\n  }\n\n  .adjustment-icon {\n    width: 24px;\n    height: 24px;\n  }\n\n  .control-section {\n    margin-top: 12px;\n    padding-top: 12px;\n  }\n\n  .action-btn {\n    padding: 10px 12px;\n    font-size: 12px;\n    min-height: 36px;\n    flex: 1;\n  }\n\n  .log-section {\n    margin-top: 12px;\n    padding-top: 12px;\n  }\n\n  .log-display {\n    padding: 8px;\n  }\n\n  .panel-header {\n    margin-bottom: 8px;\n    padding-bottom: 8px;\n  }\n\n  .interface-title {\n    font-size: 14px;\n  }\n\n  .connection-status {\n    font-size: 10px;\n  }\n\n  .card-header {\n    padding: 8px 12px;\n  }\n\n  .card-header span {\n    font-size: 12px;\n  }\n\n  .card-content {\n    padding: 12px;\n  }\n\n\n\n  .node-circle {\n    width: 14px;\n    height: 14px;\n    font-size: 7px;\n  }\n\n  .log-display {\n    padding: 6px;\n  }\n\n  .latest-log {\n    font-size: 10px;\n  }\n\n  .log-timestamp {\n    min-width: 50px;\n  }\n}\n\n@media (max-width: 480px) {\n  .polar-alignment-interface {\n    font-size: 10px;\n  }\n\n  .main-layout {\n    flex-direction: column;\n    gap: 6px;\n    padding: 6px;\n  }\n\n  .display-panel {\n    flex: 1;\n    min-height: 250px;\n    padding: 8px;\n  }\n\n  .info-panel {\n    flex: 0 0 auto;\n    max-height: 45vh;\n    overflow-y: auto;\n    padding: 8px;\n  }\n\n  .card-header {\n    padding: 8px 12px;\n  }\n\n  .card-header span {\n    font-size: 11px;\n  }\n\n  .card-content {\n    padding: 12px;\n  }\n\n  /* 状态相关样式已删除 */\n\n  .calibration-progress {\n    margin-bottom: 8px;\n  }\n\n  .progress-bar {\n    height: 4px;\n  }\n\n  .node-circle {\n    width: 14px;\n    height: 14px;\n    font-size: 7px;\n  }\n\n  .position-section {\n    margin-top: 8px;\n    padding-top: 8px;\n  }\n\n  .position-grid {\n    gap: 4px;\n    padding: 6px;\n  }\n\n  .position-cell {\n    padding: 4px;\n  }\n\n  .cell-label {\n    font-size: 8px;\n  }\n\n  .cell-value {\n    font-size: 9px;\n  }\n\n  .adjustment-section {\n    margin-top: 8px;\n    padding-top: 8px;\n  }\n\n  .adjustment-item {\n    padding: 6px;\n  }\n\n  .adjustment-icon {\n    width: 20px;\n    height: 20px;\n  }\n\n  .adjustment-type {\n    font-size: 10px;\n  }\n\n  .adjustment-value {\n    font-size: 10px;\n  }\n\n  .adjustment-action {\n    font-size: 8px;\n  }\n\n  .control-section {\n    margin-top: 8px;\n    padding-top: 8px;\n  }\n\n  .action-btn {\n    padding: 8px 10px;\n    font-size: 10px;\n    min-height: 32px;\n    flex: 1;\n  }\n\n  .log-section {\n    margin-top: 8px;\n    padding-top: 8px;\n  }\n\n  .log-display {\n    padding: 6px;\n  }\n\n  .latest-log {\n    font-size: 9px;\n  }\n\n  .log-timestamp {\n    font-size: 8px;\n    min-width: 45px;\n  }\n\n  .panel-header {\n    margin-bottom: 6px;\n    padding-bottom: 6px;\n  }\n\n}\n\n/* === 触摸优化 === */\n.polar-alignment-widget,\n.polar-alignment-minimized {\n  /* 触摸优化 */\n  touch-action: none;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.header-drag-area,\n.minimized-drag-area {\n  /* 触摸优化 */\n  touch-action: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\n/* 拖动状态：移除触摸优化，允许正常触摸 */\n.polar-alignment-widget.dragging,\n.polar-alignment-minimized.dragging {\n  touch-action: manipulation;\n}\n\n/* === 性能优化 === */\n/* 拖动时禁用不必要的动画和效果 */\n.dragging * {\n  animation: none !important;\n  transition: none !important;\n}\n\n/* 拖动时简化阴影和模糊效果 */\n.dragging .progress-circle::before,\n.dragging .node-circle,\n.dragging .status-indicator {\n  box-shadow: none !important;\n  filter: none !important;\n}\n</style>"],"sourceRoot":"src/components"}]}