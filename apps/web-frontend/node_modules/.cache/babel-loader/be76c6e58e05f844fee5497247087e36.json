{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/App.vue","mtime":1749191979333},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"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A;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA,IAAA,aAjjFA,2BAijFA;AACA,UAAA,KAAA,YAAA,IAAA,IAAA,EAAA;AACA,aAAA,iBAAA,CAAA,yDAAA,EAAA,OAAA;AACA;AACA,OAJA,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,UAAA,SAAA,GAAA,IAAA,IAAA,EAAA;AACA,UAAA,KAAA,GAAA,IAAA,IAAA,EAAA,CAzBA,CA2BA;;AACA,UAAA,eAAA,GAAA,KAAA,YAAA,CAAA,KAAA,GAAA,KAAA,KAAA;AACA,UAAA,gBAAA,GAAA,eAAA,GAAA,KAAA,eAAA,CA7BA,CA+BA;;AACA,UAAA,WAAA,GAAA,KAAA,QAAA,CAhCA,CAiCA;;AACA,UAAA,WAAA,GAAA,KAAA,QAAA,CAlCA,CAoCA;;AACA,UAAA,WAAA,GAAA,eAAA,GAAA,CAAA,GAAA,CAAA,EAAA;AACA,QAAA,WAAA,GAAA,eAAA,GAAA,CAAA;AACA,OAFA,MAEA,IAAA,WAAA,GAAA,eAAA,GAAA,CAAA,GAAA,KAAA,YAAA,CAAA,KAAA,EAAA;AACA,QAAA,WAAA,GAAA,KAAA,YAAA,C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","sourcesContent":["// Stellarium Web - Copyright (c) 2022 - Stellarium Labs SRL\n//\n// This program is licensed under the terms of the GNU AGPL v3, or\n// alternatively under a commercial licence.\n//\n// The terms of the AGPL v3 license can be found in the main directory of this\n// repository.\n\n<template>\n\n  <v-app>\n    <v-navigation-drawer v-model=\"drawer_2\" ref=\"Drawer_2\" app absolute temporary :width=\"DeviceIsConnected ? 200 : 200\"\n      style=\"left: 170px; backdrop-filter: blur(5px); background-color: rgba(0, 0, 0, 0.1);\">\n\n      <div v-show=\"isOpenDevicePage\">\n        <span\n          style=\"position: absolute; top: 0px; left: 50%; transform: translateX(-50%); font-size: 30px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n          {{ $t(CurrentDriverType) }}\n          <v-divider></v-divider>\n        </span>\n\n        <div :style=\"{ width: DeviceIsConnected ? '200px' : '200px' }\"\n          style=\"position: absolute; top: 50px; max-height: calc(100% - 95px); overflow-y: auto;\">\n\n          <div v-show=\"!DeviceIsConnected\" style=\"text-align: center;\">\n            <span style=\"display: inline-block; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n              {{ $t('Device Connection') }}\n            </span>\n            <v-select :label=\"$t('Select Driver')\" :items=\"drivers\" item-text=\"label\" item-value=\"value\"\n              v-model=\"selectedDriver\" style=\"width: 150px; display: inline-block;\"></v-select>\n\n            <v-select v-if=\"CurrentDriverType === 'Mount' || CurrentDriverType === 'Focuser'\" :label=\"$t('Baud Rate')\"\n              :items=\"BaudRateItems\" item-text=\"label\" item-value=\"value\" v-model=\"BaudRateSelected\"\n              style=\"width: 150px; display: inline-block;\">\n            </v-select>\n\n            <v-row no-gutters>\n              <v-col cols=\"4\">\n                <button @click=\"clearDriver\" class=\"btn-confirm\" style=\"display: inline-block;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/delete.svg\" height=\"20px\"\n                      style=\"min-height: 20px; pointer-events: none;\"></img>\n                  </div>\n                </button>\n              </v-col>\n              <v-col cols=\"4\">\n                <button v-if=\"!isConnecting\" @click=\"connectDriver(selectedDriver)\" class=\"btn-confirm\"\n                  style=\"display: inline-block; background-color: green;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <v-icon color=\"white\">mdi-link</v-icon>\n                  </div>\n                </button>\n                <v-progress-circular v-else indeterminate color=\"green\" size=\"24\"></v-progress-circular>\n              </v-col>\n              <v-col cols=\"4\">\n                <button @click=\"confirmDriver\" class=\"btn-confirm\" style=\"display: inline-block;\">\n                  <template>\n                    <v-icon color=\"rgba(255, 255, 255)\">mdi-check-bold</v-icon>\n                  </template>\n                </button>\n              </v-col>\n            </v-row>\n          </div>\n\n          <!-- <div v-show=\"!DeviceIsConnected\" style=\"text-align: center;\">\n            <span style=\"display: inline-block; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n              {{ $t('Device Connection') }}\n            </span>\n            <v-select :label=\"$t('Select Driver')\" :items=\"drivers\" item-text=\"label\" item-value=\"value\"\n              v-model=\"selectedDriver\" style=\"width: 150px; display: inline-block;\"></v-select>\n            <v-row no-gutters>\n              <v-col cols=\"6\">\n                <button @click=\"clearDriver\" class=\"btn-confirm\" style=\"display: inline-block;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/delete.svg\" height=\"20px\"\n                      style=\"min-height: 20px; pointer-events: none;\"></img>\n                  </div>\n                </button>\n              </v-col>\n              <v-col cols=\"6\">\n                <button @click=\"confirmDriver\" class=\"btn-confirm\" style=\"display: inline-block;\">\n                  <template>\n                    <v-icon color=\"rgba(255, 255, 255)\">mdi-check-bold</v-icon>\n                  </template>\n                </button>\n              </v-col>\n            </v-row>\n\n          </div> -->\n\n          <div v-show=\"DeviceIsConnected\" v-for=\"(item, index) in CurrentConfigItems()\" :key=\"index\"\n            style=\"text-align: center; width: 200px;\">\n            <span v-if=\"index === 0\"\n              style=\"display: inline-block; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n              {{ $t('Device Config Items') }}\n            </span>\n            <v-card-text>\n              <v-text-field v-if=\"item.inputType === 'text'\" v-model=\"item.value\" :label=\"item.label\"\n                style=\"width: 150px; display: inline-block;\"></v-text-field>\n\n              <div v-if=\"item.inputType === 'slider'\"\n                style=\"text-align: left; height: 30px; width: 150px; display: inline-block; margin-bottom: 20px;\">\n                <span\n                  style=\"display: inline-block; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\">{{\n                    item.label }}: {{ item.value }}</span>\n                <div>\n                  <button @click=\"decrement(item)\" class=\"get-click btn-slider\"\n                    style=\"position: absolute; left: 25px; transform: translateY(5px); user-select: none; font-size: 5px;\">\n                    <div style=\"display: flex; justify-content: center; align-items: center;\">\n                      <img src=\"@/assets/images/svg/ui/Minus.svg\" height=\"10px\"\n                        style=\"min-height: 10px; pointer-events: none;\"></img>\n                    </div>\n                  </button>\n                  <v-slider v-model=\"item.value\" :step=\"item.inputStep\" :max=\"item.inputMax\" :min=\"item.inputMin\"\n                    color=\"white\" class=\"align-center\"\n                    style=\"position: absolute; left: 45px; width: calc(100% - 90px);\"></v-slider>\n                  <button @click=\"increment(item)\" class=\"get-click btn-slider\"\n                    style=\"position: absolute; right: 25px; transform: translateY(5px); user-select: none; font-size: 5px;\">\n                    <div style=\"display: flex; justify-content: center; align-items: center;\">\n                      <img src=\"@/assets/images/svg/ui/Plus.svg\" height=\"10px\"\n                        style=\"min-height: 10px; pointer-events: none;\"></img>\n                    </div>\n                  </button>\n                </div>\n              </div>\n\n              <v-select v-if=\"item.inputType === 'select'\" v-model=\"item.value\" :label=\"item.label\"\n                :items=\"item.selectValue\" style=\"width: 150px; display: inline-block;\"></v-select>\n              <v-switch v-if=\"item.inputType === 'switch'\" v-model=\"item.value\" :label=\"item.label\"\n                style=\"width: 170px; display: inline-block; margin-bottom: -35px; margin-top: -35px;\"></v-switch>\n            </v-card-text>\n          </div>\n\n        </div>\n\n        <div v-show=\"DeviceIsConnected\"\n          style=\"text-align: center; position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); display: flex; gap: 10px;\">\n          <button @click=\"confirmConfiguration(CurrentConfigItems())\" class=\"btn-confirm\"\n            style=\"display: inline-block; user-select: none;\">\n            <v-icon color=\"rgba(255, 255, 255)\">mdi-check-bold</v-icon>\n          </button>\n          <button @click=\"disconnectDriver\" class=\"btn-confirm\" style=\"display: inline-block; background-color: red;\">\n            <div style=\"display: flex; justify-content: center; align-items: center;\">\n              <v-icon color=\"white\">mdi-link-off</v-icon>\n            </div>\n          </button>s\n        </div>\n\n        <!-- <div v-show=\"DeviceIsConnected\"\n          style=\"text-align: center; position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); display: flex; justify-content: center; width: 100%;\">\n          <button @click=\"confirmConfiguration(CurrentConfigItems())\" class=\"btn-confirm\"\n            style=\"display: inline-block; user-select: none;\">\n            <v-icon color=\"rgba(255, 255, 255)\">mdi-check-bold</v-icon>\n          </button>\n        </div> -->\n\n      </div>\n\n      <div v-show=\"isOpenPowerPage\">\n        <span\n          style=\"position: absolute; top: 0px; left: 50%; transform: translateX(-50%); font-size: 26px; color: rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap; \">\n          {{ $t('Power Management') }}\n          <v-divider></v-divider>\n        </span>\n\n        <div style=\"position: absolute; top: 50px; max-height: calc(100% - 50px); width: 200px; overflow-y: auto;\">\n          <v-list dense>\n\n            <v-list-item @click.stop=\"SwitchOutPutPower(1, OutPutPower_1_ON)\"\n              :style=\"{ height: '36px', marginBottom: '10px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/OutPutPower.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>\n                  <span>\n                    <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('OutPut Power 1') }}\n                    </div>\n                    <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': OutPutPower_1_ON }\">{{\n                      OutPutPower_1_ON ?\n                        '[ON]' : '[OFF]' }}</div>\n                  </span>\n                </v-list-item-title>\n\n              </v-list-item-content>\n            </v-list-item>\n\n            <v-list-item @click.stop=\"SwitchOutPutPower(2, OutPutPower_2_ON)\"\n              :style=\"{ height: '36px', marginBottom: '10px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/OutPutPower.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>\n                  <span>\n                    <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('OutPut Power 2') }}\n                    </div>\n                    <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': OutPutPower_2_ON }\">{{\n                      OutPutPower_2_ON ?\n                        '[ON]' : '[OFF]' }}</div>\n                  </span>\n                </v-list-item-title>\n\n              </v-list-item-content>\n            </v-list-item>\n\n            <v-divider :style=\"{ marginBottom: '10px' }\"></v-divider>\n\n            <v-list-item @click.stop=\"RestartRaspberryPi()\" :style=\"{ height: '36px', marginBottom: '10px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/Reboot.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Restart')\n                  }}</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n\n            <v-list-item @click.stop=\"ShutdownRaspberryPi()\" :style=\"{ height: '36px', marginBottom: '10px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/PowerOFF.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Shut Down')\n                  }}</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n\n          </v-list>\n        </div>\n\n      </div>\n\n    </v-navigation-drawer>\n\n    <v-navigation-drawer v-model=\"nav\" app :stateless=\"drawer_2\" temporary width=\"170\"\n      style=\"backdrop-filter: blur(5px); background-color: rgba(0, 0, 0, 0.1);\"> <!-- stateless temporary  -->\n      <v-layout column fill-height>\n        <v-list dense>\n          <template>\n            <div style=\"display: flex; justify-content: center; align-items: center;\">\n              <span style=\"font-size: 10px; color: rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap;\">\n                Client Version: {{ VueClientVersion }}\n              </span>\n            </div>\n            <div style=\"display: flex; justify-content: center; align-items: center;\">\n              <!-- <span style=\"font-size: 10px; color: getQTClientVersionColor,rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap;\">\n                Server Version: {{ QTClientVersion }}\n              </span> -->\n              <span :style=\"{\n                fontSize: '10px',\n                color: getQTClientVersionColor,\n                userSelect: 'none',\n                whiteSpace: 'nowrap'\n              }\">\n                Server Version: {{ QTClientVersion }}\n              </span>\n            </div>\n            <v-divider></v-divider>\n          </template>\n\n          <template>\n            <v-list-item @click.stop=\"QuitToMainApp()\" :style=\"{ height: '36px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/Quit.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Quit')\n                }}</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n\n            <v-list-item @click.stop=\"toggleStoreValue('showViewSettingsDialog')\" :style=\"{ height: '36px' }\">\n              <v-list-item-icon style=\"margin-right: 10px;\">\n                <div style=\"display: flex; justify-content: center; align-items: center;\">\n                  <img src=\"@/assets/images/svg/ui/Setting.svg\" height=\"30px\"\n                    style=\"min-height: 30px; pointer-events: none;\"></img>\n                </div>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('View Settings')\n                }}</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n            <v-divider></v-divider>\n          </template>\n\n          <v-list-item @click.stop=\"openPowerManagerPage()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Power.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Power Management')\n              }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- <v-list-item :disabled=\"loadingConnectAllDevice\" @touchstart=\"startConnectBtnPress\"\n            @touchend=\"endConnectBtnPress\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Connect.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px', userSelect: 'none' }\">{{\n                $t('Connect All') }}</v-list-item-title>\n              <v-progress-linear v-if=\"loadingConnectAllDevice\" indeterminate color=\"white\"\n                height=\"5\"></v-progress-linear>\n            </v-list-item-content>\n          </v-list-item> -->\n          <v-list-item :disabled=\"loadingConnectAllDevice\" @touchstart=\"startConnectBtnPress\"\n            @touchend=\"endConnectBtnPress\" @mousedown=\"startConnectBtnPress\" @mouseup=\"endConnectBtnPress\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Connect.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\">\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px', userSelect: 'none' }\">\n                {{ $t('Connect All') }}\n              </v-list-item-title>\n              <v-progress-linear v-if=\"loadingConnectAllDevice\" indeterminate color=\"white\"\n                height=\"5\"></v-progress-linear>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"disconnectAllDevice(false)\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DisConnect.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px', userSelect: 'none' }\">{{\n                $t('Disconnect All') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"DeviceAllocation()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Allocation.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{\n                $t('DeviceAllocation') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"CalibratePolarAxis()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/PoleAxis.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{\n                $t('CalibratePolarAxis') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"OpenIamgeFolder()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/FolderSwitch.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Image Files')\n              }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"OpenDebugLog()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DebugLog.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Logs')\n              }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-divider></v-divider>\n\n          <v-list-item v-for=\"(device, index) in devices\" :key=\"index\" @click.stop=\"selectDevice(device)\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/${device.driverType}.svg`)\" height=\"30px\"\n                  style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t(device.driverType) }}</div>\n                  <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': device.isConnected }\">{{ device.device}}\n                  </div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-divider></v-divider>\n\n          <v-list-item @click.stop=\"locationClicked()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/Location.svg`)\" height=\"30px\" style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Lat & Long') }}</div>\n                  <div :style=\"{ fontSize: '7px' }\">{{ '(' + $store.state.currentLocation.lat + ', ' +\n                    $store.state.currentLocation.lng + ')' }}</div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"ShowConfirmDialog('Confirm', $t('Are you sure you need to refresh?'), 'Refresh')\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/Refresh.svg`)\" height=\"30px\" style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ fontSize: '10px' }\">{{ $t('Refresh Page') }}</div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click.stop=\"toggleStoreValue('showDataCreditsDialog')\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DataCredits.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Data Credits')\n              }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n        </v-list>\n      </v-layout>\n    </v-navigation-drawer>\n\n\n    <v-main>\n\n      <canvas v-show=false id=\"TestCanvas\" width=\"1920\" height=\"1080\"></canvas>\n\n      <v-container class=\"fill-height\" fluid style=\"padding: 0\">\n        <div id=\"stel\" v-bind:class=\"{ right_panel: $store.state.showSidePanel }\">\n          <div style=\"position: relative; width: 100%; height: 100%\">\n            <component v-bind:is=\"guiComponent\"></component>\n            <canvas id=\"stel-canvas\" ref='stelCanvas' :style=\"{ zIndex: canvasZIndexStel }\"></canvas>\n            <canvas ref=\"mainCanvas\" id=\"mainCamera-canvas\" :style=\"{ zIndex: canvasZIndexMainCamera }\"\n              @click=\"handleMainCanvasClick\" @touchstart=\"handleTouchStart\" @touchmove=\"handleTouchMove\"\n              @touchend=\"handleTouchEnd\" @mousedown=\"handleMouseDown\" @mouseup=\"handleMouseUp\"\n              @mousemove=\"handleMouseMove\" @wheel=\"handleWheel\">\n            </canvas>\n            <canvas ref=\"guiderCanvas\" id=\"guiderCamera-canvas\" :style=\"{ zIndex: canvasZIndexGuiderCamera }\"\n              @click=\"handleGuiderCanvasClick\"></canvas>\n            <!-- <img id=\"imageSrc\" alt=\"Source\" :src=\"imageSrc\" crossOrigin = \"\" /> -->\n\n          </div>\n        </div>\n\n\n      </v-container>\n    </v-main>\n\n    <v-dialog v-model=\"showDisconnectDialog\" persistent max-width=\"290\">\n      <v-card>\n        <v-card-title class=\"text-h5\">Confirm Action</v-card-title>\n        <v-card-text>Are you sure you want to disconnect the driver {{ currentDisconnectDriverName }}?</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"red darken-1\" text @click=\"showDisconnectDialog = false\">Cancel</v-btn>\n          <v-btn color=\"green darken-1\" text @click=\"confirmDisconnect\">Confirm</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n  </v-app>\n\n</template>\n\n<script>\nimport _ from 'lodash'\nimport Gui from '@/components/gui.vue'\nimport GuiLoader from '@/components/gui-loader.vue'\nimport swh from '@/assets/sw_helpers.js'\nimport Moment from 'moment'\nimport BackgroundImage from '@/assets/images/svg/ui/Background.svg';\nimport ErrorImage from '@/assets/images/svg/ui/errorImage.svg';\n\nlet glTestCircle;\nlet glLayer;\nlet glStel;\n\nexport default {\n  data(context) {\n    return {\n      menuItems: [\n        { title: this.$t('View Settings'), icon: 'mdi-settings', store_var_name: 'showViewSettingsDialog', store_show_menu_item: 'showViewSettingsMenuItem' },\n        { title: this.$t('Planets Tonight'), icon: 'mdi-panorama-fisheye', store_var_name: 'showPlanetsVisibilityDialog', store_show_menu_item: 'showPlanetsVisibilityMenuItem' },\n        { divider: true }\n      ].concat(this.getPluginsMenuItems()).concat([\n        { title: this.$t('Data Credits'), footer: true, icon: 'mdi-copyright', store_var_name: 'showDataCreditsDialog' }\n      ]),\n      menuComponents: [].concat(this.getPluginsMenuComponents()),\n      guiComponent: 'GuiLoader',\n      startTimeIsSet: false,\n      initDone: false,\n      dataSourceInitDone: false,\n      imageSrc: 'https://i.imgur.com/egA5FIv.jpeg', // 替换为你的图像路径\n      cvReady: false,\n      canvasZIndexStel: -10,\n      canvasZIndexMainCamera: -11,\n      canvasZIndexGuiderCamera: -12,\n      currentcanvas: 'Stel',\n\n      WebSocketUrl: '',\n\n      websocket: null,\n      message: '',\n      receivedMessages: [],// 存储接收到的消息\n      sentMessages: [], // 存储已发送的消息\n      messageCounter: 0, // 用于生成唯一的消息ID\n      websocketState: 'disconnected', // 添加WebSocket连接状态\n      networkDisconnected: false, // 添加网络连接状态\n\n      QTClientVersion: 'Not connected',\n      VueClientVersion: process.env.VUE_APP_VERSION,\n\n      // isMessageBoxShow: false,\n\n      CurrentDriverType: '',\n      DeviceIsConnected: null,\n      confirmDriverType: '',\n\n      MainCameraOffsetMin: 0,\n      MainCameraOffsetMax: 0,\n\n      MainCameraGainMin: 0,\n      MainCameraGainMax: 0,\n\n      devices: [\n        { name: '导星镜', driverType: 'Guider', type: 'CCDs', ListNum: \"1\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Guider' },\n        { name: '主相机', driverType: 'MainCamera', type: 'CCDs', ListNum: \"20\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_MainCamera' },\n        { name: '赤道仪', driverType: 'Mount', type: 'Telescopes', ListNum: \"0\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Mount' },\n        { name: '望远镜', driverType: 'Telescopes', device: '', isConnected: false },\n        { name: '电动调焦器', driverType: 'Focuser', type: 'Focusers', ListNum: \"22\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Focuser' },\n        { name: '电子极轴镜', driverType: 'PoleCamera', type: 'CCDs', ListNum: \"2\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_PoleCamera' },\n        { name: '滤镜轮', driverType: 'CFW', type: 'Filter Wheels', ListNum: \"21\", isget: false, device: '', BaudRate: 9600, driverName: '', isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_CFW' },\n      ],\n\n      // Changing the label name also requires changing the emit signal name\n      GuiderConfigItems: [\n        { driverType: 'Guider', label: 'Guider Focal Length (mm)', value: '', inputType: 'text' },\n        { driverType: 'Guider', label: 'Multi Star Guider', value: false, inputType: 'switch' },\n        // { driverType: 'Guider', label: 'Guider Pixel size', value: '', inputType: 'text'},\n        { driverType: 'Guider', label: 'Guider Gain', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n        { driverType: 'Guider', label: 'Calibration step (ms)', value: '', inputType: 'text' },\n        { driverType: 'Guider', label: 'Ra Aggression', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n        { driverType: 'Guider', label: 'Dec Aggression', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n\n      ],\n\n      MainCameraConfigItems: [\n        // vue处理参数\n        { driverType: 'MainCamera', label: 'ImageGainR', value: '1', inputType: 'slider', inputMin: 0, inputMax: 3, inputStep: 0.01 },\n        { driverType: 'MainCamera', label: 'ImageGainB', value: '1', inputType: 'slider', inputMin: 0, inputMax: 3, inputStep: 0.01 },\n        { driverType: 'MainCamera', label: 'ImageOffset', value: '', inputType: 'slider', inputMin: 0, inputMax: 255, inputStep: 0.1},\n        { driverType: 'MainCamera', label: 'ImageCFA', value: '', inputType: 'select', selectValue: ['GR', 'GB', 'BG', 'RGGB'] },\n        // 硬件处理参数\n        { driverType: 'MainCamera', label: 'Binning', value: '', inputType: 'slider', inputMin: 1, inputMax: 4, inputStep: 1 },\n        { driverType: 'MainCamera', label: 'Temperature', value: '', inputType: 'slider', inputMin: -50, inputMax: 30, inputStep: 1 },\n        { driverType: 'MainCamera', label: 'Gain', value: '', inputType: 'slider', inputMin: 0, inputMax: 0, inputStep: 1 },\n        { driverType: 'MainCamera', label: 'Offset', value: '', inputType: 'slider', inputMin: 0, inputMax: 0, inputStep: 1 },\n        // { driverType: 'MainCamera', label: 'RedBox Side Length (px)', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [1]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [2]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [3]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [4]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [5]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [6]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [7]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [8]', value: '', inputType: 'text' },\n        { driverType: 'MainCamera', label: 'ExpTime [9]', value: '', inputType: 'text' },\n        // 在这里添加更多的配置项\n      ],\n\n      MountConfigItems: [\n\n      ],\n\n      TelescopesConfigItems: [\n        { driverType: 'Telescopes', num: 1, label: 'Focal Length (mm)', value: '', inputType: 'text' },\n      ],\n\n      FocuserConfigItems: [\n        // { driverType: 'Focuser', num: 1, label: 'RedBox Side Length (px)', value: '', inputType: 'text'},\n        { driverType: 'Focuser', num: 2, label: 'Min Step', value: '', inputType: 'text' },\n        { driverType: 'Focuser', num: 2, label: 'Sync Focuser Step', value: '', inputType: 'text' },\n\n      ],\n\n      PoleCameraConfigItems: [\n\n      ],\n\n      CFWConfigItems: [\n\n      ],\n\n      BeforeChangeConfigItems: [],\n\n\n\n      imageData: null,\n\n      histogramImage: null,\n      histogram_min: 0,    // 直方图自动拉伸的最小值\n      histogram_max: 255,  // 直方图自动拉伸的最大值\n\n      currentHistogramMin: 0,\n      currentHistogramMax: 255,\n\n      ImageGainR: 1,\n      ImageGainB: 1,\n\n      ImageOffset: 0,\n\n      ImageCFA: 'BG',\n\n      CanvasWidth: 1920,  // 主画布宽度\n      CanvasHeight: 1080, // 主画布高度\n\n      scale: 1, // 缩放比例\n      translateX: 0, // 平移x坐标\n      translateY: 0, // 平移y坐标\n      bufferCanvas: null, // 存储画布\n      bufferCtx: null, // 存储画布上下文\n      tempCanvas: null, // 临时画布\n      tempCtx: null, // 临时画布上下文\n\n      visibleWidth: 0, // 可见区域宽度\n      visibleHeight: 0, // 可见区域高度\n      visibleX: 0, // 可见区域x坐标\n      visibleY: 0, // 可见区域y坐标\n      isDragging: false, // 标记画布是否正在拖动\n      pendingScaleChange: false, // 标记画布是否正在缩放\n\n      touchStartX: 0, // 触摸开始x坐标\n      touchStartY: 0, // 触摸开始y坐标\n      startDistance: 0, // 触摸开始距离\n\n      moveIntervalId: null, // 拖动定时器\n      zoomIntervalId: null, // 缩放定时器\n\n\n      imageWidth: 0, // 图像宽度\n      imageHeight: 0, // 图像高度\n      drawImgData: null,\n      OriginalImage: null,\n      detectStarsImg: null,\n\n      isNotDrawStars: true,\n\n      mainCameraSizeX: 0,\n      mainCameraSizeY: 0,\n\n      ImageProportion: 0,\n\n      DetectedStarsList: [],\n      DetectedStarsFinish: false,\n\n      CartesianList: [],\n\n      PolarPoint_Altitude: 0,\n\n      LastPoint_AzAlt: null,\n\n      MarkCircleNum: 0,\n\n      LastCircle_RaDec: null,\n      LastCircle_AzAlt: null,\n\n      Circles: [],\n\n      drawer_2: null,    // 设置侧边栏的显示与隐藏\n\n      drivers: [], // 驱动选项数组\n      selectedDriver: null, // 选中的驱动\n\n      devicesList: [], // 设备选项数组\n      selectedDevice: null, // 选中的设备\n      ToBeConnectDevice: [],\n\n      loadingSelectDriver: false,\n      loadingConnectAllDevice: false,\n\n      CurrentLocationLng: 0,\n      CurrentLocationLat: 0,\n\n      histogramData: [],\n\n      ImageArrayBuffer: null,\n\n      isOpenDevicePage: false, // 设置设备页面是否打开\n      isOpenPowerPage: false, // 设置电源页面是否打开\n\n      OutPutPower_1_ON: true,\n      OutPutPower_2_ON: false,\n\n      isPolarAxisMode: false,\n\n      isTouching: false, // 标记是否正在处理触摸事件\n      ConnectBtnPressTimer: null,\n      ConnectBtnlongPressThreshold: 1000,\n      isConnectBtnLongPress: false, // 标记是否为长按\n      ConnectBtnCanClick: true,\n\n\n      haveDeviceConnect: false,\n      isConnecting: false, // 添加连接状态\n\n      disconnectTimeoutTriggered: false,\n      disconnectTimeout: null,\n\n      isDownloadingImage: false,\n      isDownloadingImageName: '',\n      isWaitingLogged: false, // 添加等待日志标志\n\n      showDisconnectDialog: false,\n      currentDisconnectDriverName: '',\n\n      enableMainCanvasClick: false, // 控制画布是否可以点击，用来移动调焦选择框和选星\n\n      lastImageProcessParams: { // 最后处理图像的参数\n        gainR: 1,\n        gainB: 1,\n        offset: 0,\n        CFA: 'BG',\n        mode: 1,\n        B: 0,\n        W: 65535,\n        cvmode: 0,\n      },\n      focuserPictureFileName: '',  // 焦距图片文件名\n      isProcessingImage: false,   // 控制是否正在处理图像\n      isFocusLoopShooting: false,  // 控制是否进行ROi循环拍摄\n      // focuserROIStarsList: [],  // 用来保存ROI区域的星点列表，分别保存x,y,HFR\n      selectStarX: -1,\n      selectStarY: -1,\n      DrawSelectStarX: -1,\n      DrawSelectStarY: -1,\n      DrawSelectStarHFR: -1,\n      ROI_x: -1,    // 用来保存ROI区域的x坐标\n      ROI_y: -1,    // 用来保存ROI区域的y坐标\n      ROI_length: 300, // 用来保存ROI区域的长度\n      showSelectStar: false,\n\n      isOneTouch: false,\n      currentTouchX: [0, 0],\n      currentTouchY: [0, 0],\n      startTouchX: [0, 0],\n      startTouchY: [0, 0],\n      startTouchDistance: 0,\n\n      // 定义波特率选项\n      BaudRateItems: [\n        { label: '9600', value: 9600 },\n        { label: '19200', value: 19200 },\n        { label: '38400', value: 38400 },\n        { label: '57600', value: 57600 },\n        { label: '115200', value: 115200 },\n        { label: '230400', value: 230400 },\n      ],\n      BaudRateSelected: 9600, // 波特率选择\n      cpuTemp: null,  // CPU温度\n      cpuUsage: null, // CPU使用率\n    }\n  },\n  components: {\n    Gui,\n    GuiLoader,\n    // MessageBox,\n  },\n  created() {\n    this.$bus.$on('AppSendMessage', this.sendMessage);\n    this.$bus.$on('AppUpdateDevices', this.updateDevices);\n    this.$bus.$on('Switch-MainPage', this.handleButtonTestClick);\n    this.$bus.$on('AutoHistogramNum', this.setAutoHistogramNum);\n    this.$bus.$on('HandleHistogramNum', this.applyHistStretch);\n    this.$bus.$on('ImageGainR', this.ImageGainSet);\n    this.$bus.$on('ImageGainB', this.ImageGainSet);\n    this.$bus.$on('Offset', this.ImageOffsetSet);\n    this.$bus.$on('Binning', this.BinningSet);\n    this.$bus.$on('Gain', this.GainSet);\n    this.$bus.$on('Offset', this.OffsetSet);\n    this.$bus.$on('ImageCFA', this.ImageCFASet);\n    this.$bus.$on('Temperature', this.CameraTemperatureSet);\n    this.$bus.$on('Focal Length (mm)', this.FocalLengthSet);\n    this.$bus.$on('Guider Focal Length (mm)', this.GuiderFocalLengthSet);\n    this.$bus.$on('Multi Star Guider', this.MultiStarGuiderSet);\n    this.$bus.$on('Guider Pixel size', this.GuiderPixelSizeSet);\n    this.$bus.$on('Guider Gain', this.GuiderGainSet);\n    this.$bus.$on('Calibration step (ms)', this.CalibrationDurationSet);\n    this.$bus.$on('Ra Aggression', this.RaAggressionSet);\n    this.$bus.$on('Dec Aggression', this.DecAggressionSet);\n    this.$bus.$on('Sync Focuser Step', this.SyncFocuserStep);\n    this.$bus.$on('ImageProportion', this.setImageProportion);\n    this.$bus.$on('MountGoto', this.lookatcircle);\n    this.$bus.$on('SwitchImageToShow', this.SwitchImageToShow);\n    this.$bus.$on('PolarPointAltitude', this.setPolarPointAltitude);\n    this.$bus.$on('showStelCanvas', this.showStelCanvas);\n    this.$bus.$on('RecalibratePolarAxis', this.RecalibratePolarAxis);\n    this.$bus.$on('CurrentExpTimeList', this.CurrentExpTimeList);\n    this.$bus.$on('disconnectAllDevice', this.disconnectAllDevice);\n    this.$bus.$on('GetConnectedDevices', this.ReturnConnectedDevices);\n    this.$bus.$on('CurrentCFWList', this.CurrentCFWList);\n    this.$bus.$on('calcWhiteBalanceGains', this.calcWhiteBalanceGains);\n    this.$bus.$on('SwitchOutPutPower', this.SwitchOutPutPower);\n    this.$bus.$on('PolarAxisMode', this.PolarAxisMode);\n    this.$bus.$on('SendConsoleLogMsg', this.SendConsoleLogMsg);\n    // this.$bus.$on('DisconnectDriverSuccess', this.disconnectDriversuccess);\n    this.$bus.$on('UnBindingDevice', this.UnBindingDevice);\n    this.$bus.$on('CloseWebView', this.QuitToMainApp)\n    this.$bus.$on('RedBoxSizeChange', this.RedBoxSizeChange);\n    this.$bus.$on('setFocuserState', this.setFocuserState);  // 设置调焦状态和进度\n    this.$bus.$on('setShowSelectStar', this.setShowSelectStar);  // 设置是否显示选择星点\n    this.$bus.$on('ScaleChange', this.ScaleChange);\n  },\n  methods: {\n    getLocationHostName() {\n      const hostname = window.location.hostname;\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const port = window.location.protocol === 'https:' ? '8601' : '8600';\n      this.SendConsoleLogMsg('location hostname:' + hostname, 'info');\n      this.WebSocketUrl = `${protocol}//${hostname}:${port}`;\n      console.log('WebSocketUrl:', this.WebSocketUrl);\n    },\n    getQTClientVersion() {\n      this.sendMessage('Vue_Command', 'getQTClientVersion');\n    },\n    connect() {\n      // 替换为你的 WebSocket 服务器地址\n      // this.websocket = new WebSocket('ws://192.168.2.31:8600');  // process.env.VUE_APP_WEBSOCKET\n      // this.websocket = new WebSocket(process.env.VUE_APP_WEBSOCKET);\n      const wsOptions = {\n        rejectUnauthorized: false  // 禁用证书验证\n      };\n      this.websocket = new WebSocket(this.WebSocketUrl, [], wsOptions);\n\n      this.websocket.onopen = () => {\n        this.websocketState = 'connected';\n        this.networkDisconnected = false; // WebSocket连接成功时重置网络连接状态\n        if (this.disconnectTimeoutTriggered) {\n          this.callShowMessageBox('WebSocket connected', 'success');\n        }\n        this.$bus.$emit('ShowNetStatus', 'true');\n        this.StatusRecovery();\n        console.log('process.env.NODE_ENV:', process.env.NODE_ENV);\n      };\n      \n      this.websocket.onmessage = (message) => {\n        // console.log('QHYCCD | Received message:', message.data);\n\n        const data = JSON.parse(message.data);\n\n        if (data.type === 'QT_Return') {\n          const parts = data.message.split(':');\n          let messageType;\n          if (parts.length > 0) {\n            messageType = parts[0];\n            // console.log('QHYCCD | 获得信息('+messageType+'):', parts);\n          }\n          else {\n            console.error('消息格式错误，无法分割:', data.message);\n            return;\n          }\n          let acceptMessage = false;\n          if (data.message.startsWith('StagingScheduleData:')) {\n            console.log('------------------------------');\n            acceptMessage = true;\n            const parts = data.message.split('[');\n\n            if (parts.length > 0) {\n              console.log('parts.length: ', parts.length);\n              this.$bus.$emit('StagingScheduleData', data.message);\n            }\n            console.log('------------------------------');\n          }\n\n          if (data.message.startsWith('SendDebugMessage|')) {\n            acceptMessage = true;\n            const parts = data.message.split('|');\n            if (parts.length === 3) {\n              const type = parts[1];\n              const message = parts[2];\n              this.$bus.$emit('SendDebugMessage', type, message);\n            }\n          }\n\n          if (!acceptMessage) {\n            switch (messageType) {\n              case 'AddDriver':\n                if (parts.length === 3) {\n                  const label = parts[1];\n                  const value = parts[2];\n                  const type = this.CurrentDriverType;\n                  // 创建一个驱动对象\n                  const driver = { type, label, value };\n\n                  // if (type === 'MainCamera' && label === \"QHY CCD2\") {\n                  //   break;\n                  // }\n                  // if (type === 'Guider' && label === \"QHY CCD\") {\n                  //   break;\n                  // }\n\n                  // 检查label是否为\"QHY CCD\"或\"QFocuser\"，如果是，则插入到数组首位\n                  if (label === \"QHY CCD\" || label === \"QFocuser\" || label === \"QHY CCD2\") {\n                    this.drivers.unshift(driver); // 将新驱动添加到数组的开始位置\n                  } else {\n                    this.drivers.push(driver); // 将新驱动添加到数组的末尾\n                  }\n                }\n                break;\n\n              case 'AddDevice':\n                if (parts.length === 2) {\n                  const label = parts[1];\n                  console.log('QHYCCD | AddDevice: ', label);\n                  // const value = parts[2];\n                  const type = this.confirmDriverType;\n                  // 创建一个驱动对象\n                  const device = { type, label, label };\n                  console.log('QHYCCD | AddDevice: ', device);\n                  // this.$bus.$emit('add-device', device);\n                  this.devicesList.push(device);\n\n                  this.ToBeConnectDevice = [];\n                  this.devicesList.forEach(devicesList => {\n                    if (devicesList.type === this.CurrentDriverType) {\n                      this.ToBeConnectDevice.push(devicesList);\n                    }\n                  });\n\n                  this.loadingSelectDriver = false;\n                }\n                break;\n\n              case 'updateDevices_':\n                if (parts.length === 3) {\n                  const ListNum = parts[1];\n                  const name = parts[2];\n                  this.updateDevices_(ListNum, name);\n                }\n                break;\n\n              case 'ConnectSuccess':\n                if (parts.length === 4) {\n                  const type = parts[1];\n                  const deviceName = parts[2];\n                  const driverName = parts[3];\n\n                  if (deviceName != '') {\n                    this.updateDevicesConnect(type, deviceName, driverName, true);\n                  } else {\n                    this.updateDevicesConnect(type, deviceName, driverName, false);\n                  }\n                }\n                break;\n\n              case 'ConnectFailed':\n                if (parts.length === 2) {\n                  const reason = parts[1];\n                  this.callShowMessageBox(reason, 'error');\n                  this.loadingConnectAllDevice = false;\n                }\n                break;\n\n              case 'ScanFailed':\n                if (parts.length === 2) {\n                  const reason = parts[1];\n                  this.callShowMessageBox(reason, 'error');\n                  this.loadingSelectDriver = false;\n                }\n                break;\n\n              case 'AddDeviceType':\n                if (parts.length === 2) {\n                  const DeviceType = parts[1];\n                  this.$bus.$emit('AddDeviceType', DeviceType);\n                }\n                break;\n\n              case 'DeviceToBeAllocated':\n                if (parts.length === 4) {\n                  const DeviceType = parts[1];\n                  const DeviceIndex = parts[2];\n                  const DeviceName = parts[3];\n                  this.$bus.$emit('DeviceToBeAllocated', DeviceIndex, DeviceName);\n                }\n                break;\n\n              case 'ShowDeviceAllocationWindow':\n                this.$bus.$emit('toggleDeviceAllocationPanel');\n                this.nav = false;\n                break;\n\n              case 'ExposureCompleted':\n                this.$bus.$emit('ExposureCompleted');\n                break;\n\n              case 'SaveJpgSuccess':\n                if (parts.length === 4) {\n                  const fileName = parts[1];\n                  const roi_x = parts[2];\n                  const roi_y = parts[3];\n                  // this.$bus.$emit('showRoiImage', fileName);\n                  this.showRoiImage(fileName, roi_x, roi_y);\n                }\n                break;\n\n              case 'SaveBinSuccess':\n                if (parts.length === 2) {\n                  const fileName = parts[1];\n                  this.readBinFile('img/' + fileName);\n                  this.DetectedStarsFinish = false;\n                }\n                break;\n\n              case 'SaveGuiderImageSuccess':\n                if (parts.length === 2) {\n                  const fileName = parts[1];\n                  this.loadAndDisplayImage('img/' + fileName);\n                }\n                break;\n\n              case 'AddScatterChartData':\n                if (parts.length === 3) {\n                  const Data_x = parts[1];\n                  const Data_y = parts[2];\n                  const newDataPoint = [Data_x, Data_y];\n                  this.$bus.$emit('AddScatterChartData', newDataPoint);\n                }\n                break;\n\n              case 'AddLineChartData':\n                if (parts.length === 4) {\n                  const Data_x = parts[1];\n                  const Data_Ra = parts[2];\n                  const Data_Dec = parts[3];\n                  const newDataPoint_Ra = [Data_x, Data_Ra];\n                  const newDataPoint_Dec = [Data_x, Data_Dec];\n                  this.$bus.$emit('AddLineChartData', newDataPoint_Ra, newDataPoint_Dec);\n                }\n                break;\n\n              case 'SetLineChartRange':\n                if (parts.length === 3) {\n                  const min = parts[1];\n                  const max = parts[2];\n                  this.$bus.$emit('SetLineChartRange', min, max);\n                }\n                break;\n\n              case 'GuiderStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('GuiderStatus', status);\n                }\n                break;\n\n              case 'FocusChangeSpeedSuccess':\n                if (parts.length === 2) {\n                  const Speed = parts[1];\n                  this.$bus.$emit('FocusChangeSpeedSuccess', Speed);\n                }\n                break;\n\n\n              case 'FocusPosition':\n                if (parts.length === 3) {\n                  const CurrentPosition = parts[1];\n                  const TargetPosition = parts[2];\n                  this.$bus.$emit('FocusPosition', CurrentPosition, TargetPosition);\n                }\n                break;\n\n              case 'FocusMoveDone':\n                if (parts.length === 3) {\n                  const CurrentPosition = parts[1];\n                  const FWHM = parts[2];\n                  this.$bus.$emit('UpdateFWHM',CurrentPosition, FWHM);\n                  this.$bus.$emit('addData_Point', CurrentPosition, FWHM);\n                }\n                break;\n\n              case 'addMinPointData_Point':\n                if (parts.length === 3) {\n                  const x = parseInt(parts[1]);\n                  const y = parseFloat(parts[2]);\n                  this.$bus.$emit('addMinPointData_Point', x, y);\n                }\n                break;\n              case 'addLineData_Point':\n                if (parts.length === 2) {\n                    const dataList = parts[1].split(',');  // 将字符串分割成数组\n                    const coordinates = [];\n                    for (let i = 0; i < dataList.length-1; i += 2) {\n                        const x = parseInt(dataList[i]);\n                        const y = parseFloat(dataList[i + 1]);\n                        const coordinate = [x, y];\n                        coordinates.push(coordinate);\n                    }\n                    this.$bus.$emit('addLineData_Point', coordinates);\n                }\n                break;\n              case 'MainCameraSize':\n                if (parts.length === 3) {\n                  const SizeX = parts[1];\n                  const SizeY = parts[2];\n                  this.$bus.$emit('MainCameraSize', SizeX, SizeY);\n                  this.mainCameraSizeX = SizeX;\n                  this.mainCameraSizeY = SizeY;\n                }\n                break;\n\n              case 'MainCameraBinning':\n                if (parts.length === 2) {\n                  const bin = parseInt(parts[1]);\n                  this.$bus.$emit('MainCameraBinning', bin);\n                }\n                break;\n\n              case 'fitQuadraticCurve':\n                this.$bus.$emit('ClearfitQuadraticCurve');\n                for (let x = 0; x <= 601; x += 1) {\n                  const a = parts[x];\n                  const b = a.split('|');\n                  if (b.length === 2) {\n                    const x = b[0];\n                    const y = b[1];\n                    this.$bus.$emit('fitQuadraticCurve', x, y);\n                  }\n                }\n                break;\n\n              case 'fitQuadraticCurve_minPoint':\n                const x = parts[1];\n                const y = parts[2];\n                this.$bus.$emit('fitQuadraticCurve_minPoint', x, y);\n                break;\n\n\n              case 'TelescopePark':\n                if (parts.length === 2) {\n                  const Switch = parts[1];\n                  this.$bus.$emit('MountParkSwitch', Switch);\n                }\n                break;\n\n              case 'TelescopeTrack':\n                if (parts.length === 2) {\n                  const Switch = parts[1];\n                  this.$bus.$emit('MountTrackSwitch', Switch);\n                }\n                break;\n\n              case 'MountSetSpeedSuccess':\n                if (parts.length === 2) {\n                  const num = parts[1];\n                  this.$bus.$emit('newMountSlewRate', num);\n                }\n                break;\n\n\n              case 'TelescopePierSide':\n                if (parts.length === 2) {\n                  const Side = parts[1];\n                  this.$bus.$emit('updateMountPierSide', Side);\n                }\n                break;\n\n              case 'TelescopeTotalSlewRate':\n                if (parts.length === 2) {\n                  const num = parts[1];\n                  this.$bus.$emit('MountTotalSlewRate', num);\n                }\n                break;\n\n\n              case 'UpdateScheduleProcess':\n                if (parts.length === 3) {\n                  const RowNum = parts[1];\n                  const Process = parts[2];\n                  this.$bus.$emit('UpdateScheduleProcess', RowNum, Process);\n                }\n                break;\n\n              case 'ExpTimeList':\n                if (parts.length === 2) {\n                  this.$bus.$emit('initExpTimeList', parts[1]);\n                }\n                break;\n\n\n              case 'CameraInExposuring':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('CameraInExposuring', status);\n                }\n                break;\n\n              case 'AutoFocusOver':\n                this.$bus.$emit('AutoFocusOver');\n                break;\n\n              case 'CFWPositionMax':\n                if (parts.length === 2) {\n                  this.$bus.$emit('SetCFWPositionMax', parts[1]);\n\n                  for (let i = 1; i <= parts[1]; i++) {\n                    this.CFWConfigItems.push({ driverType: 'CFW', label: `CFW [${i}]`, value: '', inputType: 'text' });\n                  }\n\n                  this.$bus.$emit('AppSendMessage', 'Vue_Command', 'getCFWList');\n                }\n                break;\n\n\n              case 'SetCFWPositionSuccess':\n                if (parts.length === 2) {\n                  this.$bus.$emit('SetCFWPositionSuccess', parts[1]);\n                }\n                break;\n\n              case 'getCFWList':\n                if (parts.length === 2) {\n                  this.$bus.$emit('initCFWList', parts[1]);\n                }\n                break;\n\n              case 'GuiderSwitchStatus':\n                if (parts.length === 2) {\n                  this.$bus.$emit('GuiderSwitchStatus', parts[1]);\n                }\n                break;\n\n              case 'GuiderLoopExpStatus':\n                if (parts.length === 2) {\n                  this.$bus.$emit('GuiderLoopExpStatus', parts[1]);\n                }\n                break;\n\n              case 'TelescopeRADEC':\n                if (parts.length === 3) {\n                  this.UpdateCirclePos(parts[1], parts[2]);\n                }\n                break;\n\n\n              case 'TelescopeStatus':\n                if (parts.length === 2) {\n                  this.UpdateTelescopeStatus(parts[1]);\n                }\n                break;\n\n              case 'MainCameraStatus':\n                if (parts.length === 2) {\n                  this.UpdateMainCameraStatus(parts[1]);\n                }\n                break;\n\n\n              case 'MainCameraTemperature':\n                if (parts.length === 2) {\n                  this.UpdateMainCameraTemperature(parts[1]);\n                }\n                break;\n\n\n              case 'ShowAllImageFolder':\n                if (parts.length === 3) {\n                  this.$bus.$emit('ShowAllImageFolder', parts[1], parts[2]);\n                }\n                break;\n\n\n              case 'ImageFilesName':\n                if (parts.length === 2) {\n                  this.$bus.$emit('ImageFilesName', parts[1]);\n                }\n                break;\n\n\n              case 'USBCheck':\n                if (parts.length === 2) {\n                  const USBdata = parts[1].split(',');\n                  console.log('USB name: ', USBdata[0]);\n                  console.log('USB space: ', USBdata[1]);\n                  this.SendConsoleLogMsg('USB name:' + USBdata[0], 'info');\n                  this.SendConsoleLogMsg('USB space:' + USBdata[1], 'info');\n\n                  this.$bus.$emit('USB_Name_Sapce', USBdata[0], USBdata[1]);\n                }\n                break;\n\n              case 'ImageSaveErroe':\n                if (parts.length === 2) {\n                  const Erroe = parts[1];\n                  if (Erroe === 'USB-Null') {\n                    this.callShowMessageBox('No USB Drive Detected.', 'error');\n                  } else if (Erroe === 'USB-Multiple') {\n                    this.callShowMessageBox('Multiple USB drives detected, please remove excess USB drives.', 'error');\n                  }\n                }\n                break;\n\n              case 'DetectedStars':\n                console.log('Detected', parts.length, 'stars.');\n                this.SendConsoleLogMsg('Detected ' + parts.length + ' stars.', 'info');\n                this.DetectedStarsList = [];\n                for (let i = 0; i < parts.length; i++) {\n                  const a = parts[i];\n                  const b = a.split('|');\n                  if (b.length === 3) {\n                    const x = b[0];\n                    const y = b[1];\n                    const hfr = b[2];\n                    // console.log('Stars at(', x, ',', y, ') with HFR:', hfr);\n                    this.DetectedStarsList.push({ x: x, y: y, hfr: hfr });\n                  }\n                }\n                this.DetectedStarsFinish = true;\n                break;\n\n              case 'SolveImageResult':\n                if (parts.length === 5) {\n                  // this.UpdateCirclePos(parts[1], parts[2]);\n                  console.log('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):', parts[1], ',', parts[2], ',', parts[3], ',', parts[4]);\n                  this.SendConsoleLogMsg('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):' + parts[1] + ',' + parts[2] + ',' + parts[3] + ',' + parts[4], 'info');\n                  this.SolveResultMark(parts[1], parts[2], parts[3], parts[4]);\n                  this.$bus.$emit(\"ImageSolveFinished\", true);\n                  this.$bus.$emit('setParsingProgress', false);\n                }\n                break;\n\n              case 'SolveFovResult':\n                if (parts.length === 9) {\n                  const RaDec = [\n                    { Ra: parts[1], Dec: parts[2] },\n                    { Ra: parts[3], Dec: parts[4] },\n                    { Ra: parts[5], Dec: parts[6] },\n                    { Ra: parts[7], Dec: parts[8] },\n                  ];\n                  this.SolveFovMark(RaDec);\n                }\n                break;\n\n              case 'RealTimeSolveImageResult':\n                if (parts.length === 5) {\n                  console.log('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):', parts[1], ',', parts[2], ',', parts[3], ',', parts[4]);\n                  this.SendConsoleLogMsg('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):' + parts[1] + ',' + parts[2] + ',' + parts[3] + ',' + parts[4], 'info');\n                  const result = this.SolveResultMark_RealTime(parts[1], parts[2], parts[3], parts[4])\n                }\n                break;\n\n              case 'SolveImagefailed':\n                this.callShowMessageBox('Solve image faild...', 'error');\n                this.$bus.$emit(\"ImageSolveFinished\", false);\n                this.$bus.$emit('setParsingProgress', false);\n                break;\n\n              case 'MainCameraOffsetRange':\n                if (parts.length === 3) {\n                  console.log('MainCameraOffsetRange:', parts[1], ',', parts[2]);\n                  this.SendConsoleLogMsg('MainCameraOffsetRange:' + parts[1] + ',' + parts[2], 'info');\n                  this.MainCameraOffsetMin = parts[1];\n                  this.MainCameraOffsetMax = parts[2];\n\n                  const OffsetItem = this.MainCameraConfigItems.find(item => item.label === 'Offset');\n                  if (OffsetItem) {\n                    console.log('MainCameraOffsetRange:', parseInt(this.MainCameraOffsetMin, 10), ',', parseInt(this.MainCameraOffsetMax, 10));\n                    OffsetItem.inputMin = parseInt(this.MainCameraOffsetMin, 10);\n                    OffsetItem.inputMax = parseInt(this.MainCameraOffsetMax, 10);\n                  }\n                }\n                break;\n\n              case 'MainCameraGainRange':\n                if (parts.length === 3) {\n                  console.log('MainCameraGainRange:', parts[1], ',', parts[2]);\n                  this.SendConsoleLogMsg('MainCameraGainRange:' + parts[1] + ',' + parts[2], 'info');\n                  this.MainCameraGainMin = parts[1];\n                  this.MainCameraGainMax = parts[2];\n\n                  const gainItem = this.MainCameraConfigItems.find(item => item.label === 'Gain');\n                  if (gainItem) {\n                    console.log('MainCameraGainRange:', parseInt(this.MainCameraGainMin, 10), ',', parseInt(this.MainCameraGainMax, 10));\n                    gainItem.inputMin = parseInt(this.MainCameraGainMin, 10);\n                    gainItem.inputMax = parseInt(this.MainCameraGainMax, 10);\n                  }\n                }\n                break;\n\n              case 'OutputPowerStatus':\n                if (parts.length === 3) {\n                  const index = parseInt(parts[1], 10);\n                  const value = parseInt(parts[2], 10);\n\n                  if (index === 1) {\n                    this.OutPutPower_1_ON = value === 1;\n                  } else if (index === 2) {\n                    this.OutPutPower_2_ON = value === 1;\n                  }\n                }\n                break;\n\n              case 'PHD2StarBoxView':\n                if (parts.length === 2) {\n                  const view = parts[1];\n                  this.$bus.$emit('PHD2StarBoxView', view);\n                }\n                break;\n\n              case 'PHD2StarCrossView':\n                if (parts.length === 2) {\n                  const view = parts[1];\n                  this.$bus.$emit('PHD2StarCrossView', view);\n                }\n                break;\n\n              case 'PHD2StarBoxPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Box_X = parseInt(parts[3], 10);\n                  const Box_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2Box(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y);\n                }\n                break;\n\n              case 'PHD2MultiStarsPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Box_X = parseInt(parts[3], 10);\n                  const Box_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2MultiStars(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y);\n                }\n                break;\n\n              case 'ClearPHD2MultiStars':\n                this.$bus.$emit('ClearPHD2MultiStars');\n                break;\n\n              case 'PHD2StarCrossPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Cross_X = parseInt(parts[3], 10);\n                  const Cross_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2Cross(PHD2ImageSize_X, PHD2ImageSize_Y, Cross_X, Cross_Y);\n                }\n                break;\n\n              case 'QTClientVersion':\n                if (parts.length === 2) {\n                  this.QTClientVersion = parts[1];\n                }\n                break;\n\n\n              case 'CaptureImageSaveStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  if (status === 'Repeat') {\n                    this.callShowMessageBox(this.$t('There is no need to save it again'), 'error');\n                  } else if (status === 'Success') {\n                    this.callShowMessageBox(this.$t('Image saved successfully'), 'success');\n                  } else if (status === 'Null') {\n                    this.callShowMessageBox(this.$t('No images to save'), 'error');\n                  }\n                }\n                break;\n\n              case 'INDIServerDebug':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('INDIServerDebug', message);\n                }\n                break;\n\n              case 'HotspotName':\n                if (parts.length === 2) {\n                  const Name = parts[1];\n                  this.$bus.$emit('HotspotName', Name);\n                }\n                break;\n\n              case 'EditHotspotNameSuccess':\n                this.$bus.$emit('EditHotspotNameSuccess');\n                break;\n\n              case 'DSLRsSetup':\n                if (parts.length === 2) {\n                  const Name = parts[1];\n                  this.$bus.$emit('ShowDSLRsSetup', Name);\n                }\n                break;\n\n              case 'ConfigureRecovery':\n                if (parts.length === 3) {\n                  const ConfigName = parts[1];\n                  const ConfigValue = parts[2];\n                  console.log('Configure:', ConfigName, ',', ConfigValue);\n                  this.SendConsoleLogMsg('Configure Recovery:' + parts[1] + ',' + parts[2], 'info');\n                  this.$bus.$emit(ConfigName, ConfigValue);\n\n                  if (parts[1] === 'FocalLength') {\n                    this.TelescopesConfigItems[0].value = parts[2];\n                    for (const device of this.devices) {\n                      if (device.driverType === 'Telescopes') {\n                        if (parts[2] === '' || parts[2] === NaN) {\n                          device.device = '';\n                        }else{\n                          device.device = parts[2] + ' mm';\n                        }\n                      }\n                    }\n                  }\n\n                  if (parts[1] === 'GuiderFocalLength') {\n                    this.GuiderConfigItems[0].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderFocalLength:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'Coordinates') {\n                    const [lat, lng] = parts[2].split(',').map(coord => parseFloat(coord.trim()));\n                    this.SetCurrentLocation(lat, lng);\n                  }\n\n                  if (parts[1] === 'MultiStarGuider') {\n                    this.GuiderConfigItems[1].value = (parts[2] === 'true');\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'MultiStarGuider:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'GuiderGain') {\n                    this.GuiderConfigItems[2].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderGain:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'CalibrationDuration') {\n                    this.GuiderConfigItems[3].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'CalibrationDuration:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'RaAggression') {\n                    this.GuiderConfigItems[4].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'RaAggression:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'DecAggression') {\n                    this.GuiderConfigItems[5].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DecAggression:' + parts[2]);\n                  }\n                }\n                break;\n\n\n              case 'ConnectDriverSuccess':\n                if (parts.length === 2) {\n                  const device = parts[1];\n                  this.connectDriverSuccess(device);\n                }\n                break;\n\n              case 'ConnectDriverFailed':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.connectDriverFailed(message);\n                }\n                break;\n\n              case 'DisconnectDriverSuccess':\n                if (parts.length === 2) {\n                  const device = parts[1];\n                  this.disconnectDriversuccess(device);\n                }\n                break;\n\n              case 'DisconnectDriverFail':\n                if (parts.length === 2) {\n                  const driver = parts[1];\n                  this.disconnectDriverFail(device)\n                }\n\n              case 'SelectedDriverList':\n                if (parts.length >= 3) {\n                  const deviceObjects = parts.slice(1).reduce((acc, part, index, array) => {\n                    if (index % 2 === 0) {\n                      acc.push({ [array[index]]: array[index + 1] });\n                    }\n                    return acc;\n                  }, []);\n                  this.loadSelectedDriverList(deviceObjects);\n                }\n                break;\n\n\n              case 'BindDeviceList':\n                if (parts.length >= 3) {\n                  const deviceObjects = parts.slice(1).reduce((acc, part, index, array) => {\n                    if (index % 2 === 0) {\n                      acc.push({ [array[index]]: array[index + 1] });\n                    }\n                    return acc;\n                  }, []);\n                  this.loadBindDeviceList(deviceObjects);\n                }\n                break;\n\n\n              case 'BindDeviceTypeList':\n                if (parts.length >= 5) { // 确保至少有五个参数加上前缀\n                  const deviceTypeObjects = [];\n                  for (let i = 1; i < parts.length; i += 4) {\n                    const deviceTypeObject = {\n                      Type: parts[i],\n                      DeviceName: parts[i + 1],\n                      DriverName: parts[i + 2],\n                      isbind: parts[i + 3] == \"true\" ? true : false,\n                    };\n                    deviceTypeObjects.push(deviceTypeObject);\n                  }\n                  this.loadBindDeviceTypeList(deviceTypeObjects);\n                }\n                break;\n\n              case 'deleteDeviceAllocationList':\n                if (parts.length === 2) {\n                  const deviceName = parts[1];\n                  this.deleteDeviceAllocationList(deviceName);\n                }\n                break;\n\n              case 'deleteDeviceTypeAllocationList':\n                if (parts.length === 2) {\n                  const deviceType = parts[1];\n                  if (deviceType != '') {\n                    this.$bus.$emit('deleteDeviceTypeAllocationList', deviceType);\n                  }\n                  if (deviceType == 'CFW') {\n                    for (let i = 0; i < this.devices.length; i++) {\n                      if (this.devices[i].driverType == 'CFW') {\n                        this.devices[i].isConnected = false;\n                        this.devices[i].device = '';\n                        this.devices[i].driverName = '';\n                        this.devices[i].BaudRate = 9600;\n                        this.$bus.$emit('CFWConnected', 0);\n                      }\n                    }\n                  }\n                }\n                break;\n\n              case 'ParseInfoEmitted':\n                if (parts.length === 2) {\n                  const progress = parts[1];\n                  this.$bus.$emit('ParseInfoEmitted', progress);\n                }\n                break;\n\n              case 'GuiderUpdateStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('GuiderUpdateStatus', parseInt(status, 10));\n                }\n                break;\n\n              case 'LoopSolveImageFinished':\n                this.$bus.$emit('LoopSolveImageFinished');\n                break;\n\n              case 'disconnectDevicehasortherdevice':\n                if (parts.length === 2) {\n                  const drivername = parts[1];\n                  this.showSelectdisconnectDriver(drivername);\n                }\n                break;\n\n              case 'getFocuserMoveState':\n                this.$bus.$emit('getFocuserMoveState');\n                break;\n\n              case 'FocusMoveToLimit':\n                if (parts.length === 2) {\n                  const errorlog = parts[1];\n                  this.callShowMessageBox(errorlog, 'error');\n                }\n                break;\n\n              case 'startFocusLoopSjootingfile':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('startFocusLoopSjootingfile', message);\n                }\n                break;\n\n              case 'setFocuserLoopingState':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('setFocuserLoopingState', message);\n                  if (message == 'true') {\n                    this.isFocusLoopShooting = true;\n                  } else {\n                    this.isFocusLoopShooting = false;\n                  }\n                }\n                break;\n\n              // case 'focuserROIStarsList':\n              //   if (parts.length === 4) {\n              //     const x = parts[1];\n              //     const y = parts[2];\n              //     const HFR = parts[3];\n              //     this.focuserROIStarsList.push({ x, y, HFR });\n              //   }\n              //   break;\n\n              // case 'clearFocuserROIStarsList':\n              //   this.focuserROIStarsList = [];\n              //   break;\n\n              case 'setSelectStarPosition':\n                if (parts.length === 4) {\n                  this.DrawSelectStarX = parseFloat(parts[1]);\n                  this.DrawSelectStarY = parseFloat(parts[2]);\n                  this.DrawSelectStarHFR = parseFloat(parts[3]);\n                }\n                break;\n\n              case 'SetRedBoxState':\n                if (parts.length === 4) {\n                  const length = parts[1];\n                  this.ROI_x = parseFloat(parts[2]);\n                  this.ROI_y = parseFloat(parts[3]);\n                  this.setRedBoxState(length, this.ROI_x, this.ROI_y);\n                  console.log('设置红色ROI框: ', length, this.ROI_x, this.ROI_y);\n                }\n                break;\n\n              case 'SetVisibleArea':\n                if (parts.length === 4) {\n                  this.visibleX = parseFloat(parts[1]);\n                  this.visibleY = parseFloat(parts[2]);\n                  this.scale = parseFloat(parts[3]);\n                  this.$bus.$emit('setScale', this.scale);\n                  console.log('设置可见区域: ', this.visibleX, this.visibleY, this.scale);\n                  this.SendConsoleLogMsg('update VisibleArea x=' + this.visibleX + ', y=' + this.visibleY + ', scale=' + this.scale, 'info');\n                }\n                break;\n\n              case 'SetSelectStars':\n                if (parts.length === 3) {\n                  this.selectStarX = parseFloat(parts[1]);\n                  this.selectStarY = parseFloat(parts[2]);\n                  this.SendConsoleLogMsg('update SelectStars x=' + this.selectStarX + ', y=' + this.selectStarY, 'info');\n                }\n                break;\n\n              case 'updateCPUInfo':\n                if (parts.length === 3) {\n                  let cpuTemp = parseFloat(parts[1]);\n                  let cpuUsage = parseFloat(parts[2]);\n                  this.cpuTemp = isNaN(cpuTemp) ? null : (cpuTemp % 1 === 0 ? cpuTemp : cpuTemp.toFixed(1));  // 如果 cpuTemp 是 NaN，设置为 null，否则如果 cpuTemp 是整数，就不保留小数，否则保留一位小数\n                  this.cpuUsage = isNaN(cpuUsage) ? null : (cpuUsage % 1 === 0 ? cpuUsage : cpuUsage.toFixed(1));  // 如果 cpuUsage 是 NaN，设置为 null，否则如果 cpuUsage 是整数，就不保留小数，否则保留一位小数\n                  this.$bus.$emit('updateCPUInfo', this.cpuTemp, this.cpuUsage);\n                }\n                break;\n\n              case 'TianWen':\n                if (parts.length === 4) {\n                  const notice_type = parts[1];\n                  const ra = parts[2];\n                  const dec = parts[3];\n                  this.$bus.$emit('TianWen', notice_type, ra, dec);\n                }\n                break;\n\n              case 'setMainCameraParameters':\n                if (parts.length >= 3) {\n                  let parameters = {};\n                  for (let i = 1; i < parts.length; i += 2) {\n                    const parameter = parts[i];\n                    const value = parts[i + 1];\n                    parameters[parameter] = value;\n                  }\n                  this.setMainCameraParameters(parameters);\n                }\n                break;\n\n              case 'localMessage':\n                if (parts.length === 4) {\n                  const lat = parts[1];\n                  const lon = parts[2];\n                  const language = parts[3];\n                  this.SendConsoleLogMsg('localMessage: ' + lat + ',' + lon + ',' + language, 'info');\n                  if (language == 'zh') {\n                    this.$bus.$emit('ClientLanguage', 'cn');\n                  } else {\n                    this.$bus.$emit('ClientLanguage', 'en');\n                  }\n                  this.$bus.$emit('setLocationLatAndLon', lat, lon);\n                }\n                break;\n\n              default:\n                console.warn('未处理命令: ', data.message);\n                break;\n            }\n          }\n        }\n        else if (data.type === 'QT_Confirm') {\n          // 处理确认消息\n          const messageId = data.msgid;\n          this.handleMessageResponse(messageId);\n        }else if (data.type === 'Process_Command') {\n          // 处理返回消息\n          const parts = data.message.split(':');\n          if (parts[0] === 'qtServerIsOver') {\n            this.callShowMessageBox('QT Server is over', 'error');\n            this.ShowConfirmDialog('restart', 'QT server encountered a segmentation fault or is frozen, please restart or exit!','restartQtServer');\n          }\n        }\n\n        this.receivedMessages.push(data.message); // 将接收到的消息添加到数组中\n      };\n\n      this.websocket.onerror = (error) => {\n        const errorDetails = {\n          type: error.type,\n          timestamp: new Date().toISOString(),\n          url: this.WebSocketUrl,\n          readyState: this.websocket.readyState,\n          protocol: this.websocket.protocol,\n          extensions: this.websocket.extensions\n        };\n        console.error('WebSocket Error Details:', errorDetails);\n        this.SendConsoleLogMsg('WebSocket Error: ' + JSON.stringify(errorDetails), 'error');\n        this.websocketState = 'error';\n        this.networkDisconnected = true;\n      };\n\n      this.websocket.onclose = () => {\n        console.log('QHYCCD | WebSocket disconnected');\n        this.websocketState = 'disconnected';\n        this.networkDisconnected = true; // WebSocket连接关闭时设置网络连接状态\n        console.log('QHYCCD | WebSocket disconnected');\n        this.$bus.$emit('ShowNetStatus', 'false');\n\n        // 设置一个定时器，1秒后检查网络状态\n        this.disconnectTimeout = setTimeout(() => {\n          if (this.networkDisconnected) { // 如果1秒后仍然断开\n            this.callShowMessageBox('WebSocket disconnected', 'error');\n            this.disconnectTimeoutTriggered = true;\n          }\n        }, 1000); // 1秒后执行\n\n        // 启动自动重连\n        this.reconnectWebSocket();\n      };\n    },\n\n    // 自动重连\n    reconnectWebSocket() {\n      setTimeout(() => {\n        console.log('QHYCCD | WebSocket reconnected');\n        this.SendConsoleLogMsg('WebSocket reconnected.', 'info');\n        this.connect();\n      }, 2000); // 2秒后尝试重新连接\n    },\n    // 自动重连\n\n    //监听网络连接状态\n    setupNetworkStatusListener() {\n      window.addEventListener('online', () => {\n        // 检查断开连接的定时器是否已经触发\n        if (this.disconnectTimeoutTriggered) {\n          this.callShowMessageBox('WebSocket connected', 'success');\n        }\n        clearTimeout(this.disconnectTimeout); // 清除断开连接的定时器\n        this.networkDisconnected = false; // 网络恢复时重置网络连接状态\n        this.$bus.$emit('ShowNetStatus', 'true');\n        this.StatusRecovery();\n        this.reconnectWebSocket(); // 网络恢复后自动重连WebSocket\n      });\n\n      window.addEventListener('offline', () => {\n        this.networkDisconnected = true; // 网络断开时设置网络连接状态\n        this.$bus.$emit('ShowNetStatus', 'false');\n        this.disconnectTimeoutTriggered = false; // 初始化断开连接定时器触发标志\n        // 设置一个定时器，1秒后检查网络状态\n        this.disconnectTimeout = setTimeout(() => {\n          if (this.networkDisconnected) { // 如果1秒后仍然断开\n            this.disconnectTimeoutTriggered = true; // 标记定时器已触发\n            this.callShowMessageBox('WebSocket disconnected', 'error');\n          }\n        }, 1000); // 1秒后执行\n      });\n    },\n    //监听网络连接状态\n\n    sendMessage(type, message) {\n      console.log(\"QHYCCD | sendMessage: \", message);\n\n      const messageId = this.generateMessageId(); // 生成唯一的消息ID\n      const messageObj = { type: type, msgid: messageId, message: message }; // 创建包含类型和消息的对象\n      const messageJson = JSON.stringify(messageObj); // 将消息对象转换为 JSON 字符串\n      const messageState = { msgid: messageId, text: messageJson, success: false }; // 创建包含消息和状态信息的对象\n\n      if (this.websocket.readyState === WebSocket.OPEN) {\n        this.websocket.send(messageJson);\n        // messageState.success = true; // 设置消息为成功\n      }\n      this.sentMessages.push(messageState); // 添加消息对象到已发送的消息数组\n    },\n\n    generateMessageId() {\n      // 使用时间戳和计数器生成唯一的消息ID\n      return Date.now() + \"-\" + (this.messageCounter++);\n    },\n\n    handleMessageResponse(messageId) {\n      // 根据返回的消息ID更新消息发送状态\n      const lastMessage = this.sentMessages[this.sentMessages.length - 1];\n      if (lastMessage && lastMessage.msgid === messageId) {\n        lastMessage.success = true;\n      }\n    },\n\n    // 消息框\n    callShowMessageBox(msg, type) {\n      console.log('QHYCCD | callShowMessageBox:', msg, type);\n      this.SendConsoleLogMsg(msg, type);\n      this.$bus.$emit('showMsgBox', msg, type);\n    },\n    // 消息框\n\n    locationClicked: function () {\n      this.$bus.$emit('Vue_Command', 'localMessage'); // 获取位置信息\n      this.$store.commit('toggleBool', 'showLocationDialog');\n\n      this.$bus.$emit('ResetTime');\n    },\n\n    SetCurrentLocation(lat, lng) {\n      console.log('SetCurrentLocation:', lat, ',', lng);\n      this.$bus.$emit('SendConsoleLogMsg', 'Set Current Location:' + lat + ',' + lng, 'info');\n      this.$bus.$emit('PolarPointAltitude', lat);\n      this.$bus.$emit('resetLocation', lat, lng);\n      const loc = {\n        short_name: 'Unknown',\n        country: 'Unknown',\n        lng: lng,\n        lat: lat,\n        alt: 0,\n        accuracy: 0,\n        street_address: ''\n      }\n      this.$store.commit('setCurrentLocation', loc);\n\n      this.$bus.$emit('ShowPositionInfo', lat, lng);\n\n      setTimeout(() => {\n        this.$bus.$emit('ResetTime');\n      }, 1000);\n    },\n    // 状态恢复\n    StatusRecovery() {\n      // this.sendMessage('SendConsoleLogMsg', '网络连接恢复，恢复当前状态!', 'warning');\n      this.getQTClientVersion();                // 获取QTClient版本\n      this.sendMessage('Vue_Command', 'getROIInfo'); // 获取ROI信息\n      this.sendMessage('Vue_Command', 'localMessage'); // 获取位置信息\n      this.sendMessage('Vue_Command', 'getMainCameraParameters'); // 获取主相机参数\n      this.RecalibratePolarAxis(); // 重新校准极轴\n      // this.sendMessage('Vue_Command', 'getStagingSolveResult'); // 获取定标结果\n      this.sendMessage('Vue_Command', 'getFocuserLoopingState'); // 获取焦距器循环状态\n      this.sendMessage('Vue_Command', 'getStagingScheduleData'); // 获取定标计划数据\n      this.sendMessage('Vue_Command', 'getStagingSolveResult'); // 获取定标结果\n      this.sendMessage('Vue_Command', 'getGPIOsStatus'); // 获取GPIO状态\n      this.sendMessage('Vue_Command', 'getStagingImage'); // 获取最后拍摄的图像\n\n      this.disconnectTimeoutTriggered = false;\n    },\n\n    openPowerManagerPage() {\n      this.isOpenDevicePage = false;\n      this.isOpenPowerPage = true;\n\n      this.drawer_2 = true;\n    },\n\n    QuitToMainApp() {\n      this.sendMessage('Broadcast_Msg', 'CloseWebView');\n    },\n\n    selectDevice(device) {\n      if (!this.haveDeviceConnect || (this.haveDeviceConnect) || device.driverType === 'Telescopes') {\n        this.isOpenDevicePage = true;\n        this.isOpenPowerPage = false;\n\n        if (device.isget === false) {\n          // device.isget = true;\n          this.sendMessage('Vue_Command', 'SelectIndiDriver:' + device.type + \":\" + device.ListNum);\n          this.drivers = [];\n        }\n\n        this.CurrentDriverType = device.driverType;\n        this.DeviceIsConnected = device.isConnected;\n        this.BaudRateSelected = device.BaudRate;\n        if (device.driverType === 'Telescopes') {\n          this.DeviceIsConnected = true;\n        }\n\n        this.drawer_2 = true;\n\n        this.ToBeConnectDevice = [];\n        this.devicesList.forEach(devicesList => {\n          if (devicesList.type === this.CurrentDriverType) {\n            this.ToBeConnectDevice.push(devicesList);\n          }\n        });\n      } else {\n        this.callShowMessageBox('The device is not connected.', 'error');\n      }\n\n    },\n\n    CurrentConfigItems() {\n      console.log('CurrentConfigItems: ', this.CurrentDriverType + 'ConfigItems');\n      switch (this.CurrentDriverType) {\n        case 'Guider':\n          return this.GuiderConfigItems;\n        case 'MainCamera':\n          return this.MainCameraConfigItems;\n        case 'Mount':\n          return this.MountConfigItems;\n        case 'Telescopes':\n          return this.TelescopesConfigItems;\n        case 'Focuser':\n          return this.FocuserConfigItems;\n        case 'PoleCamera':\n          return this.PoleCameraConfigItems;\n        case 'CFW':\n          return this.CFWConfigItems;\n        default:\n          return [];\n      }\n    },\n\n    confirmDriver() {\n      // 确定驱动的逻辑\n      console.log(\"QHYCCD | confirmDriver: \", this.selectedDriver);\n      this.SendConsoleLogMsg('Confirm Indi Driver:' + this.selectedDriver, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConfirmIndiDriver:' + this.selectedDriver + ':' + this.BaudRateSelected);\n      this.confirmDriverType = this.CurrentDriverType;\n      this.loadingSelectDriver = true;\n\n      this.devices.forEach(device => {\n        if (device.driverType === this.CurrentDriverType) {\n          device.device = this.selectedDriver;\n          device.driverName = this.selectedDriver;\n          device.BaudRate = this.BaudRateSelected;\n        }\n      });\n    },\n    clearDriver() {\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ClearIndiDriver');\n      this.SendConsoleLogMsg('Clear Indi Driver', 'info');\n      this.devices.forEach(device => {\n        if (device.driverType === this.CurrentDriverType) {\n          device.device = '';\n          device.driverName = '';\n          device.BaudRate = 9600;\n        }\n      });\n    },\n    confirmDevice() {\n      // 确定设备的逻辑\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConfirmIndiDevice:' + this.selectedDevice + ':' + this.selectedDriver);\n      // this.$bus.$emit('AppUpdateDevices', this.CurrentDriverType, this.selectedDevice);\n      this.updateDevices(this.CurrentDriverType, this.selectedDevice);\n    },\n\n    updateDevices(driverType, newDevice) {    // 手动选择\n      this.devices.forEach(device => {\n        if (device.driverType === driverType) {\n          device.device = newDevice;\n        }\n      });\n    },\n\n    updateDevices_(ListNum, newDevice) {    // 从文件导入\n      this.devices.forEach(device => {\n        if (device.ListNum === ListNum) {\n          device.device = newDevice;\n        }\n      });\n      this.loadingConnectAllDevice = false;\n    },\n\n    updateDevicesConnect(type, DeviceName, DriverName, isBind = true) {    // 连接成功\n      this.SendConsoleLogMsg('updateDevicesConnect' + type + ' ' + DeviceName + ' ' + DriverName + ' ' + isBind, 'info');\n      this.devices.forEach(device => {\n        if (device.driverType === type) {\n          if (isBind == true) {\n            device.device = DeviceName;\n          } else {\n            device.device = \"Not Bind Device\";\n          }\n          device.driverName = DriverName;\n          device.isConnected = true;\n        }\n      });\n      this.callShowMessageBox(DeviceName + ' success connected', 'success');\n      this.haveDeviceConnect = true;\n      this.loadingConnectAllDevice = false;\n\n      if (type === 'MainCamera') {\n        this.$bus.$emit('MainCameraConnected', 1);\n        console.log('MainCamera is Connected.');\n      } else if (type === 'Mount') {\n        this.$bus.$emit('MountConnected', 1);\n        console.log('Mount is Connected.');\n      } else if (type === 'CFW') {\n        this.$bus.$emit('CFWConnected', 1);\n        console.log('Mount is Connected.');\n      } else if (type === 'Focuser') {\n        this.$bus.$emit('FocuserConnected', 1);\n        console.log('Focuser is Connected.');\n      } else if (type === 'Guider') {\n        this.$bus.$emit('GuiderConnected', 1);\n        console.log('Guider is Connected.');\n      }\n      console.log('updateDevicesConnect: ', type, DeviceName, DriverName, isBind);\n\n      this.$bus.$emit('DeviceConnectSuccess', type, DeviceName, DriverName, isBind);\n    },\n    startConnectBtnPress(event) {\n      // 如果是触摸事件，标记并处理\n      if (event.type === 'touchstart') {\n        this.isTouching = true;\n        this.isConnectBtnLongPress = false; // 重置长按标记\n        this.ConnectBtnPressTimer = setTimeout(() => {\n          this.isConnectBtnLongPress = true; // 标记为长按\n          this.handleConnectBtnLongPress();\n        }, this.ConnectBtnlongPressThreshold);\n      }\n      // 如果是鼠标事件，且没有正在进行的触摸事件，则处理\n      else if (event.type === 'mousedown' && !this.isTouching) {\n        this.isConnectBtnLongPress = false; // 重置长按标记\n        this.ConnectBtnPressTimer = setTimeout(() => {\n          this.isConnectBtnLongPress = true; // 标记为长按\n          this.handleConnectBtnLongPress();\n        }, this.ConnectBtnlongPressThreshold);\n      }\n    },\n    endConnectBtnPress(event) {\n      // 如果是触摸事件，处理并重置标记\n      if (event.type === 'touchend') {\n        clearTimeout(this.ConnectBtnPressTimer); // 清除定时器\n        if (!this.isConnectBtnLongPress) {\n          this.handleConnectBtnClick(); // 如果不是长按，则触发点击事件\n        }\n        this.ConnectBtnPressTimer = null; // 重置定时器\n        this.isTouching = false; // 重置触摸标记\n      }\n      // 如果是鼠标事件，且没有正在进行的触摸事件，则处理\n      else if (event.type === 'mouseup' && !this.isTouching) {\n        clearTimeout(this.ConnectBtnPressTimer); // 清除定时器\n        if (!this.isConnectBtnLongPress) {\n          this.handleConnectBtnClick(); // 如果不是长按，则触发点击事件\n        }\n        this.ConnectBtnPressTimer = null; // 重置定时器\n      }\n    },\n    handleConnectBtnClick() {\n      if (this.haveDeviceConnect) {\n        this.callShowMessageBox('Please disconnect all devices first.', 'error');\n        return;\n      }\n      if (!this.ConnectBtnCanClick) return; // 如果不可点击，直接返回\n      this.ConnectBtnCanClick = false; // 设置为不可点击\n      console.log(\"Connect Button clicked\");\n\n      this.connectAllDevice();\n\n      // 恢复点击权限\n      setTimeout(() => {\n        this.ConnectBtnCanClick = true;\n      }, 1000); // 1秒后恢复\n    },\n    handleConnectBtnLongPress() {\n      if (this.haveDeviceConnect) {\n        this.callShowMessageBox('Please disconnect all devices first.', 'error');\n        return;\n      }\n      // 长按事件的处理\n      console.log(\"Connect Button long pressed\");\n\n      this.autoConnectAllDevice();\n    },\n    connectAllDevice() {\n      console.log(\"QHYCCD | connectAllDevice.\");\n      this.SendConsoleLogMsg('Connect All Device', 'info');\n      this.sendMessage('Vue_Command', 'connectAllDevice');\n      this.loadingConnectAllDevice = true;\n    },\n    autoConnectAllDevice() {\n      console.log(\"QHYCCD | autoConnectAllDevice.\");\n      this.SendConsoleLogMsg('Auto Connect All Device', 'info');\n      this.sendMessage('Vue_Command', 'autoConnectAllDevice');\n      this.loadingConnectAllDevice = true;\n    },\n\n    // connectAllDevice() {\n    //   console.log(\"QHYCCD | connectAllDevice.\");\n    //   this.SendConsoleLogMsg('Connect All Device', 'info');\n    //   this.sendMessage('Vue_Command', 'connectAllDevice');\n    //   this.loadingConnectAllDevice = true;\n    // },\n\n    // autoConnectAllDevice() {\n    //   console.log(\"QHYCCD | autoConnectAllDevice.\");\n    //   this.SendConsoleLogMsg('Auto Connect All Device', 'info');\n    //   this.sendMessage('Vue_Command', 'autoConnectAllDevice');\n    //   this.loadingConnectAllDevice = true;\n    // },\n\n    // startConnectBtnPress() {\n    //   this.isConnectBtnLongPress = false; // 重置长按标记\n    //   this.ConnectBtnPressTimer = setTimeout(() => {\n    //     this.isConnectBtnLongPress = true; // 标记为长按\n    //     this.handleConnectBtnLongPress();\n    //   }, this.ConnectBtnlongPressThreshold);\n    // },\n    // endConnectBtnPress() {\n    //   clearTimeout(this.ConnectBtnPressTimer); // 清除定时器\n    //   if (!this.isConnectBtnLongPress) {\n    //     this.handleConnectBtnClick(); // 如果不是长按，则触发点击事件\n    //   }\n    //   this.ConnectBtnPressTimer = null; // 重置定时器\n    // },\n    // handleConnectBtnClick() {\n    //   if (this.haveDeviceConnect) {\n    //     this.callShowMessageBox('Please disconnect all devices first.', 'error');\n    //     return;\n    //   }\n    //   if (!this.ConnectBtnCanClick) return; // 如果不可点击，直接返回\n    //   this.ConnectBtnCanClick = false; // 设置为不可点击\n    //   console.log(\"Connect Button clicked\");\n\n    //   this.connectAllDevice();\n\n    //   // 恢复点击权限\n    //   setTimeout(() => {\n    //     this.ConnectBtnCanClick = true;\n    //   }, 1000); // 1秒后恢复\n    // },\n    // handleConnectBtnLongPress() {\n    //   if (this.haveDeviceConnect) {\n    //     this.callShowMessageBox('Please disconnect all devices first.', 'error');\n    //     return;\n    //   }\n    //   // 长按事件的处理\n    //   console.log(\"Connect Button long pressed\");\n\n    //   this.autoConnectAllDevice();\n    // },\n\n    disconnectAllDevice(confirm) {\n      // 检查是否有设备的 isConnected 属性为 true\n      // const hasConnectedDevices = this.devices.some(device => device.isConnected);\n\n      if (this.haveDeviceConnect) {\n        if (confirm === false) {\n          this.ShowConfirmDialog('Confirm', 'Are you sure you want to disconnect all devices?', 'disconnectAllDevice');\n        } else {\n          this.sendMessage('Vue_Command', 'disconnectAllDevice');\n          this.SendConsoleLogMsg('Disconnect All Device', 'info');\n          this.haveDeviceConnect = false;\n          // this.devices.forEach(device => {\n          //   device.isConnected = false;\n          //   // device.device = '';\n          // });\n\n          this.$bus.$emit('MainCameraConnected', 0);\n          this.$bus.$emit('MountConnected', 0);\n          this.$bus.$emit('CFWConnected', 0);\n          this.$bus.$emit('FocuserConnected', 0);\n          this.$bus.$emit('GuiderConnected', 0);\n          this.claerDeviceList();\n        }\n      } else {\n        this.callShowMessageBox('No devices have been connected.', 'error');\n      }\n    },\n\n    // claerDeviceList() {\n    //   this.devices.forEach(device => {\n    //     device.isConnected = false;\n    //     device.isget = false;\n    //     device.device = ''; \n    //     device.driverName = '';\n    //   });\n    //   this.ToBeConnectDevice = [];\n    //   this.devicesList = [];\n    //   this.drivers = [];\n    //   this.$bus.$emit('claerDeviceAllocationList');\n    // },\n\n    claerDeviceList() {\n      this.devices.forEach(device => {\n        device.device = \"\";\n        device.isConnected = false;\n        device.isget = false;\n        device.driverName = '';\n        device.BaudRate = 9600;\n      });\n      this.ToBeConnectDevice = [];\n      this.devicesList = [];\n      this.drivers = [];\n      this.$bus.$emit('claerDeviceAllocationList');\n    },\n\n    SwitchOutPutPower(index, isPowerON) {\n      if (isPowerON) {\n        this.drawer_2 = false;\n        this.ShowConfirmDialog('Output Power:' + index, 'Are you sure you want to turn off this output power?', 'SwitchOutPutPower');\n      } else {\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'SwitchOutPutPower:' + index);\n        this.SendConsoleLogMsg('Switch OutPutPower' + index, 'info');\n      }\n    },\n\n    RestartRaspberryPi() {\n      this.drawer_2 = false;\n      this.ShowConfirmDialog('Restart', 'Are you sure you want to restart the Raspberry Pi?', 'RestartRaspberryPi');\n    },\n\n    ShutdownRaspberryPi() {\n      this.drawer_2 = false;\n      this.ShowConfirmDialog('Shut Down', 'Are you sure you want to shut down the Raspberry Pi?', 'ShutdownRaspberryPi');\n    },\n\n    ReturnConnectedDevices() {\n      this.devices.forEach(device => {\n        if (device.driverType === 'MainCamera') {\n          if (device.isConnected === true) {\n            this.$bus.$emit('MainCameraConnected', 1);\n            console.log('MainCamera is Connected.');\n            this.SendConsoleLogMsg('MainCamera is Connected.', 'info');\n          }\n        } else if (device.driverType === 'Mount') {\n          if (device.isConnected === true) {\n            this.$bus.$emit('MountConnected', 1);\n            console.log('Mount is Connected.');\n            this.SendConsoleLogMsg('Mount is Connected.', 'info');\n          }\n        }\n      });\n      this.sendMessage('Vue_Command', 'loadSelectedDriverList');\n      this.sendMessage('Vue_Command', 'loadBindDeviceList');\n      this.sendMessage('Vue_Command', 'loadBindDeviceTypeList');\n    },\n\n    OpenIamgeFolder() {\n      this.$bus.$emit('ImageManagerPanelOpen');\n      this.nav = false;\n    },\n\n    OpenDebugLog() {\n      this.$bus.$emit('toggleINDIDebugDialog');\n      this.nav = false;\n    },\n\n    SendConsoleLogMsg(message, type) {\n      if (type == 'error') {\n        console.error('Error: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else if (type == 'info') {\n        console.log('Info: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else if (type == 'warning') {\n        console.warn('Warning: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else {\n        console.log('Debug: ' + message);\n      }\n    },\n\n    DeviceAllocation() {\n      this.$bus.$emit('toggleDeviceAllocationPanel');\n      this.nav = false;\n    },\n\n    CurrentExpTimeList(index, value) {\n      const expTimeIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ExpTime [' + (index + 1) + ']');\n      if (expTimeIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.MainCameraConfigItems[expTimeIndex].value = value;\n      } else {\n        console.error('ExpTime [' + index + '] configuration item not found.');\n      }\n    },\n\n    CurrentCFWList(index, value) {\n      const expTimeIndex = this.CFWConfigItems.findIndex(item => item.label === 'CFW [' + (index + 1) + ']');\n      if (expTimeIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.CFWConfigItems[expTimeIndex].value = value;\n      } else {\n        console.error('CFW [' + index + '] configuration item not found.');\n      }\n    },\n\n    // confirmConfiguration(item) {\n    //   console.log(`QHYCCD | confirmConfiguration: ${item.value}`);\n    //   switch (item.driverType) {\n    //     case 'Guider':\n\n    //     case 'MainCamera':\n    //       this.$bus.$emit(item.label, item.label + ':' + item.value);\n    //     case 'Mount':\n\n    //     case 'Telescope':\n\n    //     case 'Focuser':\n    //         this.$bus.$emit(item.label, item.value);  //RedBox Side Length (px)\n\n    //     case 'PoleCamera':\n\n    //     case 'CFW':\n    //       if (item.label.startsWith('CFW [')) {\n    //         this.$bus.$emit('CFWvalue', item.label+':'+item.value);\n    //       }\n    //       else {\n    //         this.$bus.$emit(item.label, item.label+':'+item.value);\n    //       }\n    //   }\n    // },\n\n    confirmConfiguration(List) {\n      List.forEach(item => {\n        if (item.value !== '') {\n          // console.log(item.label, item.value);\n          this.SendConsoleLogMsg(item.label + ':' + item.value, 'info');\n          this.$bus.$emit(item.label, item.label + ':' + item.value);\n        }else if (item.value == '' && item.label === 'Focal Length (mm)'){\n          this.SendConsoleLogMsg(item.label + 'is NULL', 'info');\n          this.$bus.$emit(item.label, item.label+ ':' );\n        }\n      });\n      this.callShowMessageBox('Configuration has been modified!', 'success');\n    },\n\n    loadAndDisplayImage(imagePath) {\n      const canvas = document.getElementById('guiderCamera-canvas');\n      // const canvas = document.getElementById('mainCamera-canvas');\n      if (canvas.getContext) {\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n\n        img.onload = () => {\n          canvas.width = img.width;\n          canvas.height = img.height;\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0);\n          // this.$bus.$emit('showSolveImage', img);\n        };\n\n        // 添加错误处理\n        img.onerror = (error) => {\n          console.log(`加载图像失败: ${imagePath}`);\n          this.SendConsoleLogMsg(`加载图像失败: ${imagePath}`, 'error');\n        };\n\n        img.src = imagePath;\n      }\n    },\n\n    ImageGainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value); // 将值转换为 double 类型\n\n      if (signal === 'ImageGainR') {\n        // 处理 ImageGainR 信号\n        this.ImageGainR = doubleValue;\n        this.SendConsoleLogMsg('ImageGainR is set to:' + doubleValue, 'info');\n        this.sendMessage('Vue_Command', 'ImageGainR:' + doubleValue);\n      } else if (signal === 'ImageGainB') {\n        // 处理 ImageGainB 信号\n        this.ImageGainB = doubleValue;\n        this.SendConsoleLogMsg('ImageGainB is set to:' + doubleValue, 'info');\n        this.sendMessage('Vue_Command', 'ImageGainB:' + doubleValue);\n      }\n    },\n\n    // CameraOffsetSet(payload) {\n    //   const [signal, value] = payload.split(':'); // 拆分信号和值\n    //   const doubleValue = parseFloat(value); // 将值转换为 double 类型\n\n    //   console.log('CameraOffset is set to:', doubleValue);\n    //   this.SendConsoleLogMsg('CameraOffset is set to:' + doubleValue, 'info');\n    // },\n\n    ImageOffsetSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value); // 将值转换为 double 类型\n\n      this.ImageOffset = doubleValue;\n      console.log('Image Offset is set to:', doubleValue);\n      this.SendConsoleLogMsg('Image Offset is set to:' + doubleValue, 'info');\n      this.sendMessage('Vue_Command', 'ImageOffset:' + doubleValue);\n    },\n\n    BinningSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Image Binning is set to:', IntValue);\n      this.SendConsoleLogMsg('Image Binning is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetBinning:' + IntValue);\n      this.$bus.$emit('SetBinningNum', IntValue);\n    },\n\n    GainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Gain is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Gain is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraGain:' + IntValue);\n    },\n\n    OffsetSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Offset is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Offset is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraOffset:' + IntValue);\n    },\n\n    ImageCFASet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n\n      if (['GR', 'GB', 'BG', 'RGGB'].includes(value)) {\n        this.ImageCFA = value;\n        console.log('ImageCFA is set to:', value);\n        this.SendConsoleLogMsg('ImageCFA is set to:' + value, 'info');\n        this.sendMessage('Vue_Command', 'ImageCFA:' + value);\n      } else {\n        console.log(`Invalid value for ImageCFA: '${value}'. Please set it to one of 'GR', 'GB', 'BG', 'RGGB'.`);\n        this.callShowMessageBox(`Invalid value for ImageCFA: '${value}'. Please set it to one of 'GR', 'GB', 'BG', 'RGGB'.`, 'error');\n      }\n    },\n\n    CameraTemperatureSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Temperature is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Temperature is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraTemperature:' + IntValue);\n    },\n\n    FocalLengthSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      \n      for (const device of this.devices) {\n        if (device.driverType === 'Telescopes') {\n          \n          if (value === '' || value === NaN) {\n            device.device = '';\n            this.SendConsoleLogMsg('Focal Length is set to:' + 0, 'info');\n            this.$bus.$emit('SetFocalLengthNum', '');\n          }else{\n            const IntValue = parseInt(value); // 将值转换为 Int 类型\n            device.device = value + ' mm';\n            this.SendConsoleLogMsg('Focal Length is set to:' + IntValue, 'info');\n            this.$bus.$emit('SetFocalLengthNum', IntValue);\n          }\n        }\n      }\n\n\n    },\n\n    GuiderFocalLengthSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      \n      this.SendConsoleLogMsg('Guider Focal Length is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderFocalLength:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderFocalLength:' + IntValue);\n    },\n\n    MultiStarGuiderSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      this.SendConsoleLogMsg('Multi Star Guider is set to:' + value, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'MultiStarGuider:' + value);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:MultiStarGuider:' + value);\n    },\n\n    GuiderPixelSizeSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value);\n      this.SendConsoleLogMsg('Guider Pixel size is set to:' + doubleValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderPixelSize:' + doubleValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderPixelSize:' + doubleValue);\n    },\n\n    GuiderGainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Guider Gain is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderGain:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderGain:' + IntValue);\n    },\n\n    CalibrationDurationSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Guider Calibration step is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'CalibrationDuration:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:CalibrationDuration:' + IntValue);\n    },\n\n    RaAggressionSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Ra Aggression is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'RaAggression:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:RaAggression:' + IntValue);\n    },\n\n    DecAggressionSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Dec Aggression is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DecAggression:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:DecAggression:' + IntValue);\n    },\n\n    SyncFocuserStep(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Sync Focuser Step:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'SyncFocuserStep:' + IntValue);\n    },\n\n    async readBinFile(fileName, retryCount = 1) {\n      while (this.isDownloadingImage) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        if (!this.isWaitingLogged) {\n          this.SendConsoleLogMsg('The image is already being processed. Please wait for the previous process to complete.', 'warning');\n          this.isWaitingLogged = true; // 确保只记录一次等待信息\n        }\n      }\n\n      if (this.isDownloadingImageName === fileName) {\n        this.SendConsoleLogMsg('The image(' + fileName + ') is already processed.', 'info');\n        return;\n      }\n\n      this.isDownloadingImage = true;\n      this.isWaitingLogged = false; // 重置等待日志标志\n      this.SendConsoleLogMsg('CaptureTestTime | Read image(' + fileName + ') data start.', 'info');\n\n      const startTime = new Date();\n      try {\n        // Check if the fileName is valid\n        if (!fileName || typeof fileName !== 'string') {\n          throw new Error('Invalid file name provided');\n        }\n\n        // Fetch with progress tracking\n        const response = await fetch(fileName, { cache: 'no-store' });\n        if (!response.ok) {\n          throw new Error(`Network response was not ok. Status: ${response.status}`);\n        }\n\n        const contentLength = response.headers.get('content-length');\n        if (!contentLength) {\n          throw new Error('Content-Length header is missing');\n        }\n\n        const total = parseInt(contentLength, 10);\n        if (isNaN(total) || total <= 0) {\n          throw new Error('Invalid content-length value');\n        }\n\n        let loaded = 0;\n\n        const reader = response.body.getReader();\n        const stream = new ReadableStream({\n          start: (controller) => {\n            const push = () => {\n              reader.read().then(({ done, value }) => {\n                if (done) {\n                  controller.close();\n                  return;\n                }\n                loaded += value.byteLength;\n                const percent = (loaded / total) * 100;\n                if (Math.round(percent) % 10 === 0) {\n                  this.SendConsoleLogMsg(`Progress: ${Math.round(percent)}%`, 'info');\n                  this.updateCaptureImageProgress(Math.round(percent));\n                }\n                this.SendConsoleLogMsg(`当前进度: ${Math.round(percent)}%`, 'info');\n                controller.enqueue(value);\n                push();\n              }).catch(error => {\n                console.error('Stream reading error:', error);\n                this.SendConsoleLogMsg('Stream reading error: ' + error.message, 'error');\n                controller.error(error);\n              });\n            };\n            push();\n          }\n        });\n\n        const newResponse = new Response(stream);\n        const blob = await newResponse.blob();\n\n        // FileReader with progress tracking\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n          this.ImageArrayBuffer = fileReader.result;\n\n          const endTime = new Date();\n          const elapsedTime = endTime.getTime() - startTime.getTime();\n          this.SendConsoleLogMsg('CaptureTestTime | Read image data end: ' + elapsedTime + ' ms', 'info');\n          if (!this.isPolarAxisMode) {\n            this.callShowMessageBox(`Read image data end: '${elapsedTime}' ms.`, 'info');\n          }\n          this.isDownloadingImageName = fileName;\n          this.processImage(this.ImageArrayBuffer);\n        };\n\n        fileReader.onerror = (error) => {\n          console.error('FileReader error:', error);\n          this.SendConsoleLogMsg('FileReader error: ' + error.message, 'error');\n        };\n\n        fileReader.readAsArrayBuffer(blob);\n      } catch (error) {\n        console.error('There was a problem with the fetch operation:', error);\n        this.SendConsoleLogMsg('There was a problem with the fetch operation: ' + error.message, 'error');\n\n        // 下载失败，重试\n        if (retryCount > 0) {\n          console.log('Retrying download...');\n          this.SendConsoleLogMsg('Retrying download...', 'warning');\n          this.isDownloadingImage = false;\n          this.updateCaptureImageProgress(100);\n          await this.readBinFile(fileName, retryCount - 1);\n        } else {\n          this.SendConsoleLogMsg('Max retries reached. Download failed.', 'error');\n        }\n      } finally {\n        this.isDownloadingImage = false; // 确保在任何情况下都重置状态\n      }\n    },\n    // async readBinFile(fileName, retryCount = 1) {\n    //   while (this.isDownloadingImage) {\n    //     await new Promise(resolve => setTimeout(resolve, 1000));\n    //     if (!this.isWaitingLogged) {\n    //       this.SendConsoleLogMsg('The image is already being processed. Please wait for the previous process to complete.', 'warning');\n    //       this.isWaitingLogged = true; // 确保只记录一次等待信息\n    //     }\n    //   }\n\n    //   if (this.isDownloadingImageName === fileName) {\n    //     this.SendConsoleLogMsg('The image(' + fileName + ') is already processed.', 'info');\n    //     return;\n    //   }\n\n    //   this.isDownloadingImage = true;\n    //   this.isWaitingLogged = false; // 重置等待日志标志\n    //   this.SendConsoleLogMsg('CaptureTestTime | Read image(' + fileName + ') data start.', 'info');\n\n    //   const startTime = new Date();\n    //   try {\n    //     // Fetch with progress tracking\n    //     const response = await fetch(fileName);\n    //     if (!response.ok) {\n    //       throw new Error('Network response was not ok');\n    //     }\n\n    //     const contentLength = response.headers.get('content-length');\n    //     if (!contentLength) {\n    //       throw new Error('Content-Length header is missing');\n    //     }\n\n    //     const total = parseInt(contentLength, 10);\n    //     let loaded = 0;\n\n    //     const reader = response.body.getReader();\n    //     const stream = new ReadableStream({\n    //       start: (controller) => {\n    //         const push = () => {\n    //           reader.read().then(({ done, value }) => {\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             loaded += value.byteLength;\n    //             const percent = (loaded / total) * 100;\n    //             if (Math.round(percent) % 10 === 0) {\n    //               this.SendConsoleLogMsg(`Progress: ${Math.round(percent)}%`,'info');\n    //               this.updateCaptureImageProgress(Math.round(percent));\n    //             }\n    //             controller.enqueue(value);\n    //             push();\n    //           }).catch(error => {\n    //             console.error('Stream reading error:', error);\n    //             controller.error(error);\n    //           });\n    //         };\n    //         push();\n    //       }\n    //     });\n\n    //     const newResponse = new Response(stream);\n    //     const blob = await newResponse.blob();\n\n    //     // FileReader with progress tracking\n    //     const fileReader = new FileReader();\n    //     fileReader.onload = () => {\n    //       this.ImageArrayBuffer = fileReader.result;\n\n    //       const endTime = new Date();\n    //       const elapsedTime = endTime.getTime() - startTime.getTime();\n    //       this.SendConsoleLogMsg('CaptureTestTime | Read image data end: ' + elapsedTime + ' ms', 'info');\n    //       if (!this.isPolarAxisMode) {\n    //         this.callShowMessageBox(`Read image data end: '${elapsedTime}' ms.`, 'info');\n    //       }\n    //       this.isDownloadingImageName = fileName;\n    //       this.processImage(this.ImageArrayBuffer);\n    //     };\n\n    //     fileReader.onerror = (error) => {\n    //       console.error('FileReader error:', error);\n    //       this.SendConsoleLogMsg('FileReader error:' + error, 'error');\n    //     };\n\n    //     fileReader.readAsArrayBuffer(blob);\n    //   } catch (error) {\n    //     console.error('There was a problem with the fetch operation:', error);\n    //     this.SendConsoleLogMsg('There was a problem with the fetch operation:' + error, 'error');\n\n    //     // 下载失败，重试\n    //     if (retryCount > 0) {\n    //       console.log('Retrying download...');\n    //       this.SendConsoleLogMsg('Retrying download...', 'warning');\n    //       this.isDownloadingImage = false;\n    //       this.updateCaptureImageProgress(100);\n    //       await this.readBinFile(fileName, retryCount - 1);\n    //     }\n    //   } finally {\n    //     this.isDownloadingImage = false; // 确保在任何情况下都重置状态\n    //   }\n    // },\n\n    updateCaptureImageProgress(num) {\n      this.$bus.$emit('ShowCaptureImageProgress', num);\n    },\n\n    setImageProportion(value) {\n      this.ImageProportion = value;\n    },\n\n    // checkImageData(img) {\n    //   // 检查是否为 cv.Mat 类型\n    //   if (!(img instanceof cv.Mat)) {\n    //     this.SendConsoleLogMsg('The image is not a valid cv.Mat object.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像是否为空\n    //   if (img.empty()) {\n    //     this.SendConsoleLogMsg('The image is empty.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像深度是否为 8 位或 16 位\n    //   const depth = img.type() & cv.CV_MAT_DEPTH_MASK;\n    //   if (depth !== cv.CV_8U && depth !== cv.CV_16U) {\n    //     this.SendConsoleLogMsg('The image depth is not 8-bit or 16-bit.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像尺寸是否合理\n    //   if (img.rows <= 0 || img.cols <= 0) {\n    //     this.SendConsoleLogMsg('The image dimensions are not valid.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像数据是否超出范围或全为0\n    //   const data = img.data;\n    //   let isAllZero = true;\n    //   const maxValue = depth === cv.CV_8U ? 255 : 65535;\n\n    //   for (let i = 0; i < data.length; i++) {\n    //     if (data[i] < 0 || data[i] > maxValue) {\n    //       this.SendConsoleLogMsg('The image data contains out-of-range values.', 'error');\n    //       return false;\n    //     }\n    //     if (data[i] !== 0) {\n    //       isAllZero = false;\n    //     }\n    //   }\n\n    //   if (isAllZero) {\n    //     this.SendConsoleLogMsg('The image data is all zero.', 'error');\n    //     return false;\n    //   }\n    //   return true;\n    // },\n\n\n    processImage(imgArray) {\n      try {\n        const totalStartTime = new Date(); // 总开始时间\n\n        this.SendConsoleLogMsg('CaptureTestTime | Process image data start.', 'info');\n        const startTime = new Date();\n\n        const uint16Array = new Uint16Array(imgArray);\n\n        // 设置画布宽高常量\n        const canvasWidth = parseInt(this.mainCameraSizeX);\n        const canvasHeight = parseInt(this.mainCameraSizeY);\n\n        // 获取原始画布和修改后的画布以及对应上下文\n        const modifiedCanvas = document.getElementById('mainCamera-canvas');\n        const modifiedCtx = modifiedCanvas.getContext('2d');\n\n        modifiedCtx.clearRect(0, 0, modifiedCanvas.width, modifiedCanvas.height);\n\n        modifiedCanvas.width = canvasWidth;\n        modifiedCanvas.height = canvasHeight;\n\n        let mat = new cv.Mat(canvasHeight, canvasWidth, cv.CV_16UC1);\n        mat.data16U.set(uint16Array);\n\n        const matEndTime = new Date(); // mat 结束时间\n        this.SendConsoleLogMsg('CaptureTestTime | Mat creation time: ' + (matEndTime.getTime() - startTime.getTime()) + ' ms', 'info');\n\n        // 用户自定义参数\n        let gainR = this.ImageGainR;\n        let gainB = this.ImageGainB;\n        let offset = this.ImageOffset;\n        let CFA = this.ImageCFA;\n        let mode = 1;\n\n        // 参数\n        let B = 0;\n        let W = 65535;\n        let cvmode = 0;\n\n        const { blackLevel, whiteLevel } = this.GetAutoStretch(uint16Array, mode);\n        B = blackLevel;\n        W = whiteLevel;\n        const GetAutoStretchEndTime = new Date(); // GetAutoStretch 结束时间\n        this.SendConsoleLogMsg('CaptureTestTime | GetAutoStretch time: ' + (GetAutoStretchEndTime.getTime() - matEndTime.getTime()) + ' ms', 'info');\n\n        // 根据CFA设置颜色转换模式\n        if (CFA === 'GR') {\n          cvmode = cv.COLOR_BayerGR2RGBA;\n        } else if (CFA === 'GB') {\n          cvmode = cv.COLOR_BayerGB2RGBA;\n        } else if (CFA === 'BG') {\n          cvmode = cv.COLOR_BayerBG2RGBA;\n        } else if (CFA === 'RGGB') {\n          cvmode = cv.COLOR_BayerRG2RGBA;\n        }\n\n        // 对目标图像进行颜色转换\n        let dst = new cv.Mat();\n        try {\n          cv.cvtColor(mat, dst, cvmode);\n        } catch (error) {\n          this.handleError('cvtColor 出错', 'cvtColor', error);\n          mat.delete();\n          return;\n        }\n\n        const cvtColorEndTime = new Date(); // cvtColor 结束时间\n        this.SendConsoleLogMsg('CaptureTestTime | cvtColor time: ' + (cvtColorEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n        mat.delete();\n\n        // 调整图像大小\n        // cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n        // dst.delete();\n\n        // let originalImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n        // resizeImg.delete();\n\n        let resizeImg = new cv.Mat(); // 用来存储调整后的图像\n        if (this.isPolarAxisMode) {\n          // 调整图像大小\n          cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n          dst.delete();\n\n          let originalImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n          resizeImg.delete();\n\n          const Bit16To8_StretchEndTime = new Date(); // Bit16To8_Stretch 结束时间\n          this.SendConsoleLogMsg('CaptureTestTime | Bit16To8_Stretch time: ' + (Bit16To8_StretchEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n          let targetImg8 = this.ImageSoftAWB(originalImg8, gainR, gainB, offset);\n          this.$bus.$emit('showSolveImage', targetImg8);\n\n          const ImageSoftAWBEndTime = new Date(); // ImageSoftAWB 结束时间\n          this.SendConsoleLogMsg('CaptureTestTime | ImageSoftAWB time: ' + (ImageSoftAWBEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n        } else {\n          cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n          console.log('resizeImg.data.length: ', resizeImg.data.length);\n          console.log('resizeImg.cols: ', resizeImg.cols);\n          console.log('resizeImg.rows: ', resizeImg.rows);\n          let originalResizeImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n          console.log('originalResizeImg8.data.length: ', originalResizeImg8.data.length);\n          console.log('originalResizeImg8.cols: ', originalResizeImg8.cols);\n          console.log('originalResizeImg8.rows: ', originalResizeImg8.rows);\n          this.OriginalImage = new ImageData(new Uint8ClampedArray(originalResizeImg8.data), originalResizeImg8.cols, originalResizeImg8.rows);\n          resizeImg.delete();\n          console.log('dst.data.length: ', dst.data.length);\n          console.log('dst.cols: ', dst.cols);\n          console.log('dst.rows: ', dst.rows);\n          let originalImg8 = this.Bit16To8_Stretch(dst, B, W);\n          dst.delete();\n\n          const Bit16To8_StretchEndTime = new Date(); // Bit16To8_Stretch 结束时间\n          this.SendConsoleLogMsg('CaptureTestTime | Bit16To8_Stretch time: ' + (Bit16To8_StretchEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n          // let targetImg8 = this.ImageSoftAWB(originalImg8, gainR, gainB, offset);\n\n          // const ImageSoftAWBEndTime = new Date(); // ImageSoftAWB 结束时间\n          // this.SendConsoleLogMsg('CaptureTestTime | ImageSoftAWB time: ' + (ImageSoftAWBEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n          \n          // originalImg8.delete();\n\n          this.lastImageProcessParams = {\n            gainR: gainR,\n            gainB: gainB,\n            offset: offset,\n            CFA: CFA,\n            mode: mode,\n            B: B,\n            W: W,\n            cvmode: cvmode,\n          };\n\n          modifiedCanvas.width = this.CanvasWidth;\n          modifiedCanvas.height = this.CanvasHeight;\n          let colorData = new ImageData(new Uint8ClampedArray(originalImg8.data), originalImg8.cols, originalImg8.rows);\n          this.drawImgData = colorData;\n          // 设置缓冲画布宽高\n          this.bufferCanvas.width = colorData.width;\n          this.bufferCanvas.height = colorData.height;\n          // 绘制缓存画布图像\n          this.bufferCtx.putImageData(colorData, 0, 0);\n          // 绘制主画布图像\n          this.drawImageData();\n\n          const DrawImageDataEndTime = new Date(); // DrawImageData 结束时间\n          this.SendConsoleLogMsg('CaptureTestTime | DrawImageData time: ' + (DrawImageDataEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n\n          const endTime = new Date();\n          const elapsedTime = endTime.getTime() - startTime.getTime();\n          this.SendConsoleLogMsg('CaptureTestTime | Process image data end:' + elapsedTime + ' milliseconds', 'info');\n\n          // const totalEndTime = new Date(); // 总结束时间\n          // this.SendConsoleLogMsg('CaptureTestTime | Total process image data time: ' + (totalEndTime.getTime() - totalStartTime.getTime()) + ' ms', 'info');\n\n          this.$bus.$emit('showCaptureImage');\n          this.MakeHistogram(colorData);\n          this.histogramImage = colorData;\n\n          const checkDetectedStarsFinish = () => {\n            if (this.DetectedStarsFinish) {\n              this.detectStarsImg = this.DrawDetectStars(targetImg8, this.DetectedStarsList);\n              targetImg8.delete();\n              clearInterval(intervalId);\n            }\n          };\n\n          const intervalId = setInterval(checkDetectedStarsFinish, 1000);\n        }\n\n        // if (this.isNotDrawStars) {\n        //   this.drawImageData(this.drawImgData);\n        // } else {\n        //   if (this.detectStarsImg != null) {\n        //     this.drawImageData(this.detectStarsImg);\n        //   } else {\n        //     this.drawImageData(this.drawImgData);\n        //   }\n        // }\n\n        // const windowWidth = window.innerWidth;\n        // const windowHeight = window.innerHeight;\n\n        // const minTranslateX = this.imageWidth - this.CanvasWidth;\n        // const minTranslateY = this.imageHeight - this.CanvasHeight;\n\n        // // 计算初始的 ScaleImageSize_X 和 ScaleImageSize_Y\n        // this.ScaleImageSize_X = Math.floor(minTranslateX / this.CanvasWidth * windowWidth + windowWidth);\n        // this.ScaleImageSize_Y = Math.floor(minTranslateY / this.CanvasHeight * windowHeight + windowHeight);\n\n        // this.$bus.$emit('ScaleImageSize', this.ScaleImageSize_X, this.ScaleImageSize_Y);\n\n      } catch (error) {\n        this.handleError('Process image data error', 'processImage', error);\n        if (mat) {\n          mat.delete();\n        }\n        if (resizeImg) {\n          resizeImg.delete();\n        }\n        if (originalImg8) {\n          originalImg8.delete();\n        }\n        if (targetImg8) {\n          targetImg8.delete();\n        }\n      }\n    },\n\n    // histogramStretch(imageData, min, max) {\n    //   const startTime = new Date();\n    //   // Convert ImageData to cv.Mat\n    //   const image = cv.matFromImageData(imageData);\n    //   let Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 转换图像数据时间: ' + (Time1.getTime() - startTime.getTime()) + ' ms', 'info');\n    //   // Perform the histogram stretch\n    //   const channels = new cv.MatVector();\n    //   cv.split(image, channels); // Split channels (BGR) into separate Mat objects\n    //   let Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 分割通道时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Calculate alpha and beta for each channel\n    //   let alpha = 255.0 / (max - min);\n    //   let beta = -min * alpha;\n\n    //   if (alpha < 0) {\n    //     alpha = 0;\n    //     beta = 0;\n    //   } else if (alpha > 255) {\n    //     alpha = 255;\n    //     beta = 0;\n    //   }\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 计算alpha和beta时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   // Iterate over each channel and apply histogram stretching\n    //   for (let i = 0; i < channels.size(); i++) {\n    //     let channel = channels.get(i);\n\n\n    //     // Apply histogram stretching to the channel\n    //     channel.convertTo(channel, -1, alpha, beta);\n\n    //     // Release the memory of channel\n    //     channel.delete();\n    //   }\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 各通道拉伸时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Merge the channels back into a single image\n    //   const stretchImage = new cv.Mat();\n    //   cv.merge(channels, stretchImage);\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 合并通道时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   // Release the memory of channels and MatVector\n    //   channels.delete();\n\n    //   // Convert cv.Mat back to ImageData\n    //   const stretchedImageData = new ImageData(new Uint8ClampedArray(stretchImage.data), stretchImage.cols, stretchImage.rows);\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 转换图像数据时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Clean up\n    //   image.delete();\n    //   stretchImage.delete();\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 释放内存时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   this.SendConsoleLogMsg('histogramStretch | 总时间: ' + (Time1.getTime() - startTime.getTime()) + ' ms', 'info');\n    //   return stretchedImageData;\n    // },\n\n    histogramStretch(imageData, min, max) {\n      const startTime = new Date();\n      // Calculate alpha and beta\n      let alpha = 255.0 / (max - min);\n      let beta = -min * alpha;\n\n      if (alpha < 0) {\n        alpha = 0;\n        beta = 0;\n      } else if (alpha > 255) {\n        alpha = 255;\n        beta = 0;\n      }\n\n      // Apply histogram stretching directly on ImageData\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        for (let j = 0; j < 3; j++) { // For each color channel\n          let value = imageData.data[i + j];\n          value = value * alpha + beta;\n          imageData.data[i + j] = Math.max(0, Math.min(255, value));\n        }\n      }\n\n      const endTime = new Date();\n      this.SendConsoleLogMsg('histogramStretch | 总时间: ' + (endTime.getTime() - startTime.getTime()) + ' ms', 'info');\n      return imageData;\n    },\n    localWhiteBalanceAdjustment(imageData, gainR, gainB, offset) {\n      // 分离通道\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        for (let j = 0; j < 3; j++) { // For each color channel\n          if (j == 0) {\n            value = imageData.data[i + j];\n            value = value * gainB + offset;\n          } else if (j == 2) {\n            value = imageData.data[i + j];\n            value = value * gainR + offset;\n          } else {\n            value = imageData.data[i + j];\n            value = value * 1 + offset;\n          }\n          imageData.data[i + j] = Math.max(0, Math.min(255, value));\n        }\n      }\n\n\n      return imageData;\n    },\n\n    initCanvas() {\n      this.bufferCanvas = document.createElement('canvas');\n      this.bufferCtx = this.bufferCanvas.getContext('2d');\n\n      this.tempCanvas = document.createElement('canvas');\n      this.tempCtx = this.tempCanvas.getContext('2d');\n    },\n\n    //*/*/*/*/*/*/*/*/*/*/*/\n    SwitchImageToShow(isOriginal) {\n      // console.log('Show Original Image: ', isOriginal);\n      this.SendConsoleLogMsg('Show Original Image:' + isOriginal, 'info');\n      this.isNotDrawStars = isOriginal;\n      if (isOriginal) {\n        // document.removeEventListener('click', this.handleTouchOrMouseDown);\n        this.enableMainCanvasClick = false;\n        this.drawImageData();\n      } else {\n        // document.addEventListener('click', this.handleTouchOrMouseDown);\n        this.enableMainCanvasClick = true;\n        // this.drawImageData(this.detectStarsImg);\n      }\n    },\n\n    // drawImageData() {\n    //   if (this.bufferCanvas == null) {\n    //     this.SendConsoleLogMsg('drawImageData error: bufferCanvas is null or undefined.', 'error');\n    //     return;\n    //   }\n    //   // 可用相关参数\n    //   // window.innerWidth; // 窗口宽度\n    //   // window.innerHeight; // 窗口高度\n    //   // this.scale 缩放比例\n    //   // this.translateX 平移x坐标\n    //   // this.translateY 平移y坐标\n    //   // this.CanvasWidth 主画布宽度 1920\n    //   // this.CanvasHeight 主画布高度 1080\n    //   // this.mainCameraSizeX 原始图像宽度\n    //   // this.mainCameraSizeY 原始图像高度\n    //   // this.bufferCanvas.width 缓冲画布宽度\n    //   // this.bufferCanvas.height 缓冲画布高度\n    //   // this.ImageProportion 图像比例\n    //   // this.ROI_x ROI的x坐标\n    //   // this.ROI_y ROI的y坐标\n    //   // this.ROI_length ROI的长度\n\n    //   // console.log('当前画布参数:\\n bufferCanvas.width: ', this.bufferCanvas.width, '\\n bufferCanvas.height: ', this.bufferCanvas.height, '\\n ImageProportion: ', this.ImageProportion, '\\n scale: ', this.scale, '\\n visibleX: ', this.visibleX, '\\n visibleY: ', this.visibleY, '\\n visibleWidth: ', this.visibleWidth, '\\n visibleHeight: ', this.visibleHeight, '\\n ROI_x: ', this.ROI_x, '\\n ROI_y: ', this.ROI_y, '\\n ROI_length: ', this.ROI_length);\n\n    //   let startTime = new Date();\n    //   let Time1 = new Date();\n\n    //   // 计算可见区域\n    //   const newVisibleWidth = this.bufferCanvas.width * this.scale;\n    //   const newVisibleHeight = newVisibleWidth / this.ImageProportion;\n\n    //   // 计算可见区域x坐标\n    //   let newVisibleX = this.visibleX;\n    //   // 计算可见区域y坐标\n    //   let newVisibleY = this.visibleY;\n\n    //   // 避免图像越界\n    //   if (newVisibleX - newVisibleWidth / 2 < 0) {\n    //     newVisibleX = newVisibleWidth / 2;\n    //   } else if (newVisibleX + newVisibleWidth / 2 > this.bufferCanvas.width) {\n    //     newVisibleX = this.bufferCanvas.width - newVisibleWidth / 2;\n    //   }\n\n    //   if (newVisibleY - newVisibleHeight / 2 < 0) {\n    //     newVisibleY = newVisibleHeight / 2;\n    //   } else if (newVisibleY + newVisibleHeight / 2 > this.bufferCanvas.height) {\n    //     newVisibleY = this.bufferCanvas.height - newVisibleHeight / 2;\n    //   }\n\n    //   // 更新ROI区域\n    //   // 计算可见区域的边界\n    //   const visibleLeft = newVisibleX - newVisibleWidth / 2;\n    //   const visibleRight = newVisibleX + newVisibleWidth / 2;\n    //   const visibleTop = newVisibleY - newVisibleHeight / 2;\n    //   const visibleBottom = newVisibleY + newVisibleHeight / 2;\n\n    //   // 计算 ROI 区域的边界\n    //   const roiLeft = this.ROI_x;\n    //   const roiRight = this.ROI_x + this.ROI_length;\n    //   const roiTop = this.ROI_y;\n    //   const roiBottom = this.ROI_y + this.ROI_length;\n\n    //   // 判断 ROI 区域是否在可见区域内\n    //   const isRoiInVisible = roiRight >= visibleLeft && roiLeft <= visibleRight && roiBottom >= visibleTop && roiTop <= visibleBottom;\n\n    //   // 计算 ROI 区域在屏幕上的位置，中心点坐标\n    //   const roiScreenX = (this.ROI_x - visibleLeft) * (window.innerWidth / newVisibleWidth) + this.RedBoxSideLength * window.innerWidth / newVisibleWidth / 2;\n    //   const roiScreenY = (this.ROI_y - visibleTop) * (window.innerHeight / newVisibleHeight) + this.RedBoxSideLength * window.innerHeight / newVisibleHeight / 2;\n    //   // this.SendConsoleLogMsg('ROI 区域在屏幕上的位置: ' + roiScreenX + '*' + roiScreenY + '长度 ' + this.RedBoxSideLength * window.innerWidth / newVisibleWidth + '*' + this.RedBoxSideLength * window.innerHeight / newVisibleHeight, 'info');\n    //   this.$bus.$emit('setRedBoxLength', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n    //   this.$bus.$emit('setRedBoxPosition', roiScreenX, roiScreenY);\n    //   // if (isRoiInVisible) {\n    //   //   console.log('ROI 区域在可见区域内, RedBoxSideLength: ', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, ', ', this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n    //   // } else {\n    //   //   console.log('ROI 区域不在可见区域内, RedBoxSideLength: ', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, ', ', this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n    //   // }\n\n    //   let Time2 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 计算相关参数时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Draw buffer canvas on main canvas\n    //   const canvas = this.$refs.mainCanvas;\n    //   const ctx = canvas.getContext('2d');\n    //   ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //   // 获取绘制的图像数据\n    //   let imageData = this.bufferCtx.getImageData(newVisibleX - newVisibleWidth / 2, newVisibleY - newVisibleHeight / 2, newVisibleWidth, newVisibleHeight);\n\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 获取绘制的图像数据时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n\n    //   // if (this.currentHistogramMax != 255 || this.currentHistogramMin != 0) {\n    //   //   imageData = this.histogramStretch(imageData, this.currentHistogramMin, this.currentHistogramMax);\n    //   // }\n\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 直方图拉伸时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n      \n      \n    //   // Create a temporary canvas to draw the ImageData\n    //   let tempCanvas = document.createElement('canvas');\n    //   tempCanvas.width = imageData.width;\n    //   tempCanvas.height = imageData.height;\n    //   let tempCtx = tempCanvas.getContext('2d');\n    //   tempCtx.putImageData(imageData, 0, 0);\n\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 创建临时画布并绘制时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n\n    //   // Draw the ImageData on the main canvas\n    //   ctx.drawImage(tempCanvas, 0, 0, tempCanvas.width, tempCanvas.height, 0, 0, canvas.width, canvas.height);\n\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 绘制图像时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // ctx.drawImage(this.bufferCanvas, newVisibleX - newVisibleWidth / 2, newVisibleY - newVisibleHeight / 2, newVisibleWidth, newVisibleHeight, 0, 0, canvas.width, canvas.height);\n    //   // this.SendConsoleLogMsg('绘制图像,可见区域:' + newVisibleX + ',' + newVisibleY + ',' + newVisibleWidth + ',' + newVisibleHeight, 'info');\n    //   this.visibleX = newVisibleX;\n    //   this.visibleY = newVisibleY;\n    //   this.visibleWidth = newVisibleWidth;\n    //   this.visibleHeight = newVisibleHeight;\n\n    //   this.$bus.$emit('setCurrentMainCanvasHasImage', true); // 发送给电调，用于判断是否可以进行循环拍摄\n    //   // 发送消息给QT客户端，用于信息图标\n    //   this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendRedBoxState:' + this.RedBoxSideLength + ':' + this.ROI_x + ':' + this.ROI_y);\n    //   this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendVisibleArea:' + this.visibleX + ':' + this.visibleY + ':' + this.scale);\n      \n    //   // 如果选择了星点，则根据选择位置，在ROI区域中绘制一个圆\n    //   if (this.DrawSelectStarX != -1 && this.DrawSelectStarY != -1 && this.showSelectStar) {\n    //     let radius, canvasStarX, canvasStarY, color;\n    //     // 如果有星点\n    //     if (this.DrawSelectStarHFR != -1) {\n    //       radius = this.DrawSelectStarHFR/this.scale*2;\n    //       canvasStarX = (this.DrawSelectStarX + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n    //       canvasStarY = (this.DrawSelectStarY + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n    //       color = 'green'; // 有星点，绘制绿色的圆\n    //     } else {\n    //       // 否则，在选择的位置绘制一个圆\n    //       radius = 10/this.scale; // 你可以根据需要调整这个值\n    //       canvasStarX = (this.DrawSelectStarX + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n    //       canvasStarY = (this.DrawSelectStarY + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n    //       color = 'red'; // 无星点，绘制红色的圆\n    //     }\n\n    //     // 获取绘制圆的位置的图像数据\n    //     const imageData = ctx.getImageData(canvasStarX - radius, canvasStarY - radius, 2 * radius, 2 * radius);\n    //     // 发送图像数据给显示框\n    //     this.$bus.$emit('selectStarImage', imageData);\n\n    //     // 在指定位置开始绘制圆\n    //     ctx.beginPath();\n    //     ctx.arc(canvasStarX, canvasStarY, radius, 0, 2 * Math.PI);\n    //     ctx.strokeStyle = color;\n    //     ctx.lineWidth = 3;\n    //     ctx.stroke();\n    //     ctx.closePath();\n    //   }\n\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('drawImageData | 绘制星点时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n\n    //   this.SendConsoleLogMsg('drawImageData | 总时间: ' + (Time1.getTime() - startTime.getTime()) + ' ms', 'info');\n    // },\n\n    \n   drawImageData() {\n      if (this.bufferCanvas == null) {\n        this.SendConsoleLogMsg('drawImageData error: bufferCanvas is null or undefined.', 'error');\n        return;\n      }\n      // 可用相关参数\n      // window.innerWidth; // 窗口宽度\n      // window.innerHeight; // 窗口高度\n      // this.scale 缩放比例\n      // this.translateX 平移x坐标\n      // this.translateY 平移y坐标\n      // this.CanvasWidth 主画布宽度 1920\n      // this.CanvasHeight 主画布高度 1080\n      // this.mainCameraSizeX 原始图像宽度\n      // this.mainCameraSizeY 原始图像高度\n      // this.bufferCanvas.width 缓冲画布宽度\n      // this.bufferCanvas.height 缓冲画布高度\n      // this.ImageProportion 图像比例\n      // this.ROI_x ROI的x坐标\n      // this.ROI_y ROI的y坐标\n      // this.ROI_length ROI的长度\n\n      // console.log('当前画布参数:\\n bufferCanvas.width: ', this.bufferCanvas.width, '\\n bufferCanvas.height: ', this.bufferCanvas.height, '\\n ImageProportion: ', this.ImageProportion, '\\n scale: ', this.scale, '\\n visibleX: ', this.visibleX, '\\n visibleY: ', this.visibleY, '\\n visibleWidth: ', this.visibleWidth, '\\n visibleHeight: ', this.visibleHeight, '\\n ROI_x: ', this.ROI_x, '\\n ROI_y: ', this.ROI_y, '\\n ROI_length: ', this.ROI_length);\n\n      let startTime = new Date();\n      let Time1 = new Date();\n\n      // 计算可见区域\n      const newVisibleWidth = this.bufferCanvas.width * this.scale;\n      const newVisibleHeight = newVisibleWidth / this.ImageProportion;\n\n      // 计算可见区域x坐标\n      let newVisibleX = this.visibleX;\n      // 计算可见区域y坐标\n      let newVisibleY = this.visibleY;\n\n      // 避免图像越界\n      if (newVisibleX - newVisibleWidth / 2 < 0) {\n        newVisibleX = newVisibleWidth / 2;\n      } else if (newVisibleX + newVisibleWidth / 2 > this.bufferCanvas.width) {\n        newVisibleX = this.bufferCanvas.width - newVisibleWidth / 2;\n      }\n\n      if (newVisibleY - newVisibleHeight / 2 < 0) {\n        newVisibleY = newVisibleHeight / 2;\n      } else if (newVisibleY + newVisibleHeight / 2 > this.bufferCanvas.height) {\n        newVisibleY = this.bufferCanvas.height - newVisibleHeight / 2;\n      }\n\n      // 更新ROI区域\n      // 计算可见区域的边界\n      const visibleLeft = newVisibleX - newVisibleWidth / 2;\n      const visibleRight = newVisibleX + newVisibleWidth / 2;\n      const visibleTop = newVisibleY - newVisibleHeight / 2;\n      const visibleBottom = newVisibleY + newVisibleHeight / 2;\n\n      // 计算 ROI 区域的边界\n      const roiLeft = this.ROI_x;\n      const roiRight = this.ROI_x + this.ROI_length;\n      const roiTop = this.ROI_y;\n      const roiBottom = this.ROI_y + this.ROI_length;\n\n      // 判断 ROI 区域是否在可见区域内\n      const isRoiInVisible = roiRight >= visibleLeft && roiLeft <= visibleRight && roiBottom >= visibleTop && roiTop <= visibleBottom;\n\n      // 计算 ROI 区域在屏幕上的位置，中心点坐标\n      const roiScreenX = (this.ROI_x - visibleLeft) * (window.innerWidth / newVisibleWidth) + this.RedBoxSideLength * window.innerWidth / newVisibleWidth / 2;\n      const roiScreenY = (this.ROI_y - visibleTop) * (window.innerHeight / newVisibleHeight) + this.RedBoxSideLength * window.innerHeight / newVisibleHeight / 2;\n      // this.SendConsoleLogMsg('ROI 区域在屏幕上的位置: ' + roiScreenX + '*' + roiScreenY + '长度 ' + this.RedBoxSideLength * window.innerWidth / newVisibleWidth + '*' + this.RedBoxSideLength * window.innerHeight / newVisibleHeight, 'info');\n      this.$bus.$emit('setRedBoxLength', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n      this.$bus.$emit('setRedBoxPosition', roiScreenX, roiScreenY);\n      // if (isRoiInVisible) {\n      //   console.log('ROI 区域在可见区域内, RedBoxSideLength: ', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, ', ', this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n      // } else {\n      //   console.log('ROI 区域不在可见区域内, RedBoxSideLength: ', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, ', ', this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n      // }\n\n      let Time2 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 计算相关参数时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n      // Draw buffer canvas on main canvas\n      const canvas = this.$refs.mainCanvas;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      // 获取绘制的图像数据\n      // let imageData = this.bufferCtx.getImageData(newVisibleX - newVisibleWidth / 2, newVisibleY - newVisibleHeight / 2, newVisibleWidth, newVisibleHeight);\n\n      Time1 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 获取绘制的图像数据时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n      \n      // Create a temporary canvas to draw the ImageData\n      this.tempCtx.clearRect(0, 0, this.tempCanvas.width, this.tempCanvas.height);\n      this.tempCanvas.width = canvas.width;\n      this.tempCanvas.height = canvas.height;\n      this.tempCtx.drawImage(this.bufferCanvas, newVisibleX - newVisibleWidth / 2, newVisibleY - newVisibleHeight / 2, newVisibleWidth, newVisibleHeight, 0, 0, canvas.width, canvas.height);\n\n      Time1 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 创建临时画布并绘制时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n\n      let imageData = this.tempCtx.getImageData(0, 0, this.tempCanvas.width, this.tempCanvas.height);\n\n      if (this.currentHistogramMax != 255 || this.currentHistogramMin != 0) {\n        imageData = this.histogramStretch(imageData, this.currentHistogramMin, this.currentHistogramMax);\n      }\n\n      if (this.ImageGainR != 1 || this.ImageGainB != 1 || this.ImageOffset != 0) {\n        imageData = this.localWhiteBalanceAdjustment(imageData, this.ImageGainR, this.ImageGainB, this.ImageOffset);\n      }\n      this.tempCtx.putImageData(imageData, 0, 0);\n\n      Time2 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 直方图拉伸时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n      // Draw the ImageData on the main canvas\n      ctx.drawImage(this.tempCanvas, 0, 0, this.tempCanvas.width, this.tempCanvas.height, 0, 0, canvas.width, canvas.height);\n\n      Time1 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 绘制图像时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n      // ctx.drawImage(this.bufferCanvas, newVisibleX - newVisibleWidth / 2, newVisibleY - newVisibleHeight / 2, newVisibleWidth, newVisibleHeight, 0, 0, canvas.width, canvas.height);\n      // this.SendConsoleLogMsg('绘制图像,可见区域:' + newVisibleX + ',' + newVisibleY + ',' + newVisibleWidth + ',' + newVisibleHeight, 'info');\n      this.visibleX = newVisibleX;\n      this.visibleY = newVisibleY;\n      this.visibleWidth = newVisibleWidth;\n      this.visibleHeight = newVisibleHeight;\n\n      this.$bus.$emit('setCurrentMainCanvasHasImage', true); // 发送给电调，用于判断是否可以进行循环拍摄\n      // 发送消息给QT客户端，用于信息图标\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendRedBoxState:' + this.RedBoxSideLength + ':' + this.ROI_x + ':' + this.ROI_y);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendVisibleArea:' + this.visibleX + ':' + this.visibleY + ':' + this.scale);\n      \n      // 如果选择了星点，则根据选择位置，在ROI区域中绘制一个圆\n      if (this.DrawSelectStarX != -1 && this.DrawSelectStarY != -1 && this.showSelectStar) {\n        let radius, canvasStarX, canvasStarY, color;\n        // 如果有星点\n        if (this.DrawSelectStarHFR != -1) {\n          radius = this.DrawSelectStarHFR/this.scale*2;\n          canvasStarX = (this.DrawSelectStarX + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n          canvasStarY = (this.DrawSelectStarY + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n          color = 'green'; // 有星点，绘制绿色的圆\n        } else {\n          // 否则，在选择的位置绘制一个圆\n          radius = 10/this.scale; // 你可以根据需要调整这个值\n          canvasStarX = (this.DrawSelectStarX + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n          canvasStarY = (this.DrawSelectStarY + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n          color = 'red'; // 无星点，绘制红色的圆\n        }\n\n        // 获取绘制圆的位置的图像数据\n        const imageData = ctx.getImageData(canvasStarX - radius, canvasStarY - radius, 2 * radius, 2 * radius);\n        // 发送图像数据给显示框\n        this.$bus.$emit('selectStarImage', imageData);\n\n        // 在指定位置开始绘制圆\n        ctx.beginPath();\n        ctx.arc(canvasStarX, canvasStarY, radius, 0, 2 * Math.PI);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 3;\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      Time2 = new Date();\n      this.SendConsoleLogMsg('drawImageData | 绘制星点时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n\n      this.SendConsoleLogMsg('drawImageData | 总时间: ' + (Time2.getTime() - startTime.getTime()) + ' ms', 'info');\n    },\n\n    addEventListeners() {\n \n    },\n\n    // 节流函数\n    throttle(func, delay) {\n      let lastExecuted = 0;\n      return function (...args) {\n        const now = Date.now();\n        if (now - lastExecuted >= delay) {\n          func.apply(this, args);\n          lastExecuted = now;\n        }\n      };\n    },\n\n    ImageSoftAWB(img8, gainR, gainB, offset) {\n      // 分离通道\n      let channels = new cv.MatVector();\n      cv.split(img8, channels);\n\n      const b = channels.get(0);\n      const g = channels.get(1);\n      const r = channels.get(2);\n\n      // 自适应直方图均衡化\n      const clahe = new cv.CLAHE(2.0, new cv.Size(8, 8));\n      clahe.apply(b, b);\n      clahe.apply(g, g);\n      clahe.apply(r, r);\n\n      // 应用增益和偏置\n      r.convertTo(r, -1, gainR, offset);\n      b.convertTo(b, -1, gainB, offset);\n      g.convertTo(g, -1, 1, offset); // 对绿色通道应用偏置但不改变增益\n\n      // 更新 channels 中的通道数据\n      channels.set(0, b);\n      channels.set(1, g);\n      channels.set(2, r);\n\n      // 合并通道\n      let mergedImg = new cv.Mat();\n      cv.merge(channels, mergedImg);\n\n      // 释放资源\n      b.delete(); // 释放 b\n      g.delete(); // 释放 g\n      r.delete(); // 释放 r\n      channels.delete();\n      clahe.delete(); // 释放 clahe\n\n\n\n      return mergedImg;\n    },\n\n    // Bit16To8_Stretch(img16, B, W) {\n    //   console.log('Bit16To8_Stretch | B = ' + B + ', W = ' + W);\n    //   let img8 = new cv.Mat();\n    //   img8.create(img16.rows, img16.cols, cv.CV_8UC4);\n    //   img16.convertTo(img8, cv.CV_8U, 255.0 / (W - B), -B * 255.0 / (W - B));\n\n    //   const result = img8.clone(); // 克隆 img8 以返回结果\n    //   img8.delete(); // 释放 img8\n\n    //   return result;\n    // },\n    Bit16To8_Stretch(img16, B, W) {\n      console.log('Bit16To8_Stretch | B = ' + B + ', W = ' + W);\n      let img8 = new cv.Mat(img16.rows, img16.cols, cv.CV_8UC4);\n      img16.convertTo(img8, cv.CV_8U, 255.0 / (W - B), -B * 255.0 / (W - B));\n      return img8;\n    },\n\n    DrawDetectStars(image, Stars) {\n      console.log('Draw circle on the Capture Image(', image.cols, ',', image.rows, ').');\n      if (!(image instanceof cv.Mat)) {\n        throw new Error('Invalid image data');\n      }\n      Stars.forEach(star => {\n        let centerX = Math.round(star.x / (this.mainCameraSizeX / image.cols));\n        let centerY = Math.round(star.y / (this.mainCameraSizeY / image.rows));\n        let radius = Math.round(star.hfr);\n\n        console.log('Draw circle at(', centerX, ',', centerY, ') with radius:', radius);\n\n        let center = new cv.Point(centerX, centerY);\n        let color = new cv.Scalar(255, 0, 0, 255);\n        let thickness = 2; // 圆圈厚度\n\n        cv.circle(image, center, radius, color, thickness);\n\n        // 添加 hfr 值到圆的上方\n        // 确保 star.hfr 是一个数字\n        let hfrValue = parseFloat(star.hfr);\n        if (isNaN(hfrValue)) {\n          hfrValue = 0; // 如果 star.hfr 不能转换为数字，则默认值设为0\n        }\n\n        // 保留到小数点后2位\n        let text = hfrValue.toFixed(2);\n        let fontFace = cv.FONT_HERSHEY_SIMPLEX;\n        let fontScale = 1;\n        let textColor = new cv.Scalar(255, 0, 0, 255);\n        let textThickness = 2;\n\n        // 手动设置文本的位置，假设字体高度大约为10像素\n        let textX = centerX - (text.length * 10); // 估算每个字符宽度为5像素\n        let textY = centerY - radius - 3; // 圆的上方 3 像素\n\n        // 在图像上绘制文本\n        cv.putText(image, text, new cv.Point(textX, textY), fontFace, fontScale, textColor, textThickness);\n      });\n\n      const imageData = new ImageData(new Uint8ClampedArray(image.data), image.cols, image.rows);\n\n      return imageData;\n    },\n\n    DrawPHD2Box(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const BoxWidth = 20 / ratioZoomX;\n      const BoxHeight = 20 / ratioZoomY;\n\n      const BoxStartX = Box_X / ratioZoomX - BoxWidth / 2;\n      const BoxStartY = Box_Y / ratioZoomY - BoxHeight / 2;\n\n      this.$bus.$emit('PHD2BoxPosition', BoxStartX, BoxStartY, BoxWidth, BoxHeight);\n    },\n\n    DrawPHD2Cross(PHD2ImageSize_X, PHD2ImageSize_Y, Cross_X, Cross_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const CrossStartX = Cross_X / ratioZoomX;\n      const CrossStartY = Cross_Y / ratioZoomY;\n\n      this.$bus.$emit('PHD2CrossPosition', CrossStartX, CrossStartY);\n    },\n\n    DrawPHD2MultiStars(PHD2ImageSize_X, PHD2ImageSize_Y, Star_X, Star_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const StarStartX = Star_X / ratioZoomX - 12 / 2;\n      const StarStartY = Star_Y / ratioZoomY - 12 / 2;\n\n      this.$bus.$emit('PHD2MultiStarsPosition', StarStartX, StarStartY);\n    },\n\n    GetAutoStretch(imgData, mode) {\n      if (imgData.length === 0) {\n        return { blackLevel: 0, whiteLevel: 65535 };\n      }\n\n      const length = imgData.length;\n      let mean = 0;\n      let M2 = 0;\n\n      for (let i = 0; i < length; i++) {\n        const delta = imgData[i] - mean;\n        mean += delta / (i + 1);\n        M2 += delta * (imgData[i] - mean);\n      }\n\n      const variance = M2 / length;\n      const std = Math.sqrt(variance);\n\n      let a, b;\n      switch (mode) {\n        case 0:\n          a = 3;\n          b = 5;\n          break;\n        case 1:\n          a = 2;\n          b = 5;\n          break;\n        case 2:\n          a = 3;\n          b = 8;\n          break;\n        default:\n          a = 2;\n          b = 8;\n      }\n\n      let bx = Math.max(0, mean - std * a);\n      let wx = Math.min(65535, mean + std * b);\n\n      let blackLevel = Math.round(bx);\n      let whiteLevel = Math.round(wx);\n\n      if (blackLevel >= whiteLevel) {\n        blackLevel = whiteLevel - 1;\n      }\n\n      return { blackLevel, whiteLevel };\n    },\n\n    fetchImage(imagePath) {\n      const url = imagePath;\n      const xhr = new XMLHttpRequest();\n\n      xhr.responseType = 'blob'; // 设置响应类型为 blob\n\n      xhr.onload = () => {\n        if (xhr.status === 200) {\n          const imageUrl = URL.createObjectURL(xhr.response);\n          // 在这里，您可以将 imageUrl 设置到某个 <img> 元素上，或者做其他处理\n          this.$bus.$emit('showCaptureImage');\n          this.displayImageOnCanvas(imageUrl); // 将图像显示在Canvas上\n        } else {\n          console.error('Failed to fetch the image. Status:', xhr.status);\n        }\n      };\n\n      xhr.onerror = () => {\n        console.error('There was an error fetching the image.');\n      };\n\n      xhr.open('GET', url, true);\n      xhr.send();\n    },\n\n    displayImageOnCanvas(imageUrl) {\n      const showcanvas = document.getElementById('mainCamera-canvas');\n      const canvas = document.getElementById('TestCanvas');\n      const showctx = showcanvas.getContext('2d');\n      const ctx = canvas.getContext('2d');\n      showcanvas.width = this.CanvasWidth;\n      showcanvas.height = this.CanvasHeight;\n      console.log('QHYCCD | canvas size:', showcanvas.width, showcanvas.height);\n\n      const img = new Image();\n      img.setAttribute('crossOrigin', '');\n      img.onload = () => {\n        this.histogramImage = img;\n\n        // 计算图像的缩放比例以使其铺满固定大小的 Canvas\n        const scaleWidth = showcanvas.width / img.width;\n        const scaleHeight = showcanvas.height / img.height;\n\n        const width = img.width * scaleWidth;\n        const height = img.height * scaleHeight;\n\n        // 清空 Canvas\n        showctx.clearRect(0, 0, showcanvas.width, showcanvas.height);\n        ctx.clearRect(0, 0, showcanvas.width, showcanvas.height);\n\n        // 在 Canvas 上绘制图像\n        showctx.drawImage(img, 0, 0, width, height);\n        ctx.drawImage(img, 0, 0, width, height);\n        console.log('QHYCCD | crossOrigin:', img.crossOrigin);\n        this.imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        console.log('QHYCCD | imageData:', this.imageData);\n        this.MakeHistogram(this.imageData);\n      };\n      img.src = imageUrl;\n    },\n\n    MakeHistogram(imageData) {\n      console.log('MakeHistogram');\n\n      // 计算三个通道的直方图\n      this.histogramData = this.calculateHistogram(imageData);\n\n      this.$bus.$emit('showHistogram', this.histogramData);\n    },\n\n    calculateHistogram(imageData) {\n      console.log('QHYCCD | calculateHistogram');\n      const histogram = [\n        Array(256).fill(0), // 存储蓝色通道直方图\n        Array(256).fill(0), // 存储绿色通道直方图\n        Array(256).fill(0)  // 存储红色通道直方图\n      ];\n\n      // 分别计算三个通道的直方图\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const r = imageData.data[i];\n        const g = imageData.data[i + 1];\n        const b = imageData.data[i + 2];\n\n        // 更新每个通道的直方图\n        histogram[0][b]++;\n        histogram[1][g]++;\n        histogram[2][r]++;\n      }\n\n      return histogram;\n    },\n\n    applyHistStretch(Min, Max) {\n      this.currentHistogramMin = Min;\n      this.currentHistogramMax = Max;\n      this.drawImageData();\n      this.$bus.$emit('ChangeDialPosition', Min, Max);\n    },\n\n    setAutoHistogramNum(min, max) {\n      this.histogram_min = min;\n      this.histogram_max = max;\n      this.currentHistogramMin = min;\n      this.currentHistogramMax = max;\n    },\n\n    calcWhiteBalanceGains() {\n      // const Gains = this.calculateWhiteBalanceGains(this.histogramData, this.ImageOffset);\n      const startTime = new Date();\n      const Gains = this.calculateWhiteBalanceGains();\n      const endTime = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 总时间: ' + (endTime.getTime() - startTime.getTime()) + ' ms', 'info');\n\n      this.ImageGainR = Gains.GainR;\n      this.ImageGainB = Gains.GainB;\n\n      const GainRIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ImageGainR');\n      if (GainRIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.MainCameraConfigItems[GainRIndex].value = this.ImageGainR;\n      } else {\n        console.error('ImageGainR configuration item not found.');\n      }\n\n      const GainBIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ImageGainB');\n      if (GainBIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.MainCameraConfigItems[GainBIndex].value = this.ImageGainB;\n      } else {\n        console.error('ImageGainB configuration item not found.');\n      }\n\n      this.drawImageData();\n      // this.processImage(this.ImageArrayBuffer);\n    },\n\n    // calculateWhiteBalanceGains(histogram, offset) {\n    //   let sumR = 0, sumG = 0, sumB = 0;\n    //   let countR = 0, countG = 0, countB = 0;\n\n    //   // for (let i = 0; i < 256; i++) {\n    //   //   sumR += histogram[2][i] * i;\n    //   //   sumG += histogram[1][i] * i;\n    //   //   sumB += histogram[0][i] * i;\n\n    //   //   countR += histogram[2][i];\n    //   //   countG += histogram[1][i];\n    //   //   countB += histogram[0][i];\n    //   // }\n\n    //   for (let i = 0; i < 256; i++) {\n    //     // Subtract offset from pixel value\n    //     const adjustedR = Math.max(i - offset, 0);\n    //     const adjustedG = Math.max(i - offset, 0);\n    //     const adjustedB = Math.max(i - offset, 0);\n\n    //     sumR += histogram[2][i] * adjustedR;\n    //     sumG += histogram[1][i] * adjustedG;\n    //     sumB += histogram[0][i] * adjustedB;\n\n    //     countR += histogram[2][i];\n    //     countG += histogram[1][i];\n    //     countB += histogram[0][i];\n    //   }\n\n    //   const meanR = sumR / countR;\n    //   const meanG = sumG / countG;\n    //   const meanB = sumB / countB;\n\n    //   // Calculate gains\n    //   const GainR = meanG / meanR;\n    //   const GainB = meanG / meanB;\n\n    //   console.log(`GainR: ${GainR}, GainB: ${GainB}`);\n    //   return { GainR, GainB };\n    // },\n\n    calculateWhiteBalanceGains() {\n      if (!(this.OriginalImage instanceof ImageData)) {\n        throw new Error('Invalid image data');\n      }\n\n      let time1 = new Date();\n      // 创建一个新的 cv.Mat 对象\n      let img8 = cv.matFromImageData(this.OriginalImage);\n      let time2 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 创建 cv.Mat 对象时间: ' + (time2.getTime() - time1.getTime()) + ' ms', 'info');\n\n      let gainR = this.ImageGainR;\n      let gainB = this.ImageGainB;\n      let offset = this.ImageOffset;\n\n      const channels = new cv.MatVector();\n      cv.split(img8, channels);\n      time1 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 分割通道时间: ' + (time1.getTime() - time2.getTime()) + ' ms', 'info');\n\n      const b = channels.get(0);\n      const g = channels.get(1);\n      const r = channels.get(2);\n      time2 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 获取通道时间: ' + (time2.getTime() - time1.getTime()) + ' ms', 'info');\n\n      // 自适应直方图均衡化\n      const clahe = new cv.CLAHE(2.0, new cv.Size(8, 8));\n      clahe.apply(b, b);\n      clahe.apply(g, g);\n      clahe.apply(r, r);\n      time1 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 自适应直方图均衡化时间: ' + (time1.getTime() - time2.getTime()) + ' ms', 'info');\n\n      // 使用中位数计算增益\n      const medianB = new cv.Mat();\n      const medianG = new cv.Mat();\n      const medianR = new cv.Mat();\n      cv.medianBlur(b, medianB, 5);\n      cv.medianBlur(g, medianG, 5);\n      cv.medianBlur(r, medianR, 5);\n      time2 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 中位数计算增益时间: ' + (time2.getTime() - time1.getTime()) + ' ms', 'info');\n\n      const avgB = cv.mean(medianB)[0];\n      const avgG = cv.mean(medianG)[0];\n      const avgR = cv.mean(medianR)[0];\n\n      time1 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 计算增益时间: ' + (time1.getTime() - time2.getTime()) + ' ms', 'info');\n\n      gainR = Math.min(Math.max(avgG / avgR, 0.1), 3);\n      gainB = Math.min(Math.max(avgG / avgB, 0.1), 3);\n\n      // 应用增益和偏置\n      r.convertTo(r, -1, gainR, offset);\n      b.convertTo(b, -1, gainB, offset);\n      g.convertTo(g, -1, 1, offset); // 对绿色通道应用偏置但不改变增益\n\n      time2 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 应用增益和偏置时间: ' + (time2.getTime() - time1.getTime()) + ' ms', 'info');\n\n      // 更新 channels 中的通道数据\n      channels.set(0, b);\n      channels.set(1, g);\n      channels.set(2, r);\n\n      time1 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 更新 channels 中的通道数据时间: ' + (time1.getTime() - time2.getTime()) + ' ms', 'info');\n\n      // 合并通道回 img8\n      cv.merge(channels, img8);\n\n      time2 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 合并通道时间: ' + (time2.getTime() - time1.getTime()) + ' ms', 'info');\n\n      b.delete();\n      g.delete();\n      r.delete();\n      medianB.delete();\n      medianG.delete();\n      medianR.delete();\n      channels.delete();\n\n      time1 = new Date();\n      this.SendConsoleLogMsg('calcWhiteBalanceGains | 删除通道时间: ' + (time1.getTime() - time2.getTime()) + ' ms', 'info');\n\n      // if (this.isPolarAxisMode) {\n      //   this.$bus.$emit('showSolveImage', img8);\n      // }\n      // else {\n      //   // 创建用于绘制的 ImageData 对象，并在修改后的画布上绘制图像\n      //   let colorData = new ImageData(new Uint8ClampedArray(img8.data), img8.cols, img8.rows);\n      //   img8.delete();\n      //   this.drawImgData = colorData;\n      //   this.drawImageData();\n\n      //   this.$bus.$emit('showCaptureImage');\n\n      //   this.MakeHistogram(colorData);\n      //   this.histogramImage = colorData;\n\n      // }\n      return { GainR: gainR, GainB: gainB };\n    },\n\n    loadOpenCv() {\n      return new Promise((resolve, reject) => {\n        if (typeof cv === 'undefined') {\n          // 如果 cv 未定义，尝试加载 OpenCV.js\n          const script = document.createElement('script');\n          script.src = '/opencv.js'; // 使用 public 文件夹中的路径\n          script.async = true;\n          script.onload = () => {\n            resolve();\n          };\n          script.onerror = (error) => {\n            reject(error);\n          };\n          document.head.appendChild(script);\n        } else {\n          // 如果 cv 已定义，直接解析\n          resolve();\n        }\n      });\n    },\n\n    // loadOpenCv() {\n    //   return new Promise((resolve, reject) => {\n    //     if (typeof cv === 'undefined') {\n    //       const script = document.createElement('script');\n    //       script.src = 'https://docs.opencv.org/4.5.5/opencv.js';\n    //       script.async = true;\n    //       script.onload = () => {\n    //         if (typeof cv !== 'undefined') {\n    //           resolve();\n    //         } else {\n    //           reject(new Error('Failed to load OpenCV.js'));\n    //         }\n    //       }\n    //       script.onerror = (error) => {\n    //         reject(error);\n    //       }\n    //       document.head.appendChild(script);\n    //     } else {\n    //       resolve();\n    //     }\n    //   });\n    // },\n\n    onCvReady() {\n\n      // Test if some of opencv method can work.\n      if (cv) {\n        console.log(\"QHYCCD | OpenCV.js is ready.\");\n        this.SendConsoleLogMsg('OpenCV.js is ready.', 'info');\n      } else {\n        console.log(\"QHYCCD | Failed to load OpenCV.js\");\n        this.SendConsoleLogMsg('Failed to load OpenCV.js.', 'error');\n      }\n\n      this.cvReady = true;\n    },\n\n\n    loadImageToCanvasMainCamera: function () {\n      const canvas = document.getElementById('mainCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n      image.src = BackgroundImage;\n    },\n    loadImageToCanvasGuiderCamera: function () {\n      const canvas = document.getElementById('guiderCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n      image.src = BackgroundImage;\n    },\n\n\n    showGuiderCameraCanvas() {\n      // 动态更新z-index\n      this.canvasZIndexStel = -10;\n      this.canvasZIndexMainCamera = -11;\n      this.canvasZIndexGuiderCamera = 0;\n      this.$bus.$emit('setParsingProgress', false);\n\n      // this.convertToGrayscale();\n    },\n\n    showStelCanvas() {\n      if (this.isPolarAxisMode) {\n        this.$bus.$emit('setParsingProgress', true);\n      } else {\n        this.$bus.$emit('setParsingProgress', false);\n      }\n      this.canvasZIndexStel = 0;\n      this.canvasZIndexMainCamera = -10;\n      this.canvasZIndexGuiderCamera = -11;\n    },\n\n    showMainCameraCanvas() {\n      this.canvasZIndexStel = -10;\n      this.canvasZIndexMainCamera = 0;\n      this.canvasZIndexGuiderCamera = -11;\n      this.$bus.$emit('setParsingProgress', false);\n    },\n\n\n    handleButtonTestClick() {\n      // this.changeOrder();\n      if (this.currentcanvas === 'Stel') {\n        this.currentcanvas = 'MainCamera';\n        this.showMainCameraCanvas();\n      }\n      else if (this.currentcanvas === 'MainCamera') {\n        this.currentcanvas = 'GuiderCamera';\n        this.showGuiderCameraCanvas();\n      }\n      else if (this.currentcanvas === 'GuiderCamera') {\n        this.currentcanvas = 'Stel';\n        this.showStelCanvas();\n      }\n    },\n\n    getPluginsMenuItems: function () {\n      let res = []\n      for (const i in this.$stellariumWebPlugins()) {\n        const plugin = this.$stellariumWebPlugins()[i]\n        if (plugin.menuItems) {\n          res = res.concat(plugin.menuItems)\n        }\n      }\n      return res\n    },\n    getPluginsMenuComponents: function () {\n      let res = []\n      for (const i in this.$stellariumWebPlugins()) {\n        const plugin = this.$stellariumWebPlugins()[i]\n        if (plugin.menuComponents) {\n          res = res.concat(plugin.menuComponents)\n        }\n      }\n      return res\n    },\n    toggleStoreValue: function (storeVarName) {\n      this.nav = false;\n      this.$store.commit('toggleBool', storeVarName)\n    },\n    getStoreValue: function (storeVarName) {\n      return _.get(this.$store.state, storeVarName)\n    },\n    setStateFromQueryArgs: function () {\n      // Check whether the observing panel must be displayed\n      this.$store.commit('setValue', { varName: 'showSidePanel', newValue: this.$route.path.startsWith('/p/') })\n\n      // Set the core's state from URL query arguments such\n      // as date, location, view direction & fov\n      let that = this\n\n      if (!this.initDone) {\n        this.$stel.core.time_speed = 1\n        let d = new Date()\n        if (this.$route.query.date) {\n          d = new Moment(this.$route.query.date).toDate()\n          this.$stel.core.observer.utc = d.getMJD()\n          this.startTimeIsSet = true\n        }\n\n        if (this.$route.query.lng && this.$route.query.lat) {\n          const pos = { lat: Number(this.$route.query.lat), lng: Number(this.$route.query.lng), alt: this.$route.query.elev ? Number(this.$route.query.elev) : 0, accuracy: 1 }\n          swh.geoCodePosition(pos, that).then((loc) => {\n            that.$store.commit('setCurrentLocation', loc)\n          }, (error) => { console.log(error) })\n        }\n\n        this.$stel.core.observer.yaw = this.$route.query.az ? Number(this.$route.query.az) * Math.PI / 180 : 0\n        this.$stel.core.observer.pitch = this.$route.query.alt ? Number(this.$route.query.alt) * Math.PI / 180 : 30 * Math.PI / 180\n        this.$stel.core.fov = this.$route.query.fov ? Number(this.$route.query.fov) * Math.PI / 180 : 120 * Math.PI / 180\n\n        this.initDone = true\n      }\n\n      if (this.$route.path.startsWith('/skysource/')) {\n        const name = decodeURIComponent(this.$route.path.substring(11))\n        console.log('Will select object: ' + name)\n        this.SendConsoleLogMsg('Will select object: ' + name, 'info');\n        return swh.lookupSkySourceByName(name).then(ss => {\n          if (!ss) {\n            return\n          }\n          let obj = swh.skySource2SweObj(ss)\n          if (!obj) {\n            obj = this.$stel.createObj(ss.model, ss)\n            this.$selectionLayer.add(obj)\n          }\n          if (!obj) {\n            console.warning(\"Can't find object in SWE: \" + ss.names[0])\n          }\n          swh.setSweObjAsSelection(obj)\n        }, err => {\n          console.log(err)\n          console.log(\"Couldn't find skysource for name: \" + name)\n          this.SendConsoleLogMsg(\"Couldn't find skysource for name: \" + name, 'error');\n        })\n      }\n    },\n\n    lookatcircle() {\n      // glStel.core.selection = glTestCircle;\n      glStel.pointAndLock(glTestCircle);\n    },\n\n    setGloabalStel: function (stel) {\n      return stel;\n    },\n\n    setGlobalLayer: function (stel) {\n      return stel.createLayer({ id: 'testLayerStars', z: 7, visible: true });\n    },\n\n    vec3_from_sphe: function (ra_degree, dec_degree, out) {\n      const cp = Math.cos(dec_degree * Math.PI / 180);\n      out[0] = Math.cos(ra_degree * Math.PI / 180) * cp;\n      out[1] = Math.sin(ra_degree * Math.PI / 180) * cp;\n      out[2] = Math.sin(dec_degree * Math.PI / 180);\n    },\n\n    testAddCircle: function (stel, layer) {\n      console.log(\"Add a circle star near polaris\");\n\n      let circle = stel.createObj('circle', { id: 'my circle  ', model_data: {} });\n\n      circle.update();\n      layer.add(circle);\n\n      // Select\n      stel.core.selection = circle;\n      stel.pointAndLock(circle);\n\n      // Circle Property\n      let mm = circle.pos;\n      this.vec3_from_sphe(2.52971, 89.2641, mm);\n      circle.pos = mm;\n      console.log(\"circle pos:\" + mm);\n      circle.label = \"\";\n      circle.frame = 1;\n      circle.size = [0.05, 0.05];\n      circle.color = [0, 1, 0, 0.25];\n      circle.border_color = [0, 1, 0, 1];\n\n      return circle;\n    },\n\n    UpdateCirclePos(Ra_degree, Dec_degree) {\n      let mm = glTestCircle.pos;\n      this.vec3_from_sphe(Ra_degree, Dec_degree, mm);\n      glTestCircle.pos = mm;\n    },\n\n    UpdateTelescopeStatus(status) {\n      this.$bus.$emit('MountStatus', status);\n      if (status === 'Slewing') {\n        glTestCircle.color = [1, 0, 0, 0.25];\n        glTestCircle.border_color = [1, 0, 0, 1];\n      }\n      else {\n        glTestCircle.color = [0, 1, 0, 0.25];\n        glTestCircle.border_color = [0, 1, 0, 1];\n      }\n    },\n\n    UpdateMainCameraStatus(status) {\n      this.$bus.$emit('MainCameraStatus', status);\n      if (status === 'Exposuring') {\n\n      }\n      else {\n\n      }\n    },\n\n    UpdateMainCameraTemperature(value) {\n      // console.log('Main Camera Temperature:', value + '°');\n      this.$bus.$emit('MainCameraTemperature', value);\n    },\n\n    setPolarPointAltitude(Altitude) {\n      this.PolarPoint_Altitude = Altitude;\n      console.log('Polar Point Altitude:', this.PolarPoint_Altitude);\n      this.SendConsoleLogMsg('Polar Point Altitude:' + this.PolarPoint_Altitude, 'info');\n    },\n\n    AddMarkCircle: function (stel, layer, frame, label) {\n      let circle = stel.createObj('circle', { id: 'my circle  ', model_data: {} });\n\n      circle.update();\n      layer.add(circle);\n\n      // Select\n      stel.core.selection = circle;\n      stel.pointAndLock(circle);\n\n      // Circle Property\n      let mm = circle.pos;\n      this.vec3_from_sphe(2.52971, 89.2641, mm);\n      circle.pos = mm;\n      circle.label = label;\n      circle.frame = frame;\n      circle.size = [0.04, 0.04];\n      circle.color = [1, 1, 1, 0.5];\n      circle.border_color = [1, 1, 1, 1];\n\n      return circle;\n    },\n\n    AddMarkRectangle: function (stel, layer, RaDec) {\n      let line = stel.createObj('geojson', {\n        data: {\n          \"type\": \"FeatureCollection\",\n          \"features\": [\n            {\n              \"type\": \"Feature\",\n              \"properties\": {\n                \"stroke\": \"#FFFFFF\",\n                \"stroke-opacity\": 1,\n                \"fill\": \"#1E90FF\",\n                \"fill-opacity\": 0.25\n              },\n              \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                  [\n                    // [139.76, 35.52], [139.32, 33.41], [140.92, 33.08], [141.35, 35.19], [139.76, 35.52]\n                    [parseFloat(RaDec[0].Ra), parseFloat(RaDec[0].Dec)], [parseFloat(RaDec[1].Ra), parseFloat(RaDec[1].Dec)],\n                    [parseFloat(RaDec[2].Ra), parseFloat(RaDec[2].Dec)], [parseFloat(RaDec[3].Ra), parseFloat(RaDec[3].Dec)],\n                    [parseFloat(RaDec[0].Ra), parseFloat(RaDec[0].Dec)]\n                  ]\n                ]\n              }\n            },\n          ]\n        }\n      });\n\n      line.update();\n      layer.add(line);\n\n      return line;\n    },\n\n    getCiecleAzAlt(Circle) {\n      let obs = this.$stel.core.observer;\n      let cirs = this.$stel.convertFrame(obs, 'ICRF', 'CIRS', Circle.getInfo('radec'));\n      let observed = this.$stel.convertFrame(obs, 'CIRS', 'OBSERVED', cirs);\n      // const azalt = this.$stel.c2s(this.$stel.convertFrame(this.$stel.core.observer, 'ICRF', 'OBSERVED', obj.getInfo('radec')))\n      let azalt = this.$stel.c2s(observed);\n      let az = this.$stel.anp(azalt[0]);\n      let alt = this.$stel.anp(azalt[1]);\n\n      const az_raf = this.$stel.a2af(az, 1);\n      const Az_degree = (az_raf.degrees < 0 ? az_raf.degrees + 180 : az_raf.degrees) + az_raf.arcminutes / 60 + az_raf.arcseconds / 3600;\n\n      const alt_raf = this.$stel.a2af(alt, 1);\n      const Alt_degree = alt_raf.degrees + alt_raf.arcminutes / 60 + alt_raf.arcseconds / 3600;\n\n      console.log('AzAlt:', Az_degree, Alt_degree);\n\n      return { Az_degree, Alt_degree };\n    },\n\n    SolveResultMark(RaDegree, DecDegree, Azimuth, Altitude) {\n      let MarkCircle_RaDec = this.AddMarkCircle(this.$stel, glLayer, 1, \"RaDec\");\n      let mm = MarkCircle_RaDec.pos;\n      this.vec3_from_sphe(RaDegree, DecDegree, mm);\n      MarkCircle_RaDec.pos = mm;\n      console.log(\"RaDec circle coordinates:\" + mm);\n\n      const AzAlt = this.getCiecleAzAlt(MarkCircle_RaDec);\n      glLayer.remove(MarkCircle_RaDec);\n\n      this.MarkCircleNum++;\n      let Label = \"AzAlt_Vue_\" + this.MarkCircleNum;\n\n      let MarkCircle_AltAz = this.AddMarkCircle(this.$stel, glLayer, 4, Label);\n      mm = MarkCircle_AltAz.pos;\n      this.vec3_from_sphe(AzAlt.Az_degree, AzAlt.Alt_degree, mm);\n      MarkCircle_AltAz.pos = mm;\n      console.log(\"AzAlt_Vue circle coordinates:\" + mm);\n\n      console.log(\"AzAlt_Vue circle x:\" + mm[0]);\n      console.log(\"AzAlt_Vue circle y:\" + mm[1]);\n      console.log(\"AzAlt_Vue circle z:\" + mm[2]);\n\n      this.LastPoint_AzAlt = this.getCiecleAzAlt(MarkCircle_AltAz);\n\n      this.CalculationPolarPoint(mm);\n\n      // 将创建的圆存储到数组中\n      // this.Circles.push(MarkCircle_RaDec);\n      this.Circles.push(MarkCircle_AltAz);\n\n    },\n\n    RemoveAllCircles() {\n      this.Circles.forEach(circle => {\n        glLayer.remove(circle);\n      });\n      this.Circles = [];\n    },\n\n    SolveResultMark_RealTime(RaDegree, DecDegree, Azimuth, Altitude) {\n      this.LastCircle_RaDec = this.AddMarkCircle(this.$stel, glLayer, 1, \"RaDec\");\n      let mm = this.LastCircle_RaDec.pos;\n      this.vec3_from_sphe(RaDegree, DecDegree, mm);\n      this.LastCircle_RaDec.pos = mm;\n      console.log(\"RaDec circle coordinates:\" + mm);\n\n      const AzAlt = this.getCiecleAzAlt(this.LastCircle_RaDec);\n      glLayer.remove(this.LastCircle_RaDec);\n\n      if (this.LastCircle_AzAlt !== null && this.LastCircle_AzAlt !== undefined) {\n        glLayer.remove(this.LastCircle_AzAlt);\n      }\n      this.LastCircle_AzAlt = this.AddMarkCircle(this.$stel, glLayer, 4, 'Current');\n      mm = this.LastCircle_AzAlt.pos;\n      this.vec3_from_sphe(AzAlt.Az_degree, AzAlt.Alt_degree, mm);\n      this.LastCircle_AzAlt.pos = mm;\n      this.LastCircle_AzAlt.color = [0, 1, 1, 0.25];\n      console.log(\"AzAlt_Vue circle coordinates:\" + mm);\n\n      console.log(\"AzAlt_Vue circle x:\" + mm[0]);\n      console.log(\"AzAlt_Vue circle y:\" + mm[1]);\n      console.log(\"AzAlt_Vue circle z:\" + mm[2]);\n\n      this.Current_AzAlt = this.getCiecleAzAlt(this.LastCircle_AzAlt);\n      console.log(\"Current AzAlt:\", this.Current_AzAlt.Az_degree, this.Current_AzAlt.Alt_degree);\n      this.$bus.$emit('ShowCurrentAzAltText', this.Current_AzAlt.Az_degree, this.Current_AzAlt.Alt_degree);\n    },\n\n\n    CalculationPolarPoint(coordinate) {\n      this.CartesianList.push(coordinate);\n\n      if (this.CartesianList.length < 3) {\n        return;\n      }\n\n      this.$bus.$emit('HideSingleSolveBtn');\n\n      // 获取三个点的坐标\n      const p1 = this.CartesianList[0];\n      const p2 = this.CartesianList[1];\n      const p3 = this.CartesianList[2];\n\n      // 计算两个向量\n      const v1 = [\n        p2[0] - p1[0],\n        p2[1] - p1[1],\n        p2[2] - p1[2]\n      ];\n\n      const v2 = [\n        p3[0] - p1[0],\n        p3[1] - p1[1],\n        p3[2] - p1[2]\n      ];\n\n      // 计算法向量\n      const normal = [\n        v1[1] * v2[2] - v1[2] * v2[1],\n        v1[2] * v2[0] - v1[0] * v2[2],\n        v1[0] * v2[1] - v1[1] * v2[0]\n      ];\n\n      // 计算法向量的长度\n      const normalLength = Math.sqrt(normal[0] ** 2 + normal[1] ** 2 + normal[2] ** 2);\n\n      // 归一化法向量\n      const unitNormal = [\n        normal[0] / normalLength,\n        normal[1] / normalLength,\n        normal[2] / normalLength\n      ];\n\n      // 假设球的半径为r，圆心为(0, 0, 0)\n      const r = 1; // 根据你的实际情况调整\n\n      // 计算与球面的交点\n      const intersection1 = [\n        unitNormal[0] * r,\n        unitNormal[1] * r,\n        unitNormal[2] * r\n      ];\n\n      const intersection2 = [\n        -unitNormal[0] * r,\n        -unitNormal[1] * r,\n        -unitNormal[2] * r\n      ];\n\n      console.log('Intersection Points:', intersection1, intersection2);\n\n      // 选择离(0,0,1)更近的交点\n      const closerIntersection = intersection1[2] > 0 ? intersection1 : intersection2;\n\n      let MarkCircle_FakePolarPoint = this.AddMarkCircle(this.$stel, glLayer, 4, \"FakePolarPoint\");\n      let mm = MarkCircle_FakePolarPoint.pos;\n      mm[0] = closerIntersection[0];\n      mm[1] = closerIntersection[1];\n      mm[2] = closerIntersection[2];\n      MarkCircle_FakePolarPoint.pos = mm;\n      console.log(\"FakePolarPoint circle coordinates:\" + mm);\n\n      const AzAlt_FakePolarPoint = this.getCiecleAzAlt(MarkCircle_FakePolarPoint);\n\n      console.log(\"Fake Polar Point AzAlt:\", AzAlt_FakePolarPoint.Az_degree, ',', AzAlt_FakePolarPoint.Alt_degree);\n\n      this.Circles.push(MarkCircle_FakePolarPoint);\n\n      let AzAlt_PolarPoint = {\n        Az_degree: 0,\n        Alt_degree: this.PolarPoint_Altitude\n      };\n\n      // console.log(\"Real Polar Point AzAlt:\", AzAlt_PolarPoint.Az_degree, ',', AzAlt_PolarPoint.Alt_degree);\n      this.SendConsoleLogMsg('Real Polar Point AzAlt:' + AzAlt_PolarPoint.Az_degree + ',' + AzAlt_PolarPoint.Alt_degree, 'info');\n      // console.log(\"Last Point AzAlt:\", this.LastPoint_AzAlt.Az_degree, this.LastPoint_AzAlt.Alt_degree);\n      this.SendConsoleLogMsg('Last Point AzAlt:' + this.LastPoint_AzAlt.Az_degree + ',' + this.LastPoint_AzAlt.Alt_degree, 'info');\n\n      ////////////////////////////////////////////////\n\n      // // 将球坐标转换为笛卡尔坐标\n      // let fakePolarPoint = this.sphericalToCartesian(AzAlt_FakePolarPoint.Az_degree, AzAlt_FakePolarPoint.Alt_degree);\n      // let polarPoint = this.sphericalToCartesian(AzAlt_PolarPoint.Az_degree, AzAlt_PolarPoint.Alt_degree);\n      // let lastPoint = this.sphericalToCartesian(this.LastPoint_AzAlt.Az_degree, this.LastPoint_AzAlt.Alt_degree);\n\n      // // 计算旋转四元数\n      // let quaternion = this.computeQuaternion(fakePolarPoint, polarPoint);\n\n      // // 应用旋转\n      // let fourthPoint = this.applyQuaternion(lastPoint, quaternion);\n\n      // // 将结果转换回球坐标\n      // let fourthPointAzAlt = this.cartesianToSpherical(fourthPoint);\n      // console.log(\"Fourth Point AzAlt:\", fourthPointAzAlt.Az_degree, ',', fourthPointAzAlt.Alt_degree);\n\n      ////////////////////////////////////////////////\n\n      // 计算角度差值，考虑角度的循环性质\n      function calculateAngleDifference(angle1, angle2) {\n        let difference = angle2 - angle1;\n        while (difference > 180) difference -= 360;\n        while (difference < -180) difference += 360;\n        return difference;\n      }\n\n      let azimuthDifference = calculateAngleDifference(AzAlt_FakePolarPoint.Az_degree, AzAlt_PolarPoint.Az_degree);\n      let altitudeDifference = AzAlt_PolarPoint.Alt_degree - AzAlt_FakePolarPoint.Alt_degree;\n\n      // 应用差值到LastPoint\n      let fourthPointAzAlt = {\n        Az_degree: this.LastPoint_AzAlt.Az_degree + azimuthDifference,\n        Alt_degree: this.LastPoint_AzAlt.Alt_degree + altitudeDifference\n      };\n\n      // 确保方位角在0到360度之间\n      fourthPointAzAlt.Az_degree = (fourthPointAzAlt.Az_degree + 360) % 360;\n\n      // 确保高度角在-90到90度之间\n      fourthPointAzAlt.Alt_degree = Math.max(Math.min(fourthPointAzAlt.Alt_degree, 90), -90);\n\n      console.log(\"Fourth Point AzAlt:\", fourthPointAzAlt.Az_degree, ',', fourthPointAzAlt.Alt_degree);\n\n      this.$bus.$emit('ShowAzAltText', azimuthDifference, altitudeDifference, fourthPointAzAlt.Az_degree, fourthPointAzAlt.Alt_degree);\n\n      ////////////////////////////////////////////////\n\n      // 将角度转换为弧度\n      function degreesToRadians(degrees) {\n        return degrees * Math.PI / 180;\n      }\n\n      // 将球坐标转换为笛卡尔坐标\n      function sphericalToCartesian(azimuth, altitude) {\n        let az = degreesToRadians(azimuth);\n        let alt = degreesToRadians(altitude);\n        let x = Math.cos(alt) * Math.cos(az);\n        let y = Math.cos(alt) * Math.sin(az);\n        let z = Math.sin(alt);\n        return { x: x, y: y, z: z };\n      }\n\n      // 将第四个点转换为笛卡尔坐标\n      let fourthPointCartesian = sphericalToCartesian(fourthPointAzAlt.Az_degree, fourthPointAzAlt.Alt_degree);\n      console.log(\"Fourth Point Cartesian:\", fourthPointCartesian.x, ',', fourthPointCartesian.y, ',', fourthPointCartesian.z);\n\n      let MarkCircle_fourthPoint = this.AddMarkCircle(this.$stel, glLayer, 4, \"Target Point\");\n      mm = MarkCircle_fourthPoint.pos;\n      mm[0] = fourthPointCartesian.x;\n      mm[1] = fourthPointCartesian.y;\n      mm[2] = fourthPointCartesian.z;\n      MarkCircle_fourthPoint.pos = mm;\n      MarkCircle_fourthPoint.color = [1, 0, 0, 0.25];\n\n      this.Circles.push(MarkCircle_fourthPoint);\n\n      // 清空列表，准备下次计算\n      this.CartesianList = [];\n      this.MarkCircleNum = 0;\n    },\n\n    // 将角度转换为弧度\n    degreesToRadians(degrees) {\n      return degrees * Math.PI / 180;\n    },\n\n    // 将球坐标转换为笛卡尔坐标\n    sphericalToCartesian(azimuth, altitude) {\n      let az = this.degreesToRadians(azimuth);\n      let alt = this.degreesToRadians(altitude);\n      let x = Math.cos(alt) * Math.cos(az);\n      let y = Math.cos(alt) * Math.sin(az);\n      let z = Math.sin(alt);\n      return { x: x, y: y, z: z };\n    },\n\n    // 计算旋转四元数\n    computeQuaternion(from, to) {\n      let w = from.x * to.x + from.y * to.y + from.z * to.z + 1;\n      let x = from.y * to.z - from.z * to.y;\n      let y = from.z * to.x - from.x * to.z;\n      let z = from.x * to.y - from.y * to.x;\n\n      let norm = Math.sqrt(w * w + x * x + y * y + z * z);\n      return { w: w / norm, x: x / norm, y: y / norm, z: z / norm };\n    },\n\n    // 应用四元数旋转\n    applyQuaternion(point, quat) {\n      let x = quat.w * quat.w * point.x + 2 * quat.y * quat.w * point.z - 2 * quat.z * quat.w * point.y + quat.x * quat.x * point.x + 2 * quat.y * quat.x * point.y + 2 * quat.z * quat.x * point.z - quat.z * quat.z * point.x - quat.y * quat.y * point.x;\n      let y = 2 * quat.x * quat.y * point.x + quat.y * quat.y * point.y + 2 * quat.z * quat.y * point.z + 2 * quat.w * quat.z * point.x - quat.z * quat.z * point.y + quat.w * quat.w * point.y - 2 * quat.x * quat.w * point.z - quat.x * quat.x * point.y;\n      let z = 2 * quat.x * quat.z * point.x + 2 * quat.y * quat.z * point.y + quat.z * quat.z * point.z - 2 * quat.w * quat.y * point.x - quat.y * quat.y * point.z + 2 * quat.w * quat.x * point.y - quat.x * quat.x * point.z + quat.w * quat.w * point.z;\n      return { x: x, y: y, z: z };\n    },\n\n    // 将笛卡尔坐标转换回球坐标\n    cartesianToSpherical(cartesian) {\n      let r = Math.sqrt(cartesian.x ** 2 + cartesian.y ** 2 + cartesian.z ** 2);\n      let azimuth = Math.atan2(cartesian.y, cartesian.x);\n      let altitude = Math.asin(cartesian.z / r);\n      return {\n        Az_degree: azimuth * 180 / Math.PI,\n        Alt_degree: altitude * 180 / Math.PI\n      };\n    },\n\n    SolveFovMark(RaDec) {\n      console.log('RaDec[4]:', RaDec);\n\n      let rectangle = this.AddMarkRectangle(this.$stel, glLayer, RaDec);\n\n      this.Circles.push(rectangle);\n\n    },\n\n    CalibratePolarAxis() {\n      this.$bus.$emit('CalibratePolarAxisMode');\n      // this.$bus.$emit('AppSendMessage', 'Vue_Command', 'StartLoopCapture');\n      this.nav = false;\n    },\n\n    RecalibratePolarAxis() {\n      // 清空列表，准备下次计算\n      this.CartesianList = [];\n      this.MarkCircleNum = 0;\n      this.RemoveAllCircles();\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ClearSloveResultList');\n    },\n\n    ShowConfirmDialog(Title, Text, ToDo) {\n      // window.location.reload();\n      this.nav = false;\n      this.$bus.$emit('ShowConfirmDialog', Title, Text, ToDo);\n    },\n\n    decrement(item) {\n      console.log('decrement:', item.value);\n      if (item.value > item.inputMin) {\n        item.value -= item.inputStep;\n      }\n    },\n\n    increment(item) {\n      console.log('increment:', item.value);\n      if (item.value < item.inputMax) {\n        item.value += item.inputStep;\n      }\n    },\n\n    PolarAxisMode(bool) {\n      this.isPolarAxisMode = bool;\n    },\n\n    handleGuiderCanvasClick(event) {\n      const canvas = this.$refs.guiderCanvas;\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left; // 点击坐标X\n      const y = event.clientY - rect.top;  // 点击坐标Y\n      console.log(`Clicked at: (${x}, ${y})`);\n      const CanvasWidth = window.innerWidth;\n      const CanvasHeight = window.innerHeight;\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderCanvasClick:' + CanvasWidth + ':' + CanvasHeight + ':' + x + ':' + y);\n    },\n    connectDriver() {\n      this.isConnecting = true;\n      // this.isOpenDevicePage = false;\n      this.startLoading();\n      const DeviceType = this.CurrentDriverType;\n      for (const device of this.devices) {\n        if (device.driverType === DeviceType && device.isConnected == false) {\n          const DriverName = device.driverName;\n          if (DriverName == '') {\n            this.SendConsoleLogMsg('No driver selected', 'warning');\n            this.isConnecting = false;\n            return;\n          }\n          this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConnectDriver:' + DriverName + ':' + DeviceType);\n          this.SendConsoleLogMsg('Start Connecting driver:' + DeviceType + ' ' + DriverName, 'info');\n          return;\n        }\n      }\n    },\n    connectDriverSuccess(devicetype) {\n      console.log('connectDriverSuccess:', devicetype);\n      this.SendConsoleLogMsg(\"connectDriverSuccess:\" + devicetype, 'info');\n      this.isConnecting = false;\n      if (this.drawer_2 == true) {\n        this.drawer_2 = false\n      }\n\n      this.stopLoading();\n    },\n    connectDriverFailed(message) {\n      console.log('connectDriverFailed:', message);\n      this.SendConsoleLogMsg(\"connectDriverFailed:\" + message, 'error');\n      this.isConnecting = false;\n      this.stopLoading();\n    },\n    disconnectDriver() {\n      const DeviceType = this.CurrentDriverType;\n      for (const device of this.devices) {\n        if (device.driverType === DeviceType && device.isConnected) {\n          this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DisconnectDevice:' + device.device + \":\" + DeviceType);\n        }\n      }\n    },\n    disconnectDriversuccess(devicetype) {\n      console.log('disconnectDevicesuccess:', devicetype);\n      this.drawer_2 = false\n      if (devicetype == \"all\") {\n        this.sendMessage('Vue_Command', 'disconnectAllDevice');\n        this.SendConsoleLogMsg('Disconnect All Device', 'info');\n        this.haveDeviceConnect = false;\n        this.$bus.$emit('MainCameraConnected', 0);\n        this.$bus.$emit('MountConnected', 0);\n        this.$bus.$emit('CFWConnected', 0);\n        this.$bus.$emit('GuiderConnected', 0);\n        this.claerDeviceList();\n        this.$bus.$emit('deleteDeviceTypeAllocationList', 'all');\n        return;\n      };\n\n      for (const device of this.devices) {\n        if (device.driverType === devicetype && device.isConnected) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n      for (const device of this.ToBeConnectDevice) {\n        if (device.driverType === devicetype) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n\n      this.$bus.$emit('deleteDeviceTypeAllocationList', devicetype);\n      if (devicetype == \"MainCamera\") {\n        this.$bus.$emit('MainCameraConnected', 0);\n      } else if (devicetype == \"Mount\") {\n        this.$bus.$emit('MountConnected', 0);\n      } else if (devicetype == \"CFW\") {\n        this.$bus.$emit('CFWConnected', 0);\n      } else if (devicetype == \"Guider\") {\n        this.$bus.$emit('GuiderConnected', 0);\n      }\n    },\n\n    disconnectDriverFail(devicetype) {\n      console.log('disconnectDeviceFail:', devicetype);\n      this.drawer_2 = false\n      if (devicetype == \"all\") {\n        this.sendMessage('Vue_Command', 'disconnectAllDevice');\n        this.SendConsoleLogMsg('Disconnect All Device', 'info');\n        this.haveDeviceConnect = false;\n        this.$bus.$emit('MainCameraConnected', 0);\n        this.$bus.$emit('MountConnected', 0);\n        this.$bus.$emit('CFWConnected', 0);\n        this.$bus.$emit('GuiderConnected', 0);\n        this.claerDeviceList();\n        this.$bus.$emit('deleteDeviceTypeAllocationList', 'all');\n        return;\n      };\n\n      for (const device of this.devices) {\n        if (device.driverType === devicetype && device.isConnected) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n      for (const device of this.ToBeConnectDevice) {\n        if (device.driverType === devicetype) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n\n      this.$bus.$emit('deleteDeviceTypeAllocationList', devicetype);\n      if (devicetype == \"MainCamera\") {\n        this.$bus.$emit('MainCameraConnected', 0);\n      } else if (devicetype == \"Mount\") {\n        this.$bus.$emit('MountConnected', 0);\n      } else if (devicetype == \"CFW\") {\n        this.$bus.$emit('CFWConnected', 0);\n      } else if (devicetype == \"Guider\") {\n        this.$bus.$emit('GuiderConnected', 0);\n      }\n    },\n    loadSelectedDriverList(deviceObject) {\n      console.log('loadSelectedDriverList:', deviceObject);\n      deviceObject.forEach(device => {\n        // 假设你想要打印每个设备对象的键值对\n        for (const [driverType, driverName] of Object.entries(device)) {\n          this.devices.forEach(device => {\n            if (device.driverType === driverType && device.isConnected == false) {\n              device.device = driverName;\n              device.driverName = driverName;\n            }\n          });\n        }\n      });\n    },\n    loadBindDeviceList(deviceObject) {\n      console.log('loadBindDeviceList:', deviceObject);\n      this.$bus.$emit('loadBindDeviceList', deviceObject);\n\n    },\n    loadBindDeviceTypeList(deviceTypeObject) {\n      console.log('loadBindDeviceTypeList:', deviceTypeObject);\n      this.$bus.$emit('loadBindDeviceTypeList', deviceTypeObject);\n      deviceTypeObject.forEach(deviceType => {\n        const { Type, DeviceName, DriverName, isbind } = deviceType;\n        this.updateDevicesConnect(Type, DeviceName, DriverName, isbind);\n      });\n    },\n    updateSelectedDriver(driverType) {\n\n      this.selectedDriver = null;\n      this.devices.forEach(device => {\n        if (device.driverType === driverType) {\n          this.selectedDriver = device.driverName\n        }\n      });\n      console.log('Current drivers:', this.selectedDriver);\n    },\n    startLoading() {\n      this.loadingDeviceSelection = true;\n    },\n    stopLoading() {\n      this.loadingDeviceSelection = false;\n    },\n    deleteDeviceAllocationList(deviceName) {\n      console.log('deleteDeviceAllocationList:', deviceName);\n      this.$bus.$emit('deleteDeviceAllocationList', deviceName);\n    },\n    UnBindingDevice(type, name, driverName) {\n      console.log('UnBindingDevice:', type, name, driverName);\n      this.updateDevicesConnect(type, name, driverName, false);\n    },\n\n    displayErrorImage() {\n      console.error(\"image is error, load errorImage.svg\");\n      const canvas = document.getElementById('mainCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n\n      image.onerror = () => {\n        console.error(\"Failed to load image from \" + image.src);\n        // 可以在这里添加备用图像或其他错误处理逻辑\n      };\n\n      // 确保ErrorImage是有效的URL\n      image.src = ErrorImage; // 请替换为实际的图像路径\n    },\n    handleError(message, location, error = null) {\n      const errorMsg = error ? `${message} at ${location}: ${error}` : `${message} at ${location}`;\n      console.error(errorMsg);\n      this.SendConsoleLogMsg(errorMsg, 'error');\n      this.displayErrorImage(); // 显示错误图像\n    },\n    showSelectdisconnectDriver(drivername) {\n      this.showDisconnectDialog = true;\n      this.currentDisconnectDriverName = drivername;\n    },\n    confirmDisconnect() {\n      this.sendMessage('Vue_Command', 'disconnectSelectDriver:' + this.currentDisconnectDriverName);\n      this.showDisconnectDialog = false;\n    },\n\n    // 主画布点击事件\n    handleMainCanvasClick(event) {\n      // this.SendConsoleLogMsg('触发鼠标点击事件:', 'info');\n      if (!this.enableMainCanvasClick || this.isDragging || this.drawImgData == null) return; // 如果画布不可点击，则不处理点击事件\n      // console.log('触发鼠标点击事件:', event);\n      const canvas = this.$refs.mainCanvas;\n      if (!canvas) return; // 确保 canvas 元素存在\n      const rect = canvas.getBoundingClientRect();// 获取 canvas 元素的边界矩形\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      console.log('Mouse clicked at:', x, y);\n      if (!this.isFocusLoopShooting) {\n        this.ROI_x = (x / window.innerWidth * this.visibleWidth - this.RedBoxSideLength / 2) + this.visibleX - this.visibleWidth / 2;  // 计算ROI的x坐标\n        this.ROI_y = (y / window.innerHeight * this.visibleHeight - this.RedBoxSideLength / 2) + this.visibleY - this.visibleHeight / 2; // 计算ROI的y坐标\n        // this.$bus.$emit('setRedBoxPosition', x, y, this.ROI_x, this.ROI_y);\n      } else {\n        this.selectStarX = (x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2 - this.ROI_x; // 计算选择位置的x坐标\n        this.selectStarY = (y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2 - this.ROI_y; // 计算选择位置的y坐标\n\n        if (this.selectStarX >= 0 && this.selectStarX < this.RedBoxSideLength &&\n          this.selectStarY >= 0 && this.selectStarY < this.RedBoxSideLength) {\n          this.SendConsoleLogMsg('Select Star is in ROI', 'info');\n        } else {\n          this.SendConsoleLogMsg('Select Star is not in ROI', 'error');\n          this.selectStarX = -1;\n          this.selectStarY = -1;\n        }\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendSelectStars:' + this.selectStarX + ':' + this.selectStarY);\n      }\n      this.drawImageData();\n    },\n\n    // 主画布拖动\n    handleMouseDown(event) {\n      // this.SendConsoleLogMsg('触发鼠标按下事件:', 'info');\n      if (this.isDragging || this.drawImgData == null) return;\n      this.isDragging = true;\n      this.startX = event.clientX;\n      this.startY = event.clientY;\n      this.currentX = event.clientX;\n      this.currentY = event.clientY;\n\n      // 设置一个定时器，每100ms执行一次鼠标移动的逻辑\n      this.moveIntervalId = setInterval(() => {\n        if (!this.isDragging) return;\n\n        const dx = this.startX - this.currentX;\n        const dy = this.startY - this.currentY;\n        if (isNaN(dx) || isNaN(dy)) {\n          return;\n        }\n        let newVisibleX = this.visibleX + dx / window.innerWidth * this.visibleWidth;\n        let newVisibleY = this.visibleY + dy / window.innerHeight * this.visibleHeight;\n        if (newVisibleX < 0) {\n          newVisibleX = 0;\n        }\n        if (newVisibleY < 0) {\n          newVisibleY = 0;\n        }\n        if (newVisibleX > this.mainCameraSizeX) {\n          newVisibleX = this.mainCameraSizeX;\n        }\n        if (newVisibleY > this.mainCameraSizeY) {\n          newVisibleY = this.mainCameraSizeY;\n        }\n\n        this.visibleX = newVisibleX;\n        this.visibleY = newVisibleY;\n\n        this.startX = this.currentX;\n        this.startY = this.currentY;\n        this.drawImageData();\n        // this.SendConsoleLogMsg('拖动事件,拖动距离:' + dx + ',' + dy, 'info');\n      }, 100);\n    },\n    handleMouseMove(event) {\n      // this.SendConsoleLogMsg('触发鼠标移动事件:', 'info');\n      if (!this.isDragging) return;\n      this.currentX = event.clientX;\n      this.currentY = event.clientY;\n    },\n    handleMouseUp(event) {\n      // this.SendConsoleLogMsg('触发鼠标抬起事件:', 'info');\n      this.isDragging = false;\n\n      // 清除定时器\n      clearInterval(this.moveIntervalId);\n      this.moveIntervalId = null;\n    },\n    handleWheel(event) {\n      // this.SendConsoleLogMsg('触发鼠标滚轮事件:', 'info');\n      if (this.drawImgData == null) return;\n      const scaleChange = event.deltaY > 0 ? 0.1 : -0.1; // 根据滚轮的滚动方向，计算缩放比例的变化量\n      let newScale = this.scale + scaleChange; // 更新缩放比例\n      if (newScale < 0.1) {\n        newScale = 0.1;\n      }\n      if (newScale > 1) {\n        newScale = 1;\n      }\n\n      // 如果已经有一个待执行的缩放操作，则直接返回\n      if (this.pendingScaleChange) {\n        return;\n      }\n\n      // 标记有一个待执行的缩放操作\n      this.pendingScaleChange = true;\n\n      // 使用 requestAnimationFrame 来控制缩放操作的执行频率\n      requestAnimationFrame(() => {\n        if (newScale != this.scale) {\n          this.scale = newScale; // 更新缩放比例\n          this.$bus.$emit('setScale', this.scale);\n          this.drawImageData();\n          this.SendConsoleLogMsg('缩放比例变化,缩放比例:' + newScale, 'info');\n        } else {\n          this.SendConsoleLogMsg('缩放比例没有变化,缩放比例:' + this.scale, 'info');\n        }\n        this.pendingScaleChange = false; // 清除待执行的缩放操作标记\n      });\n    },\n\n    handleMainCanvasTouch(event) {\n      // this.SendConsoleLogMsg('触发触摸事件:', 'info');\n      if (!this.enableMainCanvasClick || this.isDragging || this.drawImgData == null) return; // 如果画布不可点击，则不处理点击事件\n      // console.log('触发触摸事件:', event);\n      if (!this.enableMainCanvasClick || !event.touches || event.touches.length === 0) return;\n      const canvas = this.$refs.mainCanvas;\n      if (!canvas) return; // 确保 canvas 元素存在\n      const touch = event.touches[0];\n      const rect = canvas.getBoundingClientRect();// 获取 canvas 元素的边界矩形\n      const x = touch.clientX - rect.left;\n      const y = touch.clientY - rect.top;\n      console.log('Touch at:', x, y);\n      event.preventDefault();// 阻止默认事件，如页面滚动\n      if (!this.isFocusLoopShooting) {\n        this.ROI_x = (x / window.innerWidth * this.visibleWidth - this.RedBoxSideLength / 2) + this.visibleX - this.visibleWidth / 2 - this.ROI_x;  // 计算ROI的x坐标\n        this.ROI_y = (y / window.innerHeight * this.visibleHeight - this.RedBoxSideLength / 2) + this.visibleY - this.visibleHeight / 2 - this.ROI_y; // 计算ROI的y坐标\n        // this.$bus.$emit('setRedBoxPosition', x, y, this.ROI_x, this.ROI_y);\n      } else {\n        this.selectStarX = (x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2 - this.ROI_x; // 计算选择位置的x坐标\n        this.selectStarY = (y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2 - this.ROI_y; // 计算选择位置的y坐标\n\n        if (this.selectStarX >= 0 && this.selectStarX < this.RedBoxSideLength &&\n          this.selectStarY >= 0 && this.selectStarY < this.RedBoxSideLength) {\n          this.SendConsoleLogMsg('Select Star is in ROI', 'info');\n        } else {\n          this.SendConsoleLogMsg('Select Star is not in ROI', 'error');\n          this.selectStarX = -1;\n          this.selectStarY = -1;\n        }\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendSelectStars:' + this.selectStarX + ':' + this.selectStarY);\n      }\n      this.drawImageData();\n    },\n    handleTouchStart(event) {\n      if (this.drawImgData == null) return;\n      // this.SendConsoleLogMsg('触发触摸开始事件:', 'info');\n      if (event.touches.length === 1) { // 单指触摸，开始拖动\n        this.isOneTouch = true;\n        // this.SendConsoleLogMsg('触发单指触摸事件', 'info');\n        this.isDragging = true;\n        this.startTouchX[0] = event.touches[0].clientX;\n        this.startTouchY[0] = event.touches[0].clientY;\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        // 清除可能存在的双指触摸的定时器\n        if (this.zoomIntervalId) {\n          clearInterval(this.zoomIntervalId);\n          this.zoomIntervalId = null;\n        }\n\n\n        this.handleMainCanvasTouch(event);\n      } else if (event.touches.length >= 2) { // 双指触摸，开始缩放\n        this.isOneTouch = false;\n        // this.SendConsoleLogMsg('触发双指触摸事件', 'info');\n        this.isDragging = true;\n        // 计算两个触摸点之间的距离\n        const dx = this.currentTouchX[0] - this.currentTouchX[1];\n        const dy = this.currentTouchY[0] - this.currentTouchY[1];\n        this.startTouchDistance = Math.sqrt(dx * dx + dy * dy);\n        // 清除可能存在的单指触摸的定时器\n        if (this.moveIntervalId) {\n          clearInterval(this.moveIntervalId);\n          this.moveIntervalId = null;\n        }\n\n\n      } else {\n        // this.SendConsoleLogMsg('触发多指触摸事件，获取当前触摸点数量:' + event.touches.length, 'info');\n      }\n      \n    },\n\n    handleTouchMove(event) {\n      // this.SendConsoleLogMsg('触发触摸移动事件:', 'info');\n      if (!this.isDragging || this.drawImgData == null) return;\n      if (event.touches.length == 1) {\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        if (this.zoomIntervalId) {\n          clearInterval(this.zoomIntervalId);\n          this.zoomIntervalId = null;\n        }\n        if (this.moveIntervalId != null) {\n          return;\n        }\n        // 设置一个定时器，每100ms执行一次触摸移动的逻辑\n        this.moveIntervalId = setInterval(() => {\n          // console.log('执行触摸移动!');\n          if (!this.isDragging || !this.isOneTouch) return;\n\n          const dx = this.startTouchX[0] - this.currentTouchX[0];\n          const dy = this.startTouchY[0] - this.currentTouchY[0];\n          if (isNaN(dx) || isNaN(dy)) {\n            return;\n          }\n          if (dx == 0 && dy == 0) {\n            return;\n          }\n\n          let newVisibleX = this.visibleX + dx / window.innerWidth * this.visibleWidth;\n          let newVisibleY = this.visibleY + dy / window.innerHeight * this.visibleHeight;\n          if (newVisibleX < 0) {\n            newVisibleX = 0;\n          }\n          if (newVisibleY < 0) {\n            newVisibleY = 0;\n          }\n          if (newVisibleX > this.mainCameraSizeX) {\n            newVisibleX = this.mainCameraSizeX;\n          }\n          if (newVisibleY > this.mainCameraSizeY) {\n            newVisibleY = this.mainCameraSizeY;\n          }\n\n          this.visibleX = newVisibleX;\n          this.visibleY = newVisibleY;\n\n          this.startTouchX[0] = this.currentTouchX[0];\n          this.startTouchY[0] = this.currentTouchY[0];\n\n          this.drawImageData();\n        }, 100);\n\n      } else if (event.touches.length >= 2) {\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        this.currentTouchX[1] = event.touches[1].clientX;\n        this.currentTouchY[1] = event.touches[1].clientY;\n\n        // 清除可能存在的单指触摸的定时器\n        if (this.moveIntervalId) {\n          clearInterval(this.moveIntervalId);\n          this.moveIntervalId = null;\n        }\n        if (this.zoomIntervalId != null) {\n          return;\n        }\n        // 设置一个定时器，每100ms执行一次缩放逻辑\n        this.zoomIntervalId = setInterval(() => {\n          if (!this.isDragging || !this.isOneTouch) return;\n          const dx = this.currentTouchX[0] - this.currentTouchX[1];\n          const dy = this.currentTouchY[0] - this.currentTouchY[1];\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          this.SendConsoleLogMsg('距离变化 distance:' + distance, 'info');\n          if (this.startTouchDistance == 0) {\n            this.startTouchDistance = distance;\n          }\n          // 计算缩放比例的变化量\n          const scaleChange = distance / this.startTouchDistance;\n          this.SendConsoleLogMsg('距离变化比例 scaleChange:' + scaleChange, 'info');\n          let newScale = this.scale * scaleChange; // 更新缩放比例\n          if (newScale < 0.1) {\n            newScale = 0.1;\n          }\n          if (newScale > 1) {\n            newScale = 1;\n          }\n          if (newScale != this.scale) {\n            this.SendConsoleLogMsg('缩放比例变化,缩放比例:' + newScale, 'info');\n            this.scale = newScale; // 更新缩放比例\n            this.$bus.$emit('setScale', this.scale);\n            this.drawImageData();\n          } else {\n            this.SendConsoleLogMsg('缩放比例没有变化,缩放比例:' + this.scale, 'info');\n          }\n          this.startTouchDistance = distance; // 更新两个触摸点之间的距离\n        }, 100);\n      } else {\n        this.SendConsoleLogMsg('触发多指触摸事件，获取当前触摸点数量:' + event.touches.length, 'info');\n      }\n    },\n\n    handleTouchEnd(event) {\n      // this.SendConsoleLogMsg('触发触摸结束事件:', 'info');\n      this.isDragging = false; // 停止拖动\n      // 清除定时器\n      if (this.moveIntervalId) {\n        clearInterval(this.moveIntervalId);\n        this.moveIntervalId = null;\n      }\n      if (this.zoomIntervalId) {\n        clearInterval(this.zoomIntervalId);\n        this.zoomIntervalId = null;\n      }\n    },\n\n    ScaleChange(type) {\n      if (this.drawImgData == null) return;\n      if (type == '+') {\n        this.scale -= 0.1;\n      } else if (type == '-') {\n        this.scale += 0.1;\n      }\n      if (this.scale < 0.1) {\n        this.scale = 0.1;\n      }\n      if (this.scale > 1) {\n        this.scale = 1;\n      }\n      this.$bus.$emit('setScale', this.scale);\n      this.drawImageData();\n    },\n\n    // 显示ROI图像\n    showRoiImage(fileName, destX, destY) {\n      if (this.RedBoxSideLength == 0 || this.RedBoxSideLength == null) {\n        this.SendConsoleLogMsg('RedBoxSideLength is 0 or null', 'error');\n        return;\n      }\n      if (this.isProcessingImage) {\n        this.SendConsoleLogMsg('Image is being transmitted, current processing is slow, skipping one frame.', 'warning');\n        return;\n      }\n      this.isProcessingImage = true;\n      const imagePath = 'img/' + fileName;\n      // 创建一个AbortController实例来取消fetch请求\n      const fetchController = new AbortController();\n      const fetchSignal = fetchController.signal;\n\n      // 使用 fetch API 获取二进制数据\n      fetch(imagePath, { cache: 'no-store', signal: fetchSignal })\n        .then(response => response.arrayBuffer())\n        .then(buffer => {\n          let src, originalImg8, imgData, awbImg;\n          try {\n            const uint16Array = new Uint16Array(buffer);\n            // 创建一个空的 Mat 对象\n            src = new cv.Mat(this.RedBoxSideLength, this.RedBoxSideLength, cv.CV_16UC1);\n            src.data16U.set(uint16Array);\n            cv.cvtColor(src, src, this.lastImageProcessParams.cvmode);\n            originalImg8 = this.Bit16To8_Stretch(src, this.lastImageProcessParams.B, this.lastImageProcessParams.W);\n\n            src.delete(); // 释放原始的 Mat 对象\n            src = null; // 添加这行代码，确保 src 对象被清理\n\n            awbImg = this.ImageSoftAWB(originalImg8, this.lastImageProcessParams.gainR, this.lastImageProcessParams.gainB, this.lastImageProcessParams.offset);\n            originalImg8.delete(); // 释放 Mat 对象\n            originalImg8 = null; // 添加这行代码，确保 originalImg8 对象被清理\n\n            // 将 Mat 对象转换回 ImageData 对象\n            imgData = new ImageData(new Uint8ClampedArray(awbImg.data), awbImg.cols, awbImg.rows);\n            awbImg.delete(); // 释放 Mat 对象\n            awbImg = null; // 添加这行代码，确保 awbImg 对象被清理\n            // 在指定位置开始绘制图像\n            this.bufferCtx.clearRect(this.ROI_x, this.ROI_y, this.RedBoxSideLength, this.RedBoxSideLength);\n            this.bufferCtx.putImageData(imgData, this.ROI_x, this.ROI_y);\n            // this.SendConsoleLogMsg('绘制一次ROI数据:' + fileName + ':' + this.ROI_x + ':' + this.ROI_y, 'info');\n            this.drawImageData();\n            this.focuserPictureFileName = fileName;\n\n          } catch (error) {\n            console.error(`处理图像失败: ${imagePath}`, error);\n          } finally {\n            // 确保 Mat 对象和 ImageData 对象被删除\n            if (src && !src.isDeleted()) {\n              src.delete();\n              src = null; // 添加这行代码，确保 src 对象被清理\n            }\n            if (originalImg8 && !originalImg8.isDeleted()) {\n              originalImg8.delete();\n              originalImg8 = null; // 添加这行代码，确保 originalImg8 对象被清理\n            }\n            if (awbImg && !awbImg.isDeleted()) {\n              awbImg.delete();\n              awbImg = null; // 添加这行代码，确保 awbImg 对象被清理\n            }\n            // 确保 buffer 被清理\n            buffer = null;\n            this.isProcessingImage = false;\n          }\n        })\n        .catch(error => {\n          if (error.name === 'AbortError') {\n            console.log('Fetch request cancelled');\n          } else {\n            console.error(`获取图像失败: ${imagePath}`, error);\n          }\n          this.isProcessingImage = false;\n        });\n\n      // 在组件卸载时取消 fetch 请求\n      this.$once('hook:beforeDestroy', () => {\n        fetchController.abort();\n      });\n    },\n    setRedBoxState(length, x, y) {\n      this.SendConsoleLogMsg('setRedBoxState:' + length + ',' + x + ',' + y, 'info');\n      this.$bus.$emit('setRedBoxPosition', x, y);\n      this.$bus.$emit('setRedBoxSideLength', length);\n    },\n    setFocuserState(state) {\n      if (state === 'selectstars') {\n        this.isFocusLoopShooting = true;\n      } else {\n        this.isFocusLoopShooting = false;\n      }\n    },\n    setShowSelectStar(state) {\n      this.showSelectStar = state;\n    },\n    RedBoxSizeChange(length) {\n      this.RedBoxSideLength = parseInt(length);\n    },\n    setMainCameraParameters(parameters) {\n      for (const parameter in parameters) {\n        const item = this.MainCameraConfigItems.find(item => item.label === parameter);\n        if (item) {\n          item.value = parameters[parameter];\n        } else {\n          if (parameter == 'RedBoxSize') {\n            this.$bus.$emit('setRedBoxSideLength', parameters[parameter]);\n          } else {\n            console.error(`未找到参数：${parameter}`);\n          }\n        }\n      }\n      this.confirmConfiguration(this.MainCameraConfigItems);\n    },\n  },\n  computed: {\n    nav: {\n      get: function () {\n        console.log('nav:', this.$store.state.showNavigationDrawer);\n        return this.$store.state.showNavigationDrawer\n      },\n      set: function (v) {\n        if (this.$store.state.showNavigationDrawer !== v) {\n          console.log('nav:', this.$store.state.showNavigationDrawer);\n          this.$store.commit('toggleBool', 'showNavigationDrawer')\n        }\n      }\n    },\n    storeCurrentLocation: function () {\n      return this.$store.state.currentLocation\n    },\n    getQTClientVersionColor() {\n      if (this.QTClientVersion === 'Not connected') {\n        return 'rgba(255, 0, 0, 0.5)'; // 红色，透明度 0.5\n      } else {\n        return 'rgba(255, 255, 255, 0.5)'; // 默认白色，透明度 0.5\n      }\n    },\n\n  },\n  watch: {\n    storeCurrentLocation: function (loc) {\n      const DD2R = Math.PI / 180\n      this.$stel.core.observer.latitude = loc.lat * DD2R\n      this.$stel.core.observer.longitude = loc.lng * DD2R\n      this.$stel.core.observer.elevation = loc.alt\n\n      // At startup, we need to wait for the location to be set before deciding which\n      // startup time to set so that it's night time.\n      if (!this.startTimeIsSet) {\n        this.$stel.core.observer.utc = swh.getTimeAfterSunset(this.$stel)\n        this.startTimeIsSet = true\n      }\n      // Init of time and date is complete\n      this.$store.commit('setValue', { varName: 'initComplete', newValue: true })\n    },\n    $route: function () {\n      // react to route changes...\n      this.setStateFromQueryArgs()\n    },\n    CurrentDriverType(newVal) {\n      // 当 CurrentDriverType 变化时，更新 selectedDriver\n      this.updateSelectedDriver(newVal);\n    }\n  },\n  mounted: function () {\n    let that = this\n\n    this.getLocationHostName();\n\n    this.loadImageToCanvasMainCamera();\n    this.loadImageToCanvasGuiderCamera();\n\n    this.initCanvas();\n    this.addEventListeners();\n\n    for (const i in this.$stellariumWebPlugins()) {\n      const plugin = this.$stellariumWebPlugins()[i]\n      if (plugin.onAppMounted) {\n        plugin.onAppMounted(that)\n      }\n    }\n\n    this.connect();\n    this.setupNetworkStatusListener();\n\n    // 使用 Promise 检查 OpenCV.js 是否加载完成\n    this.loadOpenCv().then(() => {\n      if (!this._isDestroyed) { // 检查组件是否已销毁\n        console.log('OpenCV.js is ready');\n        this.onCvReady();  // 调用 OpenCV 准备好的回调\n      }\n    }).catch(error => {\n      console.error('Error loading OpenCV.js:', error);\n    });\n\n    // const script = document.createElement('script');\n    // script.src = 'https://docs.opencv.org/4.5.5/opencv.js';\n    // script.async = true;\n    // script.onload = () => this.onCvReady();\n    // document.head.appendChild(script);\n\n    import('@/assets/js/stellarium-web-engine.wasm').then(f => {\n      if (!this._isDestroyed) { // 再次检查组件是否已销毁\n        // Initialize the StelWebEngine viewer singleton\n        // After this call, the StelWebEngine state will always be available in vuex store\n        // in the $store.stel object in a reactive way (useful for vue components).\n        // To modify the state of the StelWebEngine, it's enough to call/set values directly on the $stel object\n        try {\n          swh.initStelWebEngine(that.$store, f.default, that.$refs.stelCanvas, function () {\n            // Start auto location detection (even if we don't use it)\n            swh.getGeolocation().then(p => swh.geoCodePosition(p, that)).then((loc) => {\n              that.$store.commit('setAutoDetectedLocation', loc)\n            }, (error) => { console.log(error) })\n\n            that.$stel.setFont('regular', process.env.BASE_URL + 'fonts/Roboto-Regular.ttf', 1.38)\n            that.$stel.setFont('bold', process.env.BASE_URL + 'fonts/Roboto-Bold.ttf', 1.38)\n            that.$stel.core.constellations.show_only_pointed = false\n\n            that.setStateFromQueryArgs()\n            that.guiComponent = 'Gui'\n            for (const i in that.$stellariumWebPlugins()) {\n              const plugin = that.$stellariumWebPlugins()[i]\n              if (plugin.onEngineReady) {\n                plugin.onEngineReady(that)\n              }\n            }\n\n            if (!that.dataSourceInitDone) {\n              // Set all default data sources\n              const core = that.$stel.core\n              core.stars.addDataSource({ url: process.env.BASE_URL + 'skydata/stars' })\n\n              // Allow to specify a custom path for sky culture data\n              if (that.$route.query.sc) {\n                const key = that.$route.query.sc.substring(that.$route.query.sc.lastIndexOf('/') + 1)\n                core.skycultures.addDataSource({ url: that.$route.query.sc, key: key })\n                core.skycultures.current_id = key\n              } else {\n                core.skycultures.addDataSource({ url: process.env.BASE_URL + 'skydata/skycultures/western', key: 'western' })\n              }\n\n              core.dsos.addDataSource({ url: process.env.BASE_URL + 'skydata/dso' })\n              core.landscapes.addDataSource({ url: process.env.BASE_URL + 'skydata/landscapes/guereins', key: 'guereins' })\n              core.milkyway.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/milkyway' })\n              // core.dss.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/dss' })\n              core.minor_planets.addDataSource({ url: process.env.BASE_URL + 'skydata/mpcorb.dat', key: 'mpc_asteroids' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/moon', key: 'moon' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/sun', key: 'sun' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/moon', key: 'default' })\n              core.comets.addDataSource({ url: process.env.BASE_URL + 'skydata/CometEls.txt', key: 'mpc_comets' })\n              core.satellites.addDataSource({ url: process.env.BASE_URL + 'skydata/tle_satellite.jsonl.gz', key: 'jsonl/sat' })\n\n              // Mount Pointing\n              glStel = that.setGloabalStel(that.$stel);\n              glLayer = that.setGlobalLayer(that.$stel);\n              glTestCircle = that.testAddCircle(that.$stel, glLayer);\n\n            }\n          })\n        } catch (e) {\n          this.$store.commit('setValue', { varName: 'wasmSupport', newValue: false })\n        }\n      }\n    });\n\n  }\n}\n</script>\n\n<style>\nbody {\n  background-color: black;\n  -webkit-touch-callout: none;\n  /* iOS */\n  -webkit-user-select: none;\n  /* 所有WebKit浏览器 */\n  user-select: none;\n}\n\na {\n  color: #82b1ff;\n}\n\na:link {\n  text-decoration-line: none;\n}\n\n.divider_menu {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\nhtml {\n  overflow-y: visible;\n}\n\nhtml,\nbody,\n#app {\n  overflow-y: visible !important;\n  overflow-x: visible;\n  position: fixed !important;\n  width: 100%;\n  height: 100%;\n  padding: 0 !important;\n  font-size: 10px;\n}\n\n.fullscreen {\n  overflow-y: hidden;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  padding: 0 !important;\n}\n\n.click-through {\n  pointer-events: none;\n}\n\n.get-click {\n  pointer-events: all;\n}\n\n.dialog {\n  background: transparent;\n}\n\n.menu__content {\n  background-color: transparent !important;\n}\n\n#stel {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n}\n\n#stel-canvas {\n  width: 100%;\n  height: 100%;\n}\n\n#mainCamera-canvas {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n#guiderCamera-canvas {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.right_panel {\n  padding-right: 400px;\n}\n\n.v-btn {\n  margin-left: 8px;\n  margin-right: 8px;\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n\n.v-application--wrap {\n  min-height: 100% !important;\n}\n\n\n.my-custom-button {\n  background-color: #4CAF50;\n  /* 绿色背景 */\n  color: white;\n  /* 白色文字 */\n  padding: 15px 32px;\n  /* 内边距 */\n  text-align: center;\n  /* 文字居中 */\n  text-decoration: none;\n  /* 无文本装饰 */\n  display: inline-block;\n  /* 行内块显示 */\n  font-size: 16px;\n  /* 字体大小 */\n  margin: 4px 2px;\n  /* 外边距 */\n  cursor: pointer;\n  /* 鼠标样式 */\n  border: none;\n  /* 无边框 */\n}\n\n.connected-device {\n  color: #4dc251;\n}\n\n.btn-confirm {\n  width: 60px;\n  height: 30px;\n  background-color: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n}\n\n.btn-slider {\n  width: 20px;\n  height: 20px;\n  background-color: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n}\n\n.btn-confirm:active,\n.btn-slider:active {\n  transform: scale(0.95);\n  background-color: rgba(255, 255, 255, 0.5);\n}\n</style>\n"],"sourceRoot":"src"}]}