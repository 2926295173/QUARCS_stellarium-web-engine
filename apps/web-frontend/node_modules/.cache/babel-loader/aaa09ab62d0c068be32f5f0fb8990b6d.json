{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/App.vue","mtime":1761182002440},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyiBA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,GAAA,MAAA,sBAAA;AACA,OAAA,SAAA,MAAA,6BAAA;AACA,OAAA,GAAA,MAAA,wBAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,OAAA,eAAA,MAAA,uCAAA;AACA,OAAA,UAAA,MAAA,uCAAA;AACA,OAAA,WAAA,MAAA,8BAAA;AACA,OAAA,oBAAA,MAAA,uCAAA;AAEA,IAAA,YAAA;AACA,IAAA,OAAA;AACA,IAAA,MAAA;AAEA,eAAA;AACA,EAAA,IADA,gBACA,OADA,EACA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,CACA;AAAA,QAAA,KAAA,EAAA,KAAA,EAAA,CAAA,eAAA,CAAA;AAAA,QAAA,IAAA,EAAA,cAAA;AAAA,QAAA,cAAA,EAAA,wBAAA;AAAA,QAAA,oBAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,KAAA,EAAA,KAAA,EAAA,CAAA,iBAAA,CAAA;AAAA,QAAA,IAAA,EAAA,sBAAA;AAAA,QAAA,cAAA,EAAA,6BAAA;AAAA,QAAA,oBAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,OAAA,EAAA;AAAA,OAHA,EAIA,MAJA,CAIA,KAAA,mBAAA,EAJA,EAIA,MAJA,CAIA,CACA;AAAA,QAAA,KAAA,EAAA,KAAA,EAAA,CAAA,cAAA,CAAA;AAAA,QAAA,MAAA,EAAA,IAAA;AAAA,QAAA,IAAA,EAAA,eAAA;AAAA,QAAA,cAAA,EAAA;AAAA,OADA,CAJA,CADA;AAQA,MAAA,cAAA,EAAA,GAAA,MAAA,CAAA,KAAA,wBAAA,EAAA,CARA;AASA,MAAA,YAAA,EAAA,WATA;AAUA,MAAA,cAAA,EAAA,KAVA;AAWA,MAAA,QAAA,EAAA,KAXA;AAYA,MAAA,kBAAA,EAAA,KAZA;AAaA,MAAA,QAAA,EAAA,kCAbA;AAaA;AACA,MAAA,OAAA,EAAA,KAdA;AAeA,MAAA,gBAAA,EAAA,CAAA,EAfA;AAgBA,MAAA,sBAAA,EAAA,CAAA,EAhBA;AAiBA,MAAA,wBAAA,EAAA,CAAA,EAjBA;AAkBA,MAAA,aAAA,EAAA,MAlBA;AAoBA,MAAA,YAAA,EAAA,EApBA;AAsBA,MAAA,SAAA,EAAA,IAtBA;AAuBA,MAAA,OAAA,EAAA,EAvBA;AAwBA,MAAA,gBAAA,EAAA,EAxBA;AAwBA;AACA,MAAA,YAAA,EAAA,EAzBA;AAyBA;AACA,MAAA,cAAA,EAAA,CA1BA;AA0BA;AACA,MAAA,cAAA,EAAA,cA3BA;AA2BA;AACA,MAAA,mBAAA,EAAA,KA5BA;AA4BA;AAEA,MAAA,eAAA,EAAA,eA9BA;AA+BA,MAAA,gBAAA,EAAA,OAAA,CAAA,GAAA,CAAA,eA/BA;AAiCA;AACA,MAAA,eAAA,EAAA;AACA,QAAA,aAAA,EAAA,KADA;AAEA,QAAA,gBAAA,EAAA,MAFA;AAGA,QAAA,eAAA,EAAA,CAHA;AAIA,QAAA,kBAAA,EAAA;AAJA,OAlCA;AAyCA;AACA,MAAA,aAAA,EAAA;AACA,QAAA,SAAA,EAAA,KADA;AAEA,QAAA,KAAA,EAAA,MAFA;AAGA,QAAA,IAAA,EAAA,CAHA;AAIA,QAAA,OAAA,EAAA;AAJA,OA1CA;AAiDA;AAEA,MAAA,iBAAA,EAAA,EAnDA;AAoDA,MAAA,iBAAA,EAAA,IApDA;AAqDA,MAAA,iBAAA,EAAA,EArDA;AAuDA,MAAA,mBAAA,EAAA,CAvDA;AAwDA,MAAA,mBAAA,EAAA,CAxDA;AA0DA,MAAA,iBAAA,EAAA,CA1DA;AA2DA,MAAA,iBAAA,EAAA,CA3DA;AA6DA,MAAA,OAAA,EAAA,CACA;AAAA,QAAA,IAAA,EAAA,KAAA;AAAA,QAAA,UAAA,EAAA,QAAA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,OAAA,EAAA,GAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,MAAA,EAAA,EAAA;AAAA,QAAA,QAAA,EAAA,IAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,aAAA,EAAA,EAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,WAAA,EAAA,KAAA;AAAA,QAAA,cAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,IAAA,EAAA,KAAA;AAAA,QAAA,UAAA,EAAA,YAAA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,OAAA,EAAA,IAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,MAAA,EAAA,EAAA;AAAA,QAAA,QAAA,EAAA,IAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,aAAA,EAAA,EAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,WAAA,EAAA,KAAA;AAAA,QAAA,cAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,IAAA,EAAA,KAAA;AAAA,QAAA,UAAA,EAAA,OAAA;AAAA,QAAA,IAAA,EAAA,YAAA;AAAA,QAAA,OAAA,EAAA,GAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,MAAA,EAAA,EAAA;AAAA,QAAA,QAAA,EAAA,IAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,aAAA,EAAA,EAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,WAAA,EAAA,KAAA;AAAA,QAAA,cAAA,EAAA;AAAA,OAHA,EAIA;AAAA,QAAA,IAAA,EAAA,KAAA;AAAA,QAAA,UAAA,EAAA,YAAA;AAAA,QAAA,MAAA,EAAA,EAAA;AAAA,QAAA,WAAA,EAAA;AAAA,OAJA,EAKA;AAAA,QAAA,IAAA,EAAA,OAAA;AAAA,QAAA,UAAA,EAAA,SAAA;AAAA,QAAA,IAAA,EAAA,UAAA;AAAA,QAAA,OAAA,EAAA,IAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,MAAA,EAAA,EAAA;AAAA,QAAA,QAAA,EAAA,IAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,aAAA,EAAA,EAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,WAAA,EAAA,KAAA;AAAA,QAAA,cAAA,EAAA;AAAA,OALA,EAMA;AAAA,QAAA,IAAA,EAAA,OAAA;AAAA,QAAA,UAAA,EAAA,YAAA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,OAAA,EAAA,GAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,MAAA,EAAA,EAAA;AAAA,QAAA,QAAA,EAAA,IAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,aAAA,EAAA,EAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,WAAA,EAAA,KAAA;AAAA,QAAA,cAAA,EAAA;AAAA,OANA,EAOA;AAAA,QAAA,IAAA,EAAA,KAAA;AAAA,QAAA,UAAA,EAAA,KAAA;AAAA,QAAA,IAAA,EAAA,eAAA;AAAA,QAAA,OAAA,EAAA,IAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,MAAA,EAAA,EAAA;AAAA,QAAA,QAAA,EAAA,IAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,aAAA,EAAA,EAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,WAAA,EAAA,KAAA;AAAA,QAAA,cAAA,EAAA;AAAA,OAPA,CA7DA;AAuEA;AACA,MAAA,iBAAA,EAAA,CACA;AAAA,QAAA,UAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,0BAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,UAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,mBAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAFA,EAGA;AACA;AAAA,QAAA,UAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,aAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA,QAAA;AAAA,QAAA,QAAA,EAAA,CAAA;AAAA,QAAA,QAAA,EAAA,GAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAJA,EAKA;AAAA,QAAA,UAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,uBAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OALA,EAMA;AAAA,QAAA,UAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,eAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA,QAAA;AAAA,QAAA,QAAA,EAAA,CAAA;AAAA,QAAA,QAAA,EAAA,GAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OANA,EAOA;AAAA,QAAA,UAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,gBAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA,QAAA;AAAA,QAAA,QAAA,EAAA,CAAA;AAAA,QAAA,QAAA,EAAA,GAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAPA,CAxEA;AAmFA,MAAA,qBAAA,EAAA,CACA;AACA;AAAA,QAAA,UAAA,EAAA,YAAA;AAAA,QAAA,KAAA,EAAA,UAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA,QAAA;AAAA,QAAA,WAAA,EAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,MAAA;AAAA,OAFA,EAGA;AACA;AAAA,QAAA,UAAA,EAAA,YAAA;AAAA,QAAA,KAAA,EAAA,SAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA,QAAA;AAAA,QAAA,QAAA,EAAA,CAAA;AAAA,QAAA,QAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAJA,EAKA;AAAA,QAAA,UAAA,EAAA,YAAA;AAAA,QAAA,KAAA,EAAA,aAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA,QAAA;AAAA,QAAA,WAAA,EAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA;AAAA,OALA,EAMA;AAAA,QAAA,UAAA,EAAA,YAAA;AAAA,QAAA,KAAA,EAAA,MAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA,QAAA;AAAA,QAAA,QAAA,EAAA,CAAA;AAAA,QAAA,QAAA,EAAA,CAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OANA,EAOA;AAAA,QAAA,UAAA,EAAA,YAAA;AAAA,QAAA,KAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA,QAAA;AAAA,QAAA,QAAA,EAAA,CAAA;AAAA,QAAA,QAAA,EAAA,CAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAPA,CAnFA;AA6FA,MAAA,gBAAA,EAAA,CACA;AAAA,QAAA,UAAA,EAAA,OAAA;AAAA,QAAA,KAAA,EAAA,UAAA;AAAA,QAAA,KAAA,EAAA,UAAA;AAAA,QAAA,YAAA,EAAA,UAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,UAAA,EAAA,OAAA;AAAA,QAAA,KAAA,EAAA,eAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAFA,CAGA;AAHA,OA7FA;AAqGA,MAAA,qBAAA,EAAA,CACA;AAAA,QAAA,UAAA,EAAA,YAAA;AAAA,QAAA,GAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA,mBAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OADA,CArGA;AAyGA,MAAA,kBAAA,EAAA,CACA;AAAA,QAAA,UAAA,EAAA,SAAA;AAAA,QAAA,GAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA,mBAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,UAAA,EAAA,SAAA;AAAA,QAAA,GAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA,WAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,UAAA,EAAA,SAAA;AAAA,QAAA,GAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA,WAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAHA,EAIA;AAAA,QAAA,UAAA,EAAA,SAAA;AAAA,QAAA,GAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA,UAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAJA,CAzGA;AAgHA,MAAA,qBAAA,EAAA,EAhHA;AAoHA,MAAA,cAAA,EAAA,EApHA;AAwHA,MAAA,uBAAA,EAAA,EAxHA;AA4HA,MAAA,SAAA,EAAA,IA5HA;AA8HA,MAAA,cAAA,EAAA,IA9HA;AA+HA,MAAA,aAAA,EAAA,CA/HA;AA+HA;AACA,MAAA,aAAA,EAAA,GAhIA;AAgIA;AAEA,MAAA,mBAAA,EAAA,CAlIA;AAmIA,MAAA,mBAAA,EAAA,GAnIA;AAqIA,MAAA,UAAA,EAAA,CArIA;AAsIA,MAAA,UAAA,EAAA,CAtIA;AAwIA,MAAA,WAAA,EAAA,CAxIA;AA0IA,MAAA,QAAA,EAAA,IA1IA;AA4IA,MAAA,SAAA,EAAA,CA5IA;AA4IA;AAEA,MAAA,WAAA,EAAA,IA9IA;AA8IA;AACA,MAAA,YAAA,EAAA,IA/IA;AA+IA;AAEA,MAAA,KAAA,EAAA,CAjJA;AAiJA;AACA,MAAA,UAAA,EAAA,CAlJA;AAkJA;AACA,MAAA,UAAA,EAAA,CAnJA;AAmJA;AACA,MAAA,YAAA,EAAA,IApJA;AAoJA;AACA,MAAA,SAAA,EAAA,IArJA;AAqJA;AACA,MAAA,UAAA,EAAA,IAtJA;AAsJA;AACA,MAAA,OAAA,EAAA,IAvJA;AAuJA;AAEA,MAAA,YAAA,EAAA,CAzJA;AAyJA;AACA,MAAA,aAAA,EAAA,CA1JA;AA0JA;AACA,MAAA,QAAA,EAAA,CA3JA;AA2JA;AACA,MAAA,QAAA,EAAA,CA5JA;AA4JA;AACA,MAAA,UAAA,EAAA,KA7JA;AA6JA;AACA,MAAA,kBAAA,EAAA,KA9JA;AA8JA;AAEA,MAAA,WAAA,EAAA,CAhKA;AAgKA;AACA,MAAA,WAAA,EAAA,CAjKA;AAiKA;AACA,MAAA,aAAA,EAAA,CAlKA;AAkKA;AAEA,MAAA,cAAA,EAAA,IApKA;AAoKA;AACA,MAAA,cAAA,EAAA,IArKA;AAqKA;AAGA,MAAA,UAAA,EAAA,CAxKA;AAwKA;AACA,MAAA,WAAA,EAAA,CAzKA;AAyKA;AACA,MAAA,WAAA,EAAA,IA1KA;AA2KA,MAAA,aAAA,EAAA,IA3KA;AA4KA,MAAA,cAAA,EAAA,IA5KA;AA8KA,MAAA,cAAA,EAAA,IA9KA;AAgLA,MAAA,eAAA,EAAA,CAhLA;AAiLA,MAAA,eAAA,EAAA,CAjLA;AAmLA,MAAA,eAAA,EAAA,CAnLA;AAqLA,MAAA,iBAAA,EAAA,EArLA;AAsLA,MAAA,mBAAA,EAAA,KAtLA;AAwLA,MAAA,aAAA,EAAA,EAxLA;AA0LA,MAAA,mBAAA,EAAA,CA1LA;AA4LA,MAAA,eAAA,EAAA,IA5LA;AA8LA,MAAA,aAAA,EAAA,CA9LA;AAgMA,MAAA,gBAAA,EAAA,IAhMA;AAiMA,MAAA,gBAAA,EAAA,IAjMA;AAmMA,MAAA,OAAA,EAAA,EAnMA;AAqMA;AACA,MAAA,kBAAA,EAAA,EAtMA;AAsMA;AACA,MAAA,iBAAA,EAAA,EAvMA;AAuMA;AACA,MAAA,iBAAA,EAAA,IAxMA;AAwMA;AACA,MAAA,mBAAA,EAAA,IAzMA;AAyMA;AACA,MAAA,YAAA,EAAA,IA1MA;AA0MA;AACA,MAAA,gBAAA,EAAA,IA3MA;AA2MA;AACA,MAAA,mBAAA,EAAA,EA5MA;AA4MA;AAEA,MAAA,QAAA,EAAA,IA9MA;AA8MA;AAEA,MAAA,OAAA,EAAA,EAhNA;AAgNA;AACA,MAAA,cAAA,EAAA,IAjNA;AAiNA;AAEA,MAAA,WAAA,EAAA,EAnNA;AAmNA;AACA,MAAA,cAAA,EAAA,IApNA;AAoNA;AACA,MAAA,iBAAA,EAAA,EArNA;AAuNA,MAAA,mBAAA,EAAA,KAvNA;AAwNA,MAAA,uBAAA,EAAA,KAxNA;AA0NA,MAAA,kBAAA,EAAA,CA1NA;AA2NA,MAAA,kBAAA,EAAA,CA3NA;AA6NA,MAAA,aAAA,EAAA,EA7NA;AA+NA,MAAA,gBAAA,EAAA,IA/NA;AAiOA,MAAA,gBAAA,EAAA,KAjOA;AAiOA;AACA,MAAA,eAAA,EAAA,KAlOA;AAkOA;AAEA,MAAA,gBAAA,EAAA,IApOA;AAqOA,MAAA,gBAAA,EAAA,KArOA;AAuOA,MAAA,eAAA,EAAA,KAvOA;AAyOA,MAAA,UAAA,EAAA,KAzOA;AAyOA;AACA,MAAA,oBAAA,EAAA,IA1OA;AA2OA,MAAA,4BAAA,EAAA,IA3OA;AA4OA,MAAA,qBAAA,EAAA,KA5OA;AA4OA;AACA,MAAA,kBAAA,EAAA,IA7OA;AAgPA,MAAA,iBAAA,EAAA,KAhPA;AAiPA,MAAA,YAAA,EAAA,KAjPA;AAiPA;AAEA,MAAA,0BAAA,EAAA,KAnPA;AAoPA,MAAA,iBAAA,EAAA,IApPA;AAsPA,MAAA,kBAAA,EAAA,KAtPA;AAuPA,MAAA,sBAAA,EAAA,EAvPA;AAwPA,MAAA,eAAA,EAAA,KAxPA;AAwPA;AAEA,MAAA,oBAAA,EAAA,KA1PA;AA2PA,MAAA,2BAAA,EAAA,EA3PA;AA6PA,MAAA,qBAAA,EAAA,KA7PA;AA6PA;AAEA,MAAA,sBAAA,EAAA;AAAA;AACA,QAAA,UAAA,EAAA,CADA;AAEA,QAAA,UAAA,EAAA,KAFA;AAGA,QAAA,GAAA,EAAA,MAHA;AAIA,QAAA,QAAA,EAAA,IAJA;AAKA,QAAA,aAAA,EAAA;AALA,OA/PA;AAsQA,MAAA,sBAAA,EAAA,EAtQA;AAsQA;AACA,MAAA,iBAAA,EAAA,KAvQA;AAuQA;AACA,MAAA,mBAAA,EAAA,KAxQA;AAwQA;AACA,MAAA,mBAAA,EAAA,EAzQA;AAyQA;AACA,MAAA,WAAA,EAAA,CAAA,CA1QA;AA2QA,MAAA,WAAA,EAAA,CAAA,CA3QA;AA4QA,MAAA,eAAA,EAAA,CAAA,CA5QA;AA6QA,MAAA,eAAA,EAAA,CAAA,CA7QA;AA8QA,MAAA,iBAAA,EAAA,CAAA,CA9QA;AA+QA,MAAA,KAAA,EAAA,CAAA,CA/QA;AA+QA;AACA,MAAA,KAAA,EAAA,CAAA,CAhRA;AAgRA;AACA,MAAA,QAAA,EAAA,CAAA,CAjRA;AAiRA;AACA,MAAA,QAAA,EAAA,CAAA,CAlRA;AAkRA;AACA,MAAA,UAAA,EAAA,GAnRA;AAmRA;AACA,MAAA,cAAA,EAAA,KApRA;AAsRA,MAAA,UAAA,EAAA,KAtRA;AAuRA,MAAA,aAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAvRA;AAwRA,MAAA,aAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAxRA;AAyRA,MAAA,WAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAzRA;AA0RA,MAAA,WAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CA1RA;AA2RA,MAAA,kBAAA,EAAA,CA3RA;AA6RA;AACA,MAAA,aAAA,EAAA,CACA;AAAA,QAAA,KAAA,EAAA,MAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,KAAA,EAAA,OAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,KAAA,EAAA,OAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAHA,EAIA;AAAA,QAAA,KAAA,EAAA,OAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAJA,EAKA;AAAA,QAAA,KAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OALA,EAMA;AAAA,QAAA,KAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OANA,CA9RA;AAsSA,MAAA,gBAAA,EAAA,IAtSA;AAsSA;AACA,MAAA,OAAA,EAAA,IAvSA;AAuSA;AACA,MAAA,QAAA,EAAA,IAxSA;AAwSA;AAEA,MAAA,aAAA,EAAA,CA1SA;AA0SA;AACA,MAAA,mBAAA,EAAA,EA3SA;AA2SA;AAEA,MAAA,aAAA,EAAA,IA7SA;AA6SA;AACA,MAAA,QAAA,EAAA;AACA,QAAA,UAAA,EAAA,IADA;AACA;AACA,QAAA,IAAA,EAAA,IAFA;AAGA,QAAA,IAAA,EAAA,IAHA;AAIA,QAAA,IAAA,EAAA;AAJA;AA9SA,KAAA;AAqTA,GAvTA;AAwTA,EAAA,UAAA,EAAA;AACA,IAAA,GAAA,EAAA,GADA;AAEA,IAAA,SAAA,EAAA,SAFA;AAGA,IAAA,WAAA,EAAA,WAHA;AAIA,IAAA,oBAAA,EAAA,oBAJA,CAKA;;AALA,GAxTA;AA+TA,EAAA,OA/TA,qBA+TA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,KAAA,WAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,KAAA,aAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,KAAA,qBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,oBAAA,EAAA,KAAA,gBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,YAAA,EAAA,KAAA,YAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,YAAA,EAAA,KAAA,YAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,QAAA,EAAA,KAAA,cAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,SAAA,EAAA,KAAA,UAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,MAAA,EAAA,KAAA,OAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,QAAA,EAAA,KAAA,SAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,UAAA,EAAA,KAAA,WAAA,EAXA,CAYA;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,aAAA,EAAA,KAAA,oBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,KAAA,cAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,0BAAA,EAAA,KAAA,oBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,KAAA,kBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,KAAA,kBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,aAAA,EAAA,KAAA,aAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,KAAA,sBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,eAAA,EAAA,KAAA,eAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,KAAA,gBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,KAAA,eAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,WAAA,EAAA,KAAA,WAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,WAAA,EAAA,KAAA,WAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,UAAA,EAAA,KAAA,WAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,eAAA,EAAA,KAAA,aAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,UAAA,EAAA,KAAA,WAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,yBAAA,EAAA,KAAA,0BAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,yBAAA,EAAA,KAAA,0BAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,KAAA,kBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,WAAA,EAAA,KAAA,YAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,KAAA,iBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,oBAAA,EAAA,KAAA,qBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,KAAA,cAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,KAAA,oBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,oBAAA,EAAA,KAAA,kBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,KAAA,mBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,KAAA,sBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,4BAAA,EAAA,KAAA,6BAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,KAAA,cAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,KAAA,qBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,KAAA,iBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,eAAA,EAAA,KAAA,aAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,KAAA,iBAAA,EA5CA,CA6CA;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,KAAA,eAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,cAAA,EAAA,KAAA,aAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,KAAA,gBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,KAAA,eAAA,EAjDA,CAiDA;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,KAAA,iBAAA,EAlDA,CAkDA;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,aAAA,EAAA,KAAA,WAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,YAAA,EAAA,KAAA,UAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,KAAA,iBAAA,EArDA,CAqDA;AACA;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,6BAAA,EAAA,KAAA,2BAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,KAAA,sBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,6BAAA,EAAA,KAAA,2BAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,KAAA,qBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,yBAAA,EAAA,KAAA,uBAAA,EA3DA,CA6DA;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,KAAA,uBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,KAAA,qBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,KAAA,cAAA,EAhEA,CAkEA;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,KAAA,qBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,KAAA,mBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,cAAA,EAAA,KAAA,YAAA;AAEA,SAAA,mBAAA,GAAA,WAAA,CAAA,KAAA,gBAAA,EAAA,KAAA,CAAA;AAGA,GAzYA;AA0YA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,aAFA,yBAEA,IAFA,EAEA;AAAA;;AACA,UAAA,IAAA,iBAAA,IAAA,CAAA,IAAA,mDAAA,CAAA;AACA,aAAA,IAAA,CAAA,YAAA,KAAA,IAAA,IAAA,CAAA,MAAA,CAAA,SAAA,CAAA,IAAA,CAAA,IAAA,MAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAAA,GAAA,CAAA;AACA,KALA;AAMA;AACA,IAAA,cAPA,0BAOA,IAPA,EAOA;AACA,aAAA,IAAA,CAAA,aAAA,KAAA,IAAA,IAAA,OAAA,IAAA,CAAA,GAAA,KAAA,QAAA,IAAA,IAAA,CAAA,GAAA,GAAA,CAAA;AACA,KATA;AAUA;AACA,IAAA,YAXA,wBAWA,IAXA,EAWA;AACA;AACA,UAAA,CAAA,KAAA,QAAA,EAAA,OAAA,SAAA,CAFA,CAGA;;AACA,aAAA,KAAA,aAAA,CAAA,IAAA,KAAA,KAAA,cAAA,CAAA,IAAA,CAAA,GAAA,SAAA,GAAA,SAAA;AACA,KAhBA;AAiBA;AACA,IAAA,UAlBA,sBAkBA,IAlBA,EAkBA;AACA,UAAA,GAAA,GAAA,KAAA,cAAA,CAAA,IAAA,CAAA;;AACA,UAAA,KAAA,aAAA,CAAA,IAAA,CAAA,EAAA;AACA;AACA,eAAA,GAAA,GAAA,2BAAA,GAAA,uBAAA;AACA,OALA,CAMA;;;AACA,aAAA,GAAA,GAAA,cAAA,GAAA,UAAA;AACA,KA1BA;AA4BA,IAAA,WA5BA,uBA4BA,IA5BA,EA4BA;AAAA;;AACA,aAAA,CACA,UAAA,CAAA;AAAA,eAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA,IAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,OAAA;AAAA,OADA,EAEA,UAAA,CAAA;AAAA,eAAA,IAAA,CAAA,GAAA,KAAA,SAAA,IAAA,KAAA,CAAA,SAAA,CAAA,CAAA,KAAA,IAAA,CAAA,GAAA,iCAAA,IAAA,CAAA,GAAA,CAAA;AAAA,OAFA,EAGA,UAAA,CAAA;AAAA,eAAA,IAAA,CAAA,GAAA,KAAA,SAAA,IAAA,KAAA,CAAA,SAAA,CAAA,CAAA,KAAA,IAAA,CAAA,GAAA,iCAAA,IAAA,CAAA,GAAA,CAAA;AAAA,OAHA,CAAA;AAKA,KAlCA;AAoCA;AACA,IAAA,SArCA,qBAqCA,CArCA,EAqCA;AACA,UAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA,IAAA,IAAA,CAAA,KAAA,SAAA,EAAA,OAAA,GAAA;AACA,UAAA,OAAA,CAAA,KAAA,QAAA,EAAA,OAAA,CAAA;AACA,UAAA,CAAA,GAAA,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,GAAA,OAAA,CAAA,GAAA,EAAA,GAAA,CAAA;AACA,aAAA,MAAA,CAAA,CAAA,CAAA;AACA,KA1CA;AA4CA,IAAA,cA5CA,0BA4CA,IA5CA,EA4CA;AAAA;;AACA,UAAA,CAAA,GAAA,KAAA,SAAA,CAAA,IAAA,CAAA,KAAA,CAAA;;AACA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,OAFA,CAIA;;AACA,UAAA,IAAA,CAAA,GAAA,KAAA,SAAA,IAAA,CAAA,GAAA,IAAA,CAAA,GAAA,EAAA,CAAA,GAAA,IAAA,CAAA,GAAA;AACA,UAAA,IAAA,CAAA,GAAA,KAAA,SAAA,IAAA,CAAA,GAAA,IAAA,CAAA,GAAA,EAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CANA,CAQA;;AACA,UAAA,IAAA,kBAAA,IAAA,CAAA,IAAA,qDAAA,CAAA;;AACA,UAAA,IAAA,GAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,GAAA,KAAA,SAAA,GAAA,IAAA,CAAA,GAAA,GAAA,CAAA;AACA,QAAA,CAAA,GAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA;AACA,YAAA,IAAA,CAAA,GAAA,KAAA,SAAA,IAAA,CAAA,GAAA,IAAA,CAAA,GAAA,EAAA,CAAA,GAAA,IAAA,CAAA,GAAA;AACA,YAAA,IAAA,CAAA,GAAA,KAAA,SAAA,IAAA,CAAA,GAAA,IAAA,CAAA,GAAA,EAAA,CAAA,GAAA,IAAA,CAAA,GAAA;AACA,QAAA,CAAA,GAAA,MAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CAAA,CALA,CAKA;AACA,OAhBA,CAkBA;;;AACA,MAAA,IAAA,CAAA,KAAA,GAAA,CAAA;AACA,WAAA,kBAAA,CAAA,IAAA,CAAA,KAAA,EAAA,CAAA;AACA,KAjEA;AAkEA,IAAA,gBAlEA,8BAkEA;AACA,UAAA,MAAA,CAAA,WAAA,IAAA,MAAA,CAAA,WAAA,CAAA,MAAA,EAAA;AACA,YAAA,UAAA,GAAA,MAAA,CAAA,WAAA,CAAA,MAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA,cAAA,GAAA,OAAA,CAAA;AACA,YAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA,eAAA,GAAA,OAAA,CAAA,CAHA,CAKA;;AAEA,YAAA,UAAA,CAAA,cAAA,GAAA,UAAA,CAAA,eAAA,GAAA,GAAA,EAAA;AACA,eAAA,IAAA,CAAA,KAAA,CAAA,aAAA,EAAA,KAAA,KAAA,CAAA,MAAA,KAAA,IAAA,GACA,qBADA,GAEA,gFAFA,EADA,CAKA;;AACA,cAAA,MAAA,CAAA,EAAA,EAAA;AACA,gBAAA;AAAA,cAAA,MAAA,CAAA,EAAA;AAAA,aAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AACA;AACA;AACA;AACA,KArFA;AAuFA,IAAA,cAvFA,0BAuFA,IAvFA,EAuFA;AACA,aAAA,IAAA,IAAA,IAAA,CAAA,YAAA,IAAA,IAAA,GACA,MAAA,CAAA,IAAA,CAAA,YAAA,CADA,GAEA,IAAA,IAAA,IAAA,CAAA,KAAA,IAAA,IAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,GAFA;AAGA,KA3FA;AA4FA,IAAA,cA5FA,0BA4FA,IA5FA,EA4FA;AACA,UAAA,IAAA,IAAA,IAAA,CAAA,OAAA,IAAA,IAAA,EAAA,OAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,UAAA,IAAA,IAAA,IAAA,CAAA,KAAA,IAAA,IAAA,EAAA,OAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA;AACA,aAAA,EAAA;AACA,KAhGA;AAiGA,IAAA,OAjGA,mBAiGA,IAjGA,EAiGA;AACA,UAAA,IAAA,GAAA,IAAA,IAAA,IAAA,CAAA,KAAA,IAAA,IAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,EAAA;AACA,UAAA,CAAA,IAAA,EAAA;;AACA,UAAA,SAAA,IAAA,SAAA,CAAA,SAAA,IAAA,SAAA,CAAA,SAAA,CAAA,SAAA,EAAA;AACA,QAAA,SAAA,CAAA,SAAA,CAAA,SAAA,CAAA,IAAA;AACA;AACA,KAvGA;AAyGA,IAAA,cAzGA,0BAyGA,KAzGA,EAyGA;AACA,MAAA,KAAA,CAAA,cAAA;AACA,KA3GA;AA4GA,IAAA,mBA5GA,iCA4GA;AACA,UAAA,QAAA,GAAA,MAAA,CAAA,QAAA,CAAA,QAAA;AACA,UAAA,QAAA,GAAA,MAAA,CAAA,QAAA,CAAA,QAAA,KAAA,QAAA,GAAA,MAAA,GAAA,KAAA;AACA,UAAA,IAAA,GAAA,MAAA,CAAA,QAAA,CAAA,QAAA,KAAA,QAAA,GAAA,MAAA,GAAA,MAAA;AACA,WAAA,iBAAA,CAAA,uBAAA,QAAA,EAAA,MAAA;AACA,WAAA,YAAA,aAAA,QAAA,eAAA,QAAA,cAAA,IAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,eAAA,EAAA,KAAA,YAAA;AACA,KAnHA;AAoHA,IAAA,kBApHA,gCAoHA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,oBAAA;AACA,KAtHA;AAuHA,IAAA,OAvHA,qBAuHA;AAAA;;AACA;AACA;AACA;AACA,UAAA,SAAA,GAAA;AACA,QAAA,kBAAA,EAAA,KADA,CACA;;AADA,OAAA;AAGA,WAAA,SAAA,GAAA,IAAA,SAAA,CAAA,KAAA,YAAA,EAAA,EAAA,EAAA,SAAA,CAAA;;AAEA,WAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACA,QAAA,MAAA,CAAA,cAAA,GAAA,WAAA;AACA,QAAA,MAAA,CAAA,mBAAA,GAAA,KAAA,CAFA,CAEA;;AACA,YAAA,MAAA,CAAA,0BAAA,EAAA;AACA,UAAA,MAAA,CAAA,kBAAA,CAAA,qBAAA,EAAA,SAAA;AACA;;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,MAAA;;AACA,QAAA,MAAA,CAAA,cAAA;;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA;AACA,OATA;;AAWA,WAAA,SAAA,CAAA,SAAA,GAAA,UAAA,OAAA,EAAA;AACA;AAEA,YAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA;;AAEA,YAAA,IAAA,CAAA,IAAA,KAAA,WAAA,EAAA;AACA,cAAA,KAAA,GAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,cAAA,WAAA;;AACA,cAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,YAAA,WAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CADA,CAEA;AACA,WAHA,MAIA;AACA,YAAA,OAAA,CAAA,KAAA,CAAA,cAAA,EAAA,IAAA,CAAA,OAAA;AACA;AACA;;AACA,cAAA,aAAA,GAAA,KAAA;;AACA,cAAA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,sBAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,gCAAA;AACA,YAAA,aAAA,GAAA,IAAA;;AACA,gBAAA,MAAA,GAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;AAEA,gBAAA,MAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,MAAA,CAAA,MAAA;;AACA,cAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,IAAA,CAAA,OAAA;AACA;;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,gCAAA;AACA;;AAEA,cAAA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,mBAAA,CAAA,EAAA;AACA,YAAA,aAAA,GAAA,IAAA;;AACA,gBAAA,OAAA,GAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;AACA,gBAAA,OAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,IAAA,GAAA,OAAA,CAAA,CAAA,CAAA;AACA,kBAAA,QAAA,GAAA,OAAA,CAAA,CAAA,CAAA;;AACA,cAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,IAAA,EAAA,QAAA;AACA;AACA;;AAEA,cAAA,CAAA,aAAA,EAAA;AACA,oBAAA,WAAA;AACA,mBAAA,WAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,KAAA,GAAA,MAAA,CAAA,iBAAA,CAHA,CAIA;;AACA,sBAAA,MAAA,GAAA;AAAA,oBAAA,IAAA,EAAA,KAAA;AAAA,oBAAA,KAAA,EAAA,KAAA;AAAA,oBAAA,KAAA,EAAA;AAAA,mBAAA,CALA,CAOA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,sBAAA,KAAA,KAAA,SAAA,IAAA,KAAA,KAAA,UAAA,IAAA,KAAA,KAAA,UAAA,EAAA;AACA,oBAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,MAAA,EADA,CACA;;AACA,mBAFA,MAEA;AACA,oBAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,MAAA,EADA,CACA;;AACA;AACA;;AACA;;AAEA,mBAAA,WAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,MAAA,EAFA,CAGA;;AACA,sBAAA,MAAA,GAAA,MAAA,CAAA,iBAAA,CAJA,CAKA;;AACA,sBAAA,MAAA;AAAA,oBAAA,IAAA,EAAA,MAAA;AAAA,oBAAA,KAAA,EAAA;AAAA,8BAAA,MAAA,CAAA;;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,MAAA,EAPA,CAQA;;AACA,kBAAA,MAAA,CAAA,WAAA,CAAA,IAAA,CAAA,MAAA;;AAEA,kBAAA,MAAA,CAAA,iBAAA,GAAA,EAAA;;AACA,kBAAA,MAAA,CAAA,WAAA,CAAA,OAAA,CAAA,UAAA,WAAA,EAAA;AACA,wBAAA,WAAA,CAAA,IAAA,KAAA,MAAA,CAAA,iBAAA,EAAA;AACA,sBAAA,MAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,WAAA;AACA;AACA,mBAJA;;AAMA,kBAAA,MAAA,CAAA,mBAAA,GAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,IAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AAEA,sBAAA,UAAA,IAAA,EAAA,EAAA;AACA,oBAAA,MAAA,CAAA,oBAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,EAAA,IAAA;AACA,mBAFA,MAEA;AACA,oBAAA,MAAA,CAAA,oBAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,EAAA,KAAA;AACA;AACA;;AACA;;AAEA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,MAAA,EAAA,OAAA;;AACA,kBAAA,MAAA,CAAA,uBAAA,GAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,YAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,OAAA,EAAA,OAAA;;AACA,kBAAA,MAAA,CAAA,mBAAA,GAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,UAAA;AACA;;AACA;;AAEA,mBAAA,qBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,WAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,WAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,WAAA,EAAA,UAAA;AACA;;AACA;;AAEA,mBAAA,4BAAA;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,6BAAA;;AACA,gBAAA,MAAA,CAAA,GAAA,GAAA,KAAA;AACA;;AAEA,mBAAA,mBAAA;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,mBAAA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,KAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,KAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,KAAA,GAAA,KAAA;AACA,kBAAA,MAAA,CAAA,KAAA,GAAA,KAAA,CALA,CAOA;;AACA,kBAAA,MAAA,CAAA,YAAA,CAAA,QAAA,EAAA,KAAA,EAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,WAAA,CAAA,SAAA,SAAA;;AACA,kBAAA,MAAA,CAAA,mBAAA,GAAA,KAAA;AACA;;AACA;;AAGA,mBAAA,wBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,mBAAA,CAAA,SAAA,UAAA;AACA;;AACA;;AACA,mBAAA,WAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,WAAA,EAAA,GAAA,EAAA,GAAA;AACA;;AAEA,mBAAA,qBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,YAAA,GAAA,CAAA,MAAA,EAAA,MAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,YAAA;AACA;;AACA;;AAEA,mBAAA,kBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,eAAA,GAAA,CAAA,OAAA,EAAA,OAAA,CAAA;AACA,sBAAA,gBAAA,GAAA,CAAA,OAAA,EAAA,QAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,eAAA,EAAA,gBAAA;AACA;;AACA;;AAEA,mBAAA,mBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,GAAA,EAAA,GAAA;AACA;;AACA;;AAEA,mBAAA,cAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA,MAAA;AACA;;AACA;;AAEA,mBAAA,yBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,yBAAA,EAAA,KAAA;AACA;;AACA;;AAGA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,eAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,cAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,eAAA,EAAA,cAAA;AACA;;AACA;;AAEA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,gBAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,YAAA,EAAA,gBAAA,EAAA,IAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,gBAAA,EAAA,IAAA;AACA;;AACA;;AACA,mBAAA,WAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,eAAA,KAAA,CAAA,CAAA,CAAA,EAAA,SAAA;AACA;;AAEA,mBAAA,qBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA,KAAA,MAAA;AACA,sBAAA,GAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,QAAA,EAAA;AACA,oBAAA,MAAA,CAAA,kBAAA,4CAAA,GAAA,GAAA,MAAA;AACA,mBAFA,MAEA;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,QAAA,EAAA,SAAA;AACA;AACA;;AACA;;AAEA,mBAAA,sBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,IAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,IAAA,KAAA,QAAA,EAAA;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,QAAA,EAAA,MAAA;AACA,mBAFA,MAEA,IAAA,IAAA,KAAA,MAAA,EAAA;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,QAAA,EAAA,MAAA;AACA;AACA;;AACA;;AAEA,mBAAA,sBAAA;AAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,sBAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,WAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,IAAA,EAAA,WAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,IAAA,EAAA,WAAA;AACA;;AACA;;AAEA,mBAAA,uBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,CAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,CAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,CAAA,EAAA,CAAA;AACA;;AACA;;AACA,mBAAA,mBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,CAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,CAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,CAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,oBAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AACA;;AACA;;AACA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,KAAA,EAAA,KAAA;;AACA,kBAAA,MAAA,CAAA,eAAA,GAAA,KAAA;AACA,kBAAA,MAAA,CAAA,eAAA,GAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,mBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,SAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,2BAAA,IAAA,CAAA,KAAA,KAAA,SAAA;AAAA,mBAAA,EAAA,KAAA,GAAA,MAAA,CAAA,SAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,MAAA,CAAA,SAAA;AACA;;AACA;AAEA;;AACA,mBAAA,mBAAA;AACA;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,mCAAA,EAAA,IAAA,CAAA,OAAA,EAFA,CAGA;;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,wBAAA;;AACA,gBAAA,UAAA,CAAA,YAAA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,IAAA,CAAA,OAAA;AACA,iBAFA,EAEA,EAFA,CAAA;AAGA;;AAEA,mBAAA,4BAAA;AACA;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,4CAAA,EAAA,IAAA,CAAA,OAAA;;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,4BAAA,EAAA,IAAA,CAAA,OAAA;;AACA;AAEA;;AAEA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,MAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,OAAA;AACA;;AACA;;AAEA,mBAAA,sBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,GAAA;AACA;;AACA;;AAGA,mBAAA,mBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,IAAA;AACA;;AACA;;AAEA,mBAAA,wBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,IAAA;AACA;;AACA;;AAGA,mBAAA,uBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,MAAA,EAAA,OAAA;AACA;;AACA;;AAEA,mBAAA,aAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAGA,mBAAA,oBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,OAAA;AACA;;AACA;;AAEA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA,KAAA,MAAA;AACA,sBAAA,YAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,MAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,OAAA,EAAA,YAAA,EAAA,MAAA;AACA,iBANA,MAMA;AACA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;AAEA,uBAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACA,oBAAA,MAAA,CAAA,cAAA,CAAA,IAAA,CAAA;AAAA,sBAAA,UAAA,EAAA,KAAA;AAAA,sBAAA,KAAA,iBAAA,CAAA,MAAA;AAAA,sBAAA,KAAA,EAAA,EAAA;AAAA,sBAAA,SAAA,EAAA;AAAA,qBAAA;AACA;;AAEA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,YAAA;AACA;;AACA;;AAGA,mBAAA,uBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAEA,mBAAA,YAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,aAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAEA,mBAAA,oBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAEA,mBAAA,qBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,eAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAGA,mBAAA,iBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,qBAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAEA,mBAAA,kBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAGA,mBAAA,uBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,2BAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAGA,mBAAA,oBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAGA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAGA,mBAAA,UAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAAA,OAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,aAAA,EAAA,OAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,cAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,eAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA;;AAEA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,OAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,KAAA,KAAA,UAAA,EAAA;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,wBAAA,EAAA,OAAA;AACA,mBAFA,MAEA,IAAA,KAAA,KAAA,cAAA,EAAA;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,gEAAA,EAAA,OAAA;AACA;AACA;;AACA;;AAEA,mBAAA,eAAA;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,KAAA,CAAA,MAAA,EAAA,QAAA;;AACA,gBAAA,MAAA,CAAA,iBAAA,CAAA,cAAA,KAAA,CAAA,MAAA,GAAA,SAAA,EAAA,MAAA;;AACA,gBAAA,MAAA,CAAA,iBAAA,GAAA,EAAA;;AACA,qBAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;AACA,sBAAA,EAAA,GAAA,KAAA,CAAA,EAAA,CAAA;;AACA,sBAAA,EAAA,GAAA,EAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;AACA,sBAAA,EAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,wBAAA,EAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AACA,wBAAA,EAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AACA,wBAAA,KAAA,GAAA,EAAA,CAAA,CAAA,CAAA,CAHA,CAIA;;AACA,oBAAA,MAAA,CAAA,iBAAA,CAAA,IAAA,CAAA;AAAA,sBAAA,CAAA,EAAA,EAAA;AAAA,sBAAA,CAAA,EAAA,EAAA;AAAA,sBAAA,GAAA,EAAA;AAAA,qBAAA;AACA;AACA;;AACA,gBAAA,MAAA,CAAA,mBAAA,GAAA,IAAA;AACA;;AAEA,mBAAA,kBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,+DAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,GAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,GAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,GAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,kEAAA,KAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,EAAA,MAAA;;AACA,kBAAA,MAAA,CAAA,eAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,IAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,CACA;AAAA,oBAAA,EAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AAAA,oBAAA,GAAA,EAAA,KAAA,CAAA,CAAA;AAAA,mBADA,EAEA;AAAA,oBAAA,EAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AAAA,oBAAA,GAAA,EAAA,KAAA,CAAA,CAAA;AAAA,mBAFA,EAGA;AAAA,oBAAA,EAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AAAA,oBAAA,GAAA,EAAA,KAAA,CAAA,CAAA;AAAA,mBAHA,EAIA;AAAA,oBAAA,EAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AAAA,oBAAA,GAAA,EAAA,KAAA,CAAA,CAAA;AAAA,mBAJA,CAAA;;AAMA,kBAAA,MAAA,CAAA,YAAA,CAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,0BAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,+DAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,GAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,GAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,GAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,kEAAA,KAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,EAAA,MAAA;;AACA,sBAAA,MAAA,GAAA,MAAA,CAAA,wBAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAEA,mBAAA,qBAAA;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,QAAA;;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,yBAAA,EAAA,OAAA;;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,YAAA,EAAA,sBAAA,EAAA,SAAA;;AACA;;AAEA,mBAAA,kBAAA;AACA,gBAAA,MAAA,CAAA,kBAAA,CAAA,sBAAA,EAAA,OAAA;;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,KAAA;;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,KAAA;;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,wBAAA,EAAA,OAAA;;AACA;;AAEA,mBAAA,uBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,GAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,2BAAA,KAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,EAAA,MAAA;;AACA,kBAAA,MAAA,CAAA,mBAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,mBAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AAEA,sBAAA,UAAA,GAAA,MAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,2BAAA,IAAA,CAAA,KAAA,KAAA,QAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,UAAA,EAAA;AACA,oBAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,QAAA,CAAA,MAAA,CAAA,mBAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,QAAA,CAAA,MAAA,CAAA,mBAAA,EAAA,EAAA,CAAA;AACA,oBAAA,UAAA,CAAA,QAAA,GAAA,QAAA,CAAA,MAAA,CAAA,mBAAA,EAAA,EAAA,CAAA;AACA,oBAAA,UAAA,CAAA,QAAA,GAAA,QAAA,CAAA,MAAA,CAAA,mBAAA,EAAA,EAAA,CAAA;AACA;AACA;;AACA;;AAEA,mBAAA,qBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,GAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,yBAAA,KAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,EAAA,MAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,iBAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AAEA,sBAAA,QAAA,GAAA,MAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,2BAAA,IAAA,CAAA,KAAA,KAAA,MAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,QAAA,EAAA;AACA,oBAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,QAAA,CAAA,MAAA,CAAA,iBAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,QAAA,CAAA,MAAA,CAAA,iBAAA,EAAA,EAAA,CAAA;AACA,oBAAA,QAAA,CAAA,QAAA,GAAA,QAAA,CAAA,MAAA,CAAA,iBAAA,EAAA,EAAA,CAAA;AACA,oBAAA,QAAA,CAAA,QAAA,GAAA,QAAA,CAAA,MAAA,CAAA,iBAAA,EAAA,EAAA,CAAA;AACA;AACA;;AACA;;AAEA,mBAAA,mBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AACA,sBAAA,MAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AAEA,sBAAA,KAAA,KAAA,CAAA,EAAA;AACA,oBAAA,MAAA,CAAA,gBAAA,GAAA,MAAA,KAAA,CAAA;AACA,mBAFA,MAEA,IAAA,KAAA,KAAA,CAAA,EAAA;AACA,oBAAA,MAAA,CAAA,gBAAA,GAAA,MAAA,KAAA,CAAA;AACA;AACA;;AACA;;AAEA,mBAAA,iBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,IAAA;AACA;;AACA;;AAEA,mBAAA,mBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,qBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,eAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,sBAAA,eAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,sBAAA,KAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,sBAAA,KAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,WAAA,CAAA,eAAA,EAAA,eAAA,EAAA,KAAA,EAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,wBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,gBAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AACA,sBAAA,gBAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AACA,sBAAA,MAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AACA,sBAAA,MAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,gBAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,MAAA;AACA;;AACA;;AAEA,mBAAA,qBAAA;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA;;AACA;;AAEA,mBAAA,uBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,iBAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AACA,sBAAA,iBAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AACA,sBAAA,OAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,sBAAA,OAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,OAAA;AACA;;AACA;;AAEA,mBAAA,iBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,eAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAGA,mBAAA,wBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,QAAA,KAAA,QAAA,EAAA;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,mCAAA,CAAA,EAAA,OAAA;AACA,mBAFA,MAEA,IAAA,QAAA,KAAA,SAAA,EAAA;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,0BAAA,CAAA,EAAA,SAAA;AACA,mBAFA,MAEA,IAAA,QAAA,KAAA,MAAA,EAAA;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,OAAA;AACA;AACA;;AACA;;AAEA,mBAAA,iBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,SAAA;AACA;;AACA;;AAEA,mBAAA,aAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,aAAA,EAAA,IAAA;AACA;;AACA;;AACA,mBAAA,wBAAA;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,wBAAA;;AACA;;AAEA,mBAAA,YAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,mBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,WAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAAA,UAAA,EAAA,GAAA,EAAA,WAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,wBAAA,KAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,EAAA,MAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,UAAA,EAAA,WAAA;;AAEA,sBAAA,KAAA,CAAA,CAAA,CAAA,KAAA,aAAA,EAAA;AACA,oBAAA,MAAA,CAAA,qBAAA,CAAA,CAAA,EAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AADA,+DAEA,MAAA,CAAA,OAFA;AAAA;;AAAA;AAEA,0EAAA;AAAA,4BAAA,QAAA;;AACA,4BAAA,QAAA,CAAA,UAAA,KAAA,YAAA,EAAA;AACA,8BAAA,KAAA,CAAA,CAAA,CAAA,KAAA,EAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,GAAA,EAAA;AACA,4BAAA,QAAA,CAAA,MAAA,GAAA,EAAA;AACA,4BAAA,QAAA,CAAA,WAAA,GAAA,KAAA;AACA,2BAHA,MAGA;AACA,4BAAA,QAAA,CAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,KAAA;AACA,4BAAA,QAAA,CAAA,WAAA,GAAA,IAAA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAaA;;AAEA,sBAAA,KAAA,CAAA,CAAA,CAAA,KAAA,mBAAA,EAAA;AACA,oBAAA,MAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,uBAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AAEA,sBAAA,KAAA,CAAA,CAAA,CAAA,KAAA,aAAA,EAAA;AAAA,6CACA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,GAAA,EAAA,GAAA,CAAA,UAAA,IAAA;AAAA,6BAAA,IAAA,CAAA,IAAA,EAAA;AAAA,qBAAA,CADA;AAAA;AAAA,wBACA,MADA;AAAA,wBACA,MADA;AAAA,wBACA,SADA;;AAEA,wBAAA,GAAA,GAAA,UAAA,CAAA,MAAA,CAAA;AACA,wBAAA,GAAA,GAAA,UAAA,CAAA,MAAA,CAAA;AACA,wBAAA,MAAA,GAAA,SAAA,KAAA,MAAA,IAAA,SAAA,KAAA,GAAA;;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,GAAA,EAAA,MAAA;AACA;;AAEA,sBAAA,KAAA,CAAA,CAAA,CAAA,KAAA,iBAAA,EAAA;AACA,oBAAA,MAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA,KAAA,MAAA;;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,qBAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AAEA,sBAAA,KAAA,CAAA,CAAA,CAAA,KAAA,YAAA,EAAA;AACA,oBAAA,MAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,gBAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AAEA,sBAAA,KAAA,CAAA,CAAA,CAAA,KAAA,qBAAA,EAAA;AACA,oBAAA,MAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,yBAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AAEA,sBAAA,KAAA,CAAA,CAAA,CAAA,KAAA,cAAA,EAAA;AACA,oBAAA,MAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,kBAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AAEA,sBAAA,KAAA,CAAA,CAAA,CAAA,KAAA,eAAA,EAAA;AACA,oBAAA,MAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,mBAAA,KAAA,CAAA,CAAA,CAAA;AACA;AACA;;AACA;;AAGA,mBAAA,sBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,oBAAA,CAAA,QAAA;AACA;;AACA;;AAEA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,aAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,MAAA,GAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,UAAA,GAAA;AAAA,2BAAA,GAAA,CAAA,UAAA,KAAA,UAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,MAAA,EAAA;AACA,oBAAA,MAAA,CAAA,aAAA,GAAA,aAAA;;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,6BAAA,EAAA,MAAA,CAAA,OAAA;AACA,mBAHA,MAGA;AACA,oBAAA,OAAA,CAAA,IAAA,CAAA,+CAAA,EAAA,UAAA;AACA;AACA;;AACA;;AAEA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,WAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,WAAA,EAAA,GAAA,EAAA,UAAA;;AACA,sBAAA,OAAA,GAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,UAAA,GAAA;AAAA,2BAAA,GAAA,CAAA,UAAA,KAAA,WAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,OAAA,EAAA;AACA,oBAAA,OAAA,CAAA,UAAA,GAAA,UAAA;;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,6BAAA,EAAA,MAAA,CAAA,OAAA;AACA,mBAHA,MAGA;AACA,oBAAA,OAAA,CAAA,IAAA,CAAA,4CAAA,EAAA,WAAA;AACA;;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,cAAA,EAAA,MAAA,CAAA,OAAA;AACA;;AACA;;AAEA,mBAAA,qBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,mBAAA,CAAA,SAAA;AACA;;AACA;;AAEA,mBAAA,yBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,uBAAA,CAAA,QAAA;AACA;;AACA;;AAEA,mBAAA,sBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,oBAAA,CAAA,OAAA;AACA;;AAEA,mBAAA,oBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,sBAAA,aAAA,GAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,MAAA,CAAA,UAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA;AACA,wBAAA,KAAA,GAAA,CAAA,KAAA,CAAA,EAAA;AACA,sBAAA,GAAA,CAAA,IAAA,qBAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,KAAA,GAAA,CAAA,CAAA;AACA;;AACA,2BAAA,GAAA;AACA,mBALA,EAKA,EALA,CAAA;;AAMA,kBAAA,MAAA,CAAA,sBAAA,CAAA,aAAA;AACA;;AACA;;AAGA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,sBAAA,cAAA,GAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,MAAA,CAAA,UAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA;AACA,wBAAA,KAAA,GAAA,CAAA,KAAA,CAAA,EAAA;AACA,sBAAA,GAAA,CAAA,IAAA,qBAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,KAAA,GAAA,CAAA,CAAA;AACA;;AACA,2BAAA,GAAA;AACA,mBALA,EAKA,EALA,CAAA;;AAMA,kBAAA,MAAA,CAAA,kBAAA,CAAA,cAAA;AACA;;AACA;;AAEA,mBAAA,4BAAA;AACA;AACA,oBAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,EAAA;AAAA,6CACA,GADA;AAEA,wBAAA,IAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA;AACA,wBAAA,GAAA,GAAA,CAAA,KAAA,CAAA,GAAA,GAAA,CAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA;AACA,wBAAA,GAAA,GAAA,CAAA,KAAA,CAAA,GAAA,GAAA,CAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA;;AACA,wBAAA,MAAA,GAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,UAAA,GAAA;AAAA,6BAAA,GAAA,CAAA,UAAA,KAAA,IAAA;AAAA,qBAAA,CAAA;;AACA,wBAAA,MAAA,EAAA;AACA;AACA,0BAAA,GAAA,IAAA,GAAA,CAAA,WAAA,OAAA,MAAA,EAAA,MAAA,CAAA,UAAA,GAAA,GAAA,CAAA,KAAA,MAAA,CAAA,UAAA,GAAA,EAAA;AACA,0BAAA,GAAA,IAAA,GAAA,CAAA,WAAA,OAAA,MAAA,EAAA,MAAA,CAAA,aAAA,GAAA,GAAA,CAAA,KAAA,MAAA,CAAA,aAAA,GAAA,EAAA;AACA,qBAJA,MAIA;AACA,sBAAA,OAAA,CAAA,IAAA,CAAA,yDAAA,EAAA,IAAA;AACA;AAZA;;AACA,uBAAA,IAAA,GAAA,GAAA,CAAA,EAAA,GAAA,GAAA,KAAA,CAAA,MAAA,EAAA,GAAA,IAAA,CAAA,EAAA;AAAA,0BAAA,GAAA;AAYA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,6BAAA,EAAA,MAAA,CAAA,OAAA;AACA,iBAfA,MAeA;AACA,kBAAA,OAAA,CAAA,IAAA,CAAA,+CAAA,EAAA,IAAA,CAAA,OAAA;AACA;;AACA;;AAGA,mBAAA,oBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AAAA;AACA,sBAAA,iBAAA,GAAA,EAAA;;AACA,uBAAA,IAAA,GAAA,GAAA,CAAA,EAAA,GAAA,GAAA,KAAA,CAAA,MAAA,EAAA,GAAA,IAAA,CAAA,EAAA;AACA,wBAAA,gBAAA,GAAA;AACA,sBAAA,IAAA,EAAA,KAAA,CAAA,GAAA,CADA;AAEA,sBAAA,UAAA,EAAA,KAAA,CAAA,GAAA,GAAA,CAAA,CAFA;AAGA,sBAAA,UAAA,EAAA,KAAA,CAAA,GAAA,GAAA,CAAA,CAHA;AAIA,sBAAA,MAAA,EAAA,KAAA,CAAA,GAAA,GAAA,CAAA,CAAA,IAAA,MAAA,GAAA,IAAA,GAAA;AAJA,qBAAA;AAMA,oBAAA,iBAAA,CAAA,IAAA,CAAA,gBAAA;AACA;;AACA,kBAAA,MAAA,CAAA,sBAAA,CAAA,iBAAA;AACA;;AACA;;AAEA,mBAAA,4BAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,WAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,0BAAA,CAAA,WAAA;AACA;;AACA;;AAEA,mBAAA,gCAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,UAAA,IAAA,EAAA,EAAA;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gCAAA,EAAA,UAAA;AACA;;AACA,sBAAA,UAAA,IAAA,KAAA,EAAA;AACA,yBAAA,IAAA,GAAA,GAAA,CAAA,EAAA,GAAA,GAAA,MAAA,CAAA,OAAA,CAAA,MAAA,EAAA,GAAA,EAAA,EAAA;AACA,0BAAA,MAAA,CAAA,OAAA,CAAA,GAAA,EAAA,UAAA,IAAA,KAAA,EAAA;AACA,wBAAA,MAAA,CAAA,OAAA,CAAA,GAAA,EAAA,WAAA,GAAA,KAAA;AACA,wBAAA,MAAA,CAAA,OAAA,CAAA,GAAA,EAAA,MAAA,GAAA,EAAA;AACA,wBAAA,MAAA,CAAA,OAAA,CAAA,GAAA,EAAA,UAAA,GAAA,EAAA;AACA,wBAAA,MAAA,CAAA,OAAA,CAAA,GAAA,EAAA,QAAA,GAAA,IAAA;;AACA,wBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA,CAAA;AACA;AACA;AACA;AACA;;AACA;;AAEA,mBAAA,kBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,QAAA;AACA;;AACA;;AAEA,mBAAA,oBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,QAAA,CAAA,QAAA,EAAA,EAAA,CAAA;AACA;;AACA;;AAEA,mBAAA,wBAAA;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,wBAAA;;AACA;;AAEA,mBAAA,iCAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,0BAAA,CAAA,UAAA;AACA;;AACA;;AAEA,mBAAA,qBAAA;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA;;AACA;;AAEA,mBAAA,kBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,QAAA,EAAA,OAAA;AACA;;AACA;;AAEA,mBAAA,sBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,sBAAA,EAAA,SAAA;AACA;;AACA;;AAEA,mBAAA,wBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,wBAAA,EAAA,SAAA;;AACA,sBAAA,SAAA,IAAA,MAAA,EAAA;AACA,oBAAA,MAAA,CAAA,mBAAA,GAAA,IAAA;AACA,mBAFA,MAEA;AACA,oBAAA,MAAA,CAAA,mBAAA,GAAA,KAAA;AACA;AACA;;AACA;;AAEA,mBAAA,qBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,mBAAA,CAAA,IAAA,CAAA;AAAA,oBAAA,CAAA,EAAA,GAAA;AAAA,oBAAA,CAAA,EAAA,GAAA;AAAA,oBAAA,GAAA,EAAA;AAAA,mBAAA;AACA;;AACA;AAEA;AACA;AACA;;AAEA,mBAAA,uBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,eAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,eAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,iBAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,MAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,KAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,KAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;AAEA,kBAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,KAAA;;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAAA,MAAA,EAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,KAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,QAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,QAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,KAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,UAAA,EAAA,MAAA,CAAA,KAAA;;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA,KAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,0BAAA,MAAA,CAAA,QAAA,GAAA,MAAA,GAAA,MAAA,CAAA,QAAA,GAAA,UAAA,GAAA,MAAA,CAAA,KAAA,EAAA,MAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,WAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,WAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,0BAAA,MAAA,CAAA,WAAA,GAAA,MAAA,GAAA,MAAA,CAAA,WAAA,EAAA,MAAA;AACA;;AACA;;AAEA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,QAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,OAAA,GAAA,KAAA,CAAA,OAAA,CAAA,GAAA,IAAA,GAAA,OAAA,GAAA,CAAA,KAAA,CAAA,GAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAHA,CAGA;;AACA,kBAAA,MAAA,CAAA,QAAA,GAAA,KAAA,CAAA,QAAA,CAAA,GAAA,IAAA,GAAA,QAAA,GAAA,CAAA,KAAA,CAAA,GAAA,QAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAJA,CAIA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,MAAA,CAAA,OAAA,EAAA,MAAA,CAAA,QAAA;AACA;;AACA;;AAEA,mBAAA,SAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,WAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,EAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,SAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GAAA;AACA;;AACA;;AAEA,mBAAA,yBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,sBAAA,UAAA,GAAA,EAAA;;AACA,uBAAA,IAAA,GAAA,GAAA,CAAA,EAAA,GAAA,GAAA,KAAA,CAAA,MAAA,EAAA,GAAA,IAAA,CAAA,EAAA;AACA,wBAAA,SAAA,GAAA,KAAA,CAAA,GAAA,CAAA;AACA,wBAAA,OAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,CAAA;AACA,oBAAA,UAAA,CAAA,SAAA,CAAA,GAAA,OAAA;AACA;;AACA,kBAAA,MAAA,CAAA,uBAAA,CAAA,UAAA;AACA;;AACA;;AAEA,mBAAA,cAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,sCAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,QAAA,EAAA,MAAA;;AACA,sBAAA,QAAA,IAAA,IAAA,EAAA;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,IAAA;AACA,mBAFA,MAEA;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,IAAA;AACA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,sBAAA,EAAA,IAAA,EAAA,GAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,cAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,cAAA;AACA;;AACA;;AAEA,mBAAA,iBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,IAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,sBAAA,KAAA,GAAA,GAAA,GAAA,IAAA,EAAA,MAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,KAAA,EAAA,IAAA;AACA;;AACA;;AAEA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,OAAA,KAAA,EAAA,EAAA;AACA,oBAAA,OAAA,GAAA,MAAA;AACA,mBAFA,MAEA,IAAA,OAAA,KAAA,MAAA,EAAA;AACA,oBAAA,OAAA,GAAA,IAAA;AACA,mBAFA,MAEA,IAAA,OAAA,KAAA,MAAA,EAAA;AACA,oBAAA,OAAA,GAAA,IAAA;AACA,mBAFA,MAEA,IAAA,OAAA,KAAA,MAAA,EAAA;AACA,oBAAA,OAAA,GAAA,IAAA;AACA,mBAFA,MAEA,IAAA,OAAA,KAAA,IAAA,EAAA;AACA,oBAAA,OAAA,GAAA,MAAA;AACA;;AACA,kBAAA,MAAA,CAAA,QAAA,GAAA,OAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,4BAAA,EAAA,MAAA,CAAA,QAAA;AACA,kBAAA,MAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,2BAAA,IAAA,CAAA,KAAA,KAAA,UAAA;AAAA,mBAAA,EAAA,KAAA,GAAA,MAAA,CAAA,QAAA;AACA;;AACA;;AAEA,mBAAA,eAAA;AACA,gBAAA,MAAA,CAAA,kBAAA,CAAA,oBAAA,EAAA,OAAA;;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,wBAAA,EAAA,OAAA;;AACA;;AAEA,mBAAA,sBAAA;AACA,gBAAA,MAAA,CAAA,kBAAA,CAAA,4BAAA,EAAA,OAAA;;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,wBAAA,EAAA,OAAA;;AACA;;AACA,mBAAA,mBAAA;AACA,gBAAA,MAAA,CAAA,kBAAA,CAAA,qBAAA,EAAA,SAAA;;AACA,gBAAA,MAAA,CAAA,QAAA,CAAA,MAAA;AACA;;AACA,mBAAA,qBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,SAAA,EAAA,KAAA,EAAA,SAAA,EAAA,UAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,yBAAA,EAAA,SAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,KAAA,EAAA,SAAA,EAAA,UAAA;AACA;;AACA;;AACA,mBAAA,mCAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,EAAA,EAAA;AAAA;AACA,sBAAA,GAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,IAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAFA,CAGA;;;AACA,sBAAA,GAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,IAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,GAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,IAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,GAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,IAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,GAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,sBAAA,IAAA,GAAA,UAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;AAEA,sBAAA,QAAA,GAAA,UAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;AACA,sBAAA,SAAA,GAAA,UAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;AACA,sBAAA,QAAA,GAAA,UAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;AACA,sBAAA,SAAA,GAAA,UAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;AACA,sBAAA,YAAA,GAAA,KAAA,CAAA,EAAA,CAAA;AACA,sBAAA,aAAA,GAAA,KAAA,CAAA,EAAA,CAAA;AACA,sBAAA,WAAA,GAAA,UAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;AACA,sBAAA,YAAA,GAAA,UAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;AACA,sBAAA,WAAA,GAAA,UAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;AACA,sBAAA,YAAA,GAAA,UAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA,CAtBA,CAyBA;;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EA1BA,CA4BA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,CAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA,YAAA,CAAA,EA7BA,CA+BA;;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,SAAA,EAAA,YAAA,EAAA,aAAA,EAAA,KAAA;AAEA;;AACA;;AAEA,mBAAA,iBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,SAAA,EAAA,OAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,SAAA;AACA;;AAEA,mBAAA,iBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,SAAA,EAAA,OAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,SAAA;AACA;;AACA;;AAEA,mBAAA,iBAAA;AAAA;AACA,sBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,wBAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,wBAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,wBAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AAEA,wBAAA,GAAA,aAAA,CAAA,cAAA,CAAA,cAAA,CAAA,CAAA;;AACA,wBAAA,KAAA,GAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,6BAAA,CAAA,CAAA,KAAA,KAAA,UAAA;AAAA,qBAAA,CAAA;;AACA,wBAAA,KAAA,EAAA;AACA,sBAAA,KAAA,CAAA,KAAA,GAAA,GAAA;AACA,sBAAA,KAAA,CAAA,YAAA,GAAA,GAAA;AACA;AACA;;AACA;AACA;;AAEA,mBAAA,UAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAJA,CAKA;;AACA,sBAAA,MAAA,GAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,2BAAA,CAAA,CAAA,KAAA,KAAA,UAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,MAAA,EAAA;AACA;AACA,oBAAA,MAAA,CAAA,KAAA,GAAA,UAAA,IAAA,MAAA;AACA,mBAHA,MAGA;AACA;AACA,oBAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA;AAAA,sBAAA,UAAA,EAAA,OAAA;AAAA,sBAAA,KAAA,EAAA,UAAA;AAAA,sBAAA,KAAA,EAAA,UAAA,IAAA,MAAA;AAAA,sBAAA,SAAA,EAAA;AAAA,qBAAA;AACA,mBAbA,CAcA;;;AACA,sBAAA,IAAA,GAAA,UAAA,IAAA,MAAA,GAAA,MAAA,GAAA,QAAA;;AACA,sBAAA,MAAA,CAAA,IAAA,IAAA,MAAA,CAAA,IAAA,CAAA,KAAA,EAAA;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,aAAA,EAAA,IAAA;AACA;AACA;;AACA;;AAEA,mBAAA,YAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,MAAA,CAAA,IAAA,IAAA,MAAA,CAAA,IAAA,CAAA,KAAA,EAAA;AACA,oBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,mBAAA,yBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,uBAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,MAAA,GAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,2BAAA,CAAA,CAAA,KAAA,KAAA,yBAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,MAAA,EAAA;AACA,oBAAA,MAAA,CAAA,KAAA,GAAA,uBAAA;AACA,mBAFA,MAEA;AACA,oBAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA;AAAA,sBAAA,UAAA,EAAA,OAAA;AAAA,sBAAA,KAAA,EAAA,yBAAA;AAAA,sBAAA,KAAA,EAAA,uBAAA;AAAA,sBAAA,GAAA,EAAA,CAAA,GAAA;AAAA,sBAAA,GAAA,EAAA,GAAA;AAAA,sBAAA,SAAA,EAAA;AAAA,qBAAA;AACA;AACA;;AACA;;AACA,mBAAA,yBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,uBAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,MAAA,GAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,2BAAA,CAAA,CAAA,KAAA,KAAA,yBAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,MAAA,EAAA;AACA,oBAAA,MAAA,CAAA,KAAA,GAAA,uBAAA;AACA,mBAFA,MAEA;AACA,oBAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA;AAAA,sBAAA,UAAA,EAAA,OAAA;AAAA,sBAAA,KAAA,EAAA,yBAAA;AAAA,sBAAA,KAAA,EAAA,uBAAA;AAAA,sBAAA,GAAA,EAAA,CAAA,GAAA;AAAA,sBAAA,GAAA,EAAA,GAAA;AAAA,sBAAA,SAAA,EAAA;AAAA,qBAAA;AACA;AACA;;AACA;;AACA,mBAAA,eAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,aAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,MAAA,GAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,2BAAA,CAAA,CAAA,KAAA,KAAA,eAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,MAAA,EAAA;AACA,oBAAA,MAAA,CAAA,KAAA,GAAA,aAAA;AACA;AACA;;AACA;;AAEA,mBAAA,YAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,sBAAA,IAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,IAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,YAAA,EAAA,IAAA;AACA;;AACA;;AACA,mBAAA,WAAA;AACA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,WAAA,EAAA,KAAA;AACA;;AACA;;AACA,mBAAA,WAAA;AACA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,EAAA;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,2BAAA,EAAA,MAAA;AACA;;AACA;;AACA,mBAAA,eAAA;AACA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,EAAA;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,gCAAA,EAAA,MAAA;AACA;;AACA;;AAEA,mBAAA,cAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,eAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,eAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,MAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,2BAAA,CAAA,CAAA,KAAA,KAAA,WAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,MAAA,EAAA;AACA,oBAAA,MAAA,CAAA,KAAA,GAAA,eAAA;AACA,mBAFA,MAEA;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA;AAAA,sBAAA,UAAA,EAAA,SAAA;AAAA,sBAAA,KAAA,EAAA,WAAA;AAAA,sBAAA,KAAA,EAAA,eAAA;AAAA,sBAAA,SAAA,EAAA;AAAA,qBAAA;AACA;;AACA,kBAAA,MAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,2BAAA,CAAA,CAAA,KAAA,KAAA,WAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,MAAA,EAAA;AACA,oBAAA,MAAA,CAAA,KAAA,GAAA,eAAA;AACA,mBAFA,MAEA;AACA,oBAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA;AAAA,sBAAA,UAAA,EAAA,SAAA;AAAA,sBAAA,KAAA,EAAA,WAAA;AAAA,sBAAA,KAAA,EAAA,eAAA;AAAA,sBAAA,SAAA,EAAA;AAAA,qBAAA;AACA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,eAAA,EAAA,eAAA;AACA;;AACA;;AACA,mBAAA,UAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,eAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,sBAAA,MAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,2BAAA,CAAA,CAAA,KAAA,KAAA,UAAA;AAAA,mBAAA,CAAA;;AACA,sBAAA,MAAA,EAAA;AACA,oBAAA,MAAA,CAAA,KAAA,GAAA,eAAA;AACA;AACA;;AACA;;AACA,mBAAA,wBAAA;AACA,oBAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,sBAAA,cAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,wBAAA,EAAA,cAAA,IAAA,MAAA,EAFA,CAEA;;AAEA;;AACA;;AACA,mBAAA,kBAAA;AAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,QAAA;;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,EAAA,QAAA,EAAA,kBAAA;AACA;;AACA;;AAEA,mBAAA,sBAAA;AAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,sBAAA,MAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,sBAAA,YAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,MAAA,EAAA,YAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,MAAA,EAAA,YAAA;AACA;;AACA;;AAEA,mBAAA,oBAAA;AAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,sBAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,QAAA;;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,QAAA,EAAA,MAAA;AACA;;AACA;;AAEA,mBAAA,kBAAA;AAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,sBAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,SAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA;AACA;;AACA;;AAEA,mBAAA,gBAAA;AAAA;AACA,oBAAA,KAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,sBAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,UAAA;;AACA,kBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,cAAA;AACA;;AACA;;AACA;AACA,gBAAA,OAAA,CAAA,IAAA,CAAA,SAAA,EAAA,IAAA,CAAA,OAAA;AACA;AAl0CA;AAo0CA;AACA,SAx2CA,MAy2CA,IAAA,IAAA,CAAA,IAAA,KAAA,YAAA,EAAA;AACA;AACA,cAAA,SAAA,GAAA,IAAA,CAAA,KAAA;;AACA,UAAA,MAAA,CAAA,qBAAA,CAAA,SAAA;AACA,SAJA,MAIA,IAAA,IAAA,CAAA,IAAA,KAAA,iBAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,IAAA,CAAA,OAAA,EADA,CAEA;;AACA,cAAA,OAAA,GAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;AACA,cAAA,OAAA,CAAA,CAAA,CAAA,KAAA,gBAAA,EAAA;AACA,YAAA,MAAA,CAAA,kBAAA,CAAA,mBAAA,EAAA,OAAA;;AACA,YAAA,MAAA,CAAA,iBAAA,CAAA,SAAA,EAAA,kFAAA,EAAA,iBAAA;AACA,WAHA,MAIA,IAAA,OAAA,CAAA,CAAA,CAAA,KAAA,uBAAA,EAAA;AACA,gBAAA,OAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,kBAAA,OAAA,GAAA,OAAA,CAAA,CAAA,CAAA;;AACA,cAAA,MAAA,CAAA,iBAAA,CAAA,eAAA,OAAA,EAAA,MAAA;;AAEA,cAAA,MAAA,CAAA,iBAAA,CAAA,aAAA,EAAA,MAAA,CAAA,EAAA,CAAA,uBAAA,IAAA,IAAA,GAAA,OAAA,GAAA,GAAA,GAAA,MAAA,CAAA,EAAA,CAAA,eAAA,CAAA,EAAA,yBAAA,OAAA;AACA;AACA,WAPA,MAQA,IAAA,OAAA,CAAA,CAAA,CAAA,KAAA,sBAAA,EAAA;AACA,YAAA,MAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,sBAAA,CAAA,EAAA,OAAA;AACA,WAFA,MAEA,IAAA,OAAA,CAAA,CAAA,CAAA,KAAA,iBAAA,EAAA;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,IAAA,CAAA,OAAA;AACA,WAFA,MAEA,IAAA,OAAA,CAAA,CAAA,CAAA,KAAA,cAAA,EAAA;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA,IAAA,CAAA,OAAA;AACA,WAFA,MAEA,IAAA,OAAA,CAAA,CAAA,CAAA,KAAA,gBAAA,EAAA;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,IAAA,CAAA,OAAA;AACA,WAFA,MAEA,IAAA,OAAA,CAAA,CAAA,CAAA,KAAA,qBAAA,EAAA,CAEA,CAFA,MAGA;AACA,YAAA,OAAA,CAAA,IAAA,CAAA,SAAA,EAAA,IAAA,CAAA,OAAA;AACA;AACA;;AAEA,QAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,EAl5CA,CAk5CA;;AACA,OAn5CA;;AAq5CA,WAAA,SAAA,CAAA,OAAA,GAAA,UAAA,KAAA,EAAA;AACA,YAAA,YAAA,GAAA;AACA,UAAA,IAAA,EAAA,KAAA,CAAA,IADA;AAEA,UAAA,SAAA,EAAA,IAAA,IAAA,GAAA,WAAA,EAFA;AAGA,UAAA,GAAA,EAAA,MAAA,CAAA,YAHA;AAIA,UAAA,UAAA,EAAA,MAAA,CAAA,SAAA,CAAA,UAJA;AAKA,UAAA,QAAA,EAAA,MAAA,CAAA,SAAA,CAAA,QALA;AAMA,UAAA,UAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AANA,SAAA;AAQA,QAAA,OAAA,CAAA,KAAA,CAAA,0BAAA,EAAA,YAAA;;AACA,QAAA,MAAA,CAAA,iBAAA,CAAA,sBAAA,IAAA,CAAA,SAAA,CAAA,YAAA,CAAA,EAAA,OAAA;;AACA,QAAA,MAAA,CAAA,cAAA,GAAA,OAAA;AACA,QAAA,MAAA,CAAA,mBAAA,GAAA,IAAA;AACA,OAbA;;AAeA,WAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,iCAAA;AACA,QAAA,MAAA,CAAA,cAAA,GAAA,cAAA;AACA,QAAA,MAAA,CAAA,mBAAA,GAAA,IAAA,CAHA,CAGA;;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,iCAAA;;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,OAAA,EALA,CAOA;;;AACA,QAAA,MAAA,CAAA,iBAAA,GAAA,UAAA,CAAA,YAAA;AACA,cAAA,MAAA,CAAA,mBAAA,EAAA;AAAA;AACA,YAAA,MAAA,CAAA,kBAAA,CAAA,wBAAA,EAAA,OAAA;;AACA,YAAA,MAAA,CAAA,0BAAA,GAAA,IAAA;AACA;AACA,SALA,EAKA,IALA,CAAA,CARA,CAaA;AAEA;;AACA,QAAA,MAAA,CAAA,kBAAA;AACA,OAjBA;AAkBA,KAjkDA;AAmkDA;AACA,IAAA,kBApkDA,gCAokDA;AAAA;;AACA,MAAA,UAAA,CAAA,YAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,gCAAA;;AACA,QAAA,MAAA,CAAA,iBAAA,CAAA,wBAAA,EAAA,MAAA;;AACA,QAAA,MAAA,CAAA,OAAA;AACA,OAJA,EAIA,IAJA,CAAA,CADA,CAKA;AACA,KA1kDA;AA2kDA;AAEA;AACA,IAAA,0BA9kDA,wCA8kDA;AAAA;;AACA,MAAA,MAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,YAAA;AACA;AACA,YAAA,MAAA,CAAA,0BAAA,EAAA;AACA,UAAA,MAAA,CAAA,kBAAA,CAAA,qBAAA,EAAA,SAAA;AACA;;AACA,QAAA,YAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,CALA,CAKA;;AACA,QAAA,MAAA,CAAA,mBAAA,GAAA,KAAA,CANA,CAMA;;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,MAAA;;AACA,QAAA,MAAA,CAAA,cAAA;;AACA,QAAA,MAAA,CAAA,kBAAA,GATA,CASA;;AACA,OAVA;AAYA,MAAA,MAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,YAAA;AACA,QAAA,MAAA,CAAA,mBAAA,GAAA,IAAA,CADA,CACA;;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,OAAA;;AACA,QAAA,MAAA,CAAA,0BAAA,GAAA,KAAA,CAHA,CAGA;AACA;;AACA,QAAA,MAAA,CAAA,iBAAA,GAAA,UAAA,CAAA,YAAA;AACA,cAAA,MAAA,CAAA,mBAAA,EAAA;AAAA;AACA,YAAA,MAAA,CAAA,0BAAA,GAAA,IAAA,CADA,CACA;;AACA,YAAA,MAAA,CAAA,kBAAA,CAAA,wBAAA,EAAA,OAAA;AACA;AACA,SALA,EAKA,IALA,CAAA,CALA,CAUA;AACA,OAXA;AAYA,KAvmDA;AAwmDA;AAEA,IAAA,WA1mDA,uBA0mDA,IA1mDA,EA0mDA,OA1mDA,EA0mDA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,OAAA;AAEA,UAAA,SAAA,GAAA,KAAA,iBAAA,EAAA,CAHA,CAGA;;AACA,UAAA,UAAA,GAAA;AAAA,QAAA,IAAA,EAAA,IAAA;AAAA,QAAA,KAAA,EAAA,SAAA;AAAA,QAAA,OAAA,EAAA;AAAA,OAAA,CAJA,CAIA;;AACA,UAAA,WAAA,GAAA,IAAA,CAAA,SAAA,CAAA,UAAA,CAAA,CALA,CAKA;;AACA,UAAA,YAAA,GAAA;AAAA,QAAA,KAAA,EAAA,SAAA;AAAA,QAAA,IAAA,EAAA,WAAA;AAAA,QAAA,OAAA,EAAA;AAAA,OAAA,CANA,CAMA;;AAEA,UAAA,KAAA,SAAA,CAAA,UAAA,KAAA,SAAA,CAAA,IAAA,EAAA;AACA,aAAA,SAAA,CAAA,IAAA,CAAA,WAAA,EADA,CAEA;AACA;;AACA,WAAA,YAAA,CAAA,IAAA,CAAA,YAAA,EAZA,CAYA;AACA,KAvnDA;AAynDA,IAAA,iBAznDA,+BAynDA;AACA;AACA,aAAA,IAAA,CAAA,GAAA,KAAA,GAAA,GAAA,KAAA,cAAA,EAAA;AACA,KA5nDA;AA8nDA,IAAA,qBA9nDA,iCA8nDA,SA9nDA,EA8nDA;AACA;AACA,UAAA,WAAA,GAAA,KAAA,YAAA,CAAA,KAAA,YAAA,CAAA,MAAA,GAAA,CAAA,CAAA;;AACA,UAAA,WAAA,IAAA,WAAA,CAAA,KAAA,KAAA,SAAA,EAAA;AACA,QAAA,WAAA,CAAA,OAAA,GAAA,IAAA;AACA;AACA,KApoDA;AAsoDA;AACA,IAAA,kBAvoDA,8BAuoDA,GAvoDA,EAuoDA,IAvoDA,EAuoDA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,8BAAA,EAAA,GAAA,EAAA,IAAA;AACA,WAAA,iBAAA,CAAA,GAAA,EAAA,IAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,YAAA,EAAA,GAAA,EAAA,IAAA;AACA,KA3oDA;AA4oDA;AAEA,IAAA,eAAA,EAAA,2BAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,aAAA,EAAA,cAAA,EADA,CACA;;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,YAAA,EAAA,oBAAA;AAEA,WAAA,IAAA,CAAA,KAAA,CAAA,WAAA;AACA,KAnpDA;AAqpDA,IAAA,kBArpDA,8BAqpDA,GArpDA,EAqpDA,GArpDA,EAqpDA,MArpDA,EAqpDA;AAAA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,0BAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,GAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA;AACA,UAAA,GAAA,GAAA;AACA,QAAA,UAAA,EAAA,SADA;AAEA,QAAA,OAAA,EAAA,SAFA;AAGA,QAAA,GAAA,EAAA,GAHA;AAIA,QAAA,GAAA,EAAA,GAJA;AAKA,QAAA,GAAA,EAAA,CALA;AAMA,QAAA,QAAA,EAAA,CANA;AAOA,QAAA,cAAA,EAAA;AAPA,OAAA;AASA,WAAA,MAAA,CAAA,MAAA,CAAA,oBAAA,EAAA,GAAA;AAEA,WAAA,IAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,GAAA,EAAA,GAAA;AAEA,MAAA,UAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,WAAA;AACA,OAFA,EAEA,IAFA,CAAA;AAGA,KA1qDA;AA2qDA;AACA,IAAA,cA5qDA,4BA4qDA;AACA;AACA,WAAA,kBAAA,GAFA,CAEA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,YAAA,EAHA,CAGA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,cAAA,EAJA,CAIA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,qBAAA,EALA,CAKA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,yBAAA,EANA,CAMA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,oBAAA,EAPA,CAOA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,sBAAA,EARA,CAQA;;AACA,WAAA,oBAAA,GATA,CASA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,uBAAA,EAVA,CAUA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,wBAAA,EAXA,CAWA;;AAEA,WAAA,WAAA,CAAA,aAAA,EAAA,wBAAA,EAbA,CAaA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,uBAAA,EAdA,CAcA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,gBAAA,EAfA,CAeA;AAEA;AACA;;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,gCAAA,EAnBA,CAmBA;;AAGA,WAAA,0BAAA,GAAA,KAAA;AACA,KAnsDA;AAqsDA,IAAA,oBArsDA,kCAqsDA;AACA,WAAA,gBAAA,GAAA,KAAA;AACA,WAAA,eAAA,GAAA,IAAA;AAEA,WAAA,QAAA,GAAA,IAAA;AACA,KA1sDA;AA4sDA,IAAA,aA5sDA,2BA4sDA;AACA,WAAA,WAAA,CAAA,eAAA,EAAA,cAAA;AACA,KA9sDA;AAgtDA,IAAA,YAhtDA,wBAgtDA,MAhtDA,EAgtDA;AAAA;;AACA,UAAA,CAAA,KAAA,iBAAA,IAAA,KAAA,iBAAA,IAAA,MAAA,CAAA,UAAA,KAAA,YAAA,EAAA;AACA,aAAA,gBAAA,GAAA,IAAA;AACA,aAAA,eAAA,GAAA,KAAA;;AAEA,YAAA,MAAA,CAAA,KAAA,KAAA,KAAA,EAAA;AACA;AACA,eAAA,WAAA,CAAA,aAAA,EAAA,sBAAA,MAAA,CAAA,IAAA,GAAA,GAAA,GAAA,MAAA,CAAA,OAAA;AACA,eAAA,OAAA,GAAA,EAAA;AACA;;AAEA,aAAA,iBAAA,GAAA,MAAA,CAAA,UAAA;AACA,aAAA,iBAAA,GAAA,MAAA,CAAA,WAAA;AACA,aAAA,gBAAA,GAAA,MAAA,CAAA,QAAA;;AACA,YAAA,MAAA,CAAA,UAAA,KAAA,YAAA,EAAA;AACA,eAAA,iBAAA,GAAA,IAAA;AACA;;AAEA,aAAA,QAAA,GAAA,IAAA;AAEA,aAAA,iBAAA,GAAA,EAAA;AACA,aAAA,WAAA,CAAA,OAAA,CAAA,UAAA,WAAA,EAAA;AACA,cAAA,WAAA,CAAA,IAAA,KAAA,MAAA,CAAA,iBAAA,EAAA;AACA,YAAA,MAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,WAAA;AACA;AACA,SAJA;AAKA,OAzBA,MAyBA;AACA,aAAA,kBAAA,CAAA,8BAAA,EAAA,OAAA;AACA;AAEA,KA9uDA;AAgvDA,IAAA,kBAhvDA,gCAgvDA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,KAAA,iBAAA,GAAA,aAAA;;AACA,cAAA,KAAA,iBAAA;AACA,aAAA,QAAA;AACA,iBAAA,KAAA,iBAAA;;AACA,aAAA,YAAA;AACA,iBAAA,KAAA,qBAAA;;AACA,aAAA,OAAA;AACA,iBAAA,KAAA,gBAAA;;AACA,aAAA,YAAA;AACA,iBAAA,KAAA,qBAAA;;AACA,aAAA,SAAA;AACA,iBAAA,KAAA,kBAAA;;AACA,aAAA,YAAA;AACA,iBAAA,KAAA,qBAAA;;AACA,aAAA,KAAA;AACA,iBAAA,KAAA,cAAA;;AACA;AACA,iBAAA,EAAA;AAhBA;AAkBA,KApwDA;AAswDA,IAAA,aAtwDA,2BAswDA;AAAA;;AACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,0BAAA,EAAA,KAAA,cAAA;AACA,WAAA,iBAAA,CAAA,yBAAA,KAAA,cAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,uBAAA,KAAA,cAAA,GAAA,GAAA,GAAA,KAAA,gBAAA;AACA,WAAA,iBAAA,GAAA,KAAA,iBAAA;AACA,WAAA,mBAAA,GAAA,IAAA;AAEA,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,UAAA,KAAA,MAAA,CAAA,iBAAA,EAAA;AACA,UAAA,MAAA,CAAA,MAAA,GAAA,MAAA,CAAA,cAAA;AACA,UAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,cAAA;AACA,UAAA,MAAA,CAAA,QAAA,GAAA,MAAA,CAAA,gBAAA;AACA;AACA,OANA;AAOA,KArxDA;AAsxDA,IAAA,WAtxDA,yBAsxDA;AAAA;;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,iBAAA;AACA,WAAA,iBAAA,CAAA,mBAAA,EAAA,MAAA;AACA,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,UAAA,KAAA,MAAA,CAAA,iBAAA,EAAA;AACA,UAAA,MAAA,CAAA,MAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,UAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,QAAA,GAAA,IAAA;AACA;AACA,OANA;AAOA,WAAA,cAAA,GAAA,EAAA;AACA,KAjyDA;AAkyDA,IAAA,aAlyDA,2BAkyDA;AACA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,uBAAA,KAAA,cAAA,GAAA,GAAA,GAAA,KAAA,cAAA,EAFA,CAGA;;AACA,WAAA,aAAA,CAAA,KAAA,iBAAA,EAAA,KAAA,cAAA;AACA,KAvyDA;AAyyDA,IAAA,aAzyDA,yBAyyDA,UAzyDA,EAyyDA,SAzyDA,EAyyDA;AAAA;AACA,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,UAAA,KAAA,UAAA,EAAA;AACA,UAAA,MAAA,CAAA,MAAA,GAAA,SAAA;AACA;AACA,OAJA;AAKA,KA/yDA;AAizDA,IAAA,cAjzDA,0BAizDA,OAjzDA,EAizDA,SAjzDA,EAizDA;AAAA;AACA,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,OAAA,KAAA,OAAA,EAAA;AACA,UAAA,MAAA,CAAA,MAAA,GAAA,SAAA;AACA;AACA,OAJA;AAKA,WAAA,uBAAA,GAAA,KAAA;AACA,KAxzDA;AA0zDA,IAAA,oBA1zDA,gCA0zDA,IA1zDA,EA0zDA,UA1zDA,EA0zDA,UA1zDA,EA0zDA;AAAA,UAAA,MAAA,uEAAA,IAAA;AAAA;AACA,WAAA,iBAAA,CAAA,yBAAA,IAAA,GAAA,GAAA,GAAA,UAAA,GAAA,GAAA,GAAA,UAAA,GAAA,GAAA,GAAA,MAAA,EAAA,MAAA;AACA,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,UAAA,KAAA,IAAA,EAAA;AACA,cAAA,MAAA,IAAA,IAAA,EAAA;AACA,YAAA,MAAA,CAAA,MAAA,GAAA,UAAA;AACA,WAFA,MAEA;AACA,YAAA,MAAA,CAAA,MAAA,GAAA,iBAAA;AACA;;AACA,UAAA,MAAA,CAAA,UAAA,GAAA,UAAA;AACA,UAAA,MAAA,CAAA,WAAA,GAAA,IAAA;AACA;AACA,OAVA;AAWA,WAAA,kBAAA,CAAA,UAAA,GAAA,oBAAA,EAAA,SAAA;AACA,WAAA,iBAAA,GAAA,IAAA;AACA,WAAA,uBAAA,GAAA,KAAA;;AAEA,UAAA,IAAA,KAAA,YAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,CAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,0BAAA;AACA,OAHA,MAGA,IAAA,IAAA,KAAA,OAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,CAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,qBAAA;AACA,OAHA,MAGA,IAAA,IAAA,KAAA,KAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA,CAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,qBAAA;AACA,OAHA,MAGA,IAAA,IAAA,KAAA,SAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,CAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,uBAAA;AACA,OAHA,MAGA,IAAA,IAAA,KAAA,QAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,CAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,sBAAA;AACA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,MAAA;AAEA,WAAA,IAAA,CAAA,KAAA,CAAA,sBAAA,EAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,MAAA;AACA,KA91DA;AA+1DA,IAAA,oBA/1DA,gCA+1DA,KA/1DA,EA+1DA;AACA;AACA,UAAA,KAAA,CAAA,IAAA,KAAA,YAAA,EAAA;AACA,aAAA,UAAA,GAAA,IAAA;AACA,aAAA,qBAAA,GAAA,KAAA,CAFA,CAEA;AACA;AACA;AACA;AACA;;AACA,aAAA,qBAAA;AACA,OARA,CASA;AATA,WAUA,IAAA,KAAA,CAAA,IAAA,KAAA,WAAA,IAAA,CAAA,KAAA,UAAA,EAAA;AACA,eAAA,qBAAA,GAAA,KAAA,CADA,CACA;AACA;AACA;AACA;AACA;;AACA,eAAA,qBAAA;AACA;AACA,KAn3DA;AAo3DA,IAAA,kBAp3DA,8BAo3DA,KAp3DA,EAo3DA;AACA;AACA,UAAA,KAAA,CAAA,IAAA,KAAA,UAAA,EAAA;AACA,QAAA,YAAA,CAAA,KAAA,oBAAA,CAAA,CADA,CACA;AACA;AACA;AACA;;AACA,aAAA,qBAAA;AACA,aAAA,oBAAA,GAAA,IAAA,CANA,CAMA;;AACA,aAAA,UAAA,GAAA,KAAA,CAPA,CAOA;AACA,OARA,CASA;AATA,WAUA,IAAA,KAAA,CAAA,IAAA,KAAA,SAAA,IAAA,CAAA,KAAA,UAAA,EAAA;AACA,UAAA,YAAA,CAAA,KAAA,oBAAA,CAAA,CADA,CACA;AACA;AACA;AACA;;AACA,eAAA,qBAAA;AACA,eAAA,oBAAA,GAAA,IAAA,CANA,CAMA;AACA;AACA,KAx4DA;AAy4DA,IAAA,qBAz4DA,mCAy4DA;AAAA;;AACA,UAAA,KAAA,iBAAA,EAAA;AACA,aAAA,kBAAA,CAAA,sCAAA,EAAA,OAAA;AACA;AACA;;AACA,UAAA,CAAA,KAAA,kBAAA,EAAA,OALA,CAKA;;AACA,WAAA,kBAAA,GAAA,KAAA,CANA,CAMA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA;AAEA,WAAA,gBAAA,GATA,CAWA;;AACA,MAAA,UAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,kBAAA,GAAA,IAAA;AACA,OAFA,EAEA,IAFA,CAAA,CAZA,CAcA;AACA,KAx5DA;AAy5DA,IAAA,yBAz5DA,uCAy5DA;AACA,UAAA,KAAA,iBAAA,EAAA;AACA,aAAA,kBAAA,CAAA,sCAAA,EAAA,OAAA;AACA;AACA,OAJA,CAKA;;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,6BAAA;AAEA,WAAA,oBAAA;AACA,KAl6DA;AAm6DA,IAAA,gBAn6DA,8BAm6DA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,4BAAA;AACA,WAAA,iBAAA,CAAA,oBAAA,EAAA,MAAA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,kBAAA;AACA,WAAA,uBAAA,GAAA,IAAA;AACA,KAx6DA;AAy6DA,IAAA,oBAz6DA,kCAy6DA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,gCAAA;AACA,WAAA,iBAAA,CAAA,yBAAA,EAAA,MAAA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,sBAAA;AACA,WAAA,uBAAA,GAAA,IAAA;AACA,KA96DA;AAg7DA,IAAA,mBAh7DA,+BAg7DA,OAh7DA,EAg7DA;AACA;AACA;AAEA,UAAA,KAAA,iBAAA,EAAA;AACA,YAAA,OAAA,KAAA,KAAA,EAAA;AACA,eAAA,iBAAA,CAAA,SAAA,EAAA,kDAAA,EAAA,qBAAA;AACA,SAFA,MAEA;AACA,eAAA,WAAA,CAAA,aAAA,EAAA,qBAAA;AACA,eAAA,iBAAA,CAAA,uBAAA,EAAA,MAAA;AACA,eAAA,iBAAA,GAAA,KAAA,CAHA,CAIA;AACA;AACA;AACA;;AAEA,eAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,CAAA;AACA,eAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,CAAA;AACA,eAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA,CAAA;AACA,eAAA,IAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,CAAA;AACA,eAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,CAAA;AACA,eAAA,eAAA;AACA;AACA,OAnBA,MAmBA;AACA,aAAA,kBAAA,CAAA,iCAAA,EAAA,OAAA;AACA;;AACA,WAAA,cAAA,GAAA,EAAA;AACA,KA38DA;AA68DA,IAAA,eA78DA,6BA68DA;AACA,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,MAAA,CAAA,UAAA;AACA,QAAA,MAAA,CAAA,WAAA,GAAA,KAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA;AACA,QAAA,MAAA,CAAA,QAAA,GAAA,IAAA;AACA,OALA;AAMA,WAAA,iBAAA,GAAA,EAAA;AACA,WAAA,WAAA,GAAA,EAAA;AACA,WAAA,OAAA,GAAA,EAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,2BAAA;AACA,KAx9DA;AA09DA,IAAA,iBA19DA,6BA09DA,KA19DA,EA09DA,SA19DA,EA09DA;AACA,UAAA,SAAA,EAAA;AACA,aAAA,QAAA,GAAA,KAAA;AACA,aAAA,iBAAA,CAAA,kBAAA,KAAA,EAAA,sDAAA,EAAA,mBAAA;AACA,OAHA,MAGA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,uBAAA,KAAA;AACA,aAAA,iBAAA,CAAA,uBAAA,KAAA,EAAA,MAAA;AACA;AACA,KAl+DA;AAo+DA,IAAA,kBAp+DA,gCAo+DA;AACA,WAAA,QAAA,GAAA,KAAA;AACA,WAAA,iBAAA,CAAA,SAAA,EAAA,oDAAA,EAAA,oBAAA;AACA,KAv+DA;AAy+DA,IAAA,mBAz+DA,iCAy+DA;AACA,WAAA,QAAA,GAAA,KAAA;AACA,WAAA,iBAAA,CAAA,WAAA,EAAA,sDAAA,EAAA,qBAAA;AACA,KA5+DA;AA8+DA,IAAA,WA9+DA,yBA8+DA;AACA,WAAA,QAAA,GAAA,KAAA;AACA,WAAA,iBAAA,CAAA,cAAA,EAAA,yDAAA,EAAA,aAAA;AACA,KAj/DA;AAm/DA,IAAA,sBAn/DA,oCAm/DA;AAAA;;AACA,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,UAAA,KAAA,YAAA,EAAA;AACA,cAAA,MAAA,CAAA,WAAA,KAAA,IAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,CAAA;;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,0BAAA;;AACA,YAAA,OAAA,CAAA,iBAAA,CAAA,0BAAA,EAAA,MAAA;AACA;AACA,SANA,MAMA,IAAA,MAAA,CAAA,UAAA,KAAA,OAAA,EAAA;AACA,cAAA,MAAA,CAAA,WAAA,KAAA,IAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,CAAA;;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,qBAAA;;AACA,YAAA,OAAA,CAAA,iBAAA,CAAA,qBAAA,EAAA,MAAA;AACA;AACA;AACA,OAdA;AAeA,WAAA,WAAA,CAAA,aAAA,EAAA,wBAAA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,oBAAA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,wBAAA;AAEA,KAvgEA;AAwgEA,IAAA,6BAxgEA,2CAwgEA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,6BAAA,EAAA,KAAA,OAAA;AACA,KA1gEA;AA4gEA,IAAA,eA5gEA,6BA4gEA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,uBAAA;AACA,WAAA,GAAA,GAAA,KAAA;AACA,KA/gEA;AAihEA,IAAA,YAjhEA,0BAihEA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,uBAAA;AACA,WAAA,GAAA,GAAA,KAAA;AACA,KAphEA;AAshEA,IAAA,iBAthEA,6BAshEA,OAthEA,EAshEA,IAthEA,EAshEA;AACA,UAAA,IAAA,IAAA,OAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,YAAA,OAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;AACA,OAHA,MAGA,IAAA,IAAA,IAAA,MAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,WAAA,OAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;AACA,OAHA,MAGA,IAAA,IAAA,IAAA,SAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,cAAA,OAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;AACA,OAHA,MAGA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,YAAA,OAAA;AACA;AACA,KAniEA;AAqiEA,IAAA,gBAriEA,8BAqiEA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,6BAAA;AACA,WAAA,GAAA,GAAA,KAAA;AACA,KAxiEA;AA0iEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAA,cApjEA,0BAojEA,KApjEA,EAojEA,KApjEA,EAojEA;AACA,UAAA,YAAA,GAAA,KAAA,cAAA,CAAA,SAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,KAAA,KAAA,WAAA,KAAA,GAAA,CAAA,IAAA,GAAA;AAAA,OAAA,CAAA;;AACA,UAAA,YAAA,KAAA,CAAA,CAAA,EAAA;AAAA;AACA;AACA,aAAA,cAAA,CAAA,YAAA,EAAA,KAAA,GAAA,KAAA;AACA,OAHA,MAGA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,UAAA,KAAA,GAAA,iCAAA;AACA;AACA,KA5jEA;AA8jEA,IAAA,oBA9jEA,gCA8jEA,IA9jEA,EA8jEA;AAAA;;AACA,MAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,IAAA,CAAA,KAAA,KAAA,EAAA,EAAA;AACA;AACA,UAAA,OAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,KAAA,GAAA,GAAA,GAAA,IAAA,CAAA,KAAA,EAAA,MAAA;;AACA,UAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA,GAAA,GAAA,GAAA,IAAA,CAAA,KAAA;AACA,SAJA,MAIA,IAAA,IAAA,CAAA,KAAA,IAAA,EAAA,IAAA,IAAA,CAAA,KAAA,KAAA,mBAAA,EAAA;AACA,UAAA,OAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,KAAA,GAAA,SAAA,EAAA,MAAA;;AACA,UAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA,GAAA,GAAA;AACA;AACA,OATA;AAUA,WAAA,kBAAA,CAAA,kCAAA,EAAA,SAAA;AACA,KA1kEA;AA4kEA,IAAA,mBA5kEA,+BA4kEA,SA5kEA,EA4kEA;AAAA;;AACA,UAAA,MAAA,GAAA,QAAA,CAAA,cAAA,CAAA,qBAAA,CAAA,CADA,CAEA;;AACA,UAAA,MAAA,CAAA,UAAA,EAAA;AACA,YAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,YAAA,GAAA,GAAA,IAAA,KAAA,EAAA;;AAEA,QAAA,GAAA,CAAA,MAAA,GAAA,YAAA;AACA,UAAA,MAAA,CAAA,KAAA,GAAA,GAAA,CAAA,KAAA;AACA,UAAA,MAAA,CAAA,MAAA,GAAA,GAAA,CAAA,MAAA;AACA,UAAA,GAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA;AACA,UAAA,GAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAJA,CAKA;AACA,SANA,CAJA,CAYA;;;AACA,QAAA,GAAA,CAAA,OAAA,GAAA,UAAA,KAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,iDAAA,SAAA;;AACA,UAAA,OAAA,CAAA,iBAAA,iDAAA,SAAA,GAAA,OAAA;AACA,SAHA;;AAKA,QAAA,GAAA,CAAA,GAAA,GAAA,SAAA;AACA;AACA,KAnmEA;AAqmEA,IAAA,YArmEA,wBAqmEA,OArmEA,EAqmEA;AAAA,2BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,uBACA;;;AACA,UAAA,WAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAFA,CAEA;;AAEA,UAAA,MAAA,KAAA,YAAA,EAAA;AACA;AACA,aAAA,UAAA,GAAA,WAAA;AACA,aAAA,iBAAA,CAAA,0BAAA,WAAA,EAAA,MAAA;AACA,aAAA,WAAA,CAAA,aAAA,EAAA,gBAAA,WAAA;AACA,OALA,MAKA,IAAA,MAAA,KAAA,YAAA,EAAA;AACA;AACA,aAAA,UAAA,GAAA,WAAA;AACA,aAAA,iBAAA,CAAA,0BAAA,WAAA,EAAA,MAAA;AACA,aAAA,WAAA,CAAA,aAAA,EAAA,gBAAA,WAAA;AACA;AACA,KApnEA;AAsnEA,IAAA,cAtnEA,0BAsnEA,OAtnEA,EAsnEA;AAAA,4BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,uBACA;;;AACA,UAAA,WAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAFA,CAEA;;AAEA,WAAA,WAAA,GAAA,WAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,EAAA,WAAA;AACA,WAAA,iBAAA,CAAA,4BAAA,WAAA,EAAA,MAAA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,iBAAA,WAAA;AACA,KA9nEA;AAgoEA,IAAA,UAhoEA,sBAgoEA,OAhoEA,EAgoEA;AAAA,4BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,uBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAFA,CAEA;;AACA,WAAA,SAAA,GAAA,QAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,0BAAA,EAAA,QAAA;AACA,WAAA,iBAAA,CAAA,6BAAA,QAAA,EAAA,MAAA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,gBAAA,QAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,QAAA;AACA,KAxoEA;AA0oEA,IAAA,OA1oEA,mBA0oEA,OA1oEA,EA0oEA;AAAA,4BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,uBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAFA,CAEA;;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,QAAA;AACA,WAAA,iBAAA,CAAA,2BAAA,QAAA,EAAA,MAAA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,mBAAA,QAAA;AACA,KAjpEA;AAmpEA,IAAA,SAnpEA,qBAmpEA,OAnpEA,EAmpEA;AAAA,4BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAFA,CAEA;;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,0BAAA,EAAA,QAAA;AACA,WAAA,iBAAA,CAAA,6BAAA,QAAA,EAAA,MAAA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,qBAAA,QAAA;AACA,KA1pEA;AA4pEA,IAAA,WA5pEA,uBA4pEA,OA5pEA,EA4pEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;AAEA;;;AACA,UAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,EAAA,EAAA,QAAA,CAAA,KAAA,CAAA,EAAA;AACA,YAAA,KAAA,KAAA,EAAA,EAAA;AACA,UAAA,KAAA,6BAAA,MAAA,CAAA;AACA,SAFA,MAEA,IAAA,KAAA,KAAA,MAAA,EAAA;AACA,UAAA,KAAA,6BAAA,IAAA,CAAA;AACA,SAFA,MAEA,IAAA,KAAA,KAAA,MAAA,EAAA;AACA,UAAA,KAAA,6BAAA,IAAA,CAAA;AACA,SAFA,MAEA,IAAA,KAAA,KAAA,MAAA,EAAA;AACA,UAAA,KAAA,6BAAA,IAAA,CAAA;AACA,SAFA,MAEA,IAAA,KAAA,KAAA,IAAA,EAAA;AACA,UAAA,KAAA,6BAAA,MAAA,CAAA;AACA;;AACA,aAAA,QAAA,GAAA,KAAA,CAZA,CAaA;;AACA,aAAA,iBAAA,CAAA,wBAAA,KAAA,EAAA,MAAA;AACA,aAAA,WAAA,CAAA,aAAA,EAAA,cAAA,KAAA;AACA,OAhBA,MAgBA;AACA;AACA,aAAA,kBAAA,wCAAA,KAAA,2DAAA,OAAA;AACA;AACA,KAprEA;AAsrEA,IAAA,oBAtrEA,gCAsrEA,OAtrEA,EAsrEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAFA,CAEA;;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,+BAAA,EAAA,QAAA;AACA,WAAA,iBAAA,CAAA,kCAAA,QAAA,EAAA,MAAA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,0BAAA,QAAA;AACA,KA7rEA;AA+rEA,IAAA,cA/rEA,0BA+rEA,OA/rEA,EA+rEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AADA,kDAGA,KAAA,OAHA;AAAA;;AAAA;AAGA,+DAAA;AAAA,cAAA,MAAA;;AACA,cAAA,MAAA,CAAA,UAAA,KAAA,YAAA,EAAA;AAEA,gBAAA,KAAA,KAAA,EAAA,IAAA,KAAA,KAAA,GAAA,EAAA;AACA,cAAA,MAAA,CAAA,MAAA,GAAA,EAAA;AACA,mBAAA,iBAAA,CAAA,4BAAA,CAAA,EAAA,MAAA;AACA,mBAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,EAAA;AACA,aAJA,MAIA;AACA,kBAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CADA,CACA;;AACA,cAAA,MAAA,CAAA,MAAA,GAAA,KAAA,GAAA,KAAA;AACA,mBAAA,iBAAA,CAAA,4BAAA,QAAA,EAAA,MAAA;AACA,mBAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,QAAA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAoBA,KAntEA;AAqtEA,IAAA,oBArtEA,gCAqtEA,OArtEA,EAqtEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAFA,CAEA;;AAGA,WAAA,iBAAA,CAAA,mCAAA,QAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,uBAAA,QAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,wCAAA,QAAA;AACA,KA7tEA;AA+tEA,IAAA,kBA/tEA,8BA+tEA,OA/tEA,EA+tEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,WAAA,iBAAA,CAAA,iCAAA,KAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,qBAAA,KAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,sCAAA,KAAA;AACA,KApuEA;AAsuEA,IAAA,kBAtuEA,8BAsuEA,OAtuEA,EAsuEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,WAAA,GAAA,UAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,iCAAA,WAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,qBAAA,WAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,sCAAA,WAAA;AACA,KA5uEA;AA8uEA,IAAA,aA9uEA,yBA8uEA,OA9uEA,EA8uEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,2BAAA,QAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,gBAAA,QAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,iCAAA,QAAA;AACA,KApvEA;AAsvEA,IAAA,sBAtvEA,kCAsvEA,OAtvEA,EAsvEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,uCAAA,QAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,yBAAA,QAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,0CAAA,QAAA;AACA,KA5vEA;AA8vEA,IAAA,eA9vEA,2BA8vEA,OA9vEA,EA8vEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,6BAAA,QAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,kBAAA,QAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,mCAAA,QAAA;AACA,KApwEA;AAswEA,IAAA,gBAtwEA,4BAswEA,OAtwEA,EAswEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,8BAAA,QAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,mBAAA,QAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,oCAAA,QAAA;AACA,KA5wEA;AA8wEA,IAAA,eA9wEA,2BA8wEA,OA9wEA,EA8wEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,uBAAA,QAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,qBAAA,QAAA;AACA,KAnxEA;AAoxEA,IAAA,WApxEA,uBAoxEA,OApxEA,EAoxEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,eAAA,QAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,cAAA,QAAA;AACA,KAzxEA;AA0xEA,IAAA,WA1xEA,uBA0xEA,OA1xEA,EA0xEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,eAAA,QAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,cAAA,QAAA;AACA,KA/xEA;AAgyEA,IAAA,WAhyEA,uBAgyEA,OAhyEA,EAgyEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,cAAA,QAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,cAAA,QAAA;AACA,KAryEA;AAuyEA,IAAA,aAvyEA,yBAuyEA,OAvyEA,EAuyEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,YAAA,GAAA,OAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,qBAAA,YAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,mBAAA,YAAA;AACA,KA5yEA;AA8yEA,IAAA,WA9yEA,uBA8yEA,OA9yEA,EA8yEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,YAAA,GAAA,OAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,eAAA,YAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,aAAA,EAAA,YAAA,GAAA,MAAA,GAAA,QAAA,EAJA,CAIA;;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,cAAA,YAAA,EALA,CAKA;AACA,KApzEA;AAszEA,IAAA,iBAtzEA,+BAszEA;AACA,UAAA,UAAA,GAAA,KAAA,gBAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,KAAA,KAAA,UAAA;AAAA,OAAA,EAAA,KAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,aAAA,EAAA,UAAA,GAAA,MAAA,GAAA,QAAA;AACA,KAzzEA;AA2zEA,IAAA,0BA3zEA,sCA2zEA,OA3zEA,EA2zEA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,uBAAA,GAAA,UAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,2BAAA,uBAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,6BAAA,uBAAA;AACA,KAh0EA;AAk0EA,IAAA,0BAl0EA,sCAk0EA,OAl0EA,EAk0EA;AAAA,6BACA,OAAA,CAAA,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,UACA,MADA;AAAA,UACA,KADA,wBACA;;;AACA,UAAA,uBAAA,GAAA,UAAA,CAAA,KAAA,CAAA;AACA,WAAA,iBAAA,CAAA,2BAAA,uBAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,6BAAA,uBAAA;AACA,KAv0EA;AAy0EA,IAAA,WAz0EA,uBAy0EA,QAz0EA,EAy0EA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAA,UAAA,0EAAA,CAAA;;AAAA;AAAA,qBACA,OAAA,CAAA,kBADA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEA,IAAA,OAAA,CAAA,UAAA,OAAA;AAAA,yBAAA,UAAA,CAAA,OAAA,EAAA,IAAA,CAAA;AAAA,iBAAA,CAFA;;AAAA;AAGA,oBAAA,CAAA,OAAA,CAAA,eAAA,EAAA;AACA,kBAAA,OAAA,CAAA,iBAAA,CAAA,yFAAA,EAAA,SAAA;;AACA,kBAAA,OAAA,CAAA,eAAA,GAAA,IAAA,CAFA,CAEA;AACA;;AANA;AAAA;;AAAA;AAAA,sBASA,OAAA,CAAA,sBAAA,KAAA,QATA;AAAA;AAAA;AAAA;;AAUA,gBAAA,OAAA,CAAA,iBAAA,CAAA,eAAA,QAAA,GAAA,yBAAA,EAAA,MAAA;;AAVA;;AAAA;AAcA,gBAAA,OAAA,CAAA,kBAAA,GAAA,IAAA;AACA,gBAAA,OAAA,CAAA,eAAA,GAAA,KAAA,CAfA,CAeA;;AACA,gBAAA,OAAA,CAAA,iBAAA,CAAA,kCAAA,QAAA,GAAA,eAAA,EAAA,MAAA;;AAEA,gBAAA,SAlBA,GAkBA,IAAA,IAAA,EAlBA;AAAA;;AAAA,sBAqBA,CAAA,QAAA,IAAA,OAAA,QAAA,KAAA,QArBA;AAAA;AAAA;AAAA;;AAAA,sBAsBA,IAAA,KAAA,CAAA,4BAAA,CAtBA;;AAAA;AAAA;AAAA,uBA0BA,KAAA,CAAA,QAAA,EAAA;AAAA,kBAAA,KAAA,EAAA;AAAA,iBAAA,CA1BA;;AAAA;AA0BA,gBAAA,QA1BA;;AAAA,oBA2BA,QAAA,CAAA,EA3BA;AAAA;AAAA;AAAA;;AAAA,sBA4BA,IAAA,KAAA,gDAAA,QAAA,CAAA,MAAA,EA5BA;;AAAA;AA+BA,gBAAA,aA/BA,GA+BA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,CA/BA;;AAAA,oBAgCA,aAhCA;AAAA;AAAA;AAAA;;AAAA,sBAiCA,IAAA,KAAA,CAAA,kCAAA,CAjCA;;AAAA;AAoCA,gBAAA,KApCA,GAoCA,QAAA,CAAA,aAAA,EAAA,EAAA,CApCA;;AAAA,sBAqCA,KAAA,CAAA,KAAA,CAAA,IAAA,KAAA,IAAA,CArCA;AAAA;AAAA;AAAA;;AAAA,sBAsCA,IAAA,KAAA,CAAA,8BAAA,CAtCA;;AAAA;AAyCA,gBAAA,MAzCA,GAyCA,CAzCA;AA2CA,gBAAA,MA3CA,GA2CA,QAAA,CAAA,IAAA,CAAA,SAAA,EA3CA;AA4CA,gBAAA,MA5CA,GA4CA,IAAA,cAAA,CAAA;AACA,kBAAA,KAAA,EAAA,eAAA,UAAA,EAAA;AACA,wBAAA,IAAA,GAAA,SAAA,IAAA,GAAA;AACA,sBAAA,MAAA,CAAA,IAAA,GAAA,IAAA,CAAA,gBAAA;AAAA,4BAAA,IAAA,QAAA,IAAA;AAAA,4BAAA,KAAA,QAAA,KAAA;;AACA,4BAAA,IAAA,EAAA;AACA,0BAAA,UAAA,CAAA,KAAA;AACA;AACA;;AACA,wBAAA,MAAA,IAAA,KAAA,CAAA,UAAA;AACA,4BAAA,OAAA,GAAA,MAAA,GAAA,KAAA,GAAA,GAAA;;AACA,4BAAA,IAAA,CAAA,KAAA,CAAA,OAAA,IAAA,EAAA,KAAA,CAAA,EAAA;AACA;AACA,0BAAA,OAAA,CAAA,0BAAA,CAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA;AACA,yBAVA,CAWA;;;AACA,wBAAA,UAAA,CAAA,OAAA,CAAA,KAAA;AACA,wBAAA,IAAA;AACA,uBAdA,EAcA,KAdA,CAcA,UAAA,KAAA,EAAA;AACA,wBAAA,OAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,KAAA;;AACA,wBAAA,OAAA,CAAA,iBAAA,CAAA,2BAAA,KAAA,CAAA,OAAA,EAAA,OAAA;;AACA,wBAAA,UAAA,CAAA,KAAA,CAAA,KAAA;AACA,uBAlBA;AAmBA,qBApBA;;AAqBA,oBAAA,IAAA;AACA;AAxBA,iBAAA,CA5CA;AAuEA,gBAAA,WAvEA,GAuEA,IAAA,QAAA,CAAA,MAAA,CAvEA;AAAA;AAAA,uBAwEA,WAAA,CAAA,IAAA,EAxEA;;AAAA;AAwEA,gBAAA,IAxEA;AA0EA;AACA,gBAAA,UA3EA,GA2EA,IAAA,UAAA,EA3EA;;AA4EA,gBAAA,UAAA,CAAA,MAAA,GAAA,YAAA;AACA,kBAAA,OAAA,CAAA,gBAAA,GAAA,UAAA,CAAA,MAAA;AAEA,sBAAA,OAAA,GAAA,IAAA,IAAA,EAAA;AACA,sBAAA,WAAA,GAAA,OAAA,CAAA,OAAA,KAAA,SAAA,CAAA,OAAA,EAAA;;AACA,kBAAA,OAAA,CAAA,iBAAA,CAAA,4CAAA,WAAA,GAAA,KAAA,EAAA,MAAA;;AACA,sBAAA,CAAA,OAAA,CAAA,eAAA,EAAA;AACA,oBAAA,OAAA,CAAA,kBAAA,iCAAA,WAAA,YAAA,MAAA;AACA;;AACA,kBAAA,OAAA,CAAA,sBAAA,GAAA,QAAA;;AACA,kBAAA,OAAA,CAAA,YAAA,CAAA,OAAA,CAAA,gBAAA;AACA,iBAXA;;AAaA,gBAAA,UAAA,CAAA,OAAA,GAAA,UAAA,KAAA,EAAA;AACA,kBAAA,OAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,KAAA;;AACA,kBAAA,OAAA,CAAA,iBAAA,CAAA,uBAAA,KAAA,CAAA,OAAA,EAAA,OAAA;AACA,iBAHA;;AAKA,gBAAA,UAAA,CAAA,iBAAA,CAAA,IAAA;AA9FA;AAAA;;AAAA;AAAA;AAAA;AAgGA,gBAAA,OAAA,CAAA,KAAA,CAAA,+CAAA;;AACA,gBAAA,OAAA,CAAA,iBAAA,CAAA,mDAAA,YAAA,OAAA,EAAA,OAAA,EAjGA,CAmGA;;;AAnGA,sBAoGA,UAAA,GAAA,CApGA;AAAA;AAAA;AAAA;;AAqGA,gBAAA,OAAA,CAAA,GAAA,CAAA,sBAAA;;AACA,gBAAA,OAAA,CAAA,iBAAA,CAAA,sBAAA,EAAA,SAAA;;AACA,gBAAA,OAAA,CAAA,kBAAA,GAAA,KAAA;;AACA,gBAAA,OAAA,CAAA,0BAAA,CAAA,GAAA;;AAxGA;AAAA,uBAyGA,OAAA,CAAA,WAAA,CAAA,QAAA,EAAA,UAAA,GAAA,CAAA,CAzGA;;AAAA;AAAA;AAAA;;AAAA;AA2GA,gBAAA,OAAA,CAAA,iBAAA,CAAA,uCAAA,EAAA,OAAA;;AA3GA;AAAA;AA8GA,gBAAA,OAAA,CAAA,kBAAA,GAAA,KAAA,CA9GA,CA8GA;;AA9GA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgHA,KAz7EA;AA47EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAA,0BAjiFA,sCAiiFA,GAjiFA,EAiiFA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,0BAAA,EAAA,GAAA;AACA,KAniFA;AAqiFA,IAAA,kBAriFA,8BAqiFA,KAriFA,EAqiFA;AACA,WAAA,eAAA,GAAA,KAAA;AACA,KAviFA;AAyiFA,IAAA,YAziFA,wBAyiFA,QAziFA,EAyiFA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAA,YAAA,6EAAA,CAAA,CAAA;AAAA,gBAAA,YAAA,6EAAA,CAAA,CAAA;AAAA,gBAAA,OAAA,6EAAA,EAAA;AAAA,wCACA,OADA,CACA,kBADA,EACA,kBADA,sCACA,IADA;AAEA,gBAAA,OAAA,CAAA,aAAA,GAAA,CAAA;AACA,gBAAA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,KAAA,CAAA,MAAA,KAAA,IAAA,GAAA,WAAA,GAAA,qBAAA;AACA,gBAAA,GAJA,GAIA,IAJA;AAKA,gBAAA,UALA,GAKA,IALA;AAMA,gBAAA,SANA,GAMA,IANA,EAQA;;AACA,gBAAA,YATA,GASA,SAAA,YAAA,CAAA,EAAA,EAAA;AACA,yBAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,oBAAA,UAAA,CAAA,YAAA;AACA,0BAAA,MAAA,GAAA,EAAA,EAAA;AACA,sBAAA,OAAA,CAAA,MAAA,CAAA;AACA,qBAHA,EAGA,CAHA,CAAA;AAIA,mBALA,CAAA;AAMA,iBAhBA;;AAAA;;AAAA,sBAmBA,EAAA,QAAA,YAAA,WAAA,KAAA,CAAA,WAAA,CAAA,MAAA,CAAA,QAAA,CAnBA;AAAA;AAAA;AAAA;;AAAA,sBAoBA,IAAA,KAAA,CAAA,yCAAA,CApBA;;AAAA;AAsBA,gBAAA,SAtBA,GAsBA,IAAA,WAAA,CAAA,QAAA,CAtBA;;AAAA,sBAwBA,SAAA,CAAA,MAAA,IAAA,QAAA,CAAA,OAAA,CAAA,eAAA,CAAA,GAAA,QAAA,CAAA,OAAA,CAAA,eAAA,CAxBA;AAAA;AAAA;AAAA;;AAAA,sBAyBA,IAAA,KAAA,CAAA,qBAAA,CAzBA;;AAAA;AAAA;AAAA,uBA4BA,YAAA,CAAA,YAAA;AACA,kBAAA,GAAA,GAAA,IAAA,EAAA,CAAA,GAAA,CAAA,QAAA,CAAA,OAAA,CAAA,eAAA,CAAA,EAAA,QAAA,CAAA,OAAA,CAAA,eAAA,CAAA,EAAA,EAAA,CAAA,QAAA,CAAA;AACA,kBAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,SAAA;AACA,kBAAA,OAAA,CAAA,aAAA,GAAA,EAAA;AACA,kBAAA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,KAAA,CAAA,MAAA,KAAA,IAAA,GAAA,YAAA,GAAA,wBAAA;AACA,yBAAA,IAAA;AACA,iBANA,CA5BA;;AAAA;AAoCA;AACA,gBAAA,GArCA,GAqCA,OAAA,CAAA,QArCA;AAsCA,gBAAA,aAtCA,GAsCA,KAtCA;AAuCA,gBAAA,IAvCA,GAuCA,CAvCA;;AAAA,sBA0CA,YAAA,IAAA,CAAA,CAAA,IAAA,YAAA,IAAA,CAAA,CA1CA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA4CA,YAAA,CAAA,YAAA;AACA,sBAAA,GAAA,GAAA,OAAA,CAAA,cAAA,CAAA,GAAA,EAAA,IAAA,CAAA;;AACA,kBAAA,OAAA,CAAA,aAAA,GAAA,EAAA;AACA,kBAAA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,KAAA,CAAA,MAAA,KAAA,IAAA,GAAA,aAAA,GAAA,oCAAA;AACA,yBAAA,GAAA;AACA,iBALA,CA5CA;;AAAA;AA4CA,gBAAA,MA5CA;AAmDA,gBAAA,kBAAA,GAAA,IAAA,CAnDA,CAoDA;;AACA,gBAAA,UAAA,GAAA,MAAA,CAAA,UAAA;AACA,gBAAA,UAAA,GAAA,MAAA,CAAA,UAAA;AAtDA;AAAA;;AAAA;AAwDA,gBAAA,UAAA,GAAA,YAAA,CAxDA,CAwDA;;AACA,gBAAA,UAAA,GAAA,YAAA,CAzDA,CAyDA;;AAzDA;AA4DA;AACA,oBAAA,GAAA,KAAA,IAAA,EAAA;AACA,kBAAA,aAAA,GAAA,IAAA;AACA,iBAFA,MAEA,IAAA,GAAA,KAAA,IAAA,EAAA;AACA,kBAAA,aAAA,GAAA,IAAA;AACA,iBAFA,MAEA,IAAA,GAAA,KAAA,IAAA,EAAA;AACA,kBAAA,aAAA,GAAA,IAAA;AACA,iBAFA,MAEA,IAAA,GAAA,KAAA,MAAA,EAAA;AACA,kBAAA,aAAA,GAAA,IAAA;AACA,iBAFA,MAEA;AACA,kBAAA,aAAA,GAAA,KAAA;AACA;;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,aAAA,EAAA,MAAA,EAAA,GAAA,EAxEA,CAyEA;;AAzEA;AAAA,uBA0EA,YAAA,CAAA,YAAA;AACA,sBAAA,MAAA,GAAA,aAAA,GACA,OAAA,CAAA,sBAAA,CAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA;AAAA,oBAAA,aAAA,EAAA,OAAA,CAAA,aAAA;AAAA,oBAAA,kBAAA,EAAA;AAAA,mBAAA,CADA,GAEA,OAAA,CAAA,sBAAA,CAAA,GAAA,EAAA,MAAA,EAAA;AAAA,oBAAA,aAAA,EAAA,OAAA,CAAA,aAAA;AAAA,oBAAA,kBAAA,EAAA;AAAA,mBAAA,CAFA;;AAIA,sBAAA,OAAA,CAAA,UAAA,IAAA,CAAA,IAAA,OAAA,CAAA,UAAA,IAAA,CAAA,IAAA,OAAA,CAAA,WAAA,IAAA,CAAA,EAAA;AACA,oBAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,UAAA;AACA,oBAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,UAAA;AACA,oBAAA,MAAA,CAAA,MAAA,GAAA,OAAA,CAAA,WAAA;AACA;;AAEA,kBAAA,OAAA,CAAA,aAAA,GAAA,EAAA;AACA,kBAAA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,KAAA,CAAA,MAAA,KAAA,IAAA,GAAA,UAAA,GAAA,0BAAA;AACA,yBAAA,MAAA;AACA,iBAdA,CA1EA;;AAAA;AA0EA,gBAAA,QA1EA;;AA0FA,oBAAA,QAAA,CAAA,SAAA,EAAA;AACA,kBAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,QAAA,CAAA,SAAA,EADA,CACA;;;AACA,kBAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,UAAA,EAAA,UAAA,EAFA,CAEA;;;AACA,kBAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,UAAA,EAAA,UAAA;AACA;;AAEA,gBAAA,OAAA,CAAA,sBAAA,GAAA;AACA,kBAAA,UAAA,EAAA,UADA;AAEA,kBAAA,UAAA,EAAA,UAFA;AAGA,kBAAA,GAAA,EAAA,GAHA;AAIA,kBAAA,QAAA,EAAA,QAJA;AAKA,kBAAA,aAAA,EAAA;AALA,iBAAA,CAhGA,CAwGA;;AAxGA;AAAA,uBAyGA,YAAA,CAAA,YAAA;AACA,sBAAA,MAAA,GAAA,aAAA,GACA,OAAA,CAAA,mBAAA,CAAA,GAAA,EAAA,QAAA,EAAA,OAAA,EAAA,GAAA,EAAA,UAAA,EAAA,UAAA,CADA,GAEA,OAAA,CAAA,mBAAA,CAAA,GAAA,EAAA,QAAA,EAAA,MAAA,EAAA,GAAA,EAAA,UAAA,EAAA,UAAA,CAFA,CADA,CAKA;;AACA,sBAAA,GAAA,EAAA;AACA,oBAAA,GAAA,CAAA,MAAA;AACA,oBAAA,GAAA,GAAA,IAAA;AACA;;AAEA,kBAAA,OAAA,CAAA,aAAA,GAAA,EAAA;AACA,kBAAA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,KAAA,CAAA,MAAA,KAAA,IAAA,GAAA,WAAA,GAAA,+BAAA;AACA,yBAAA,MAAA;AACA,iBAdA,CAzGA;;AAAA;AAyGA,gBAAA,UAzGA;;AAAA,qBA0HA,OAAA,CAAA,eA1HA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA2HA,YAAA,CAAA,YAAA;AACA,kBAAA,SAAA,GAAA,IAAA,EAAA,CAAA,GAAA,EAAA;AACA,kBAAA,EAAA,CAAA,MAAA,CAAA,UAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,IAAA,CAAA,OAAA,CAAA,WAAA,EAAA,OAAA,CAAA,YAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,YAAA;;AAEA,sBAAA,UAAA,EAAA;AACA,oBAAA,UAAA,CAAA,MAAA;AACA,oBAAA,UAAA,GAAA,IAAA;AACA;;AACA,kBAAA,OAAA,CAAA,aAAA,GAAA,CAAA;AACA,yBAAA,IAAA;AACA,iBAVA,CA3HA;;AAAA;AAuIA,gBAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,SAAA;;AAEA,oBAAA,SAAA,EAAA;AACA,kBAAA,SAAA,CAAA,MAAA;AACA,kBAAA,SAAA,GAAA,IAAA;AACA;;AA5IA;AAAA;;AAAA;AAAA;AAAA,uBA+IA,YAAA,CAAA,YAAA;AACA,sBAAA,IAAA,GAAA,IAAA,SAAA,CACA,IAAA,iBAAA,CAAA,UAAA,CAAA,IAAA,CADA,EAEA,UAAA,CAAA,IAFA,EAGA,UAAA,CAAA,IAHA,CAAA;;AAMA,sBAAA,UAAA,EAAA;AACA,oBAAA,UAAA,CAAA,MAAA;AACA,oBAAA,UAAA,GAAA,IAAA;AACA;;AACA,sBAAA,SAAA,EAAA;AACA,oBAAA,SAAA,CAAA,MAAA;AACA,oBAAA,SAAA,GAAA,IAAA;AACA;;AACA,kBAAA,OAAA,CAAA,aAAA,GAAA,EAAA;AACA,kBAAA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,KAAA,CAAA,MAAA,KAAA,IAAA,GAAA,mBAAA,GAAA,mCAAA;AACA,yBAAA,IAAA;AACA,iBAlBA,CA/IA;;AAAA;AA+IA,gBAAA,SA/IA;AAmKA,gBAAA,OAAA,CAAA,WAAA,GAAA,IAAA,CAnKA,CAqKA;;AArKA;AAAA,uBAsKA,YAAA,CAAA,YAAA;AACA,kBAAA,OAAA,CAAA,YAAA,CAAA,KAAA,GAAA,SAAA,CAAA,KAAA;AACA,kBAAA,OAAA,CAAA,YAAA,CAAA,MAAA,GAAA,SAAA,CAAA,MAAA;;AACA,kBAAA,OAAA,CAAA,SAAA,CAAA,YAAA,CAAA,SAAA,EAAA,CAAA,EAAA,CAAA;;AACA,kBAAA,OAAA,CAAA,aAAA,GAAA,EAAA;AACA,kBAAA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,KAAA,CAAA,MAAA,KAAA,IAAA,GAAA,aAAA,GAAA,gCAAA;AACA,yBAAA,IAAA;AACA,iBAPA,CAtKA;;AAAA;AA+KA;AACA,gBAAA,OAAA,CAAA,aAAA,GAAA,GAAA;AACA,gBAAA,OAAA,CAAA,mBAAA,GAAA,OAAA,CAAA,KAAA,CAAA,MAAA,KAAA,IAAA,GAAA,YAAA,GAAA,8BAAA;;AACA,gBAAA,OAAA,CAAA,aAAA;;AAlLA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqLA,gBAAA,OAAA,CAAA,WAAA,CAAA,0BAAA,EAAA,cAAA;;AACA,gBAAA,OAAA,CAAA,aAAA,GAAA,CAAA;AACA,gBAAA,OAAA,CAAA,mBAAA,GAAA,EAAA;;AAvLA;AAAA;AAyLA,gBAAA,OAAA,CAAA,aAAA,GAAA,CAAA,CAzLA,CA0LA;;AACA,oBAAA,GAAA,EAAA;AACA,kBAAA,GAAA,CAAA,MAAA;AACA,kBAAA,GAAA,GAAA,IAAA;AACA;;AACA,oBAAA,UAAA,EAAA;AACA,kBAAA,UAAA,CAAA,MAAA;AACA,kBAAA,UAAA,GAAA,IAAA;AACA;;AACA,oBAAA,SAAA,EAAA;AACA,kBAAA,SAAA,CAAA,MAAA;AACA,kBAAA,SAAA,GAAA,IAAA;AACA,iBAtMA,CAuMA;;;AACA,gBAAA,OAAA,CAAA,gBAAA,GAxMA,CAyMA;;;AACA,oBAAA,MAAA,CAAA,EAAA,EAAA;AACA,sBAAA;AAAA,oBAAA,MAAA,CAAA,EAAA;AAAA,mBAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AACA;;AA5MA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8MA,KAvvFA;;AA0vFA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,cAhwFA,0BAgwFA,MAhwFA,EAgwFA,IAhwFA,EAgwFA;AACA;AACA;AACA,UAAA,KAAA,GAAA,IAAA,EAAA,CAAA,GAAA,EAAA;AACA,UAAA,OAAA,GAAA,IAAA,EAAA,CAAA,GAAA,EAAA,CAJA,CAMA;;AACA,MAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAPA,CASA;;AACA,UAAA,IAAA,GAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,UAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAXA,CAaA;;AACA,MAAA,KAAA,CAAA,MAAA;AACA,MAAA,OAAA,CAAA,MAAA,GAfA,CAiBA;;AACA,UAAA,CAAA,EAAA,CAAA;;AACA,cAAA,IAAA;AACA,aAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA;;AACA,aAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA;;AACA,aAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA;;AACA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAJA,OAnBA,CA0BA;;;AACA,UAAA,QAAA,GAAA,KAAA,CA3BA,CA6BA;;AACA,UAAA,UAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA,UAAA,UAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,QAAA,EAAA,IAAA,GAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CA/BA,CAiCA;;AACA,UAAA,UAAA,IAAA,UAAA,EAAA;AACA,QAAA,UAAA,GAAA,UAAA,GAAA,CAAA;AACA;;AAEA,aAAA;AAAA,QAAA,UAAA,EAAA,UAAA;AAAA,QAAA,UAAA,EAAA;AAAA,OAAA;AACA,KAvyFA;;AAyyFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,sBAtzFA,kCAszFA,KAtzFA,EAszFA,SAtzFA,EAszFA;AAAA,UAAA,YAAA,uEAAA,MAAA;AAAA,UAAA,OAAA,uEAAA,EAAA;;AACA;AACA,UAAA,CAAA,KAAA,IAAA,KAAA,CAAA,IAAA,IAAA,CAAA,IAAA,KAAA,CAAA,IAAA,IAAA,CAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,SAAA;AACA,eAAA,EAAA;AACA;;AALA,kCAOA,OAPA,CAOA,aAPA;AAAA,UAOA,aAPA,sCAOA,IAPA;AAAA,mCAOA,OAPA,CAOA,kBAPA;AAAA,UAOA,kBAPA,uCAOA,IAPA;AAQA,UAAA,MAAA,GAAA,EAAA,CARA,CAWA;;AACA,UAAA,IAAA,GAAA,CAAA,CAZA,CAcA;;AACA,UAAA,YAAA,GAAA,SAAA,YAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AACA,YAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,GAAA,CAAA,IAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,GAAA,CAAA,IAAA,EAAA;AACA,cAAA;AACA,mBAAA,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,WAFA,CAEA,OAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,kDAAA,CAAA,cAAA,CAAA;AACA,mBAAA,CAAA;AACA;AACA;;AACA,eAAA,CAAA;AACA,OAVA,CAfA,CA2BA;;;AACA,UAAA,WAAA,GAAA,SAAA,WAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA;AACA,YAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,IAAA,CAAA,IAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,IAAA,CAAA,IAAA,EAAA;AACA,cAAA;AACA,gBAAA,GAAA,GAAA,IAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,gBAAA,GAAA,IAAA,GAAA,CAAA,MAAA,GAAA,CAAA,EAAA,GAAA,CAAA,CAAA,CAAA,GAAA,KAAA;AACA,WAHA,CAGA,OAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,kDAAA,CAAA,cAAA,CAAA;AACA;AACA;AACA,OATA;;AAWA,UAAA,SAAA,KAAA,MAAA,EAAA;AACA,YAAA,kBAAA,EAAA;AACA;AACA,cAAA,QAAA,GAAA,KAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,CAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA;AACA,iBAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,CAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA;AACA,kBAAA;AACA,gBAAA,QAAA,CAAA,YAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,eAFA,CAEA,OAAA,CAAA,EAAA,CACA;AACA;AACA;AACA;;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,QAAA;AACA;AACA,OAfA,MAeA,IAAA,SAAA,KAAA,OAAA,EAAA;AACA;AACA,YAAA,KAAA,CAAA,IAAA,GAAA,CAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,oBAAA;AACA,iBAAA,EAAA;AACA;;AAEA,YAAA,IAAA,GAAA,KAAA,CAAA,IAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,IAAA,CARA,CAUA;;AACA,YAAA,KAAA,GAAA,IAAA,EAAA,CAAA,GAAA,CAAA,IAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AACA,YAAA,KAAA,GAAA,IAAA,EAAA,CAAA,GAAA,CAAA,IAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AACA,YAAA,KAAA,GAAA,IAAA,EAAA,CAAA,GAAA,CAAA,IAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAbA,CAeA;;AACA,YAAA,UAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,EAAA,IAAA,IAAA,GAAA,IAAA,CAAA,CAAA,CAhBA,CAkBA;;AACA,YAAA,QAAA,EAAA,QAAA,EAAA,QAAA;;AACA,gBAAA,YAAA;AACA,eAAA,MAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,EAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA;;AACA,eAAA,IAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,EAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA;;AACA,eAAA,IAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,EAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA;;AACA,eAAA,IAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,EAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA;;AACA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,EAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AAxBA,SApBA,CA+CA;;;AACA,YAAA,OAAA,GAAA,EAAA;AACA,YAAA,OAAA,GAAA,EAAA;AACA,YAAA,OAAA,GAAA,EAAA,CAlDA,CAoDA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,IAAA,UAAA,EAAA;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,IAAA,UAAA,EAAA;AACA;AADA,wDAEA,QAFA;AAAA;;AAAA;AAEA,qEAAA;AAAA,oBAAA,GAAA;AACA,oBAAA,EAAA,GAAA,CAAA,GAAA,GAAA,CAAA,CAAA;AACA,oBAAA,EAAA,GAAA,CAAA,GAAA,GAAA,CAAA,CAAA;;AACA,oBAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,IAAA,IAAA,EAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA,EAAA;AACA,sBAAA;AACA,oBAAA,WAAA,CAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,CAAA;;AACA,wBAAA,aAAA,IAAA,CAAA,IAAA,UAAA,GAAA,CAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,UAAA,GAAA,CAAA,CAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,CAAA,IAAA,CAAA,YAAA,CAAA,KAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AACA;AACA,mBALA,CAKA,OAAA,CAAA,EAAA;AACA,oBAAA,OAAA,CAAA,KAAA,2CAAA,EAAA,cAAA,EAAA,QAAA,CAAA;AACA;AACA;AACA,eAfA,CAiBA;;AAjBA;AAAA;AAAA;AAAA;AAAA;;AAAA,wDAkBA,QAlBA;AAAA;;AAAA;AAkBA,qEAAA;AAAA,oBAAA,IAAA;;AACA,oBAAA,GAAA,GAAA,CAAA,GAAA,IAAA,CAAA,CAAA;;AACA,oBAAA,GAAA,GAAA,CAAA,GAAA,IAAA,CAAA,CAAA;;AACA,oBAAA,GAAA,GAAA,IAAA,IAAA,GAAA,GAAA,IAAA,IAAA,GAAA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA,EAAA;AACA,sBAAA;AACA,oBAAA,WAAA,CAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA;;AACA,wBAAA,aAAA,IAAA,CAAA,IAAA,UAAA,GAAA,CAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,UAAA,GAAA,CAAA,CAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,CAAA,IAAA,CAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,GAAA,CAAA;AACA;AACA,mBALA,CAKA,OAAA,CAAA,EAAA;AACA,oBAAA,OAAA,CAAA,KAAA,2CAAA,GAAA,cAAA,GAAA,QAAA,CAAA;AACA;AACA;AACA,eA/BA,CAiCA;;AAjCA;AAAA;AAAA;AAAA;AAAA;;AAAA,wDAkCA,QAlCA;AAAA;;AAAA;AAkCA,qEAAA;AAAA,oBAAA,KAAA;;AACA,oBAAA,IAAA,GAAA,CAAA,GAAA,KAAA,CAAA,CAAA;;AACA,oBAAA,IAAA,GAAA,CAAA,GAAA,KAAA,CAAA,CAAA;;AACA,oBAAA,IAAA,GAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,CAAA,IAAA,IAAA,IAAA,CAAA,EAAA;AACA,sBAAA;AACA,oBAAA,WAAA,CAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,CAAA;;AACA,wBAAA,aAAA,IAAA,CAAA,IAAA,UAAA,GAAA,CAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,UAAA,GAAA,CAAA,CAAA,KAAA,CAAA,EAAA;AACA,sBAAA,OAAA,CAAA,IAAA,CAAA,YAAA,CAAA,KAAA,EAAA,IAAA,EAAA,IAAA,CAAA;AACA;AACA,mBALA,CAKA,OAAA,CAAA,EAAA;AACA,oBAAA,OAAA,CAAA,KAAA,2CAAA,IAAA,cAAA,IAAA,QAAA,CAAA;AACA;AACA;AACA;AA/CA;AAAA;AAAA;AAAA;AAAA;AAgDA;AACA;;AAEA,YAAA,kBAAA,EAAA;AACA;AACA,cAAA,SAAA,GAAA,KAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,cAAA,SAAA,GAAA,KAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,cAAA,SAAA,GAAA,KAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAJA,CAMA;;AACA,cAAA,OAAA,GAAA,IAAA,GAAA,CAAA;AACA,cAAA,OAAA,GAAA,IAAA,GAAA,CAAA;;AAEA,eAAA,IAAA,GAAA,GAAA,CAAA,EAAA,GAAA,GAAA,OAAA,EAAA,GAAA,IAAA,CAAA,EAAA;AACA,iBAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,EAAA;AACA,kBAAA;AACA,oBAAA,YAAA,KAAA,MAAA,EAAA;AACA,kBAAA,SAAA,CAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,EAAA,CAAA,CAAA;AACA,sBAAA,EAAA,GAAA,YAAA,CAAA,KAAA,EAAA,GAAA,GAAA,CAAA,EAAA,EAAA,CAAA;AACA,sBAAA,EAAA,GAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,EAAA,GAAA,CAAA,CAAA;AACA,kBAAA,SAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AACA,kBAAA,SAAA,CAAA,YAAA,CAAA,KAAA,EAAA,GAAA,GAAA,CAAA,EAAA,EAAA,GAAA,CAAA,CAAA,CAAA;AACA,iBANA,MAMA,IAAA,YAAA,KAAA,IAAA,EAAA;AACA,sBAAA,EAAA,GAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,EAAA,CAAA;;AACA,sBAAA,GAAA,GAAA,YAAA,CAAA,KAAA,EAAA,GAAA,GAAA,CAAA,EAAA,EAAA,GAAA,CAAA,CAAA;;AACA,kBAAA,SAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AACA,kBAAA,SAAA,CAAA,YAAA,CAAA,KAAA,EAAA,GAAA,GAAA,CAAA,EAAA,EAAA,CAAA,CAAA;AACA,kBAAA,SAAA,CAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,EAAA,GAAA,CAAA,CAAA,CAAA;AACA,iBANA,MAMA,IAAA,YAAA,KAAA,IAAA,EAAA;AACA,sBAAA,GAAA,GAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,EAAA,CAAA;;AACA,sBAAA,GAAA,GAAA,YAAA,CAAA,KAAA,EAAA,GAAA,GAAA,CAAA,EAAA,EAAA,GAAA,CAAA,CAAA;;AACA,kBAAA,SAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AACA,kBAAA,SAAA,CAAA,YAAA,CAAA,KAAA,EAAA,GAAA,GAAA,CAAA,EAAA,EAAA,CAAA,CAAA;AACA,kBAAA,SAAA,CAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,EAAA,GAAA,CAAA,CAAA,CAAA;AACA,iBANA,MAMA,IAAA,YAAA,KAAA,IAAA,EAAA;AACA,kBAAA,SAAA,CAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,EAAA,CAAA,CAAA;;AACA,sBAAA,GAAA,GAAA,YAAA,CAAA,KAAA,EAAA,GAAA,GAAA,CAAA,EAAA,EAAA,CAAA;;AACA,sBAAA,GAAA,GAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,EAAA,GAAA,CAAA,CAAA;;AACA,kBAAA,SAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AACA,kBAAA,SAAA,CAAA,YAAA,CAAA,KAAA,EAAA,GAAA,GAAA,CAAA,EAAA,EAAA,GAAA,CAAA,CAAA,CAAA;AACA;AACA,eA1BA,CA0BA,OAAA,CAAA,EAAA;AACA,gBAAA,OAAA,CAAA,KAAA,4DAAA,GAAA,cAAA,EAAA,QAAA,CAAA;AACA;AACA;AACA;;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,CAAA;AACA,SArJA,CAuJA;;;AACA,YAAA,aAAA,IAAA,OAAA,CAAA,MAAA,GAAA,CAAA,IAAA,OAAA,CAAA,MAAA,GAAA,CAAA,IAAA,OAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA;AACA;AACA,gBAAA,KAAA,GAAA,KAAA,aAAA,CAAA,OAAA,CAAA;AACA,gBAAA,KAAA,GAAA,KAAA,aAAA,CAAA,OAAA,CAAA;AACA,gBAAA,KAAA,GAAA,KAAA,aAAA,CAAA,OAAA,CAAA,CAJA,CAMA;;AACA,gBAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,KAAA,GAAA,KAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA;AACA,gBAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,KAAA,GAAA,KAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA;AAEA,YAAA,MAAA,CAAA,YAAA,GAAA;AACA,cAAA,KAAA,EAAA,KADA;AAEA,cAAA,KAAA,EAAA;AAFA,aAAA;AAIA,WAdA,CAcA,OAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,CAAA,WAAA,EAAA,CAAA;AACA,YAAA,MAAA,CAAA,YAAA,GAAA;AAAA,cAAA,KAAA,EAAA,GAAA;AAAA,cAAA,KAAA,EAAA;AAAA,aAAA;AACA;AACA,SA3KA,CA6KA;;;AACA,YAAA;AACA,UAAA,KAAA,CAAA,MAAA;AACA,UAAA,KAAA,CAAA,MAAA;AACA,UAAA,KAAA,CAAA,MAAA;AACA,SAJA,CAIA,OAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,QAAA,EAAA,CAAA;AACA;AACA;;AAEA,aAAA,MAAA;AACA,KApiGA;;AAsiGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,aA7iGA,yBA6iGA,GA7iGA,EA6iGA;AAAA,UAAA,YAAA,uEAAA,CAAA;AAAA,UAAA,YAAA,uEAAA,CAAA;AACA,UAAA,GAAA,CAAA,MAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CADA,CAGA;;AACA,UAAA,QAAA,GAAA,GAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,KAAA;AAAA,OAAA,CAAA;AACA,UAAA,QAAA,CAAA,MAAA,KAAA,CAAA,EAAA,OAAA,GAAA,CAAA,MAAA,GAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CALA,CAOA;;AACA,UAAA,YAAA,GAAA,QAAA;;AACA,UAAA,QAAA,CAAA,MAAA,GAAA,KAAA,EAAA;AACA,QAAA,YAAA,GAAA,EAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,MAAA,GAAA,IAAA,CAAA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,QAAA,CAAA,MAAA,EAAA,CAAA,IAAA,IAAA,EAAA;AACA,UAAA,YAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA,CAAA;AACA;AACA,OAfA,CAiBA;;;AACA,MAAA,YAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA;AAAA,eAAA,CAAA,GAAA,CAAA;AAAA,OAAA,EAlBA,CAoBA;;AACA,UAAA,WAAA,GAAA,IAAA,CAAA,KAAA,CAAA,YAAA,CAAA,MAAA,IAAA,YAAA,GAAA,GAAA,CAAA,CAAA;AACA,UAAA,WAAA,GAAA,IAAA,CAAA,KAAA,CAAA,YAAA,CAAA,MAAA,IAAA,IAAA,YAAA,GAAA,GAAA,CAAA,CAAA,CAtBA,CAwBA;;AACA,UAAA,SAAA,GAAA,YAAA,CAAA,KAAA,CAAA,WAAA,EAAA,WAAA,CAAA,CAzBA,CA2BA;;AACA,UAAA,SAAA,CAAA,MAAA,KAAA,CAAA,EAAA,OAAA,YAAA,CAAA,IAAA,CAAA,KAAA,CAAA,YAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AAEA,UAAA,GAAA,GAAA,SAAA,CAAA,MAAA,CAAA,UAAA,GAAA,EAAA,GAAA;AAAA,eAAA,GAAA,GAAA,GAAA;AAAA,OAAA,EAAA,CAAA,CAAA;AACA,aAAA,GAAA,GAAA,SAAA,CAAA,MAAA;AACA,KA7kGA;;AA8kGA;AACA;AACA;AACA,IAAA,WAjlGA,uBAilGA,GAjlGA,EAilGA;AACA,UAAA,GAAA,CAAA,MAAA,KAAA,CAAA,EAAA,OAAA,CAAA;;AACA,UAAA,GAAA,CAAA,MAAA,GAAA,GAAA,EAAA;AACA;AACA,YAAA,SAAA,GAAA,mBAAA,GAAA,EAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA;AAAA,iBAAA,CAAA,GAAA,CAAA;AAAA,SAAA,CAAA;;AACA,eAAA,SAAA,CAAA,IAAA,CAAA,KAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA,OANA,CAQA;;;AACA,UAAA,OAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,GAAA,EAAA,CAAA,EAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,CAAA,CAAA;AACA;;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA;AAAA,eAAA,CAAA,GAAA,CAAA;AAAA,OAAA;AACA,aAAA,OAAA,CAAA,EAAA,CAAA,CAdA,CAcA;AACA,KAhmGA;;AAkmGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,mBA7mGA,+BA6mGA,KA7mGA,EA6mGA,QA7mGA,EA6mGA,SA7mGA,EA6mGA;AAAA,UAAA,YAAA,uEAAA,MAAA;AAAA,UAAA,UAAA;AAAA,UAAA,UAAA;;AACA;AACA,UAAA,UAAA,IAAA,UAAA,EAAA;AACA,QAAA,UAAA,GAAA,UAAA,GAAA,CAAA;AACA,OAJA,CAMA;;;AACA,UAAA,KAAA,GAAA,SAAA,UAAA,GAAA,UAAA,CAAA;AACA,UAAA,MAAA,GAAA,CAAA,UAAA,GAAA,KAAA;;AAEA,UAAA,SAAA,KAAA,MAAA,EAAA;AACA;AACA,YAAA,OAAA,GAAA,IAAA,EAAA,CAAA,GAAA,EAAA;AACA,YAAA,KAAA,GAAA,IAAA,EAAA,CAAA,GAAA,EAAA;AAEA,QAAA,KAAA,CAAA,SAAA,CAAA,KAAA,EAAA,EAAA,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA;AACA,QAAA,EAAA,CAAA,QAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,CAAA,eAAA;AACA,QAAA,KAAA,CAAA,MAAA;AAEA,eAAA,OAAA;AACA,OAVA,MAUA;AACA;AACA,YAAA,KAAA,GAAA,GAAA;AAAA,YAAA,KAAA,GAAA,GAAA;;AACA,YAAA,QAAA,IAAA,QAAA,CAAA,YAAA,EAAA;AACA,UAAA,KAAA,GAAA,QAAA,CAAA,YAAA,CAAA,KAAA;AACA,UAAA,KAAA,GAAA,QAAA,CAAA,YAAA,CAAA,KAAA;AACA,SANA,CAQA;AACA;;;AATA,2BAUA,KAAA,MAAA,CAAA,UAAA,EAAA,UAAA,EAAA,KAAA,EAAA,KAAA,CAVA;AAAA,YAUA,IAVA,gBAUA,IAVA;AAAA,YAUA,IAVA,gBAUA,IAVA;AAAA,YAUA,IAVA,gBAUA,IAVA,EAYA;;;AACA,YAAA,IAAA,GAAA,IAAA,EAAA,CAAA,GAAA,CAAA,KAAA,CAAA,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,EAAA,CAAA,OAAA,CAAA,CAbA,CAeA;AACA;;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,IAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,IAAA;AACA,YAAA,KAAA,GAAA,IAAA,CAAA,IAAA,CAnBA,CAqBA;;AACA,YAAA,QAAA,EAAA,QAAA,EAAA,QAAA;;AACA,gBAAA,YAAA;AACA,eAAA,MAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,EAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA;;AACA,eAAA,IAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,EAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA;;AACA,eAAA,IAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,EAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA;;AACA,eAAA,IAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,EAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA;;AACA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,EAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AAAA,cAAA,CAAA,EAAA,CAAA;AAAA,cAAA,CAAA,EAAA;AAAA,aAAA,CAAA;AAxBA,SAvBA,CAkDA;;;AACA,YAAA,OAAA,GAAA,KAAA,CAAA,OAAA,CAnDA,CAqDA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,IAAA,CAAA,EAAA;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,IAAA,CAAA,EAAA;AACA;AACA;AAFA,wDAGA,QAHA;AAAA;;AAAA;AAGA,qEAAA;AAAA,oBAAA,GAAA;AACA,oBAAA,GAAA,GAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,IAAA,IAAA,IAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA;;AACA,oBAAA,GAAA,GAAA,OAAA,CAAA,MAAA,EAAA;AACA,kBAAA,KAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA;AACA;AACA,eARA,CAUA;;AAVA;AAAA;AAAA;AAAA;AAAA;;AAAA,wDAWA,QAXA;AAAA;;AAAA;AAWA,qEAAA;AAAA,oBAAA,KAAA;;AACA,oBAAA,IAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA,IAAA,IAAA,IAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,oBAAA,IAAA,GAAA,OAAA,CAAA,MAAA,EAAA;AACA,kBAAA,KAAA,CAAA,IAAA,CAAA,GAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;AACA;AACA,eAhBA,CAkBA;;AAlBA;AAAA;AAAA;AAAA;AAAA;;AAAA,wDAmBA,QAnBA;AAAA;;AAAA;AAmBA,qEAAA;AAAA,oBAAA,KAAA;;AACA,oBAAA,KAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA,IAAA,IAAA,IAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,oBAAA,KAAA,GAAA,OAAA,CAAA,MAAA,EAAA;AACA,kBAAA,KAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAyBA;AACA,SAjFA,CAmFA;;;AACA,YAAA,QAAA,GAAA,IAAA,EAAA,CAAA,GAAA,EAAA;;AACA,YAAA,MAAA;;AACA,gBAAA,YAAA;AACA,eAAA,MAAA;AAAA,YAAA,MAAA,GAAA,EAAA,CAAA,kBAAA;AAAA;;AACA,eAAA,IAAA;AAAA,YAAA,MAAA,GAAA,EAAA,CAAA,kBAAA;AAAA;;AACA,eAAA,IAAA;AAAA,YAAA,MAAA,GAAA,EAAA,CAAA,kBAAA;AAAA;;AACA,eAAA,IAAA;AAAA,YAAA,MAAA,GAAA,EAAA,CAAA,kBAAA;AAAA;;AACA;AAAA,YAAA,MAAA,GAAA,EAAA,CAAA,eAAA;AALA;;AAQA,QAAA,EAAA,CAAA,QAAA,CAAA,IAAA,EAAA,QAAA,EAAA,MAAA;AACA,QAAA,IAAA,CAAA,MAAA;AAEA,eAAA,QAAA;AACA;AACA,KApuGA;;AAquGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,MA7uGA,kBA6uGA,UA7uGA,EA6uGA,UA7uGA,EA6uGA,KA7uGA,EA6uGA,KA7uGA,EA6uGA;AACA;AACA,UAAA,aAAA,aAAA,UAAA,cAAA,UAAA,cAAA,KAAA,cAAA,KAAA,CAAA,CAFA,CAIA;;AACA,UAAA,KAAA,QAAA,CAAA,UAAA,KAAA,aAAA,IACA,KAAA,QAAA,CAAA,IADA,IACA,KAAA,QAAA,CAAA,IADA,IACA,KAAA,QAAA,CAAA,IADA,EACA;AACA,eAAA;AACA,UAAA,IAAA,EAAA,KAAA,QAAA,CAAA,IADA;AAEA,UAAA,IAAA,EAAA,KAAA,QAAA,CAAA,IAFA;AAGA,UAAA,IAAA,EAAA,KAAA,QAAA,CAAA;AAHA,SAAA;AAKA,OAZA,CAcA;;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAfA,CAiBA;;AACA,UAAA,KAAA,GAAA,SAAA,UAAA,GAAA,UAAA,CAAA,CAlBA,CAoBA;;AACA,UAAA,IAAA,GAAA,KAAA,QAAA,CAAA,IAAA,IAAA,IAAA,UAAA,CAAA,KAAA,CAAA;AACA,UAAA,IAAA,GAAA,KAAA,QAAA,CAAA,IAAA,IAAA,IAAA,UAAA,CAAA,KAAA,CAAA;AACA,UAAA,IAAA,GAAA,KAAA,QAAA,CAAA,IAAA,IAAA,IAAA,UAAA,CAAA,KAAA,CAAA,CAvBA,CAygCA;;;AACA,WAAA,QAAA,CAAA,UAAA,GAAA,aAAA;AACA,WAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AAEA,aAAA;AAAA,QAAA,IAAA,EAAA,IAAA;AAAA,QAAA,IAAA,EAAA,IAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA;AACA,KApxGA;AAqxgBAxnHA,4BAwnHA,SAxnHA,EAwnHA,GAxnHA,EAwnHA,GAxnHA,EAwnHA;AACA,UAAA,GAAA,GAAA,GAAA,EAAA;AACA,aAAA,iBAAA,CAAA,yDAAA,EAAA,SAAA;AACA,QAAA,GAAA,GAAA,GAAA;AACA;;AACA,UAAA,SAAA,GAAA,IAAA,IAAA,EAAA,CALA,CAMA;;AACA,UAAA,KAAA,GAAA,SAAA,GAAA,GAAA,GAAA,CAAA;AACA,UAAA,IAAA,GAAA,CAAA,GAAA,GAAA,KAAA;;AAEA,UAAA,KAAA,GAAA,CAAA,EAAA;AACA,QAAA,KAAA,GAAA,CAAA;AACA,QAAA,IAAA,GAAA,CAAA;AACA,OAHA,MAGA,IAAA,KAAA,GAAA,GAAA,EAAA;AACA,QAAA,KAAA,GAAA,GAAA;AACA,QAAA,IAAA,GAAA,CAAA;AACA,OAhBA,CAkBA;;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,MAAA,EAAA,CAAA,IAAA,CAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AAAA;AACA,cAAA,KAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,UAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,IAAA;AACA,UAAA,SAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,IAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,GAAA,CAAA,GAAA,EAAA,KAAA,CAAA,CAAA;AACA;AACA;;AAEA,UAAA,OAAA,GAAA,IAAA,IAAA,EAAA;AACA,WAAA,iBAAA,CAAA,8BAAA,OAAA,CAAA,OAAA,KAAA,SAAA,CAAA,OAAA,EAAA,IAAA,KAAA,EAAA,MAAA;AACA,aAAA,SAAA;AACA,KAtpHA;AAupHA,IAAA,2BAvpHA,uCAupHA,SAvpHA,EAupHA,KAvpHA,EAupHA,KAvpHA,EAupHA,MAvpHA,EAupHA;AACA;AACA,UAAA,KAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,MAAA,EAAA,CAAA,IAAA,CAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AAAA;AACA,caAAA,SAAA;AACA,KA5qHA;AA8qHA,IAAA,UA9qHA,wBA8qHA;AACA,WAAA,YAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,WAAA,SAAA,GAAA,KAAA,YAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AAEA,WAAA,UAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,WAAA,OAAA,GAAA,KAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,KAprHA;AAsrHA;AACA,IAAA,iBAvrHA,6BAurHA,UAvrHA,EAurHA;AACA;AACA,WAAA,iBAAA,CAAA,yBAAA,UAAA,EAAA,MAAA;AACA,WAAA,cAAA,GAAA,UAAA;;AACA,UAAA,UAAA,EAAA;AACA;AACA,aAAA,qBAAA,GAAA,KAAA;AACA,aAAA,aAAA;AACA,OAJA,MAIA;AACA;AACA,aAAA,qBAAA,GAAA,IAAA,CAFA,CAGA;AACA;AACA,KApsHA;AAwsHA,IAAA,aAxsHA,2BAwsHA;AACA,UAAA,KAAA,YAAA,IAAA,IAAA,EAAA;AACA,aAAA,iBAAA,CAAA,yDAAA,EAAA,OAAA;AACA;AACA;;AACA,UAAA,CAAA,KAAA,WAAA,EAAA,OALA,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AACA,UAAA,eAAA,GAAA,KAAA,YAAA,CAAA,KAAA,GAAA,KAAA,KAAA;AACA,UAAA,gBAAA,GAAA,eAAA,GAAA,KAAA,eAAA,CA7BA,CA+BA;;AACA,UAAA,WAAA,GAAA,KAAA,QAAA,CAhCA,CAiCA;;AACA,UAAA,WAAA,GAAA,KAAA,QAAA,CAlCA,CAoCA;;AACA,UAAA,WAAA,GAAA,eAAA,GAAA,CAAA,GAAA,CAAA,EAAA;AACA,QAAA,WAAA,GAAA,eAAA,GAAA,CAAA;AACA,OAFA,MAEA,IAAA,WAAA,GAAA,eAAA,GAAA,CAAA,GAAA,KAAA,YAAA,CAAA,KAAA,EAAA;AACA,QAAA,WAAA,GAAA,KAAA,YAAA,CAAA,KAAA,GAAA,eAAA,GAAA,CAAA;AACA;;AAEA,UAAA,WAAA,GAAA,gBAAA,GAAA,CAAA,GAAA,CAAA,EAAA;AACA,QAAA,WAAA,GAAA,gBAAA,GAAA,CAAA;AACA,OAFA,MAEA,IAAA,WAAA,GAAA,gBAAA,GAAA,CAAA,GAAA,KAAA,YAAA,CAAA,MAAA,EAAA;AACA,QAAA,WAAA,GAAA,KAAA,YAAA,CAAA,MAAA,GAAA,gBAAA,GAAA,CAAA;AACA,OA/CA,CAiDA;AACA;;;AACA,UAAA,WAAA,GAAA,WAAA,GAAA,eAAA,GAAA,CAAA;AACA,UAAA,YAAA,GAAA,WAAA,GAAA,eAAA,GAAA,CAAA;AACA,UAAA,UAAA,GAAA,WAAA,GAAA,gBAAA,GAAA,CAAA;AACA,UAAA,aAAA,GAAA,WAAA,GAAA,gBAAA,GAAA,CAAA,CAtDA,CAwDA;;AACA,UAAA,OAAA,GAAA,KAAA,KAAA;AACA,UAAA,QAAA,GAAA,KAAA,KAAA,GAAA,KAAA,UAAA;AACA,UAAA,MAAA,GAAA,KAAA,KAAA;AACA,UAAA,SAAA,GAAA,KAAA,KAAA,GAAA,KAAA,UAAA,CA5DA,CA8DA;;AACA,UAAA,cAAA,GAAA,QAAA,IAAA,WAAA,IAAA,OAAA,IAAA,YAAA,IAAA,SAAA,IAAA,UAAA,IAAA,MAAA,IAAA,aAAA,CA/DA,CAiEA;;AACA,UAAA,UAAA,GAAA,CAAA,KAAA,KAAA,GAAA,WAAA,KAAA,MAAA,CAAA,UAAA,GAAA,eAAA,IAAA,KAAA,gBAAA,GAAA,MAAA,CAAA,UAAA,GAAA,eAAA,GAAA,CAAA;AACA,UAAA,UAAA,GAAA,CAAA,KAAA,KAAA,GAAA,UAAA,KAAA,MAAA,CAAA,WAAA,GAAA,gBAAA,IAAA,KAAA,gBAAA,GAAA,MAAA,CAAA,WAAA,GAAA,gBAAA,GAAA,CAAA,CAnEA,CAoEA;;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,KAAA,gBAAA,GAAA,MAAA,CAAA,UAAA,GAAA,eAAA,EAAA,KAAA,gBAAA,GAAA,MAAA,CAAA,WAAA,GAAA,gBAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,UAAA,EAAA,UAAA;AAGA,UAAA,MAAA,GAAA,KAAA,KAAA,CAAA,UAAA;AACA,UAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,MAAA,MAAA,CAAA,KAAA,GAAA,KAAA,WAAA;AACA,MAAA,MAAA,CAAA,MAAA,GAAA,KAAA,YAAA;AAEA,MAAA,GAAA,CAAA,SAAA,CAAA,KAAA,YAAA,EAAA,WAAA,EAAA,UAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA;AAEA,WAAA,QAAA,GAAA,WAAA;AACA,WAAA,QAAA,GAAA,WAAA;AACA,WAAA,YAAA,GAAA,eAAA;AACA,WAAA,aAAA,GAAA,gBAAA;AAEA,WAAA,IAAA,CAAA,KAAA,CAAA,8BAAA,EAAA,IAAA,EArFA,CAqFA;AACA;AACA;;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,qBAAA,KAAA,QAAA,GAAA,GAAA,GAAA,KAAA,QAAA,GAAA,GAAA,GAAA,KAAA,KAAA,EAxFA,CA0FA;;AACA,UAAA,KAAA,eAAA,IAAA,CAAA,CAAA,IAAA,KAAA,eAAA,IAAA,CAAA,CAAA,IAAA,KAAA,cAAA,EAAA;AACA,YAAA,MAAA,EAAA,WAAA,EAAA,WAAA,EAAA,KAAA,CADA,CAEA;;AACA,YAAA,KAAA,iBAAA,IAAA,CAAA,CAAA,EAAA;AACA,UAAA,MAAA,GAAA,KAAA,iBAAA,GAAA,KAAA,KAAA,GAAA,CAAA;AACA,cAAA,MAAA,IAAA,CAAA,EAAA,MAAA,GAAA,CAAA;AACA,UAAA,WAAA,GAAA,CAAA,KAAA,eAAA,GAAA,KAAA,SAAA,GAAA,KAAA,KAAA,GAAA,WAAA,IAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,eAAA;AACA,UAAA,WAAA,GAAA,CAAA,KAAA,eAAA,GAAA,KAAA,SAAA,GAAA,KAAA,KAAA,GAAA,UAAA,IAAA,GAAA,CAAA,MAAA,CAAA,MAAA,GAAA,gBAAA;AACA,UAAA,KAAA,GAAA,OAAA,CALA,CAKA;AACA,SANA,MAMA;AACA;AACA,UAAA,MAAA,GAAA,KAAA,KAAA,KAAA,CAFA,CAEA;;AACA,UAAA,WAAA,GAAA,CAAA,KAAA,eAAA,GAAA,KAAA,SAAA,GAAA,KAAA,KAAA,GAAA,WAAA,IAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,eAAA;AACA,UAAA,WAAA,GAAA,CAAA,KAAA,eAAA,GAAA,KAAA,SAAA,GAAA,KAAA,KAAA,GAAA,UAAA,IAAA,GAAA,CAAA,MAAA,CAAA,MAAA,GAAA,gBAAA;AACA,UAAA,KAAA,GAAA,KAAA,CALA,CAKA;AACA,SAfA,CAiBA;;;AACA,YAAA,SAAA,GAAA,GAAA,CAAA,YAAA,CAAA,WAAA,GAAA,MAAA,EAAA,WAAA,GAAA,MAAA,EAAA,IAAA,MAAA,EAAA,IAAA,MAAA,CAAA,CAlBA,CAmBA;;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,SAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,WAAA,EAAA,KAAA,EAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EArBA,CAsBA;;AACA,QAAA,GAAA,CAAA,SAAA;AACA,QAAA,GAAA,CAAA,GAAA,CAAA,WAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,EAAA,IAAA,IAAA,CAAA,EAAA;AACA,QAAA,GAAA,CAAA,WAAA,GAAA,KAAA;AACA,QAAA,GAAA,CAAA,SAAA,GAAA,CAAA;AACA,QAAA,GAAA,CAAA,MAAA;AACA,QAAA,GAAA,CAAA,SAAA;AACA;AAEA,KAl0HA;AAo0HA,IAAA,iBAp0HA,+BAo0HA,CAEA,CAt0HA;AAw0HA;AACA,IAAA,QAz0HA,oBAy0HA,IAz0HA,EAy0HA,KAz0HA,EAy0HA;AACA,UAAA,YAAA,GAAA,CAAA;AACA,aAAA,YAAA;AACA,YAAA,GAAA,GAAA,IAAA,CAAA,GAAA,EAAA;;AACA,YAAA,GAAA,GAAA,YAAA,IAAA,KAAA,EAAA;AAAA,4CAFA,IAEA;AAFA,YAAA,IAEA;AAAA;;AACA,UAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,IAAA;AACA,UAAA,YAAA,GAAA,GAAA;AACA;AACA,OANA;AAOA,KAl1HA;AAo1HA,IAAA,gBAp1HA,4BAo1HA,KAp1HA,EAo1HA,CAp1HA,EAo1HA,CAp1HA,EAo1HA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,4BAAA,CAAA,GAAA,QAAA,GAAA,CAAA;AACA,UAAA,IAAA,GAAA,IAAA,EAAA,CAAA,GAAA,CAAA,KAAA,CAAA,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,EAAA,CAAA,OAAA,CAAA;AACA,MAAA,KAAA,CAAA,SAAA,CAAA,IAAA,EAAA,EAAA,CAAA,KAAA,EAAA,SAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,KAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AACA,aAAA,IAAA;AACA,KAz1HA;AA21HA,IAAA,eA31HA,2BA21HA,KA31HA,EA21HA,KA31HA,EA21HA;AAAA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,mCAAA,EAAA,KAAA,CAAA,IAAA,EAAA,GAAA,EAAA,KAAA,CAAA,IAAA,EAAA,IAAA;;AACA,UAAA,EAAA,KAAA,YAAA,EAAA,CAAA,GAAA,CAAA,EAAA;AACA,cAAA,IAAA,KAAA,CAAA,oBAAA,CAAA;AACA;;AACA,MAAA,KAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,IAAA,OAAA,CAAA,eAAA,GAAA,KAAA,CAAA,IAAA,CAAA,CAAA;AACA,YAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,IAAA,OAAA,CAAA,eAAA,GAAA,KAAA,CAAA,IAAA,CAAA,CAAA;AACA,YAAA,MAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AAEA,QAAA,OAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAAA,gBAAA,EAAA,MAAA;AAEA,YAAA,MAAA,GAAA,IAAA,EAAA,CAAA,KAAA,CAAA,OAAA,EAAA,OAAA,CAAA;AACA,YAAA,KAAA,GAAA,IAAA,EAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA;AACA,YAAA,SAAA,GAAA,CAAA,CATA,CASA;;AAEA,QAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,SAAA,EAXA,CAaA;AACA;;AACA,YAAA,QAAA,GAAA,UAAA,CAAA,IAAA,CAAA,GAAA,CAAA;;AACA,YAAA,KAAA,CAAA,QAAA,CAAA,EAAA;AACA,UAAA,QAAA,GAAA,CAAA,CADA,CACA;AACA,SAlBA,CAoBA;;;AACA,YAAA,IAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA;AACA,YAAA,QAAA,GAAA,EAAA,CAAA,oBAAA;AACA,YAAA,SAAA,GAAA,CAAA;AACA,YAAA,SAAA,GAAA,IAAA,EAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA;AACA,YAAA,aAAA,GAAA,CAAA,CAzBA,CA2BA;;AACA,YAAA,KAAA,GAAA,OAAA,GAAA,IAAA,CAAA,MAAA,GAAA,EAAA,CA5BA,CA4BA;;AACA,YAAA,KAAA,GAAA,OAAA,GAAA,MAAA,GAAA,CAAA,CA7BA,CA6BA;AAEA;;AACA,QAAA,EAAA,CAAA,OAAA,CAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,KAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,aAAA;AACA,OAjCA;AAmCA,UAAA,SAAA,GAAA,IAAA,SAAA,CAAA,IAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,CAAA,EAAA,KAAA,CAAA,IAAA,EAAA,KAAA,CAAA,IAAA,CAAA;AAEA,aAAA,SAAA;AACA,KAt4HA;AAw4HA,IAAA,WAx4HA,uBAw4HA,eAx4HA,EAw4HA,eAx4HA,EAw4HA,KAx4HA,EAw4HA,KAx4HA,EAw4HA;AACA,UAAA,UAAA,GAAA,eAAA,GAAA,MAAA,CAAA,UAAA;AACA,UAAA,UAAA,GAAA,eAAA,GAAA,MAAA,CAAA,WAAA;AAEA,UAAA,QAAA,GAAA,KAAA,UAAA;AACA,UAAA,SAAA,GAAA,KAAA,UAAA;AAEA,UAAA,SAAA,GAAA,KAAA,GAAA,UAAA,GAAA,QAAA,GAAA,CAAA;AACA,UAAA,SAAA,GAAA,KAAA,GAAA,UAAA,GAAA,SAAA,GAAA,CAAA;AAEA,WAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,SAAA,EAAA,SAAA,EAAA,QAAA,EAAA,SAAA;AACA,KAn5HA;AAq5HA,IAAA,aAr5HA,yBAq5HA,eAr5HA,EAq5HA,eAr5HA,EAq5HA,OAr5HA,EAq5HA,OAr5HA,EAq5HA;AACA,UAAA,UAAA,GAAA,eAAA,GAAA,MAAA,CAAA,UAAA;AACA,UAAA,UAAA,GAAA,eAAA,GAAA,MAAA,CAAA,WAAA;AAEA,UAAA,WAAA,GAAA,OAAA,GAAA,UAAA;AACA,UAAA,WAAA,GAAA,OAAA,GAAA,UAAA;AAEA,WAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,WAAA,EAAA,WAAA;AACA,KA75HA;AA+5HA,IAAA,kBA/5HA,8BA+5HA,eA/5HA,EA+5HA,eA/5HA,EA+5HA,MA/5HA,EA+5HA,MA/5HA,EA+5HA;AACA,UAAA,UAAA,GAAA,eAAA,GAAA,MAAA,CAAA,UAAA;AACA,UAAA,UAAA,GAAA,eAAA,GAAA,MAAA,CAAA,WAAA;AAEA,UAAA,UAAA,GAAA,MAAA,GAAA,UAAA,GAAA,KAAA,CAAA;AACA,UAAA,UAAA,GAAA,MAAA,GAAA,UAAA,GAAA,KAAA,CAAA;AAEA,WAAA,IAAA,CAAA,KAAA,CAAA,wBAAA,EAAA,UAAA,EAAA,UAAA;AACA,KAv6HA;AAy6HA,IAAA,kBAz6HA,8BAy6HA,SAz6HA,EAy6HA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,6BAAA;AACA,UAAA,SAAA,GAAA,CACA,KAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CADA,EACA;AACA,MAAA,KAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAFA,EAEA;AACA,MAAA,KAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAHA,CAGA;AAHA,OAAA,CAFA,CAQA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,MAAA,EAAA,CAAA,IAAA,CAAA,EAAA;AACA,YAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,YAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,YAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAHA,CAKA;;AACA,QAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,QAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,QAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA;;AAEA,aAAA,SAAA;AACA,KA97HA;AAg8HA,IAAA,gBAh8HA,4BAg8HA,GAh8HA,EAg8HA,GAh8HA,EAg8HA;AACA,WAAA,mBAAA,GAAA,GAAA;AACA,WAAA,mBAAA,GAAA,GAAA;;AACA,UAAA,KAAA,gBAAA,EAAA;AACA,aAAA,YAAA,CAAA,KAAA,gBAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,UAAA,kBAAA,EAAA;AAAA,SAAA;AACA;;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,GAAA,EAAA,GAAA;AACA,KAv8HA;AA08HA,IAAA,qBA18HA,mCA08HA;AACA;AACA,WAAA,aAAA,GAAA,IAAA;AACA,WAAA,YAAA,CAAA,KAAA,gBAAA,EAAA,KAAA,mBAAA,EAAA,KAAA,mBAAA,EAAA;AAAA,QAAA,kBAAA,EAAA;AAAA,OAAA;AAEA,WAAA,UAAA,GAAA,KAAA,CAAA,KAAA;AACA,WAAA,UAAA,GAAA,KAAA,CAAA,KAAA;AAEA,UAAA,UAAA,GAAA,KAAA,qBAAA,CAAA,SAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,KAAA,KAAA,YAAA;AAAA,OAAA,CAAA;;AACA,UAAA,UAAA,KAAA,CAAA,CAAA,EAAA;AAAA;AACA;AACA,aAAA,qBAAA,CAAA,UAAA,EAAA,KAAA,GAAA,KAAA,UAAA;AACA,OAHA,MAGA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,0CAAA;AACA;;AAEA,UAAA,UAAA,GAAA,KAAA,qBAAA,CAAA,SAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,KAAA,KAAA,YAAA;AAAA,OAAA,CAAA;;AACA,UAAA,UAAA,KAAA,CAAA,CAAA,EAAA;AAAA;AACA;AACA,aAAA,qBAAA,CAAA,UAAA,EAAA,KAAA,GAAA,KAAA,UAAA;AACA,OAHA,MAGA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,0CAAA;AACA;AAEA,KAl+HA;AAq+HA,IAAA,0BAr+HA,wCAq+HA;AACA,UAAA,EAAA,KAAA,aAAA,YAAA,SAAA,CAAA,EAAA;AACA,cAAA,IAAA,KAAA,CAAA,oBAAA,CAAA;AACA,OAHA,CAKA;;;AACA,UAAA,IAAA,GAAA,EAAA,CAAA,gBAAA,CAAA,KAAA,aAAA,CAAA,CANA,CAQA;;AACA,UAAA,QAAA,GAAA,IAAA,EAAA,CAAA,SAAA,EAAA;AACA,MAAA,EAAA,CAAA,KAAA,CAAA,IAAA,EAAA,QAAA,EAVA,CAYA;;AACA,UAAA,CAAA,GAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,UAAA,CAAA,GAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,UAAA,CAAA,GAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAfA,CAiBA;;AACA,UAAA,OAAA,GAAA,IAAA,EAAA,CAAA,GAAA,EAAA;AACA,UAAA,OAAA,GAAA,IAAA,EAAA,CAAA,GAAA,EAAA;AACA,UAAA,OAAA,GAAA,IAAA,EAAA,CAAA,GAAA,EAAA;AACA,MAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAvBA,CAyBA;;AACA,UAAA,IAAA,GAAA,EAAA,CAAA,IAAA,CAAA,OAAA,EAAA,CAAA,CAAA;AACA,UAAA,IAAA,GAAA,EAAA,CAAA,IAAA,CAAA,OAAA,EAAA,CAAA,CAAA;AACA,UAAA,IAAA,GAAA,EAAA,CAAA,IAAA,CAAA,OAAA,EAAA,CAAA,CAAA,CA5BA,CA8BA;;AACA,UAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,GAAA,IAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA;AACA,UAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,GAAA,IAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAhCA,CAkCA;;AACA,MAAA,CAAA,CAAA,MAAA;AACA,MAAA,CAAA,CAAA,MAAA;AACA,MAAA,CAAA,CAAA,MAAA;AACA,MAAA,OAAA,CAAA,MAAA;AACA,MAAA,OAAA,CAAA,MAAA;AACA,MAAA,OAAA,CAAA,MAAA;AACA,MAAA,QAAA,CAAA,MAAA;AACA,MAAA,IAAA,CAAA,MAAA;AAEA,aAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;AACA,KAlhIA;AAohIA,IAAA,UAphIA,wBAohIA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA,YAAA,OAAA,EAAA,KAAA,WAAA,EAAA;AACA;AACA,cAAA,MAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,UAAA,MAAA,CAAA,GAAA,GAAA,YAAA,CAHA,CAGA;;AACA,UAAA,MAAA,CAAA,KAAA,GAAA,IAAA;;AACA,UAAA,MAAA,CAAA,MAAA,GAAA,YAAA;AACA,YAAA,OAAA;AACA,WAFA;;AAGA,UAAA,MAAA,CAAA,OAAA,GAAA,UAAA,KAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA;AACA,WAFA;;AAGA,UAAA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,MAAA;AACA,SAZA,MAYA;AACA;AACA,UAAA,OAAA;AACA;AACA,OAjBA,CAAA;AAkBA,KAviIA;AA0iIA,IAAA,SA1iIA,uBA0iIA;AAEA;AACA,UAAA,EAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,8BAAA;AACA,aAAA,iBAAA,CAAA,qBAAA,EAAA,MAAA;AACA,OAHA,MAGA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,mCAAA;AACA,aAAA,iBAAA,CAAA,2BAAA,EAAA,OAAA;AACA;;AAEA,WAAA,OAAA,GAAA,IAAA;AACA,KAtjIA;AAyjIA,IAAA,2BAAA,EAAA,uCAAA;AACA,UAAA,MAAA,GAAA,QAAA,CAAA,cAAA,CAAA,mBAAA,CAAA;AACA,UAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,UAAA,KAAA,GAAA,IAAA,KAAA,EAAA;;AACA,MAAA,KAAA,CAAA,MAAA,GAAA,YAAA;AACA;AACA,YAAA,gBAAA,GAAA,MAAA,CAAA,gBAAA,IAAA,CAAA,CAFA,CAIA;;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA,CAAA,KAAA,GAAA,gBAAA;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,KAAA,CAAA,MAAA,GAAA,gBAAA;AACA,QAAA,GAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,gBAAA,EAPA,CAOA;AAEA;;AACA,QAAA,GAAA,CAAA,SAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA;AACA,OAXA;;AAYA,MAAA,KAAA,CAAA,GAAA,GAAA,eAAA;AACA,KA1kIA;AA2kIA,IAAA,6BAAA,EAAA,yCAAA;AACA,UAAA,MAAA,GAAA,QAAA,CAAA,cAAA,CAAA,qBAAA,CAAA;AACA,UAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,UAAA,KAAA,GAAA,IAAA,KAAA,EAAA;;AACA,MAAA,KAAA,CAAA,MAAA,GAAA,YAAA;AACA;AACA,YAAA,gBAAA,GAAA,MAAA,CAAA,gBAAA,IAAA,CAAA,CAFA,CAIA;;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA,CAAA,KAAA,GAAA,gBAAA;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,KAAA,CAAA,MAAA,GAAA,gBAAA;AACA,QAAA,GAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,gBAAA,EAPA,CAOA;AAEA;;AACA,QAAA,GAAA,CAAA,SAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA;AACA,OAXA;;AAYA,MAAA,KAAA,CAAA,GAAA,GAAA,eAAA;AACA,KA5lIA;AA+lIA,IAAA,sBA/lIA,oCA+lIA;AACA;AACA,WAAA,gBAAA,GAAA,CAAA,EAAA;AACA,WAAA,sBAAA,GAAA,CAAA,EAAA;AACA,WAAA,wBAAA,GAAA,CAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,KAAA,EALA,CAOA;AACA,KAvmIA;AAymIA,IAAA,cAzmIA,4BAymIA;AACA,UAAA,KAAA,eAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,IAAA;AACA,OAFA,MAEA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,KAAA;AACA;;AACA,WAAA,gBAAA,GAAA,CAAA;AACA,WAAA,sBAAA,GAAA,CAAA,EAAA;AACA,WAAA,wBAAA,GAAA,CAAA,EAAA;AACA,KAlnIA;AAonIA,IAAA,oBApnIA,kCAonIA;AACA,WAAA,gBAAA,GAAA,CAAA,EAAA;AACA,WAAA,sBAAA,GAAA,CAAA;AACA,WAAA,wBAAA,GAAA,CAAA,EAAA;AAEA,WAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,KAAA;AACA,KA1nIA;AA6nIA,IAAA,qBA7nIA,mCA6nIA;AACA;AACA,UAAA,KAAA,aAAA,KAAA,MAAA,EAAA;AACA,aAAA,aAAA,GAAA,YAAA;AACA,aAAA,oBAAA;AACA,OAHA,MAIA,IAAA,KAAA,aAAA,KAAA,YAAA,EAAA;AACA,aAAA,aAAA,GAAA,cAAA;AACA,aAAA,sBAAA;AACA,OAHA,MAIA,IAAA,KAAA,aAAA,KAAA,cAAA,EAAA;AACA,aAAA,aAAA,GAAA,MAAA;AACA,aAAA,cAAA;AACA;AACA,KA3oIA;AA6oIA,IAAA,mBAAA,EAAA,+BAAA;AACA,UAAA,GAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,IAAA,KAAA,qBAAA,EAAA,EAAA;AACA,YAAA,MAAA,GAAA,KAAA,qBAAA,GAAA,CAAA,CAAA;;AACA,YAAA,MAAA,CAAA,SAAA,EAAA;AACA,UAAA,GAAA,GAAA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,SAAA,CAAA;AACA;AACA;;AACA,aAAA,GAAA;AACA,KAtpIA;AAupIA,IAAA,wBAAA,EAAA,oCAAA;AACA,UAAA,GAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,IAAA,KAAA,qBAAA,EAAA,EAAA;AACA,YAAA,MAAA,GAAA,KAAA,qBAAA,GAAA,CAAA,CAAA;;AACA,YAAA,MAAA,CAAA,cAAA,EAAA;AACA,UAAA,GAAA,GAAA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,cAAA,CAAA;AACA;AACA;;AACA,aAAA,GAAA;AACA,KAhqIA;AAiqIA,IAAA,gBAAA,EAAA,0BAAA,YAAA,EAAA;AACA,WAAA,GAAA,GAAA,KAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,YAAA,EAAA,YAAA;AACA,KApqIA;AAqqIA,IAAA,aAAA,EAAA,uBAAA,YAAA,EAAA;AACA,aAAA,CAAA,CAAA,GAAA,CAAA,KAAA,MAAA,CAAA,KAAA,EAAA,YAAA,CAAA;AACA,KAvqIA;AAwqIA,IAAA,qBAAA,EAAA,iCAAA;AAAA;;AACA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,UAAA,EAAA;AAAA,QAAA,OAAA,EAAA,eAAA;AAAA,QAAA,QAAA,EAAA,KAAA,MAAA,CAAA,IAAA,CAAA,UAAA,CAAA,KAAA;AAAA,OAAA,EAFA,CAIA;AACA;;AACA,UAAA,IAAA,GAAA,IAAA;;AAEA,UAAA,CAAA,KAAA,QAAA,EAAA;AACA,aAAA,KAAA,CAAA,IAAA,CAAA,UAAA,GAAA,CAAA;AACA,YAAA,CAAA,GAAA,IAAA,IAAA,EAAA;;AACA,YAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA;AACA,UAAA,CAAA,GAAA,IAAA,MAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,MAAA,EAAA;AACA,eAAA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,CAAA,MAAA,EAAA;AACA,eAAA,cAAA,GAAA,IAAA;AACA;;AAEA,YAAA,KAAA,MAAA,CAAA,KAAA,CAAA,GAAA,IAAA,KAAA,MAAA,CAAA,KAAA,CAAA,GAAA,EAAA;AACA,cAAA,GAAA,GAAA;AAAA,YAAA,GAAA,EAAA,MAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AAAA,YAAA,GAAA,EAAA,MAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AAAA,YAAA,GAAA,EAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,GAAA,MAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AAAA,YAAA,QAAA,EAAA;AAAA,WAAA;AACA,UAAA,GAAA,CAAA,eAAA,CAAA,GAAA,EAAA,IAAA,EAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,oBAAA,EAAA,GAAA;AACA,WAFA,EAEA,UAAA,KAAA,EAAA;AAAA,YAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AAAA,WAFA;AAGA;;AAEA,aAAA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,EAAA,GAAA,MAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,CAAA;AACA,aAAA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,KAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,GAAA,GAAA,MAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,KAAA,IAAA,CAAA,EAAA,GAAA,GAAA;AACA,aAAA,KAAA,CAAA,IAAA,CAAA,GAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,GAAA,GAAA,MAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,GAAA,MAAA,IAAA,CAAA,EAAA,GAAA,GAAA;AAEA,aAAA,QAAA,GAAA,IAAA;AACA;;AAEA,UAAA,KAAA,MAAA,CAAA,IAAA,CAAA,UAAA,CAAA,aAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,kBAAA,CAAA,KAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,IAAA;AACA,aAAA,iBAAA,CAAA,yBAAA,IAAA,EAAA,MAAA;AACA,eAAA,GAAA,CAAA,qBAAA,CAAA,IAAA,EAAA,IAAA,CAAA,UAAA,EAAA,EAAA;AACA,cAAA,CAAA,EAAA,EAAA;AACA;AACA;;AACA,cAAA,GAAA,GAAA,GAAA,CAAA,gBAAA,CAAA,EAAA,CAAA;;AACA,cAAA,CAAA,GAAA,EAAA;AACA,YAAA,GAAA,GAAA,OAAA,CAAA,KAAA,CAAA,SAAA,CAAA,EAAA,CAAA,KAAA,EAAA,EAAA,CAAA;;AACA,YAAA,OAAA,CAAA,eAAA,CAAA,GAAA,CAAA,GAAA;AACA;;AACA,cAAA,CAAA,GAAA,EAAA;AACA,YAAA,OAAA,CAAA,OAAA,CAAA,+BAAA,EAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA,UAAA,GAAA,CAAA,oBAAA,CAAA,GAAA;AACA,SAbA,EAaA,UAAA,GAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,GAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,uCAAA,IAAA;;AACA,UAAA,OAAA,CAAA,iBAAA,CAAA,uCAAA,IAAA,EAAA,OAAA;AACA,SAjBA,CAAA;AAkBA;AACA,KA9tIA;AAguIA,IAAA,YAhuIA,0BAguIA;AACA;AACA,MAAA,MAAA,CAAA,YAAA,CAAA,YAAA;AACA,KAnuIA;AAquIA,IAAA,cAAA,EAAA,wBAAA,IAAA,EAAA;AACA,aAAA,IAAA;AACA,KAvuIA;AAyuIA,IAAA,cAAA,EAAA,wBAAA,IAAA,EAAA;AACA,aAAA,IAAA,CAAA,WAAA,CAAA;AAAA,QAAA,EAAA,EAAA,gBAAA;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,QAAA,OAAA,EAAA;AAAA,OAAA,CAAA;AACA,KA3uIA;AA6uIA;AACA,IAAA,iBAAA,EAAA,2BAAA,KAAA,EAAA;AACA;AACA,UAAA,OAAA,KAAA,KAAA,QAAA,EAAA;AACA,QAAA,KAAA,GAAA,UAAA,CAAA,KAAA,CAAA;AACA;;AAEA,aAAA,OAAA,KAAA,KAAA,QAAA,IACA,CAAA,KAAA,CAAA,KAAA,CADA,IAEA,QAAA,CAAA,KAAA,CAFA,IAGA,KAAA,IAAA,CAAA,GAHA,IAIA,KAAA,IAAA,GAJA;AAKA,KAzvIA;AA2vIA,IAAA,cAAA,EAAA,wBAAA,SAAA,EAAA,UAAA,EAAA,GAAA,EAAA;AACA;AACA,UAAA,EAAA,GAAA,SAAA;AACA,UAAA,GAAA,GAAA,UAAA;;AAEA,UAAA,OAAA,EAAA,KAAA,QAAA,EAAA;AACA,QAAA,EAAA,GAAA,UAAA,CAAA,EAAA,CAAA;AACA;;AACA,UAAA,OAAA,GAAA,KAAA,QAAA,EAAA;AACA,QAAA,GAAA,GAAA,UAAA,CAAA,GAAA,CAAA;AACA,OAVA,CAYA;;;AACA,UAAA,CAAA,KAAA,iBAAA,CAAA,EAAA,CAAA,IAAA,CAAA,KAAA,iBAAA,CAAA,GAAA,CAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,UAAA,EAAA;AAAA,UAAA,SAAA,EAAA,SAAA;AAAA,UAAA,UAAA,EAAA,UAAA;AAAA,UAAA,SAAA,EAAA;AAAA,YAAA,EAAA,EAAA,EAAA;AAAA,YAAA,GAAA,EAAA;AAAA;AAAA,SAAA;AACA;AACA;;AAEA,UAAA;AACA,YAAA,EAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,CAAA;AACA,QAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,IAAA,EAAA;AACA,QAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,IAAA,EAAA;AACA,QAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA,CAAA;AACA,OALA,CAKA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,SAAA,EAAA,KAAA,EAAA;AAAA,UAAA,SAAA,EAAA,SAAA;AAAA,UAAA,UAAA,EAAA,UAAA;AAAA,UAAA,SAAA,EAAA;AAAA,YAAA,EAAA,EAAA,EAAA;AAAA,YAAA,GAAA,EAAA;AAAA;AAAA,SAAA;AACA;AACA,KArxIA;AAuxIA,IAAA,aAAA,EAAA,uBAAA,IAAA,EAAA,KAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,gCAAA,EADA,CAGA;;AACA,UAAA,YAAA,GAAA;AACA,QAAA,EAAA,EAAA,iBAAA,IAAA,CAAA,GAAA,EADA;AAEA,QAAA,UAAA,EAAA,EAFA;AAGA,QAAA,KAAA,EAAA,CAAA,aAAA,CAHA;AAGA;AACA,QAAA,KAAA,EAAA,CAAA,WAAA,CAJA;AAKA,QAAA,KAAA,EAAA;AALA,OAAA;AAQA,UAAA,MAAA,GAAA,IAAA,CAAA,SAAA,CAAA,QAAA,EAAA,YAAA,CAAA;AAEA,MAAA,MAAA,CAAA,MAAA;AACA,MAAA,KAAA,CAAA,GAAA,CAAA,MAAA,EAfA,CAiBA;;AACA,MAAA,IAAA,CAAA,IAAA,CAAA,SAAA,GAAA,MAAA;AACA,MAAA,IAAA,CAAA,YAAA,CAAA,MAAA,EAnBA,CAqBA;;AACA,UAAA,EAAA,GAAA,MAAA,CAAA,GAAA;AACA,WAAA,cAAA,CAAA,OAAA,EAAA,OAAA,EAAA,EAAA;AACA,MAAA,MAAA,CAAA,GAAA,GAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,EAAA;AACA,MAAA,MAAA,CAAA,KAAA,GAAA,EAAA;AACA,MAAA,MAAA,CAAA,KAAA,GAAA,CAAA;AACA,MAAA,MAAA,CAAA,IAAA,GAAA,CAAA,IAAA,EAAA,IAAA,CAAA;AACA,MAAA,MAAA,CAAA,KAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,CAAA;AACA,MAAA,MAAA,CAAA,YAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAEA,aAAA,MAAA;AACA,KAxzIA;AA0zIA,IAAA,eA1zIA,2BA0zIA,SA1zIA,EA0zIA,UA1zIA,EA0zIA;AACA;AACA,UAAA,CAAA,YAAA,IAAA,CAAA,YAAA,CAAA,GAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,0BAAA;AACA;AACA;;AAEA,UAAA,EAAA,GAAA,YAAA,CAAA,GAAA;AACA,WAAA,cAAA,CAAA,SAAA,EAAA,UAAA,EAAA,EAAA;AACA,MAAA,YAAA,CAAA,GAAA,GAAA,EAAA,CATA,CAUA;AACA,KAr0IA;AAu0IA,IAAA,qBAv0IA,iCAu0IA,MAv0IA,EAu0IA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,aAAA,EAAA,MAAA,EADA,CAGA;;AACA,UAAA,CAAA,YAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,0BAAA;AACA;AACA;;AAEA,UAAA,MAAA,KAAA,QAAA,EAAA;AACA,QAAA,YAAA,CAAA,KAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,CAAA;AACA,QAAA,YAAA,CAAA,YAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AACA,OAHA,MAGA;AACA,QAAA,YAAA,CAAA,KAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,CAAA;AACA,QAAA,YAAA,CAAA,YAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,KAv1IA;AAy1IA,IAAA,sBAz1IA,kCAy1IA,MAz1IA,EAy1IA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,MAAA;AACA,KA31IA;AA61IA;AACA,IAAA,qBAAA,EAAA,+BAAA,IAAA,EAAA,KAAA,EAAA,WAAA,EAAA,KAAA,EAAA,IAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,mEAAA,IAAA,GAAA;AAAA,QAAA,WAAA,EAAA,WAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;;AAEA,UAAA;AACA;AACA,YAAA,CAAA,WAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,WAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,WAAA;AACA,iBAAA,IAAA;AACA;;AAEA,YAAA,WAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,0FAAA,WAAA,CAAA,MAAA;AACA,iBAAA,IAAA;AACA,SAVA,CAYA;;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,WAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,KAAA,GAAA,WAAA,CAAA,CAAA,CAAA;;AACA,cAAA,CAAA,KAAA,IAAA,OAAA,KAAA,CAAA,EAAA,KAAA,WAAA,IAAA,OAAA,KAAA,CAAA,GAAA,KAAA,WAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,6BAAA,CAAA,qFAAA,KAAA;AACA,mBAAA,IAAA;AACA,WALA,CAOA;;;AACA,cAAA,CAAA,KAAA,iBAAA,CAAA,KAAA,CAAA,EAAA,CAAA,IAAA,CAAA,KAAA,iBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,6BAAA,CAAA,gCAAA,KAAA;AACA,mBAAA,IAAA;AACA;AACA,SAzBA,CA2BA;;;AACA,YAAA,YAAA,GAAA;AACA,UAAA,MAAA,EAAA,SADA;AAEA,UAAA,aAAA,EAAA,CAFA;AAGA,UAAA,IAAA,EAAA,SAHA;AAIA,UAAA,WAAA,EAAA;AAJA,SAAA;;AAOA,YAAA,UAAA,mCAAA,YAAA,GAAA,KAAA,CAAA;;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA,UAAA,EApCA,CAsCA;;AACA,YAAA,aAAA,GAAA;AACA,UAAA,EAAA,EAAA,mBAAA,IAAA,CAAA,GAAA,EADA;AAEA,UAAA,UAAA,EAAA,EAFA;AAGA,UAAA,KAAA,EAAA,CAAA,IAAA,IAAA,eAAA,CAHA;AAIA,UAAA,KAAA,EAAA,CAAA,aAAA,CAJA;AAKA,UAAA,KAAA,EAAA;AALA,SAAA;AAQA,QAAA,OAAA,CAAA,GAAA,CAAA,gBAAA;AACA,YAAA,OAAA,GAAA,IAAA,CAAA,SAAA,CAAA,SAAA,EAAA;AACA,UAAA,IAAA,EAAA;AACA,oBAAA,mBADA;AAEA,wBAAA,CACA;AACA,sBAAA,SADA;AAEA,4BAAA;AACA,0BAAA,UAAA,CAAA,MADA;AAEA,kCAAA,UAAA,CAAA,aAFA;AAGA,wBAAA,UAAA,CAAA,IAHA;AAIA,gCAAA,UAAA,CAAA,WAJA;AAKA,wBAAA,IAAA,IAAA;AALA,eAFA;AASA,0BAAA;AACA,wBAAA,SADA;AAEA,+BAAA,CACA,CACA;AACA,iBAAA,WAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAFA,EAGA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAHA,EAIA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAJA,EAKA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CALA,EAMA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,WAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CANA,CAMA;AANA,iBADA;AAFA;AATA,aADA;AAFA;AADA,SAAA,CAAA;;AA+BA,YAAA,CAAA,OAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,kBAAA;AACA,iBAAA,IAAA;AACA;;AAEA,QAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EApFA,CAsFA;;AACA,QAAA,OAAA,CAAA,MAAA;AACA,QAAA,KAAA,CAAA,GAAA,CAAA,OAAA;AAEA,QAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EA1FA,CA4FA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAA,OAAA,CAAA,GAAA,mEAAA,IAAA,IAAA,eAAA,GAAA;AACA,UAAA,WAAA,EAAA,WADA;AAEA,UAAA,KAAA,EAAA,UAFA;AAGA,UAAA,OAAA,EAAA;AAHA,SAAA;AAMA,eAAA,OAAA;AAEA,OA5HA,CA4HA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,aAAA,EAAA,KAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,OAAA,EAAA,KAAA,CAAA,KAAA;AACA,eAAA,IAAA;AACA;AACA,KAl+IA;AAo+IA;AACA,IAAA,wBAAA,EAAA,kCAAA,OAAA,EAAA;AACA,UAAA;AACA,YAAA,CAAA,OAAA,EAAA;AACA,UAAA,OAAA,CAAA,IAAA,CAAA,aAAA;AACA,iBAAA,KAAA;AACA,SAJA,CAMA;;;AACA,YAAA,OAAA,CAAA,WAAA,EAAA;AACA,UAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,WAAA;AACA,SATA,CAWA;;;AACA,QAAA,OAAA,CAAA,MAAA,CAAA,OAAA;AAEA,QAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,OAAA;AACA,eAAA,IAAA;AAEA,OAjBA,CAiBA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,aAAA,EAAA,KAAA;AACA,eAAA,KAAA;AACA;AACA,KA3/IA;AA6/IA;AACA,IAAA,4BAAA,EAAA,wCAAA;AAAA;;AACA,UAAA;AACA;AACA,YAAA,KAAA,mBAAA,IAAA,KAAA,CAAA,OAAA,CAAA,KAAA,mBAAA,CAAA,EAAA;AACA,eAAA,mBAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,OAAA,CAAA,wBAAA,CAAA,OAAA;AACA,WAFA;AAGA,eAAA,mBAAA,GAAA,EAAA;AACA;;AAEA,QAAA,OAAA,CAAA,GAAA,CAAA,YAAA;AACA,eAAA,IAAA;AAEA,OAZA,CAYA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,eAAA,EAAA,KAAA;AACA,eAAA,KAAA;AACA;AACA,KA/gJA;AAihJA;AACA,IAAA,gCAAA,EAAA,0CAAA,OAAA,EAAA,cAAA,EAAA;AACA,UAAA;AACA,YAAA,CAAA,OAAA,IAAA,CAAA,cAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,cAAA,CAAA,IAAA,cAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,gBAAA;AACA,iBAAA,KAAA;AACA,SAJA,CAMA;;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,cAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,KAAA,GAAA,cAAA,CAAA,CAAA,CAAA;;AACA,cAAA,CAAA,KAAA,iBAAA,CAAA,KAAA,CAAA,EAAA,CAAA,IAAA,CAAA,KAAA,iBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,mCAAA,CAAA,gCAAA,KAAA;AACA,mBAAA,KAAA;AACA;AACA,SAbA,CAeA;;;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA,EAAA,QAAA,CAAA,WAAA,CAAA,CAAA,IAAA,CACA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,cAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CADA,EAEA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,cAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAFA,EAGA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,cAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAHA,EAIA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,cAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAJA,EAKA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,cAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CALA,EAMA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,cAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CANA,CAMA;AANA,SAAA;AASA,QAAA,OAAA,CAAA,MAAA,GAzBA,CA2BA;;AACA,YAAA,OAAA,CAAA,WAAA,EAAA;AACA,cAAA,QAAA,GAAA,cAAA,CAAA,MAAA,CAAA,UAAA,GAAA,EAAA,KAAA;AAAA,mBAAA,GAAA,GAAA,KAAA,CAAA,EAAA;AAAA,WAAA,EAAA,CAAA,IAAA,cAAA,CAAA,MAAA;AACA,cAAA,SAAA,GAAA,cAAA,CAAA,MAAA,CAAA,UAAA,GAAA,EAAA,KAAA;AAAA,mBAAA,GAAA,GAAA,KAAA,CAAA,GAAA;AAAA,WAAA,EAAA,CAAA,IAAA,cAAA,CAAA,MAAA;AAEA,cAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA,GAAA;AACA,eAAA,cAAA,CAAA,QAAA,EAAA,SAAA,GAAA,IAAA,EAAA,OAAA;AACA,UAAA,OAAA,CAAA,WAAA,CAAA,GAAA,GAAA,OAAA;AACA;;AAEA,QAAA,OAAA,CAAA,GAAA,CAAA,aAAA,EAAA,cAAA;AACA,eAAA,IAAA;AAEA,OAxCA,CAwCA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,eAAA,EAAA,KAAA;AACA,eAAA,KAAA;AACA;AACA,KA/jJA;AAikJA,IAAA,2BAjkJA,uCAikJA,KAjkJA,EAikJA;AACA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,KAAA;AACA,KApkJA;AAskJA,IAAA,qBAtkJA,iCAskJA,QAtkJA,EAskJA;AACA,WAAA,mBAAA,GAAA,QAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,KAAA,mBAAA;AACA,WAAA,iBAAA,CAAA,0BAAA,KAAA,mBAAA,EAAA,MAAA;AACA,KA1kJA;AA4kJA,IAAA,aAAA,EAAA,uBAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,6DAAA,KAAA;;AAEA,UAAA;AACA;AACA,YAAA,YAAA,GAAA;AACA,UAAA,EAAA,EAAA,iBAAA,IAAA,CAAA,GAAA,EADA;AAEA,UAAA,UAAA,EAAA,EAFA;AAGA,UAAA,KAAA,EAAA,CAAA,KAAA,IAAA,kBAAA,CAHA;AAGA;AACA,UAAA,KAAA,EAAA,CAAA,WAAA,CAJA;AAKA,UAAA,KAAA,EAAA;AALA,SAAA;AAQA,QAAA,OAAA,CAAA,GAAA,CAAA,QAAA;AACA,YAAA,MAAA,GAAA,IAAA,CAAA,SAAA,CAAA,QAAA,EAAA,YAAA,CAAA;;AAEA,YAAA,CAAA,MAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,UAAA;AACA,iBAAA,IAAA;AACA;;AAEA,QAAA,OAAA,CAAA,GAAA,CAAA,iBAAA;AACA,QAAA,MAAA,CAAA,MAAA;AACA,QAAA,KAAA,CAAA,GAAA,CAAA,MAAA,EApBA,CAsBA;;AACA,YAAA,EAAA,GAAA,MAAA,CAAA,GAAA;AACA,aAAA,cAAA,CAAA,OAAA,EAAA,OAAA,EAAA,EAAA;AACA,QAAA,MAAA,CAAA,GAAA,GAAA,EAAA,CAzBA,CA2BA;;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA;AACA,QAAA,MAAA,CAAA,IAAA,GAAA,CAAA,IAAA,EAAA,IAAA,CAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA;AACA,QAAA,MAAA,CAAA,YAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAEA,QAAA,OAAA,CAAA,GAAA,6DAAA,KAAA,GAAA;AACA,UAAA,GAAA,EAAA,EADA;AAEA,UAAA,IAAA,EAAA,MAAA,CAAA,IAFA;AAGA,UAAA,KAAA,EAAA,MAAA,CAAA,KAHA;AAIA,UAAA,YAAA,EAAA,MAAA,CAAA;AAJA,SAAA;AAOA,eAAA,MAAA;AACA,OA1CA,CA0CA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,YAAA,EAAA,KAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,OAAA,EAAA,KAAA,CAAA,KAAA;AACA,eAAA,IAAA;AACA;AACA,KA9nJA;AAgoJA,IAAA,gBAAA,EAAA,0BAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,SAAA,CAAA,SAAA,EAAA;AACA,QAAA,IAAA,EAAA;AACA,kBAAA,mBADA;AAEA,sBAAA,CACA;AACA,oBAAA,SADA;AAEA,0BAAA;AACA,wBAAA,SADA;AAEA,gCAAA,CAFA;AAGA,sBAAA,SAHA;AAIA,8BAAA;AAJA,aAFA;AAQA,wBAAA;AACA,sBAAA,SADA;AAEA,6BAAA,CACA,CACA;AACA,eaAAA,IAAA;AACA,KAhqJA;AAoqJA;AACA,IAAA,QAAA,EAAA,kBAAA,GAAA,EAAA;AACA;AACA,MAAA,GAAA,GAAA,GAAA,CAAA,OAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAFA,CAIA;;AACA,UAAA,CAAA,GAAA,QAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,UAAA,CAAA,GAAA,QAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,UAAA,CAAA,GAAA,QAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AAEA,aAAA;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,EAAA;AAAA,OAAA;AACA,KA/qJA;AAirJA;AACA,IAAA,iBAAA,EAAA,2BAAA,KAAA,EAAA;AACA,UAAA,CAAA,KAAA,IAAA,CAAA,KAAA,CAAA,SAAA,EAAA;AAEA,UAAA,IAAA,GAAA,KAAA,CAAA,SAAA,CAHA,CAKA;;AACA,UAAA,OAAA,GAAA,CACA;AAAA,QAAA,EAAA,EAAA,IAAA,CAAA,KAAA;AAAA,QAAA,GAAA,EAAA,IAAA,CAAA;AAAA,OADA,EAEA;AAAA,QAAA,EAAA,EAAA,IAAA,CAAA,KAAA;AAAA,QAAA,GAAA,EAAA,IAAA,CAAA;AAAA,OAFA,EAGA;AAAA,QAAA,EAAA,EAAA,IAAA,CAAA,KAAA;AAAA,QAAA,GAAA,EAAA,IAAA,CAAA;AAAA,OAHA,EAIA;AAAA,QAAA,EAAA,EAAA,IAAA,CAAA,KAAA;AAAA,QAAA,GAAA,EAAA,IAAA,CAAA;AAAA,OAJA,EAKA;AAAA,QAAA,EAAA,EAAA,IAAA,CAAA,KAAA;AAAA,QAAA,GAAA,EAAA,IAAA,CAAA;AAAA,OALA,CAKA;AALA,OAAA,CANA,CAcA;;AACA,MAAA,KAAA,CAAA,IAAA,GAAA;AACA,gBAAA,mBADA;AAEA,oBAAA,CACA;AACA,kBAAA,SADA;AAEA,wBAAA;AACA,sBAAA,IAAA,CAAA,KADA;AAEA,6BAAA,GAFA;AAGA,oBAAA,IAAA,CAAA,KAHA;AAIA,2BAAA;AAJA,WAFA;AAQA,sBAAA;AACA,oBAAA,SADA;AAEA,2BACA,CACA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CADA,EAEA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAFA,EAGA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAHA,EAIA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAJA,EAKA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,UAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CALA;AAHA;AARA,SADA;AAFA,OAAA;AA0BA,MAAA,KAAA,CAAA,MAAA;AACA,KA5tJA;AA8tJA;AACA,IAAA,qBAAA,EAAA,iCAAA;AAAA;;AACA,UAAA,KAAA,gBAAA,EAAA;AACA,QAAA,aAAA,CAAA,KAAA,gBAAA,CAAA;AACA;;AAEA,WAAA,gBAAA,GAAA,WAAA,CAAA,YAAA;AACA;AACA,YAAA,OAAA,CAAA,kBAAA,EAAA;AACA,UAAA,OAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;AACA,gBAAA,KAAA,CAAA,SAAA,EAAA;AACA,cAAA,OAAA,CAAA,iBAAA,CAAA,KAAA;AACA;AACA,WAJA;AAKA,SARA,CAUA;;;AACA,YAAA,OAAA,CAAA,iBAAA,EAAA;AACA,UAAA,OAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;AACA,gBAAA,KAAA,CAAA,SAAA,EAAA;AACA,cAAA,OAAA,CAAA,iBAAA,CAAA,KAAA;AACA;AACA,WAJA;AAKA;AACA,OAlBA,EAkBA,IAlBA,CAAA,CALA,CAuBA;AACA,KAvvJA;AAyvJA;AACA,IAAA,oBAAA,EAAA,gCAAA;AACA,UAAA,KAAA,gBAAA,EAAA;AACA,QAAA,aAAA,CAAA,KAAA,gBAAA,CAAA;AACA,aAAA,gBAAA,GAAA,IAAA;AACA;AACA,KA/vJA;AAiwJA,IAAA,cAjwJA,0BAiwJA,MAjwJA,EAiwJA;AACA,UAAA,GAAA,GAAA,KAAA,KAAA,CAAA,IAAA,CAAA,QAAA;AACA,UAAA,IAAA,GAAA,KAAA,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;AACA,UAAA,QAAA,GAAA,KAAA,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,MAAA,EAAA,UAAA,EAAA,IAAA,CAAA,CAHA,CAIA;;AACA,UAAA,KAAA,GAAA,KAAA,KAAA,CAAA,GAAA,CAAA,QAAA,CAAA;AACA,UAAA,EAAA,GAAA,KAAA,KAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,UAAA,GAAA,GAAA,KAAA,KAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AAEA,UAAA,MAAA,GAAA,KAAA,KAAA,CAAA,IAAA,CAAA,EAAA,EAAA,CAAA,CAAA;AACA,UAAA,SAAA,GAAA,CAAA,MAAA,CAAA,OAAA,GAAA,CAAA,GAAA,MAAA,CAAA,OAAA,GAAA,GAAA,GAAA,MAAA,CAAA,OAAA,IAAA,MAAA,CAAA,UAAA,GAAA,EAAA,GAAA,MAAA,CAAA,UAAA,GAAA,IAAA;AAEA,UAAA,OAAA,GAAA,KAAA,KAAA,CAAA,IAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACA,UAAA,UAAA,GAAA,OAAA,CAAA,OAAA,GAAA,OAAA,CAAA,UAAA,GAAA,EAAA,GAAA,OAAA,CAAA,UAAA,GAAA,IAAA;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,QAAA,EAAA,SAAA,EAAA,UAAA;AAEA,aAAA;AAAA,QAAA,SAAA,EAAA,SAAA;AAAA,QAAA,UAAA,EAAA;AAAA,OAAA;AACA,KAnxJA;AAqxJA,IAAA,eArxJA,2BAqxJA,QArxJA,EAqxJA,SArxJA,EAqxJA,OArxJA,EAqxJA,QArxJA,EAqxJA;AACA,UAAA,gBAAA,GAAA,KAAA,aAAA,CAAA,KAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,OAAA,CAAA;AACA,UAAA,EAAA,GAAA,gBAAA,CAAA,GAAA;AACA,WAAA,cAAA,CAAA,QAAA,EAAA,SAAA,EAAA,EAAA;AACA,MAAA,gBAAA,CAAA,GAAA,GAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,8BAAA,EAAA;AAEA,UAAA,KAAA,GAAA,KAAA,cAAA,CAAA,gBAAA,CAAA;AACA,MAAA,OAAA,CAAA,MAAA,CAAA,gBAAA;AAEA,WAAA,aAAA;AACA,UAAA,KAAA,GAAA,eAAA,KAAA,aAAA;AAEA,UAAA,gBAAA,GAAA,KAAA,aAAA,CAAA,KAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AACA,MAAA,EAAA,GAAA,gBAAA,CAAA,GAAA;AACA,WAAA,cAAA,CAAA,KAAA,CAAA,SAAA,EAAA,KAAA,CAAA,UAAA,EAAA,EAAA;AACA,MAAA,gBAAA,CAAA,GAAA,GAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kCAAA,EAAA;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,CAAA,CAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,CAAA,CAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,CAAA,CAAA,CAAA;AAEA,WAAA,eAAA,GAAA,KAAA,cAAA,CAAA,gBAAA,CAAA;AAEA,WAAA,qBAAA,CAAA,EAAA,EAzBA,CA2BA;AACA;;AACA,WAAA,OAAA,CAAA,IAAA,CAAA,gBAAA;AAEA,KApzJA;AAszJA,IAAA,gBAtzJA,8BAszJA;AACA,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,QAAA,OAAA,CAAA,MAAA,CAAA,MAAA;AACA,OAFA;AAGA,WAAA,OAAA,GAAA,EAAA;AACA,KA3zJA;AA6zJA,IAAA,wBA7zJA,oCA6zJA,QA7zJA,EA6zJA,SA7zJA,EA6zJA,OA7zJA,EA6zJA,QA7zJA,EA6zJA;AACA,WAAA,gBAAA,GAAA,KAAA,aAAA,CAAA,KAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,OAAA,CAAA;AACA,UAAA,EAAA,GAAA,KAAA,gBAAA,CAAA,GAAA;AACA,WAAA,cAAA,CAAA,QAAA,EAAA,SAAA,EAAA,EAAA;AACA,WAAA,gBAAA,CAAA,GAAA,GAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,8BAAA,EAAA;AAEA,UAAA,KAAA,GAAA,KAAA,cAAA,CAAA,KAAA,gBAAA,CAAA;AACA,MAAA,OAAA,CAAA,MAAA,CAAA,KAAA,gBAAA;;AAEA,UAAA,KAAA,gBAAA,KAAA,IAAA,IAAA,KAAA,gBAAA,KAAA,SAAA,EAAA;AACA,QAAA,OAAA,CAAA,MAAA,CAAA,KAAA,gBAAA;AACA;;AACA,WAAA,gBAAA,GAAA,KAAA,aAAA,CAAA,KAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,SAAA,CAAA;AACA,MAAA,EAAA,GAAA,KAAA,gBAAA,CAAA,GAAA;AACA,WAAA,cAAA,CAAA,KAAA,CAAA,SAAA,EAAA,KAAA,CAAA,UAAA,EAAA,EAAA;AACA,WAAA,gBAAA,CAAA,GAAA,GAAA,EAAA;AACA,WAAA,gBAAA,CAAA,KAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kCAAA,EAAA;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,CAAA,CAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,CAAA,CAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,CAAA,CAAA,CAAA;AAEA,WAAA,aAAA,GAAA,KAAA,cAAA,CAAA,KAAA,gBAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,KAAA,aAAA,CAAA,SAAA,EAAA,KAAA,aAAA,CAAA,UAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,sBAAA,EAAA,KAAA,aAAA,CAAA,SAAA,EAAA,KAAA,aAAA,CAAA,UAAA;AACA,KAx1JA;AA21JA,IAAA,qBA31JA,iCA21JA,UA31JA,EA21JA;AACA,WAAA,aAAA,CAAA,IAAA,CAAA,UAAA;;AAEA,UAAA,KAAA,aAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA;AACA;;AAEA,WAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAPA,CASA;;AACA,UAAA,EAAA,GAAA,KAAA,aAAA,CAAA,CAAA,CAAA;AACA,UAAA,EAAA,GAAA,KAAA,aAAA,CAAA,CAAA,CAAA;AACA,UAAA,EAAA,GAAA,KAAA,aAAA,CAAA,CAAA,CAAA,CAZA,CAcA;;AACA,UAAA,EAAA,GAAA,CACA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CADA,EAEA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAFA,EAGA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAHA,CAAA;AAMA,UAAA,EAAA,GAAA,CACA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CADA,EAEA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAFA,EAGA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAHA,CAAA,CArBA,CA2BA;;AACA,UAAA,MAAA,GAAA,CACA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CADA,EAEA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAFA,EAGA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAHA,CAAA,CA5BA,CAkCA;;AACA,UAAA,YAAA,GAAA,IAAA,CAAA,IAAA,CAAA,SAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,aAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,aAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAnCA,CAqCA;;AACA,UAAA,UAAA,GAAA,CACA,MAAA,CAAA,CAAA,CAAA,GAAA,YADA,EAEA,MAAA,CAAA,CAAA,CAAA,GAAA,YAFA,EAGA,MAAA,CAAA,CAAA,CAAA,GAAA,YAHA,CAAA,CAtCA,CA4CA;;AACA,UAAA,CAAA,GAAA,CAAA,CA7CA,CA6CA;AAEA;;AACA,UAAA,aAAA,GAAA,CACA,UAAA,CAAA,CAAA,CAAA,GAAA,CADA,EAEA,UAAA,CAAA,CAAA,CAAA,GAAA,CAFA,EAGA,UAAA,CAAA,CAAA,CAAA,GAAA,CAHA,CAAA;AAMA,UAAA,aAAA,GAAA,CACA,CAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CADA,EAEA,CAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAFA,EAGA,CAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAHA,CAAA;AAMA,MAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,aAAA,EAAA,aAAA,EA5DA,CA8DA;;AACA,UAAA,kBAAA,GAAA,aAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,aAAA,GAAA,aAAA;AAEA,UAAA,yBAAA,GAAA,KAAA,aAAA,CAAA,KAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,gBAAA,CAAA;AACA,UAAA,EAAA,GAAA,yBAAA,CAAA,GAAA;AACA,MAAA,EAAA,CAAA,CAAA,CAAA,GAAA,kBAAA,CAAA,CAAA,CAAA;AACA,MAAA,EAAA,CAAA,CAAA,CAAA,GAAA,kBAAA,CAAA,CAAA,CAAA;AACA,MAAA,EAAA,CAAA,CAAA,CAAA,GAAA,kBAAA,CAAA,CAAA,CAAA;AACA,MAAA,yBAAA,CAAA,GAAA,GAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,uCAAA,EAAA;AAEA,UAAA,oBAAA,GAAA,KAAA,cAAA,CAAA,yBAAA,CAAA;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,EAAA,oBAAA,CAAA,SAAA,EAAA,GAAA,EAAA,oBAAA,CAAA,UAAA;AAEA,WAAA,OAAA,CAAA,IAAA,CAAA,yBAAA;AAEA,UAAA,gBAAA,GAAA;AACA,QAAA,SAAA,EAAA,CADA;AAEA,QAAA,UAAA,EAAA,KAAA;AAFA,OAAA,CA/EA,CAoFA;;AACA,WAAA,iBAAA,CAAA,4BAAA,gBAAA,CAAA,SAAA,GAAA,GAAA,GAAA,gBAAA,CAAA,UAAA,EAAA,MAAA,EArFA,CAsFA;;AACA,WAAA,iBAAA,CAAA,sBAAA,KAAA,eAAA,CAAA,SAAA,GAAA,GAAA,GAAA,KAAA,eAAA,CAAA,UAAA,EAAA,MAAA,EAvFA,CAyFA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;AACA,eAAA,wBAAA,CAAA,MAAA,EAAA,MAAA,EAAA;AACA,YAAA,UAAA,GAAA,MAAA,GAAA,MAAA;;AACA,eAAA,UAAA,GAAA,GAAA;AAAA,UAAA,UAAA,IAAA,GAAA;AAAA;;AACA,eAAA,UAAA,GAAA,CAAA,GAAA;AAAA,UAAA,UAAA,IAAA,GAAA;AAAA;;AACA,eAAA,UAAA;AACA;;AAEA,UAAA,iBAAA,GAAA,wBAAA,CAAA,oBAAA,CAAA,SAAA,EAAA,gBAAA,CAAA,SAAA,CAAA;AACA,UAAA,kBAAA,GAAA,gBAAA,CAAA,UAAA,GAAA,oBAAA,CAAA,UAAA,CArHA,CAuHA;;AACA,UAAA,gBAAA,GAAA;AACA,QAAA,SAAA,EAAA,KAAA,eAAA,CAAA,SAAA,GAAA,iBADA;AAEA,QAAA,UAAA,EAAA,KAAA,eAAA,CAAA,UAAA,GAAA;AAFA,OAAA,CAxHA,CA6HA;;AACA,MAAA,gBAAA,CAAA,SAAA,GAAA,CAAA,gBAAA,CAAA,SAAA,GAAA,GAAA,IAAA,GAAA,CA9HA,CAgIA;;AACA,MAAA,gBAAA,CAAA,UAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,gBAAA,CAAA,UAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,gBAAA,CAAA,SAAA,EAAA,GAAA,EAAA,gBAAA,CAAA,UAAA;AAEA,WAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,gBAAA,CAAA,SAAA,EAAA,gBAAA,CAAA,UAAA,EArIA,CAuIA;AAEA;;AACA,eAAA,gBAAA,CAAA,OAAA,EAAA;AACA,eAAA,OAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA;AACA,OA5IA,CA8IA;;;AACA,eAAA,oBAAA,CAAA,OAAA,EAAA,QAAA,EAAA;AACA,YAAA,EAAA,GAAA,gBAAA,CAAA,OAAA,CAAA;AACA,YAAA,GAAA,GAAA,gBAAA,CAAA,QAAA,CAAA;AACA,YAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AACA,YAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AACA,YAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA;AACA,eAAA;AAAA,UAAA,CAAA,EAAA,CAAA;AAAA,UAAA,CAAA,EAAA,CAAA;AAAA,UAAA,CAAA,EAAA;AAAA,SAAA;AACA,OAtJA,CAwJA;;;AACA,UAAA,oBAAA,GAAA,oBAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,gBAAA,CAAA,UAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,EAAA,oBAAA,CAAA,CAAA,EAAA,GAAA,EAAA,oBAAA,CAAA,CAAA,EAAA,GAAA,EAAA,oBAAA,CAAA,CAAA;AAEA,UAAA,sBAAA,GAAA,KAAA,aAAA,CAAA,KAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,cAAA,CAAA;AACA,MAAA,EAAA,GAAA,sBAAA,CAAA,GAAA;AACA,MAAA,EAAA,CAAA,CAAA,CAAA,GAAA,oBAAA,CAAA,CAAA;AACA,MAAA,EAAA,CAAA,CAAA,CAAA,GAAA,oBAAA,CAAA,CAAA;AACA,MAAA,EAAA,CAAA,CAAA,CAAA,GAAA,oBAAA,CAAA,CAAA;AACA,MAAA,sBAAA,CAAA,GAAA,GAAA,EAAA;AACA,MAAA,sBAAA,CAAA,KAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,CAAA;AAEA,WAAA,OAAA,CAAA,IAAA,CAAA,sBAAA,EApKA,CAsKA;;AACA,WAAA,aAAA,GAAA,EAAA;AACA,WAAA,aAAA,GAAA,CAAA;AACA,KApgKA;AAsgKA;AACA,IAAA,gBAvgKA,4BAugKA,OAvgKA,EAugKA;AACA,aAAA,OAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA;AACA,KAzgKA;AA2gKA;AACA,IAAA,oBA5gKA,gCA4gKA,OA5gKA,EA4gKA,QA5gKA,EA4gKA;AACA,UAAA,EAAA,GAAA,KAAA,gBAAA,CAAA,OAAA,CAAA;AACA,UAAA,GAAA,GAAA,KAAA,gBAAA,CAAA,QAAA,CAAA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA;AACA,aAAA;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,EAAA;AAAA,OAAA;AACA,KAnhKA;AAqhKA;AACA,IAAA,iBAthKA,6BAshKA,IAthKA,EAshKA,EAthKA,EAshaAAA;AAAA,QAAA,CAAA,EAAA,CAAA,GAAA,IAAA;AAAA,QAAA,CAAA,EAAA,CAAA,GAAA,IAAA;AAAA,QAAA,CAAA,EAAA,CAAA,GAAA,IAAA;AAAA,QAAA,CAAA,EAAA,CAAA,GAAA;AAAA,OAAA;AACA,KA9hKA;AAgiKA;AACA,IAAA,eAjiKA,2BAiiKA,KAjiKA,EAiiKA,IAjiKA,EAiiaAAA;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,EAAA;AAAA,OAAA;AACA,KAtiKA;AAwiKA;AACA,IAAA,oBAziKA,gCAyiKA,SAziKA,EAyiKA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,CAAA,EAAA,CAAA,aAAA,SAAA,CAAA,CAAA,EAAA,CAAA,aAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,UAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA;AACA,UAAA,QAAA,GAAA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,aAAA;AACA,QAAA,SAAA,EAAA,OAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EADA;AAEA,QAAA,UAAA,EAAA,QAAA,GAAA,GAAA,GAAA,IAAA,CAAA;AAFA,OAAA;AAIA,KAjjKA;AAmjKA,IAAA,YAnjKA,wBAmjKA,KAnjKA,EAmjKA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,KAAA,EADA,CAGA;;AAEA,WAAA,OAAA,CAAA,IAAA,CAAA,SAAA;AAEA,KA1jKA;AA4jKA,IAAA,kBA5jKA,gCA4jKA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,wBAAA,EADA,CAEA;;AACA,WAAA,GAAA,GAAA,KAAA;AACA,KAhkKA;AAkkKA,IAAA,oBAlkKA,kCAkkKA;AACA;AACA,WAAA,aAAA,GAAA,EAAA;AACA,WAAA,aAAA,GAAA,CAAA;AACA,WAAA,gBAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,sBAAA;AACA,KAxkKA;AA4kKA;AACA,IAAA,2BA7kKA,uCA6kKA,WA7kKA,EA6kKA,KA7kKA,EA6kKA,IA7kKA,EA6kKA;AACA,MAAA,OAAA,CAAA,GAAA,6DAAA,IAAA,GAAA,WAAA;;AAEA,UAAA;AACA;AACA,YAAA,CAAA,WAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,WAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,YAAA;AACA;AACA;;AAEA,YAAA,WAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,gGAAA,WAAA,CAAA,MAAA;AACA;AACA,SAVA,CAYA;;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,WAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,KAAA,GAAA,WAAA,CAAA,CAAA,CAAA;;AACA,cAAA,CAAA,KAAA,IAAA,OAAA,KAAA,CAAA,EAAA,KAAA,WAAA,IAAA,OAAA,KAAA,CAAA,GAAA,KAAA,WAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,yCAAA,CAAA,qCAAA,KAAA;AACA;AACA;;AAEA,cAAA,CAAA,KAAA,iBAAA,CAAA,KAAA,CAAA,EAAA,CAAA,IAAA,CAAA,KAAA,iBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,yCAAA,CAAA,+BAAA,KAAA;AACA;AACA;AACA,SAxBA,CA0BA;;;AACA,YAAA,kBAAA,GAAA,KAAA,qBAAA,CACA,KAAA,KADA,EAEA,OAFA,EAGA,WAHA,EAIA,KAJA,EAKA,IALA,CAAA;;AAQA,YAAA,kBAAA,EAAA;AACA;AACA,cAAA,CAAA,KAAA,kBAAA,EAAA;AACA,iBAAA,kBAAA,GAAA,EAAA;AACA;;AACA,eAAA,kBAAA,CAAA,IAAA,CAAA,kBAAA;AAEA,UAAA,OAAA,CAAA,GAAA,yEAAA,IAAA,GAAA,kBAAA;AACA,SARA,MAQA;AACA,UAAA,OAAA,CAAA,KAAA,yEAAA,IAAA;AACA;AAEA,OA/CA,CA+CA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,cAAA,EAAA,KAAA;AACA;AACA,KAloKA;AAooKA;AACA,IAAA,sBAroKA,oCAqoKA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EADA,CAGA;;AACA,UAAA,CAAA,KAAA,kBAAA,EAAA;AACA,aAAA,kBAAA,GAAA,EAAA;AACA;;AACA,UAAA,CAAA,KAAA,iBAAA,EAAA;AACA,aAAA,iBAAA,GAAA,EAAA;AACA,OATA,CAWA;;;AACA,UAAA,KAAA,kBAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,wBAAA,KAAA,kBAAA,CAAA,MAAA;AACA,aAAA,kBAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA,KAAA,EAAA;AACA,cAAA;AACA,gBAAA,MAAA,IAAA,OAAA,EAAA;AACA,cAAA,OAAA,CAAA,MAAA,CAAA,MAAA;AACA,cAAA,OAAA,CAAA,GAAA,sDAAA,KAAA,GAAA,CAAA;AACA;AACA,WALA,CAKA,OAAA,KAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,0CAAA,KAAA,GAAA,CAAA,2BAAA,KAAA;AACA;AACA,SATA;AAUA,aAAA,kBAAA,GAAA,EAAA;AACA,OAzBA,CA2BA;;;AACA,UAAA,KAAA,iBAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,wBAAA,KAAA,iBAAA,CAAA,MAAA;AACA,aAAA,iBAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA,KAAA,EAAA;AACA,cAAA;AACA,gBAAA,MAAA,IAAA,OAAA,EAAA;AACA,cAAA,OAAA,CAAA,MAAA,CAAA,MAAA;AACA,cAAA,OAAA,CAAA,GAAA,sDAAA,KAAA,GAAA,CAAA;AACA;AACA,WALA,CAKA,OAAA,KAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,0CAAA,KAAA,GAAA,CAAA,2BAAA,KAAA;AACA;AACA,SATA;AAUA,aAAA,iBAAA,GAAA,EAAA;AACA,OAzCA,CA2CA;;;AACA,WAAA,YAAA,GAAA,IAAA,CA5CA,CA8CA;;AACA,UAAA,KAAA,iBAAA,EAAA;AACA,YAAA;AACA,cAAA,OAAA,EAAA;AACA,YAAA,OAAA,CAAA,MAAA,CAAA,KAAA,iBAAA;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,SAAA;AACA;;AACA,eAAA,iBAAA,GAAA,IAAA;AACA,SANA,CAMA,OAAA,KAAA,EAAA;AACA,UAAA,OAAA,CAAA,IAAA,CAAA,WAAA,EAAA,KAAA;AACA;AACA;;AAEA,UAAA,KAAA,mBAAA,EAAA;AACA,YAAA;AACA,cAAA,OAAA,EAAA;AACA,YAAA,OAAA,CAAA,MAAA,CAAA,KAAA,mBAAA;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,SAAA;AACA;AACA,SALA,CAKA,OAAA,KAAA,EAAA;AACA,UAAA,OAAA,CAAA,IAAA,CAAA,WAAA,EAAA,KAAA;AACA;;AACA,aAAA,mBAAA,GAAA,IAAA;AACA;;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,cAAA;AACA,KA7sKA;AAgtKA;AACA;AACA,IAAA,2BAltKA,uCAktKA,kBAltKA,EAktKA,iBAltKA,EAktKA,YAltKA,EAktKA,WAltKA,EAktKA,aAltKA,EAktKA;AACA,UAAA,aAAA,KAAA,SAAA,EAAA,aAAA,GAAA,KAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA;AAAA,QAAA,kBAAA,EAAA,kBAAA;AAAA,QAAA,iBAAA,EAAA;AAAA,OAAA;;AAEA,UAAA;AACA;AACA,YAAA,KAAA,iBAAA,EAAA;AACA,eAAA,iBAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,gBAAA;AAAA,cAAA,OAAA,CAAA,MAAA,CAAA,GAAA;AAAA,aAAA,CAAA,OAAA,CAAA,EAAA;AAAA,cAAA,OAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA;AAAA;AACA,WAFA;AAGA;;AACA,aAAA,iBAAA,GAAA,EAAA,CAPA,CASA;;AACA,YAAA,kBAAA,IAAA,KAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,IAAA,kBAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,WAAA;AACA,cAAA,cAAA,GAAA,KAAA,qBAAA,CACA,KAAA,KADA,EAEA,OAFA,EAGA,kBAHA,EAIA,YAJA,EAKA,SALA,CAAA;;AAOA,cAAA,cAAA,EAAA;AACA,iBAAA,iBAAA,CAAA,IAAA,CAAA,cAAA;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,aAAA;AACA,WAHA,MAGA;AACA,YAAA,OAAA,CAAA,KAAA,CAAA,aAAA;AACA;AACA,SAfA,MAeA;AACA,UAAA,OAAA,CAAA,IAAA,CAAA,eAAA;AACA,SA3BA,CA6BA;;;AACA,YAAA,CAAA,aAAA,IAAA,iBAAA,IAAA,KAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,cAAA;AACA,gBAAA,QAAA,GAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,CAAA;AAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,EAAA;AAAA,aAAA,EAAA,CAAA,IAAA,iBAAA,CAAA,MAAA;AACA,gBAAA,SAAA,GAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,CAAA;AAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,GAAA;AAAA,aAAA,EAAA,CAAA,IAAA,iBAAA,CAAA,MAAA;AACA,YAAA,OAAA,CAAA,GAAA,oDAAA,QAAA,mBAAA,SAAA,GAHA,CAKA;;AACA,gBAAA,eAAA,GAAA;AACA,cAAA,EAAA,EAAA,iBAAA,IAAA,CAAA,GAAA,EADA;AAEA,cAAA,UAAA,EAAA,EAFA;AAGA,cAAA,KAAA,EAAA,CAAA,iBAAA,CAHA;AAIA,cAAA,KAAA,EAAA,CAAA,WAAA,CAJA;AAKA,cAAA,KAAA,EAAA;AALA,aAAA;AAOA,gBAAA,SAAA,GAAA,KAAA,KAAA,CAAA,SAAA,CAAA,QAAA,EAAA,eAAA,CAAA;AACA,gBAAA,EAAA,GAAA,SAAA,CAAA,GAAA;AACA,iBAAA,cAAA,CAAA,QAAA,EAAA,SAAA,EAAA,EAAA;AACA,YAAA,SAAA,CAAA,GAAA,GAAA,EAAA;AACA,gBAAA,OAAA,SAAA,CAAA,MAAA,KAAA,UAAA,EAAA,SAAA,CAAA,MAAA;AAEA,iBAAA,KAAA,CAAA,YAAA,CAAA,SAAA,EAAA,GAAA;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,QAAA,EApBA,CAsBA;;AACA,YAAA,UAAA,CAAA,YAAA;AAAA,kBAAA;AAAA;AAAA,eAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AAAA,aAAA,EAAA,CAAA,CAAA;AACA,WAxBA,CAwBA,OAAA,KAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,CAAA,SAAA,EAAA,KAAA;AACA;AACA;AAEA,OA5DA,CA4DA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,cAAA,EAAA,KAAA;AACA;AACA,KArxKA;AAwxKA;AACA,IAAA,qBAzxKA,iCAyxKA,QAzxKA,EAyxKA,SAzxKA,EAyxKA,KAzxKA,EAyxKA,IAzxKA,EAyxKA,IAzxKA,EAyxKA,SAzxKA,EAyxKA;AACA,UAAA,SAAA,KAAA,SAAA,EAAA,SAAA,GAAA,IAAA,CADA,CACA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA;AAAA,QAAA,QAAA,EAAA,QAAA;AAAA,QAAA,SAAA,EAAA,SAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;;AAEA,UAAA;AACA;AACA,YAAA,CAAA,KAAA,iBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,iBAAA,CAAA,SAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,IAAA,GAAA,OAAA,EAAA;AAAA,YAAA,QAAA,EAAA,QAAA;AAAA,YAAA,SAAA,EAAA;AAAA,WAAA;AACA;AACA,SALA,CAOA;;;AACA,YAAA,KAAA,iBAAA,IAAA,SAAA,EAAA;AACA,cAAA;AACA,gBAAA,OAAA,EAAA;AACA,cAAA,OAAA,CAAA,MAAA,CAAA,KAAA,iBAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,YAAA,IAAA;AACA;AACA,WALA,CAKA,OAAA,KAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,CAAA,UAAA,IAAA,GAAA,MAAA,EAAA,KAAA;AACA;AACA,SAjBA,CAmBA;;;AACA,YAAA,MAAA,GAAA,KAAA,aAAA,CAAA,KAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,CApBA,CAoBA;;AACA,YAAA,CAAA,MAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,IAAA,GAAA,QAAA;AACA;AACA,SAxBA,CA0BA;;;AACA,YAAA,EAAA,GAAA,MAAA,CAAA,GAAA;AACA,aAAA,cAAA,CAAA,QAAA,EAAA,SAAA,EAAA,EAAA;AACA,QAAA,MAAA,CAAA,GAAA,GAAA,EAAA,CA7BA,CA+BA;;AACA,YAAA,KAAA,EAAA;AACA,cAAA,GAAA,GAAA,KAAA,QAAA,CAAA,KAAA,CAAA,MAAA,IAAA,KAAA,CAAA,IAAA,IAAA,SAAA,CAAA;AACA,cAAA,KAAA,GAAA,KAAA,CAAA,WAAA,IAAA,GAAA;AACA,cAAA,WAAA,GAAA,KAAA,CAAA,aAAA,IAAA,GAAA;AACA,UAAA,MAAA,CAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,KAAA,CAAA;AACA,UAAA,MAAA,CAAA,YAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,WAAA,CAAA;AACA,SANA,MAMA;AACA,UAAA,MAAA,CAAA,KAAA,GAAA,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,CAAA;AACA,UAAA,MAAA,CAAA,YAAA,GAAA,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AACA;;AACA,YAAA,IAAA,GAAA,IAAA;AACA,QAAA,MAAA,CAAA,IAAA,GAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CA3CA,CA6CA;;AACA,YAAA,OAAA,MAAA,CAAA,MAAA,KAAA,UAAA,EAAA,MAAA,CAAA,MAAA;AACA,aAAA,iBAAA,GAAA,MAAA;AAEA,QAAA,OAAA,CAAA,GAAA,CAAA,IAAA,GAAA,QAAA,EAAA,MAAA;AACA,OAlDA,CAkDA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,OAAA,IAAA,GAAA,QAAA,EAAA,KAAA;AACA;AACA,KAl1KA;AAq1KA;AACA,IAAA,uBAt1KA,mCAs1KA,QAt1KA,EAs1KA,SAt1KA,EAs1KA,KAt1KA,EAs1KA,IAt1KA,EAs1KA,IAt1KA,EAs1KA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA;AAAA,QAAA,QAAA,EAAA,QAAA;AAAA,QAAA,SAAA,EAAA,SAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;;AAEA,UAAA;AACA;AACA,YAAA,CAAA,KAAA,iBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,iBAAA,CAAA,SAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,IAAA,GAAA,OAAA,EAAA;AAAA,YAAA,QAAA,EAAA,QAAA;AAAA,YAAA,SAAA,EAAA;AAAA,WAAA;AACA;AACA,SALA,CAOA;;;AACA,YAAA,KAAA,mBAAA,EAAA;AACA,cAAA;AACA,gBAAA,OAAA,EAAA;AACA,cAAA,OAAA,CAAA,MAAA,CAAA,KAAA,mBAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,YAAA,IAAA;AACA;AACA,WALA,CAKA,OAAA,KAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,CAAA,UAAA,IAAA,GAAA,MAAA,EAAA,KAAA;AACA;AACA,SAjBA,CAmBA;;;AACA,YAAA,YAAA,GAAA,KAAA,aAAA,CAAA,KAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA;;AACA,YAAA,YAAA,EAAA;AACA;AACA,cAAA,QAAA,GAAA,YAAA,CAAA,GAAA;AACA,eAAA,cAAA,CAAA,QAAA,EAAA,SAAA,EAAA,QAAA;AACA,UAAA,YAAA,CAAA,GAAA,GAAA,QAAA,CAJA,CAMA;;AACA,cAAA,KAAA,EAAA;AACA;AACA,gBAAA,GAAA,GAAA,KAAA,QAAA,CAAA,KAAA,CAAA,MAAA,IAAA,KAAA,CAAA,IAAA,IAAA,SAAA,CAAA;AACA,gBAAA,KAAA,GAAA,KAAA,CAAA,WAAA,IAAA,GAAA;AACA,gBAAA,WAAA,GAAA,KAAA,CAAA,aAAA,IAAA,GAAA;AAEA,YAAA,YAAA,CAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,KAAA,CAAA;AACA,YAAA,YAAA,CAAA,YAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,GAAA,CAAA,CAAA,GAAA,GAAA,EAAA,WAAA,CAAA;AACA,WARA,MAQA;AACA;AACA,YAAA,YAAA,CAAA,KAAA,GAAA,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,CAAA,CAFA,CAEA;;AACA,YAAA,YAAA,CAAA,YAAA,GAAA,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAHA,CAGA;AACA,WAnBA,CAqBA;;;AACA,cAAA,UAAA,GAAA,IAAA,CAtBA,CAsBA;;AACA,UAAA,YAAA,CAAA,IAAA,GAAA,CAAA,UAAA,EAAA,UAAA,CAAA,CAvBA,CAyBA;;AACA,eAAA,mBAAA,GAAA,YAAA;AAEA,UAAA,OAAA,CAAA,GAAA,CAAA,IAAA,GAAA,QAAA,EAAA,YAAA;AACA,SA7BA,MA6BA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA,IAAA,GAAA,QAAA;AACA;AAEA,OAtDA,CAsDA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,OAAA,IAAA,GAAA,QAAA,EAAA,KAAA;AACA;AACA,KAl5KA;AAo5KA,IAAA,iBAp5KA,6BAo5KA,KAp5KA,EAo5KA,IAp5KA,EAo5KA,IAp5KA,EAo5KA;AACA;AACA,WAAA,GAAA,GAAA,KAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA;AACA,KAx5KA;AA05KA,IAAA,SA15KA,qBA05KA,IA15KA,EA05KA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAAA,IAAA,CAAA,KAAA;;AACA,UAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,QAAA,EAAA;AACA,QAAA,IAAA,CAAA,KAAA,IAAA,IAAA,CAAA,SAAA;AACA;AACA,KA/5KA;AAi6KA,IAAA,SAj6KA,qBAi6KA,IAj6KA,EAi6KA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAAA,IAAA,CAAA,KAAA;;AACA,UAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,QAAA,EAAA;AACA,QAAA,IAAA,CAAA,KAAA,IAAA,IAAA,CAAA,SAAA;AACA;AACA,KAt6KA;AAw6KA,IAAA,aAx6KA,yBAw6KA,IAx6KA,EAw6KA;AACA,WAAA,eAAA,GAAA,IAAA;AACA,KA16KA;AA46KA,IAAA,uBA56KA,mCA46KA,KA56KA,EA46KA;AACA,UAAA,MAAA,GAAA,KAAA,KAAA,CAAA,YAAA;AACA,UAAA,IAAA,GAAA,MAAA,CAAA,qBAAA,EAAA;AACA,UAAA,CAAA,GAAA,KAAA,CAAA,OAAA,GAAA,IAAA,CAAA,IAAA,CAHA,CAGA;;AACA,UAAA,CAAA,GAAA,KAAA,CAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAJA,CAIA;;AACA,MAAA,OAAA,CAAA,GAAA,wBAAA,CAAA,eAAA,CAAA;AACA,UAAA,WAAA,GAAA,MAAA,CAAA,UAAA;AACA,UAAA,YAAA,GAAA,MAAA,CAAA,WAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,uBAAA,WAAA,GAAA,GAAA,GAAA,YAAA,GAAA,GAAA,GAAA,CAAA,GAAA,GAAA,GAAA,CAAA;AACA,KAr7KA;AAs7KA,IAAA,aAt7KA,2BAs7KA;AACA,WAAA,YAAA,GAAA,IAAA,CADA,CAEA;;AACA,WAAA,YAAA;AACA,UAAA,UAAA,GAAA,KAAA,iBAAA;;AAJA,kDAKA,KAAA,OALA;AAAA;;AAAA;AAKA,gEAAA;AAAA,cAAA,MAAA;;AACA,cAAA,MAAA,CAAA,UAAA,KAAA,UAAA,IAAA,MAAA,CAAA,WAAA,IAAA,KAAA,EAAA;AACA,gBAAA,UAAA,GAAA,MAAA,CAAA,UAAA;;AACA,gBAAA,UAAA,IAAA,EAAA,EAAA;AACA,mBAAA,iBAAA,CAAA,oBAAA,EAAA,SAAA;AACA,mBAAA,YAAA,GAAA,KAAA;AACA;AACA;;AACA,iBAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,mBAAA,UAAA,GAAA,GAAA,GAAA,UAAA;AACA,iBAAA,iBAAA,CAAA,6BAAA,UAAA,GAAA,GAAA,GAAA,UAAA,EAAA,MAAA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAkBA,KAx8KA;AAy8KA,IAAA,oBAz8KA,gCAy8KA,UAz8KA,EAy8KA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,UAAA;AACA,WAAA,iBAAA,CAAA,0BAAA,UAAA,EAAA,MAAA;AACA,WAAA,YAAA,GAAA,KAAA;;AACA,UAAA,KAAA,QAAA,IAAA,IAAA,EAAA;AACA,aAAA,QAAA,GAAA,KAAA;AACA;;AAEA,WAAA,WAAA;AACA,KAl9KA;AAm9KA,IAAA,mBAn9KA,+BAm9KA,OAn9KA,EAm9KA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,OAAA;AACA,WAAA,iBAAA,CAAA,yBAAA,OAAA,EAAA,OAAA;AACA,WAAA,YAAA,GAAA,KAAA;AACA,WAAA,WAAA;AACA,KAx9KA;AAy9KA,IAAA,gBAz9KA,8BAy9KA;AACA,UAAA,UAAA,GAAA,KAAA,iBAAA;;AADA,mDAEA,KAAA,OAFA;AAAA;;AAAA;AAEA,kEAAA;AAAA,cAAA,MAAA;;AACA,cAAA,MAAA,CAAA,UAAA,KAAA,UAAA,IAAA,MAAA,CAAA,WAAA,EAAA;AACA,iBAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,sBAAA,MAAA,CAAA,MAAA,GAAA,GAAA,GAAA,UAAA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAOA,KAh+KA;AAi+KA,IAAA,uBAj+KA,mCAi+KA,UAj+KA,EAi+KA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,0BAAA,EAAA,UAAA;AACA,WAAA,QAAA,GAAA,KAAA;;AACA,UAAA,UAAA,IAAA,KAAA,EAAA;AACA,aAAA,WAAA,CAAA,aAAA,EAAA,qBAAA;AACA,aAAA,iBAAA,CAAA,uBAAA,EAAA,MAAA;AACA,aAAA,iBAAA,GAAA,KAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,CAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,CAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA,CAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,CAAA;AACA,aAAA,eAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gCAAA,EAAA,KAAA;AACA;AACA;;AAAA;;AAdA,mDAgBA,KAAA,OAhBA;AAAA;;AAAA;AAgBA,kEAAA;AAAA,cAAA,MAAA;;AACA,cAAA,MAAA,CAAA,UAAA,KAAA,UAAA,IAAA,MAAA,CAAA,WAAA,EAAA;AACA,YAAA,MAAA,CAAA,WAAA,GAAA,KAAA;AACA,YAAA,MAAA,CAAA,KAAA,GAAA,KAAA;AACA,YAAA,MAAA,CAAA,MAAA,GAAA,MAAA,CAAA,UAAA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;;AAAA,mDAuBA,KAAA,iBAvBA;AAAA;;AAAA;AAuBA,kEAAA;AAAA,cAAA,QAAA;;AACA,cAAA,QAAA,CAAA,UAAA,KAAA,UAAA,EAAA;AACA,YAAA,QAAA,CAAA,WAAA,GAAA,KAAA;AACA,YAAA,QAAA,CAAA,KAAA,GAAA,KAAA;AACA,YAAA,QAAA,CAAA,MAAA,GAAA,QAAA,CAAA,UAAA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;;AA+BA,WAAA,IAAA,CAAA,KAAA,CAAA,gCAAA,EAAA,UAAA;;AACA,UAAA,UAAA,IAAA,YAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,CAAA;AACA,OAFA,MAEA,IAAA,UAAA,IAAA,OAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,CAAA;AACA,OAFA,MAEA,IAAA,UAAA,IAAA,KAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA,CAAA;AACA,OAFA,MAEA,IAAA,UAAA,IAAA,QAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,CAAA;AACA;AACA,KA1gLA;AA4gLA,IAAA,oBA5gLA,gCA4gLA,UA5gLA,EA4gLA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,UAAA;AACA,WAAA,QAAA,GAAA,KAAA;;AACA,UAAA,UAAA,IAAA,KAAA,EAAA;AACA,aAAA,WAAA,CAAA,aAAA,EAAA,qBAAA;AACA,aAAA,iBAAA,CAAA,uBAAA,EAAA,MAAA;AACA,aAAA,iBAAA,GAAA,KAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,CAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,CAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA,CAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,CAAA;AACA,aAAA,eAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gCAAA,EAAA,KAAA;AACA;AACA;;AAAA;;AAdA,mDAgBA,KAAA,OAhBA;AAAA;;AAAA;AAgBA,kEAAA;AAAA,cAAA,MAAA;;AACA,cAAA,MAAA,CAAA,UAAA,KAAA,UAAA,IAAA,MAAA,CAAA,WAAA,EAAA;AACA,YAAA,MAAA,CAAA,WAAA,GAAA,KAAA;AACA,YAAA,MAAA,CAAA,KAAA,GAAA,KAAA;AACA,YAAA,MAAA,CAAA,MAAA,GAAA,MAAA,CAAA,UAAA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;;AAAA,mDAuBA,KAAA,iBAvBA;AAAA;;AAAA;AAuBA,kEAAA;AAAA,cAAA,QAAA;;AACA,cAAA,QAAA,CAAA,UAAA,KAAA,UAAA,EAAA;AACA,YAAA,QAAA,CAAA,WAAA,GAAA,KAAA;AACA,YAAA,QAAA,CAAA,KAAA,GAAA,KAAA;AACA,YAAA,QAAA,CAAA,MAAA,GAAA,QAAA,CAAA,UAAA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;;AA+BA,WAAA,IAAA,CAAA,KAAA,CAAA,gCAAA,EAAA,UAAA;;AACA,UAAA,UAAA,IAAA,YAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,CAAA;AACA,OAFA,MAEA,IAAA,UAAA,IAAA,OAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,CAAA;AACA,OAFA,MAEA,IAAA,UAAA,IAAA,KAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA,CAAA;AACA,OAFA,MAEA,IAAA,UAAA,IAAA,QAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,CAAA;AACA;AACA,KArjLA;AAsjLA,IAAA,sBAtjLA,kCAsjLA,YAtjLA,EAsjLA;AAAA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,EAAA,YAAA;AACA,MAAA,YAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AAAA;AAAA;AAAA,cAEA,UAFA;AAAA,cAEA,UAFA;;AAGA,UAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,gBAAA,MAAA,CAAA,UAAA,KAAA,UAAA,IAAA,MAAA,CAAA,WAAA,IAAA,KAAA,EAAA;AACA,cAAA,MAAA,CAAA,MAAA,GAAA,UAAA;AACA,cAAA,MAAA,CAAA,UAAA,GAAA,UAAA;AACA;AACA,WALA;AAHA;;AACA;AACA,4CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,uCAAA;AAAA;AAOA;AACA,OAVA;AAWA,KAnkLA;AAokLA,IAAA,kBApkLA,8BAokLA,YApkLA,EAokLA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,YAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,oBAAA,EAAA,YAAA;AAEA,KAxkLA;AAykLA,IAAA,sBAzkLA,kCAykLA,gBAzkLA,EAykLA;AAAA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,EAAA,gBAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,wBAAA,EAAA,gBAAA;AACA,MAAA,gBAAA,CAAA,OAAA,CAAA,UAAA,UAAA,EAAA;AAAA,YACA,IADA,GACA,UADA,CACA,IADA;AAAA,YACA,UADA,GACA,UADA,CACA,UADA;AAAA,YACA,UADA,GACA,UADA,CACA,UADA;AAAA,YACA,MADA,GACA,UADA,CACA,MADA;;AAEA,QAAA,OAAA,CAAA,oBAAA,CAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,MAAA;AACA,OAHA;AAIA,KAhlLA;AAilLA,IAAA,oBAjlLA,gCAilLA,UAjlLA,EAilLA;AAAA;;AAEA,WAAA,cAAA,GAAA,IAAA;AACA,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,UAAA,KAAA,UAAA,EAAA;AACA,UAAA,OAAA,CAAA,cAAA,GAAA,MAAA,CAAA,UAAA;AACA;AACA,OAJA;AAKA,MAAA,OAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,KAAA,cAAA;AACA,KA1lLA;AA2lLA,IAAA,YA3lLA,0BA2lLA;AACA,WAAA,sBAAA,GAAA,IAAA;AACA,KA7lLA;AA8lLA,IAAA,WA9lLA,yBA8lLA;AACA,WAAA,sBAAA,GAAA,KAAA;AACA,KAhmLA;AAimLA,IAAA,0BAjmLA,sCAimLA,UAjmLA,EAimLA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,6BAAA,EAAA,UAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,4BAAA,EAAA,UAAA;AACA,KApmLA;AAqmLA,IAAA,eArmLA,2BAqmLA,IArmLA,EAqmLA,IArmLA,EAqmLA,UArmLA,EAqmLA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,IAAA,EAAA,IAAA,EAAA,UAAA;AACA,WAAA,oBAAA,CAAA,IAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA;AACA,KAxmLA;AA0mLA,IAAA,iBA1mLA,+BA0mLA;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,qCAAA;AACA,UAAA,MAAA,GAAA,QAAA,CAAA,cAAA,CAAA,mBAAA,CAAA;AACA,UAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,UAAA,KAAA,GAAA,IAAA,KAAA,EAAA;;AAEA,MAAA,KAAA,CAAA,MAAA,GAAA,YAAA;AACA;AACA,YAAA,gBAAA,GAAA,MAAA,CAAA,gBAAA,IAAA,CAAA,CAFA,CAIA;;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA,CAAA,KAAA,GAAA,gBAAA;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,KAAA,CAAA,MAAA,GAAA,gBAAA;AACA,QAAA,GAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,gBAAA,EAPA,CAOA;AAEA;;AACA,QAAA,GAAA,CAAA,SAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA;AACA,OAXA;;AAaA,MAAA,KAAA,CAAA,OAAA,GAAA,YAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,+BAAA,KAAA,CAAA,GAAA,EADA,CAEA;AACA,OAHA,CAnBA,CAwBA;;;AACA,MAAA,KAAA,CAAA,GAAA,GAAA,UAAA,CAzBA,CAyBA;AACA,KApoLA;AAqoLA,IAAA,WAroLA,uBAqoLA,OAroLA,EAqoLA,QAroLA,EAqoLA;AAAA,UAAA,KAAA,uEAAA,IAAA;AACA,UAAA,QAAA,GAAA,KAAA,aAAA,OAAA,iBAAA,QAAA,eAAA,KAAA,cAAA,OAAA,iBAAA,QAAA,CAAA;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,QAAA;AACA,WAAA,iBAAA,CAAA,QAAA,EAAA,OAAA;AACA,WAAA,iBAAA,GAJA,CAIA;AACA,KA1oLA;AA2oLA,IAAA,0BA3oLA,sCA2oLA,UA3oLA,EA2oLA;AACA,WAAA,oBAAA,GAAA,IAAA;AACA,WAAA,2BAAA,GAAA,UAAA;AACA,KA9oLA;AA+oLA,IAAA,iBA/oLA,+BA+oLA;AACA,WAAA,WAAA,CAAA,aAAA,EAAA,4BAAA,KAAA,2BAAA;AACA,WAAA,oBAAA,GAAA,KAAA;AACA,KAlpLA;AAopLA;AACA,IAAA,qBArpLA,iCAqpLA,KArpLA,EAqpLA;AACA;AACA,UAAA,CAAA,KAAA,qBAAA,IAAA,KAAA,UAAA,IAAA,KAAA,WAAA,IAAA,IAAA,EAAA,OAFA,CAEA;AACA;;AACA,UAAA,MAAA,GAAA,KAAA,KAAA,CAAA,UAAA;AACA,UAAA,CAAA,MAAA,EAAA,OALA,CAKA;;AACA,UAAA,IAAA,GAAA,MAAA,CAAA,qBAAA,EAAA,CANA,CAMA;;AACA,UAAA,CAAA,GAAA,KAAA,CAAA,OAAA,GAAA,IAAA,CAAA,IAAA;AACA,UAAA,CAAA,GAAA,KAAA,CAAA,OAAA,GAAA,IAAA,CAAA,GAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,CAAA,EAAA,CAAA;;AACA,UAAA,CAAA,KAAA,mBAAA,EAAA;AACA;AACA,YAAA,cAAA,GAAA,CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,KAAA,YAAA,GAAA,KAAA,QAAA,GAAA,KAAA,YAAA,GAAA,CAAA;AACA,YAAA,cAAA,GAAA,CAAA,GAAA,MAAA,CAAA,WAAA,GAAA,KAAA,aAAA,GAAA,KAAA,QAAA,GAAA,KAAA,aAAA,GAAA,CAAA,CAHA,CAKA;;AACA,YAAA,IAAA,GAAA,KAAA,gBAAA,GAAA,KAAA,SAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,KAAA,CAAA,EAAA,IAAA,IAAA,CAAA,CARA,CAQA;AAEA;;AACA,YAAA,IAAA,GAAA,IAAA,GAAA,CAAA;AACA,YAAA,IAAA,GAAA,KAAA,eAAA;AACA,YAAA,IAAA,GAAA,KAAA,eAAA;AAEA,YAAA,IAAA,GAAA,cAAA,GAAA,IAAA;AACA,YAAA,IAAA,GAAA,cAAA,GAAA,IAAA,CAhBA,CAkBA;;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,IAAA,CAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,IAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA,IAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA,IAAA,CAAA,CAtBA,CAwBA;;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,KAAA,CAAA,EAAA,IAAA,IAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,KAAA,CAAA,EAAA,IAAA,IAAA,CAAA;AAEA,aAAA,KAAA,GAAA,IAAA;AACA,aAAA,KAAA,GAAA,IAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,qBAAA,KAAA,gBAAA,GAAA,GAAA,GAAA,KAAA,KAAA,GAAA,GAAA,GAAA,KAAA,KAAA;AACA,OAjCA,MAiCA;AACA,aAAA,WAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,KAAA,YAAA,GAAA,KAAA,QAAA,GAAA,KAAA,YAAA,GAAA,CAAA,GAAA,KAAA,KAAA,IAAA,KAAA,SAAA,CADA,CACA;;AACA,aAAA,WAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA,WAAA,GAAA,KAAA,aAAA,GAAA,KAAA,QAAA,GAAA,KAAA,aAAA,GAAA,CAAA,GAAA,KAAA,KAAA,IAAA,KAAA,SAAA,CAFA,CAEA;;AAEA,YAAA,KAAA,WAAA,IAAA,CAAA,IAAA,KAAA,WAAA,GAAA,KAAA,gBAAA,IACA,KAAA,WAAA,IAAA,CADA,IACA,KAAA,WAAA,GAAA,KAAA,gBADA,EACA;AACA,eAAA,iBAAA,CAAA,uBAAA,EAAA,MAAA;AACA,SAHA,MAGA;AACA,eAAA,iBAAA,CAAA,2BAAA,EAAA,OAAA;AACA,eAAA,WAAA,GAAA,CAAA,CAAA;AACA,eAAA,WAAA,GAAA,CAAA,CAAA;AACA;;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,qBAAA,KAAA,WAAA,GAAA,GAAA,GAAA,KAAA,WAAA;AACA;;AACA,WAAA,aAAA;AACA,KA/sLA;AAitLA;AACA,IAAA,eAltLA,2BAktLA,KAltLA,EAktLA;AAAA;;AACA;AACA,UAAA,KAAA,UAAA,IAAA,KAAA,WAAA,IAAA,IAAA,EAAA;AACA,WAAA,UAAA,GAAA,IAAA;AACA,WAAA,MAAA,GAAA,KAAA,CAAA,OAAA;AACA,WAAA,MAAA,GAAA,KAAA,CAAA,OAAA;AACA,WAAA,QAAA,GAAA,KAAA,CAAA,OAAA;AACA,WAAA,QAAA,GAAA,KAAA,CAAA,OAAA,CAPA,CASA;;AACA,WAAA,cAAA,GAAA,WAAA,CAAA,YAAA;AACA,YAAA,CAAA,OAAA,CAAA,UAAA,EAAA;AAEA,YAAA,EAAA,GAAA,OAAA,CAAA,MAAA,GAAA,OAAA,CAAA,QAAA;AACA,YAAA,EAAA,GAAA,OAAA,CAAA,MAAA,GAAA,OAAA,CAAA,QAAA;;AACA,YAAA,KAAA,CAAA,EAAA,CAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA;AACA;AACA;;AACA,YAAA,WAAA,GAAA,OAAA,CAAA,QAAA,GAAA,EAAA,GAAA,MAAA,CAAA,UAAA,GAAA,OAAA,CAAA,YAAA;AACA,YAAA,WAAA,GAAA,OAAA,CAAA,QAAA,GAAA,EAAA,GAAA,MAAA,CAAA,WAAA,GAAA,OAAA,CAAA,aAAA;;AACA,YAAA,WAAA,GAAA,CAAA,EAAA;AACA,UAAA,WAAA,GAAA,CAAA;AACA;;AACA,YAAA,WAAA,GAAA,CAAA,EAAA;AACA,UAAA,WAAA,GAAA,CAAA;AACA;;AACA,YAAA,WAAA,GAAA,OAAA,CAAA,eAAA,EAAA;AACA,UAAA,WAAA,GAAA,OAAA,CAAA,eAAA;AACA;;AACA,YAAA,WAAA,GAAA,OAAA,CAAA,eAAA,EAAA;AACA,UAAA,WAAA,GAAA,OAAA,CAAA,eAAA;AACA;;AAEA,QAAA,OAAA,CAAA,QAAA,GAAA,WAAA;AACA,QAAA,OAAA,CAAA,QAAA,GAAA,WAAA;AAEA,QAAA,OAAA,CAAA,MAAA,GAAA,OAAA,CAAA,QAAA;AACA,QAAA,OAAA,CAAA,MAAA,GAAA,OAAA,CAAA,QAAA;;AACA,QAAA,OAAA,CAAA,aAAA,GA5BA,CA6BA;;AACA,OA9BA,EA8BA,GA9BA,CAAA;AA+BA,KA3vLA;AA4vLA,IAAA,eA5vLA,2BA4vLA,KA5vLA,EA4vLA;AACA;AACA,UAAA,CAAA,KAAA,UAAA,EAAA;AACA,WAAA,QAAA,GAAA,KAAA,CAAA,OAAA;AACA,WAAA,QAAA,GAAA,KAAA,CAAA,OAAA;AACA,KAjwLA;AAkwLA,IAAA,aAlwLA,yBAkwLA,KAlwLA,EAkwLA;AACA;AACA,WAAA,UAAA,GAAA,KAAA,CAFA,CAIA;;AACA,MAAA,aAAA,CAAA,KAAA,cAAA,CAAA;AACA,WAAA,cAAA,GAAA,IAAA;AACA,KAzwLA;AA0wLA,IAAA,WA1wLA,uBA0wLA,KA1wLA,EA0wLA;AAAA;;AACA;AACA,UAAA,KAAA,WAAA,IAAA,IAAA,EAAA;AACA,UAAA,WAAA,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,GAAA,GAAA,GAAA,CAAA,GAAA,CAHA,CAGA;;AACA,UAAA,QAAA,GAAA,KAAA,KAAA,GAAA,WAAA,CAJA,CAIA;;AACA,UAAA,QAAA,GAAA,GAAA,EAAA;AACA,QAAA,QAAA,GAAA,GAAA;AACA;;AACA,UAAA,QAAA,GAAA,CAAA,EAAA;AACA,QAAA,QAAA,GAAA,CAAA;AACA,OAVA,CAYA;;;AACA,UAAA,KAAA,kBAAA,EAAA;AACA;AACA,OAfA,CAiBA;;;AACA,WAAA,kBAAA,GAAA,IAAA,CAlBA,CAoBA;;AACA,MAAA,qBAAA,CAAA,YAAA;AACA,YAAA,QAAA,IAAA,OAAA,CAAA,KAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,GAAA,QAAA,CADA,CACA;;AACA,UAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,UAAA,EAAA,OAAA,CAAA,KAAA;;AACA,UAAA,OAAA,CAAA,aAAA;;AACA,UAAA,OAAA,CAAA,iBAAA,CAAA,iBAAA,QAAA,EAAA,MAAA;AACA,SALA,MAKA;AACA,UAAA,OAAA,CAAA,iBAAA,CAAA,mBAAA,OAAA,CAAA,KAAA,EAAA,MAAA;AACA;;AACA,QAAA,OAAA,CAAA,kBAAA,GAAA,KAAA,CATA,CASA;AACA,OAVA,CAAA;AAWA,KA1yLA;AA4yLA,IAAA,qBA5yLA,iCA4yLA,KA5yLA,EA4yLA;AACA;AACA,UAAA,CAAA,KAAA,qBAAA,IAAA,KAAA,UAAA,IAAA,KAAA,WAAA,IAAA,IAAA,EAAA,OAFA,CAEA;AACA;;AACA,UAAA,CAAA,KAAA,qBAAA,IAAA,CAAA,KAAA,CAAA,OAAA,IAAA,KAAA,CAAA,OAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,UAAA,MAAA,GAAA,KAAA,KAAA,CAAA,UAAA;AACA,UAAA,CAAA,MAAA,EAAA,OANA,CAMA;;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,OAAA,CAAA,CAAA,CAAA;AACA,UAAA,IAAA,GAAA,MAAA,CAAA,qBAAA,EAAA,CARA,CAQA;;AACA,UAAA,CAAA,GAAA,KAAA,CAAA,OAAA,GAAA,IAAA,CAAA,IAAA;AACA,UAAA,CAAA,GAAA,KAAA,CAAA,OAAA,GAAA,IAAA,CAAA,GAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,CAAA,EAAA,CAAA;AACA,MAAA,KAAA,CAAA,cAAA,GAZA,CAYA;;AACA,UAAA,CAAA,KAAA,mBAAA,EAAA;AACA;AACA,YAAA,cAAA,GAAA,CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,KAAA,YAAA,GAAA,KAAA,QAAA,GAAA,KAAA,YAAA,GAAA,CAAA;AACA,YAAA,cAAA,GAAA,CAAA,GAAA,MAAA,CAAA,WAAA,GAAA,KAAA,aAAA,GAAA,KAAA,QAAA,GAAA,KAAA,aAAA,GAAA,CAAA,CAHA,CAKA;;AACA,YAAA,IAAA,GAAA,KAAA,gBAAA,GAAA,KAAA,SAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,KAAA,CAAA,EAAA,IAAA,IAAA,CAAA,CARA,CAQA;AAEA;;AACA,YAAA,IAAA,GAAA,IAAA,GAAA,CAAA;AACA,YAAA,IAAA,GAAA,KAAA,eAAA;AACA,YAAA,IAAA,GAAA,KAAA,eAAA;AAEA,YAAA,IAAA,GAAA,cAAA,GAAA,IAAA;AACA,YAAA,IAAA,GAAA,cAAA,GAAA,IAAA,CAhBA,CAkBA;;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,IAAA,CAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,IAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA,IAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA,IAAA,CAAA,CAtBA,CAwBA;;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,KAAA,CAAA,EAAA,IAAA,IAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,KAAA,CAAA,EAAA,IAAA,IAAA,CAAA;AAEA,aAAA,KAAA,GAAA,IAAA;AACA,aAAA,KAAA,GAAA,IAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,qBAAA,KAAA,gBAAA,GAAA,GAAA,GAAA,KAAA,KAAA,GAAA,GAAA,GAAA,KAAA,KAAA;AACA,OAjCA,MAiCA;AACA,aAAA,WAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,KAAA,YAAA,GAAA,KAAA,QAAA,GAAA,KAAA,YAAA,GAAA,CAAA,GAAA,KAAA,KAAA,IAAA,KAAA,SAAA,CADA,CACA;;AACA,aAAA,WAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA,WAAA,GAAA,KAAA,aAAA,GAAA,KAAA,QAAA,GAAA,KAAA,aAAA,GAAA,CAAA,GAAA,KAAA,KAAA,IAAA,KAAA,SAAA,CAFA,CAEA;;AAEA,YAAA,KAAA,WAAA,IAAA,CAAA,IAAA,KAAA,WAAA,GAAA,KAAA,gBAAA,IACA,KAAA,WAAA,IAAA,CADA,IACA,KAAA,WAAA,GAAA,KAAA,gBADA,EACA;AACA,eAAA,iBAAA,CAAA,uBAAA,EAAA,MAAA;AACA,SAHA,MAGA;AACA,eAAA,iBAAA,CAAA,2BAAA,EAAA,OAAA;AACA,eAAA,WAAA,GAAA,CAAA,CAAA;AACA,eAAA,WAAA,GAAA,CAAA,CAAA;AACA;;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,qBAAA,KAAA,WAAA,GAAA,GAAA,GAAA,KAAA,WAAA;AACA;;AACA,WAAA,aAAA;AACA,KAz2LA;AA02LA,IAAA,gBA12LA,4BA02LA,KA12LA,EA02LA;AACA,UAAA,KAAA,WAAA,IAAA,IAAA,EAAA,OADA,CAEA;;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AAAA;AACA,aAAA,UAAA,GAAA,IAAA,CADA,CAEA;;AACA,aAAA,UAAA,GAAA,IAAA;AACA,aAAA,WAAA,CAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA;AACA,aAAA,WAAA,CAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA;AACA,aAAA,aAAA,CAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA;AACA,aAAA,aAAA,CAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA,CAPA,CAQA;;AACA,YAAA,KAAA,cAAA,EAAA;AACA,UAAA,aAAA,CAAA,KAAA,cAAA,CAAA;AACA,eAAA,cAAA,GAAA,IAAA;AACA;;AAGA,aAAA,qBAAA,CAAA,KAAA;AACA,OAhBA,MAgBA,IAAA,KAAA,CAAA,OAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AAAA;AACA,aAAA,UAAA,GAAA,KAAA,CADA,CAEA;;AACA,aAAA,UAAA,GAAA,IAAA,CAHA,CAIA;;AACA,YAAA,EAAA,GAAA,KAAA,aAAA,CAAA,CAAA,IAAA,KAAA,aAAA,CAAA,CAAA,CAAA;AACA,YAAA,EAAA,GAAA,KAAA,aAAA,CAAA,CAAA,IAAA,KAAA,aAAA,CAAA,CAAA,CAAA;AACA,aAAA,kBAAA,GAAA,IAAA,CAAA,IAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAAA,CAPA,CAQA;;AACA,YAAA,KAAA,cAAA,EAAA;AACA,UAAA,aAAA,CAAA,KAAA,cAAA,CAAA;AACA,eAAA,cAAA,GAAA,IAAA;AACA;AAGA,OAfA,MAeA,CACA;AACA;AAEA,KAh5LA;AAk5LA,IAAA,eAl5LA,2BAk5LA,KAl5LA,EAk5LA;AAAA;;AACA;AACA,UAAA,CAAA,KAAA,UAAA,IAAA,KAAA,WAAA,IAAA,IAAA,EAAA;;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,aAAA,aAAA,CAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA;AACA,aAAA,aAAA,CAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA;;AACA,YAAA,KAAA,cAAA,EAAA;AACA,UAAA,aAAA,CAAA,KAAA,cAAA,CAAA;AACA,eAAA,cAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,cAAA,IAAA,IAAA,EAAA;AACA;AACA,SATA,CAUA;;;AACA,aAAA,cAAA,GAAA,WAAA,CAAA,YAAA;AACA;AACA,cAAA,CAAA,OAAA,CAAA,UAAA,IAAA,CAAA,OAAA,CAAA,UAAA,EAAA;AAEA,cAAA,EAAA,GAAA,OAAA,CAAA,WAAA,CAAA,CAAA,IAAA,OAAA,CAAA,aAAA,CAAA,CAAA,CAAA;AACA,cAAA,EAAA,GAAA,OAAA,CAAA,WAAA,CAAA,CAAA,IAAA,OAAA,CAAA,aAAA,CAAA,CAAA,CAAA;;AACA,cAAA,KAAA,CAAA,EAAA,CAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA;AACA;AACA;;AACA,cAAA,EAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA,EAAA;AACA;AACA;;AAEA,cAAA,WAAA,GAAA,OAAA,CAAA,QAAA,GAAA,EAAA,GAAA,MAAA,CAAA,UAAA,GAAA,OAAA,CAAA,YAAA;AACA,cAAA,WAAA,GAAA,OAAA,CAAA,QAAA,GAAA,EAAA,GAAA,MAAA,CAAA,WAAA,GAAA,OAAA,CAAA,aAAA;;AACA,cAAA,WAAA,GAAA,CAAA,EAAA;AACA,YAAA,WAAA,GAAA,CAAA;AACA;;AACA,cAAA,WAAA,GAAA,CAAA,EAAA;AACA,YAAA,WAAA,GAAA,CAAA;AACA;;AACA,cAAA,WAAA,GAAA,OAAA,CAAA,eAAA,EAAA;AACA,YAAA,WAAA,GAAA,OAAA,CAAA,eAAA;AACA;;AACA,cAAA,WAAA,GAAA,OAAA,CAAA,eAAA,EAAA;AACA,YAAA,WAAA,GAAA,OAAA,CAAA,eAAA;AACA;;AAEA,UAAA,OAAA,CAAA,QAAA,GAAA,WAAA;AACA,UAAA,OAAA,CAAA,QAAA,GAAA,WAAA;AAEA,UAAA,OAAA,CAAA,WAAA,CAAA,CAAA,IAAA,OAAA,CAAA,aAAA,CAAA,CAAA,CAAA;AACA,UAAA,OAAA,CAAA,WAAA,CAAA,CAAA,IAAA,OAAA,CAAA,aAAA,CAAA,CAAA,CAAA;;AAEA,UAAA,OAAA,CAAA,aAAA;AACA,SAnCA,EAmCA,GAnCA,CAAA;AAqCA,OAhDA,MAgDA,IAAA,KAAA,CAAA,OAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,aAAA,aAAA,CAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA;AACA,aAAA,aAAA,CAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA;AACA,aAAA,aAAA,CAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA;AACA,aAAA,aAAA,CAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OAAA,CAJA,CAMA;;AACA,YAAA,KAAA,cAAA,EAAA;AACA,UAAA,aAAA,CAAA,KAAA,cAAA,CAAA;AACA,eAAA,cAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,cAAA,IAAA,IAAA,EAAA;AACA;AACA,SAbA,CAcA;;;AACA,aAAA,cAAA,GAAA,WAAA,CAAA,YAAA;AACA,cAAA,CAAA,OAAA,CAAA,UAAA,IAAA,CAAA,OAAA,CAAA,UAAA,EAAA;AACA,cAAA,EAAA,GAAA,OAAA,CAAA,aAAA,CAAA,CAAA,IAAA,OAAA,CAAA,aAAA,CAAA,CAAA,CAAA;AACA,cAAA,EAAA,GAAA,OAAA,CAAA,aAAA,CAAA,CAAA,IAAA,OAAA,CAAA,aAAA,CAAA,CAAA,CAAA;AACA,cAAA,QAAA,GAAA,IAAA,CAAA,IAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAAA;;AACA,UAAA,OAAA,CAAA,iBAAA,CAAA,mBAAA,QAAA,EAAA,MAAA;;AACA,cAAA,OAAA,CAAA,kBAAA,IAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,kBAAA,GAAA,QAAA;AACA,WARA,CASA;;;AACA,cAAA,WAAA,GAAA,QAAA,GAAA,OAAA,CAAA,kBAAA;;AACA,UAAA,OAAA,CAAA,iBAAA,CAAA,wBAAA,WAAA,EAAA,MAAA;;AACA,cAAA,QAAA,GAAA,OAAA,CAAA,KAAA,GAAA,WAAA,CAZA,CAYA;;AACA,cAAA,QAAA,GAAA,GAAA,EAAA;AACA,YAAA,QAAA,GAAA,GAAA;AACA;;AACA,cAAA,QAAA,GAAA,CAAA,EAAA;AACA,YAAA,QAAA,GAAA,CAAA;AACA;;AACA,cAAA,QAAA,IAAA,OAAA,CAAA,KAAA,EAAA;AACA,YAAA,OAAA,CAAA,iBAAA,CAAA,iBAAA,QAAA,EAAA,MAAA;;AACA,YAAA,OAAA,CAAA,KAAA,GAAA,QAAA,CAFA,CAEA;;AACA,YAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,UAAA,EAAA,OAAA,CAAA,KAAA;;AACA,YAAA,OAAA,CAAA,aAAA;AACA,WALA,MAKA;AACA,YAAA,OAAA,CAAA,iBAAA,CAAA,mBAAA,OAAA,CAAA,KAAA,EAAA,MAAA;AACA;;AACA,UAAA,OAAA,CAAA,kBAAA,GAAA,QAAA,CA3BA,CA2BA;AACA,SA5BA,EA4BA,GA5BA,CAAA;AA6BA,OA5CA,MA4CA;AACA,aAAA,iBAAA,CAAA,wBAAA,KAAA,CAAA,OAAA,CAAA,MAAA,EAAA,MAAA;AACA;AACA,KAp/LA;AAs/LA,IAAA,cAt/LA,0BAs/LA,KAt/LA,EAs/LA;AACA;AACA,WAAA,UAAA,GAAA,KAAA,CAFA,CAEA;AACA;;AACA,UAAA,KAAA,cAAA,EAAA;AACA,QAAA,aAAA,CAAA,KAAA,cAAA,CAAA;AACA,aAAA,cAAA,GAAA,IAAA;AACA;;AACA,UAAA,KAAA,cAAA,EAAA;AACA,QAAA,aAAA,CAAA,KAAA,cAAA,CAAA;AACA,aAAA,cAAA,GAAA,IAAA;AACA;AACA,KAlgMA;AAogMA,IAAA,WApgMA,uBAogMA,IApgMA,EAogMA;AACA,UAAA,KAAA,WAAA,IAAA,IAAA,EAAA;;AACA,UAAA,IAAA,IAAA,GAAA,EAAA;AACA,aAAA,KAAA,IAAA,GAAA;AACA,OAFA,MAEA,IAAA,IAAA,IAAA,GAAA,EAAA;AACA,aAAA,KAAA,IAAA,GAAA;AACA;;AACA,UAAA,KAAA,KAAA,GAAA,GAAA,EAAA;AACA,aAAA,KAAA,GAAA,GAAA;AACA;;AACA,UAAA,KAAA,KAAA,GAAA,CAAA,EAAA;AACA,aAAA,KAAA,GAAA,CAAA;AACA;;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,UAAA,EAAA,KAAA,KAAA;AACA,WAAA,aAAA;AACA,KAnhMA;AAqhMA;AACA,IAAA,YAthMA,wBAshMA,QAthMA,EAshMA,KAthMA,EAshMA,KAthMA,EAshMA;AAAA;;AACA,UAAA,KAAA,gBAAA,IAAA,CAAA,IAAA,KAAA,gBAAA,IAAA,IAAA,EAAA;AACA,aAAA,iBAAA,CAAA,+BAAA,EAAA,OAAA;AACA;AACA;;AACA,UAAA,KAAA,iBAAA,EAAA;AACA,aAAA,iBAAA,CAAA,6EAAA,EAAA,SAAA;AACA;AACA;;AACA,WAAA,iBAAA,GAAA,IAAA;AACA,UAAA,SAAA,GAAA,SAAA,QAAA,CAVA,CAWA;;AACA,UAAA,eAAA,GAAA,IAAA,eAAA,EAAA;AACA,UAAA,WAAA,GAAA,eAAA,CAAA,MAAA,CAbA,CAeA;AAEA;;AACA,MAAA,KAAA,CAAA,SAAA,EAAA;AAAA,QAAA,KAAA,EAAA,UAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA,CAAA,CACA,IADA,CACA,UAAA,QAAA;AAAA,eAAA,QAAA,CAAA,WAAA,EAAA;AAAA,OADA,EAEA,IAFA,CAEA,UAAA,MAAA,EAAA;AACA;AACA;AACA,YAAA,OAAA,CAAA,mBAAA,EAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,0BAAA,EAAA,KACA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,aAAA,EAAA,2BAAA;AACA,YAAA,KAAA,GAAA,WAAA,CAAA,GAAA,EAAA;AACA,YAAA,GAAA,EAAA,OAAA,EAAA,UAAA;;AACA,YAAA;AACA,cAAA,WAAA,GAAA,IAAA,WAAA,CAAA,MAAA,CAAA;AACA,cAAA,QAAA,GAAA,QAAA,CAAA,OAAA,CAAA,gBAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AACA,cAAA,SAAA,GAAA,QAAA,CAAA,OAAA,CAAA,gBAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,cAAA,QAAA,GAAA,CAAA,IAAA,CAAA,EAAA;AACA,YAAA,QAAA,GAAA,QAAA,GAAA,CAAA;AACA;;AACA,cAAA,SAAA,GAAA,CAAA,IAAA,CAAA,EAAA;AACA,YAAA,SAAA,GAAA,SAAA,GAAA,CAAA;AACA;;AACA,cAAA,WAAA,CAAA,MAAA,KAAA,QAAA,GAAA,SAAA,EAAA;AACA,YAAA,OAAA,CAAA,iBAAA,CAAA,yBAAA,WAAA,CAAA,MAAA,GAAA,8BAAA,GAAA,QAAA,GAAA,SAAA,GAAA,GAAA,EAAA,OAAA;;AACA;AACA,WAbA,CAcA;;;AACA,UAAA,GAAA,GAAA,IAAA,EAAA,CAAA,GAAA,CAAA,SAAA,EAAA,QAAA,EAAA,EAAA,CAAA,QAAA,CAAA;AACA,UAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,WAAA;AACA,cAAA,KAAA,GAAA,WAAA,CAAA,GAAA,EAAA;;AACA,UAAA,OAAA,CAAA,iBAAA,CAAA,gBAAA,CAAA,KAAA,GAAA,KAAA,EAAA,OAAA,CAAA,CAAA,CAAA,GAAA,IAAA,EAAA,MAAA;;AACA,cAAA,OAAA,CAAA,sBAAA,CAAA,aAAA,IAAA,MAAA,IAAA,OAAA,CAAA,sBAAA,CAAA,aAAA,IAAA,MAAA,IAAA,OAAA,CAAA,sBAAA,CAAA,aAAA,EAAA;AACA,YAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA,GAAA,EAAA,OAAA,CAAA,sBAAA,CAAA,QAAA,EAAA,OAAA,EAAA,OAAA,CAAA,sBAAA,CAAA,GAAA,EAAA,OAAA,CAAA,sBAAA,CAAA,UAAA,EAAA,OAAA,CAAA,sBAAA,CAAA,UAAA,CAAA;AAEA,WAHA,MAGA;AACA,YAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA,GAAA,EAAA,OAAA,CAAA,sBAAA,CAAA,QAAA,EAAA,MAAA,EAAA,OAAA,CAAA,sBAAA,CAAA,GAAA,EAAA,OAAA,CAAA,sBAAA,CAAA,UAAA,EAAA,OAAA,CAAA,sBAAA,CAAA,UAAA,CAAA;AAEA;;AACA,UAAA,KAAA,GAAA,WAAA,CAAA,GAAA,EAAA;;AACA,UAAA,OAAA,CAAA,iBAAA,CAAA,4BAAA,CAAA,KAAA,GAAA,KAAA,EAAA,OAAA,CAAA,CAAA,CAAA,GAAA,IAAA,EAAA,MAAA;;AACA,UAAA,GAAA,CAAA,MAAA;AACA,UAAA,GAAA,GAAA,IAAA,CA7BA,CA+BA;;AACA,UAAA,OAAA,GAAA,IAAA,SAAA,CAAA,IAAA,iBAAA,CAAA,UAAA,CAAA,IAAA,CAAA,EAAA,UAAA,CAAA,IAAA,EAAA,UAAA,CAAA,IAAA,CAAA;AACA,UAAA,UAAA,CAAA,MAAA;AACA,UAAA,UAAA,GAAA,IAAA,CAlCA,CAmCA;AACA;;AACA,UAAA,OAAA,CAAA,SAAA,CAAA,YAAA,CAAA,OAAA,EAAA,OAAA,CAAA,KAAA,EAAA,OAAA,CAAA,KAAA,EArCA,CAsCA;AACA;AACA;AACA;;;AACA,UAAA,OAAA,CAAA,aAAA,GA1CA,CA2CA;AACA;;;AACA,UAAA,OAAA,CAAA,sBAAA,GAAA,QAAA,CA7CA,CA8CA;AACA;AAEA,SAjDA,CAiDA,OAAA,KAAA,EAAA;AACA,UAAA,OAAA,CAAA,KAAA,iDAAA,SAAA,GAAA,KAAA;AACA,SAnDA,SAmDA;AACA;AACA,cAAA,GAAA,IAAA,CAAA,GAAA,CAAA,SAAA,EAAA,EAAA;AACA,YAAA,GAAA,CAAA,MAAA;AACA,YAAA,GAAA,GAAA,IAAA,CAFA,CAEA;AACA;;AACA,cAAA,UAAA,IAAA,CAAA,UAAA,CAAA,SAAA,EAAA,EAAA;AACA,YAAA,UAAA,CAAA,MAAA;AACA,YAAA,UAAA,GAAA,IAAA,CAFA,CAEA;AACA,WATA,CAUA;;;AACA,UAAA,MAAA,GAAA,IAAA;AACA,UAAA,OAAA,CAAA,iBAAA,GAAA,KAAA;AACA;AACA,OA1EA,EA2EA,KA3EA,CA2EA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,CAAA,IAAA,KAAA,YAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,yBAAA;AACA,SAFA,MAEA;AACA,UAAA,OAAA,CAAA,KAAA,iDAAA,SAAA,GAAA,KAAA;AACA;;AACA,QAAA,OAAA,CAAA,iBAAA,GAAA,KAAA;AACA,OAlFA,EAlBA,CAsGA;;AACA,WAAA,KAAA,CAAA,oBAAA,EAAA,YAAA;AACA,QAAA,eAAA,CAAA,KAAA;AACA,OAFA;AAGA,KAhoMA;AAioMA,IAAA,cAjoMA,0BAioMA,MAjoMA,EAioMA,CAjoMA,EAioMA,CAjoMA,EAioMA;AACA,WAAA,iBAAA,CAAA,oBAAA,MAAA,GAAA,GAAA,GAAA,CAAA,GAAA,GAAA,GAAA,CAAA,EAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,CAAA,EAAA,CAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,MAAA;AACA,KAroMA;AAsoMA,IAAA,eAtoMA,2BAsoMA,KAtoMA,EAsoMA;AACA,UAAA,KAAA,KAAA,aAAA,EAAA;AACA,aAAA,mBAAA,GAAA,IAAA;AACA,OAFA,MAEA;AACA,aAAA,mBAAA,GAAA,KAAA;AACA;AACA,KA5oMA;AA6oMA,IAAA,iBA7oMA,6BA6oMA,KA7oMA,EA6oMA;AACA,WAAA,cAAA,GAAA,KAAA;AACA,KA/oMA;AAgpMA,IAAA,gBAhpMA,4BAgpMA,MAhpMA,EAgpMA;AACA,WAAA,gBAAA,GAAA,QAAA,CAAA,MAAA,CAAA,CADA,CAEA;AACA,KAnpMA;AAopMA,IAAA,uBAppMA,mCAopMA,UAppMA,EAopMA;AAAA;;AAAA,mCACA,SADA;AAEA,YAAA,IAAA,GAAA,OAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,iBAAA,IAAA,CAAA,KAAA,KAAA,SAAA;AAAA,SAAA,CAAA;;AACA,YAAA,IAAA,EAAA;AACA,UAAA,IAAA,CAAA,KAAA,GAAA,UAAA,CAAA,SAAA,CAAA;AACA,SAFA,MAEA;AACA,cAAA,SAAA,IAAA,YAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,EAAA,UAAA,CAAA,SAAA,CAAA;;AACA,YAAA,OAAA,CAAA,gBAAA,GAAA,QAAA,CAAA,UAAA,CAAA,SAAA,CAAA,CAAA;AACA,WAHA,MAGA,IAAA,SAAA,IAAA,OAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,GAAA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,CAAA;AACA,WAFA,MAEA,IAAA,SAAA,IAAA,OAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,GAAA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,CAAA;AACA,WAFA,MAGA;AACA,YAAA,OAAA,CAAA,KAAA,+CAAA,SAAA;AACA;AACA;AAjBA;;AACA,WAAA,IAAA,SAAA,IAAA,UAAA,EAAA;AAAA,eAAA,SAAA;AAiBA;;AACA,WAAA,oBAAA,CAAA,KAAA,qBAAA;AACA,KAxqMA;AAyqMA,IAAA,UAzqMA,sBAyqMA,MAzqMA,EAyqMA;AACA,UAAA,MAAA,KAAA,MAAA,EAAA;AACA,aAAA,aAAA,GAAA,MAAA;AACA,aAAA,cAAA;AACA,OAHA,MAIA,IAAA,MAAA,KAAA,YAAA,EAAA;AAEA,aAAA,aAAA,GAAA,YAAA;AACA,aAAA,oBAAA;AACA,aAAA,aAAA;AACA,OALA,MAMA,IAAA,MAAA,KAAA,cAAA,EAAA;AACA,aAAA,aAAA,GAAA,cAAA;AACA,aAAA,sBAAA;AACA,OAHA,MAGA;AACA,aAAA,iBAAA,CAAA,qBAAA,MAAA,EAAA,OAAA;AACA;AACA,KA1rMA;AA2rMA;AACA,IAAA,kBA5rMA,8BA4rMA,IA5rMA,EA4rMA;AACA,UAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,QAAA,EAAA;AACA,QAAA,IAAA,CAAA,KAAA,IAAA,IAAA,CAAA,SAAA;AACA,aAAA,kBAAA,CAAA,IAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA;AACA;AACA,KAjsMA;AAmsMA,IAAA,kBAnsMA,8BAmsMA,IAnsMA,EAmsMA;AACA,UAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,QAAA,EAAA;AACA,QAAA,IAAA,CAAA,KAAA,IAAA,IAAA,CAAA,SAAA;AACA,aAAA,kBAAA,CAAA,IAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA;AACA;AACA,KAxsMA;AA0sMA;AACA,IAAA,kBA3sMA,8BA2sMA,KA3sMA,EA2sMA,KA3sMA,EA2sMA;AACA,MAAA,OAAA,CAAA,GAAA,2CAAA,KAAA,gBAAA,KAAA;;AACA,UAAA,KAAA,KAAA,EAAA,EAAA;AACA;AACA,aAAA,iBAAA,CAAA,KAAA,GAAA,GAAA,GAAA,KAAA,EAAA,MAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,KAAA,EAAA,KAAA,GAAA,GAAA,GAAA,KAAA;AACA,OAJA,MAIA,IAAA,KAAA,IAAA,EAAA,IAAA,KAAA,KAAA,mBAAA,EAAA;AACA,aAAA,iBAAA,CAAA,KAAA,GAAA,SAAA,EAAA,MAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA,GAAA,GAAA;AACA;AACA,KArtMA;AAstMA;AACA,IAAA,uBAvtMA,qCAutMA;AACA,WAAA,eAAA,CAAA,aAAA,GAAA,IAAA;AACA,WAAA,eAAA,CAAA,gBAAA,GAAA,SAAA;AACA,WAAA,eAAA,CAAA,eAAA,GAAA,CAAA;AACA,WAAA,eAAA,CAAA,kBAAA,GAAA,KAAA,EAAA,CAAA,kDAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,2BAAA,EAAA,KAAA,eAAA;AACA,KA7tMA;AA+tMA,IAAA,qBA/tMA,iCA+tMA,IA/tMA,EA+tMA,OA/tMA,EA+tMA,KA/tMA,EA+tMA;AACA,UAAA;AACA,aAAA,eAAA,CAAA,eAAA,GAAA,IAAA,CADA,CAEA;;AACA,YAAA,OAAA,IAAA,OAAA,OAAA,KAAA,QAAA,EAAA;AACA,eAAA,eAAA,CAAA,kBAAA,GAAA,KAAA,EAAA,CAAA,OAAA,CAAA;AACA,SAFA,MAEA;AACA,eAAA,eAAA,CAAA,kBAAA,GAAA,OAAA;AACA;;AACA,YAAA,KAAA,EAAA;AACA,eAAA,eAAA,CAAA,gBAAA,GAAA,KAAA;AACA;;AACA,YAAA,IAAA,KAAA,CAAA,EAAA;AACA,eAAA,eAAA,CAAA,aAAA,GAAA,IAAA;AACA;;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,gCAAA,EAAA,KAAA,eAAA;AACA,OAfA,CAeA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,iCAAA,EAAA,KAAA;AACA;AACA,KAlvMA;AAovMA,IAAA,cApvMA,4BAovMA;AACA,WAAA,eAAA,CAAA,aAAA,GAAA,KAAA;AACA,WAAA,eAAA,CAAA,gBAAA,GAAA,MAAA;AACA,WAAA,eAAA,CAAA,eAAA,GAAA,CAAA;AACA,WAAA,eAAA,CAAA,kBAAA,GAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,wBAAA;AACA,KA1vMA;AA0vMA;AACA,IAAA,qBA3vMA,mCA2vMA;AACA,WAAA,aAAA,CAAA,SAAA,GAAA,IAAA;AACA,WAAA,aAAA,CAAA,KAAA,GAAA,SAAA;AACA,WAAA,aAAA,CAAA,IAAA,GAAA,CAAA;AACA,WAAA,aAAA,CAAA,OAAA,GAAA,KAAA,EAAA,CAAA,kCAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,0BAAA,EAAA,KAAA,aAAA;AACA,KAjwMA;AAmwMA,IAAA,mBAnwMA,+BAmwMA,IAnwMA,EAmwMA,OAnwMA,EAmwMA;AACA,UAAA;AAEA,aAAA,aAAA,CAAA,IAAA,GAAA,IAAA;AACA,aAAA,aAAA,CAAA,OAAA,GAAA,OAAA;;AACA,YAAA,IAAA,KAAA,CAAA,EAAA;AACA,eAAA,aAAA,CAAA,SAAA,GAAA,IAAA;AACA;;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,+BAAA,EAAA,KAAA,aAAA;AACA,OARA,CAQA,OAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,+BAAA,EAAA,KAAA;AACA;AACA,KA/wMA;AAixMA,IAAA,YAjxMA,0BAixMA;AACA,WAAA,aAAA,CAAA,SAAA,GAAA,KAAA;AACA,WAAA,aAAA,CAAA,KAAA,GAAA,MAAA;AACA,WAAA,aAAA,CAAA,IAAA,GAAA,CAAA;AACA,WAAA,aAAA,CAAA,OAAA,GAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,uBAAA;AACA;AAvxMA,GA1YA;AAmqNA,EAAA,QAAA,EAAA;AACA,IAAA,GAAA,EAAA;AACA,MAAA,GAAA,EAAA,eAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,MAAA,EAAA,KAAA,MAAA,CAAA,KAAA,CAAA,oBAAA;AACA,eAAA,KAAA,MAAA,CAAA,KAAA,CAAA,oBAAA;AACA,OAJA;AAKA,MAAA,GAAA,EAAA,aAAA,CAAA,EAAA;AACA,YAAA,KAAA,MAAA,CAAA,KAAA,CAAA,oBAAA,KAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,MAAA,EAAA,KAAA,MAAA,CAAA,KAAA,CAAA,oBAAA;AACA,eAAA,MAAA,CAAA,MAAA,CAAA,YAAA,EAAA,sBAAA;AACA;AACA;AAVA,KADA;AAaA,IAAA,oBAAA,EAAA,gCAAA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,eAAA;AACA,KAfA;AAgBA,IAAA,uBAhBA,qCAgBA;AACA,UAAA,KAAA,eAAA,KAAA,eAAA,EAAA;AACA,eAAA,sBAAA,CADA,CACA;AACA,OAFA,MAEA;AACA,eAAA,0BAAA,CADA,CACA;AACA;AACA,KAtBA;AAuBA,IAAA,QAvBA,sBAuBA;AACA,UAAA,EAAA,GAAA,SAAA,CAAA,SAAA,IAAA,EAAA;AACA,UAAA,KAAA,GAAA,kBAAA,MAAA,IAAA,SAAA,CAAA,cAAA,GAAA,CAAA;AACA,UAAA,YAAA,GAAA,IAAA,CAHA,CAIA;;AACA,UAAA,SAAA,CAAA,aAAA,IAAA,OAAA,SAAA,CAAA,aAAA,CAAA,MAAA,KAAA,WAAA,EAAA;AACA,QAAA,YAAA,GAAA,SAAA,CAAA,aAAA,CAAA,MAAA;AACA;;AACA,UAAA,UAAA,GAAA,0CAAA,IAAA,CAAA,EAAA,CAAA;AACA,aAAA,CAAA,YAAA,KAAA,IAAA,GAAA,YAAA,GAAA,UAAA,KAAA,CAAA,CAAA,KAAA;AACA,KAjCA;AAkCA,IAAA,SAlCA,uBAkCA;AACA,aAAA,CAAA,KAAA,QAAA;AACA,KApCA;AAqCA,IAAA,gBArCA,8BAqCA;AACA,UAAA;AACA,YAAA,GAAA,GAAA,KAAA,OAAA,IAAA,KAAA,OAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,CAAA,CAAA,UAAA,KAAA,OAAA;AAAA,SAAA,CAAA;AACA,eAAA,CAAA,EAAA,GAAA,IAAA,GAAA,CAAA,WAAA,CAAA;AACA,OAHA,CAGA,OAAA,CAAA,EAAA;AACA,eAAA,KAAA;AACA;AACA,KA5CA;AA6CA,IAAA,cA7CA,4BA6CA;AACA,UAAA;AACA,YAAA,MAAA,GAAA,KAAA,gBAAA,IAAA,KAAA,gBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,KAAA,UAAA;AAAA,SAAA,CAAA;;AACA,YAAA,GAAA,GAAA,MAAA,GAAA,MAAA,CAAA,YAAA,IAAA,IAAA,GAAA,MAAA,CAAA,MAAA,CAAA,YAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA,KAAA,IAAA,EAAA,CAAA,GAAA,EAAA;AACA,YAAA,CAAA,GAAA,GAAA,CAAA,KAAA,CAAA,qCAAA,CAAA;AACA,YAAA,CAAA,CAAA,EAAA,OAAA,MAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,CAAA,CAAA,KAAA,GAAA,GAAA,CAAA,CAAA,GAAA,CAAA;AACA,YAAA,CAAA,GAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,IAAA,CAAA;AACA,YAAA,EAAA,GAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,IAAA,CAAA;AACA,YAAA,CAAA,GAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,IAAA,CAAA;AACA,YAAA,KAAA,GAAA,IAAA,IAAA,CAAA,GAAA,IAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA;AACA,eAAA,MAAA,CAAA,QAAA,CAAA,KAAA,IAAA,KAAA,GAAA,MAAA;AACA,OAXA,CAWA,OAAA,CAAA,EAAA;AACA,eAAA,MAAA;AACA;AACA;AA5DA,GAnqNA;AAiuNA,EAAA,KAAA,EAAA;AACA,IAAA,oBAAA,EAAA,8BAAA,GAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA;AACA,WAAA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,GAAA,GAAA,CAAA,GAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,GAAA,GAAA,CAAA,GAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,SAAA,GAAA,GAAA,CAAA,GAAA,CAJA,CAMA;AACA;;AACA,UAAA,CAAA,KAAA,cAAA,EAAA;AACA,aAAA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,GAAA,GAAA,CAAA,kBAAA,CAAA,KAAA,KAAA,CAAA;AACA,aAAA,cAAA,GAAA,IAAA;AACA,OAXA,CAYA;;;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,UAAA,EAAA;AAAA,QAAA,OAAA,EAAA,cAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAAA;AACA,KAfA;AAgBA,IAAA,MAAA,EAAA,kBAAA;AACA;AACA,WAAA,qBAAA;AACA,KAnBA;AAoBA,IAAA,iBApBA,6BAoBA,MApBA,EAoBA;AACA;AACA,WAAA,oBAAA,CAAA,MAAA;AACA;AAvBA,GAjuNA;AA0vNA,EAAA,OAAA,EAAA,mBAAA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,QAAA,IAAA,GAAA,IAAA;AAEA,SAAA,mBAAA;AAEA,SAAA,2BAAA;AACA,SAAA,6BAAA;AAEA,SAAA,UAAA;AACA,SAAA,iBAAA;;AAEA,SAAA,IAAA,CAAA,IAAA,KAAA,qBAAA,EAAA,EAAA;AACA,UAAA,MAAA,GAAA,KAAA,qBAAA,GAAA,CAAA,CAAA;;AACA,UAAA,MAAA,CAAA,YAAA,EAAA;AACA,QAAA,MAAA,CAAA,YAAA,CAAA,IAAA;AACA;AACA;;AAEA,SAAA,OAAA;AACA,SAAA,0BAAA,GAhCA,CAkCA;;AACA,SAAA,UAAA,GAAA,IAAA,CAAA,YAAA;AACA,UAAA,CAAA,OAAA,CAAA,YAAA,EAAA;AAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,oBAAA;;AACA,QAAA,OAAA,CAAA,SAAA,GAFA,CAEA;;AACA;AACA,KALA,EAKA,KALA,CAKA,UAAA,KAAA,EAAA;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,0BAAA,EAAA,KAAA;AACA,KAPA,EAnCA,CA4CA;AACA;AACA;AACA;AACA;;AAEA,WAAA,wCAAA,EAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AACA,UAAA,CAAA,OAAA,CAAA,YAAA,EAAA;AAAA;AACA;AACA;AACA;AACA;AACA,YAAA;AACA,UAAA,GAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,MAAA,EAAA,CAAA,CAAA,OAAA,EAAA,IAAA,CAAA,KAAA,CAAA,UAAA,EAAA,YAAA;AACA;AACA,YAAA,GAAA,CAAA,cAAA,GAAA,IAAA,CAAA,UAAA,CAAA;AAAA,qBAAA,GAAA,CAAA,eAAA,CAAA,CAAA,EAAA,IAAA,CAAA;AAAA,aAAA,EAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,cAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,yBAAA,EAAA,GAAA;AACA,aAFA,EAEA,UAAA,KAAA,EAAA;AAAA,cAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AAAA,aAFA;AAIA,YAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,SAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,0BAAA,EAAA,IAAA;AACA,YAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,uBAAA,EAAA,IAAA;AACA,YAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,cAAA,CAAA,iBAAA,GAAA,KAAA;AAEA,YAAA,IAAA,CAAA,qBAAA;AACA,YAAA,IAAA,CAAA,YAAA,GAAA,KAAA;;AACA,iBAAA,IAAA,GAAA,IAAA,IAAA,CAAA,qBAAA,EAAA,EAAA;AACA,kBAAA,OAAA,GAAA,IAAA,CAAA,qBAAA,GAAA,GAAA,CAAA;;AACA,kBAAA,OAAA,CAAA,aAAA,EAAA;AACA,gBAAA,OAAA,CAAA,aAAA,CAAA,IAAA;AACA;AACA;;AAEA,gBAAA,CAAA,IAAA,CAAA,kBAAA,EAAA;AACA;AACA,kBAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA;AACA,cAAA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA;AAAA,eAAA;AACA,cAAA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA;AAAA,eAAA;AACA,cAAA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA;AAAA,eAAA;AACA,cAAA,IAAA,CAAA,GAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA;AAAA,eAAA,EANA,CAOA;AAEA;;AACA,kBAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,EAAA;AACA,oBAAA,GAAA,GAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,CAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,CAAA,WAAA,CAAA,GAAA,IAAA,CAAA,CAAA;AACA,gBAAA,IAAA,CAAA,WAAA,CAAA,aAAA,CAAA;AAAA,kBAAA,GAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA;AAAA,kBAAA,GAAA,EAAA;AAAA,iBAAA;AACA,gBAAA,IAAA,CAAA,WAAA,CAAA,UAAA,GAAA,GAAA;AACA,eAJA,MAIA;AACA,gBAAA,IAAA,CAAA,WAAA,CAAA,aAAA,CAAA;AAAA,kBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,6BAAA;AAAA,kBAAA,GAAA,EAAA;AAAA,iBAAA;AACA;;AAEA,cAAA,IAAA,CAAA,IAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA;AAAA,eAAA;AACA,cAAA,IAAA,CAAA,UAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,6BAAA;AAAA,gBAAA,GAAA,EAAA;AAAA,eAAA;AACA,cAAA,IAAA,CAAA,QAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA;AAAA,eAAA,EApBA,CAqBA;;AACA,cAAA,IAAA,CAAA,aAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,oBAAA;AAAA,gBAAA,GAAA,EAAA;AAAA,eAAA;AACA,cAAA,IAAA,CAAA,OAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,0BAAA;AAAA,gBAAA,GAAA,EAAA;AAAA,eAAA;AACA,cAAA,IAAA,CAAA,OAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,yBAAA;AAAA,gBAAA,GAAA,EAAA;AAAA,eAAA;AACA,cAAA,IAAA,CAAA,OAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,0BAAA;AAAA,gBAAA,GAAA,EAAA;AAAA,eAAA;AACA,cAAA,IAAA,CAAA,MAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,sBAAA;AAAA,gBAAA,GAAA,EAAA;AAAA,eAAA;AACA,cAAA,IAAA,CAAA,UAAA,CAAA,aAAA,CAAA;AAAA,gBAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,gCAAA;AAAA,gBAAA,GAAA,EAAA;AAAA,eAAA,EA3BA,CA6BA;;AACA,cAAA,MAAA,GAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,KAAA,CAAA;AACA,cAAA,OAAA,GAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,KAAA,CAAA;AACA,cAAA,YAAA,GAAA,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA,KAAA,EAAA,OAAA,CAAA;AAEA;AACA,WAtDA;AAuDA,SAxDA,CAwDA,OAAA,CAAA,EAAA;AACA,UAAA,OAAA,CAAA,MAAA,CAAA,MAAA,CAAA,UAAA,EAAA;AAAA,YAAA,OAAA,EAAA,aAAA;AAAA,YAAA,QAAA,EAAA;AAAA,WAAA;AACA;AACA;AACA,KAlEA;AAoEA,IAAA,MAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,YAAA;AACA;AACA,MAAA,OAAA,CAAA,iBAAA,CAAA,SAAA,EAAA,MAAA;;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,wBAAA,EAAA,sBAAA,OAAA,CAAA,GAAA,CAAA,eAAA;AACA,KAJA;AAMA,IAAA,QAAA,CAAA,gBAAA,CAAA,kBAAA,EAAA,YAAA;AACA;AACA,MAAA,OAAA,CAAA,iBAAA,CAAA,UAAA,EAAA,MAAA;AACA,KAHA;AAKA,GA33NA;AA43NA;AACA,EAAA,aA73NA,2BA63NA;AACA,IAAA,QAAA,CAAA,mBAAA,CAAA,YAAA,EAAA,KAAA,cAAA;AACA,IAAA,QAAA,CAAA,mBAAA,CAAA,WAAA,EAAA,KAAA,cAAA;AACA,IAAA,QAAA,CAAA,mBAAA,CAAA,UAAA,EAAA,KAAA,cAAA;AAEA,IAAA,QAAA,CAAA,mBAAA,CAAA,WAAA,EAAA,KAAA,cAAA;AACA,IAAA,QAAA,CAAA,mBAAA,CAAA,WAAA,EAAA,KAAA,cAAA;AACA,IAAA,QAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,KAAA,cAAA;AAEA,IAAA,QAAA,CAAA,mBAAA,CAAA,OAAA,EAAA,KAAA,cAAA,EATA,CAWA;;AACA,QAAA,KAAA,kBAAA,EAAA;AACA,WAAA,kBAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,OAAA,IAAA,MAAA,EAAA;AACA,UAAA,OAAA,CAAA,MAAA,CAAA,MAAA;AACA;AACA,OAJA;AAKA,WAAA,kBAAA,GAAA,EAAA;AACA;;AAEA,QAAA,KAAA,iBAAA,EAAA;AACA,WAAA,iBAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,OAAA,IAAA,MAAA,EAAA;AACA,UAAA,OAAA,CAAA,MAAA,CAAA,MAAA;AACA;AACA,OAJA;AAKA,WAAA,iBAAA,GAAA,EAAA;AACA,KA5BA,CA8BA;;;AACA,SAAA,oBAAA;AACA;AA75NA,CAAA","sourcesContent":["// Stellarium Web - Copyright (c) 2022 - Stellarium Labs SRL\n//\n// This program is licensed under the terms of the GNU AGPL v3, or\n// alternatively under a commercial licence.\n//\n// The terms of the AGPL v3 license can be found in the main directory of this\n// repository.\n\n<template>\n  <v-app>\n    <v-navigation-drawer v-model=\"drawer_2\" ref=\"Drawer_2\" app absolute temporary :width=\"DeviceIsConnected ? 200 : 200\"\n      style=\"left: 170px; backdrop-filter: blur(5px); background-color: rgba(0, 0, 0, 0.1);\">\n\n      <div v-show=\"isOpenDevicePage\">\n        <span\n          style=\"position: absolute; top: 0px; left: 50%; transform: translateX(-50%); font-size: 30px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n          {{ $t(CurrentDriverType) }}\n          <v-divider></v-divider>\n        </span>\n\n        <div :style=\"{ width: DeviceIsConnected ? '200px' : '200px' }\"\n          style=\"position: absolute; top: 50px; max-height: calc(100% - 95px); overflow-y: auto;\"\n          class=\"params-container\">\n\n          <div v-show=\"!DeviceIsConnected\" style=\"text-align: center;\">\n            <span style=\"display: inline-block; font-size: 15px; color: rgba(255, 255, 255, 0.5); user-select: none;\">\n              {{ $t('Device Connection') }}\n            </span>\n\n            <!-- 驱动选择下拉框，添加@change事件 -->\n            <v-select :label=\"$t('Select Driver')\" :items=\"drivers\" item-text=\"label\" item-value=\"value\"\n              v-model=\"selectedDriver\" @change=\"confirmDriver\" style=\"width: 150px; display: inline-block;\">\n            </v-select>\n\n            <!-- 波特率下拉框，添加@change事件 -->\n            <v-select v-if=\"CurrentDriverType === 'Mount' || CurrentDriverType === 'Focuser'\" :label=\"$t('Baud Rate')\"\n              :items=\"BaudRateItems\" item-text=\"label\" item-value=\"value\" v-model=\"BaudRateSelected\"\n              @change=\"confirmDriver\" style=\"width: 150px; display: inline-block;\">\n            </v-select>\n\n            <v-row no-gutters>\n              <v-col cols=\"6\">\n                <button @click=\"clearDriver\" class=\"btn-confirm\" style=\"display: inline-block;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/delete.svg\" height=\"20px\"\n                      style=\"min-height: 20px; pointer-events: none;\"></img>\n                  </div>\n                </button>\n              </v-col>\n              <v-col cols=\"6\">\n                <button v-if=\"!isConnecting\" @click=\"connectDriver(selectedDriver)\" class=\"btn-confirm\"\n                  style=\"display: inline-block; background-color: green;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <v-icon color=\"white\">mdi-link</v-icon>\n                  </div>\n                </button>\n                <v-progress-circular v-else indeterminate color=\"green\" size=\"24\"></v-progress-circular>\n              </v-col>\n            </v-row>\n          </div>\n\n          <div v-show=\"DeviceIsConnected\" v-for=\"(item, index) in CurrentConfigItems()\" :key=\"index\"\n            class=\"config-item\">\n            <!-- 标题，仅在第一个项目显示 -->\n            <span v-if=\"index === 0\" class=\"config-title\">\n              {{ $t('Device Config Items') }}\n            </span>\n\n            <!-- 配置项卡片内容 -->\n            <v-card-text>\n              <!-- 文本输入类型 -->\n              <v-text-field v-if=\"item.inputType === 'text'\" v-model=\"item.value\" :label=\"item.label\"\n                @input=\"handleConfigChange(item.label, item.value)\" class=\"config-input\">\n              </v-text-field>\n\n              <!-- 数字输入类型 -->\n              <v-text-field v-if=\"item.inputType === 'number'\" v-model=\"item.value\" :label=\"item.label\"\n                :type=\"isDesktop ? 'number' : 'text'\" :min=\"item.min\" :max=\"item.max\"\n                :step=\"item.step !== undefined && item.step !== null ? item.step : 1\" :rules=\"numberRules(item)\"\n                :inputmode=\"isMobile ? getInputMode(item) : ''\" :pattern=\"isMobile ? getPattern(item) : ''\"\n                enterkeyhint=\"done\" @blur=\"onNumberCommit(item)\" @keydown.enter.prevent=\"onNumberCommit(item)\"\n                class=\"config-input\" />\n\n              <!-- 滑动条类型 -->\n              <div v-if=\"item.inputType === 'slider'\" class=\"slider-container\">\n                <span class=\"slider-label\">\n                  {{ item.label }}: {{ item.value }}\n                </span>\n                <div>\n                  <!-- 减小按钮 -->\n                  <button @click=\"decrementAndNotify(item)\" class=\"get-click btn-slider btn-minus\">\n                    <div class=\"btn-content\">\n                      <img src=\"@/assets/images/svg/ui/Minus.svg\" height=\"10px\" class=\"btn-icon\">\n                    </div>\n                  </button>\n\n                  <!-- 滑动条 -->\n                  <v-slider v-model=\"item.value\" :step=\"item.inputStep\" :max=\"item.inputMax\" :min=\"item.inputMin\"\n                    @change=\"handleConfigChange(item.label, item.value)\" color=\"white\"\n                    class=\"align-center slider-control\">\n                  </v-slider>\n\n                  <!-- 增加按钮 -->\n                  <button @click=\"incrementAndNotify(item)\" class=\"get-click btn-slider btn-plus\">\n                    <div class=\"btn-content\">\n                      <img src=\"@/assets/images/svg/ui/Plus.svg\" height=\"10px\" class=\"btn-icon\">\n                    </div>\n                  </button>\n                </div>\n              </div>\n\n              <!-- 选择框类型 -->\n              <v-select v-if=\"item.inputType === 'select'\" v-model=\"item.value\" :label=\"item.label\"\n                @change=\"handleConfigChange(item.label, item.value)\" :items=\"item.selectValue\" class=\"config-input\">\n              </v-select>\n\n              <!-- 开关类型 -->\n              <v-switch v-if=\"item.inputType === 'switch'\" v-model=\"item.value\" :label=\"item.label\"\n                @change=\"handleConfigChange(item.label, item.value)\" class=\"config-switch\">\n              </v-switch>\n\n              <!-- 提示信息类型（只读） -->\n              <div v-if=\"item.inputType === 'tip'\" class=\"tip-field\">\n                <div class=\"tip-label\">{{ item.label }}</div>\n                <div class=\"tip-value\" :title=\"formatTipTitle(item)\">\n                  {{ formatTipValue(item) }}\n                </div>\n              </div>\n            </v-card-text>\n          </div>\n\n          <div v-show=\"DeviceIsConnected\"\n            style=\"text-align: center; position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); display: flex; gap: 10px;\">\n            <button @click=\"disconnectDriver\" class=\"btn-confirm\" style=\"display: inline-block; background-color: red;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <v-icon color=\"white\">mdi-link-off</v-icon>\n              </div>\n            </button>\n          </div>\n\n        </div>\n\n        <div v-show=\"isOpenPowerPage\">\n          <span\n            style=\"position: absolute; top: 0px; left: 50%; transform: translateX(-50%); font-size: 26px; color: rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap; \">\n            {{ $t('Power Management') }}\n            <v-divider></v-divider>\n          </span>\n\n          <div style=\"position: absolute; top: 50px; max-height: calc(100% - 50px); width: 200px; overflow-y: auto;\">\n            <v-list dense>\n\n              <v-list-item @click.stop=\"SwitchOutPutPower(1, OutPutPower_1_ON)\"\n                :style=\"{ height: '36px', marginBottom: '10px' }\">\n                <v-list-item-icon style=\"margin-right: 10px;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/OutPutPower.svg\" height=\"30px\"\n                      style=\"min-height: 30px; pointer-events: none;\"></img>\n                  </div>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title>\n                    <span>\n                      <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('OutPut Power 1') }}\n                      </div>\n                      <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': OutPutPower_1_ON }\">{{\n                        OutPutPower_1_ON ?\n                          '[ON]' : '[OFF]' }}</div>\n                    </span>\n                  </v-list-item-title>\n\n                </v-list-item-content>\n              </v-list-item>\n\n              <v-list-item @click.stop=\"SwitchOutPutPower(2, OutPutPower_2_ON)\"\n                :style=\"{ height: '36px', marginBottom: '10px' }\">\n                <v-list-item-icon style=\"margin-right: 10px;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/OutPutPower.svg\" height=\"30px\"\n                      style=\"min-height: 30px; pointer-events: none;\"></img>\n                  </div>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title>\n                    <span>\n                      <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('OutPut Power 2') }}\n                      </div>\n                      <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': OutPutPower_2_ON }\">{{\n                        OutPutPower_2_ON ?\n                          '[ON]' : '[OFF]' }}</div>\n                    </span>\n                  </v-list-item-title>\n\n                </v-list-item-content>\n              </v-list-item>\n\n              <v-divider :style=\"{ marginBottom: '10px' }\"></v-divider>\n\n              <v-list-item @click.stop=\"RestartRaspberryPi()\" :style=\"{ height: '36px', marginBottom: '10px' }\">\n                <v-list-item-icon style=\"margin-right: 10px;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/Reboot.svg\" height=\"30px\"\n                      style=\"min-height: 30px; pointer-events: none;\"></img>\n                  </div>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Restart')\n                  }}</v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n\n              <v-list-item @click.stop=\"ShutdownRaspberryPi()\" :style=\"{ height: '36px', marginBottom: '10px' }\">\n                <v-list-item-icon style=\"margin-right: 10px;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/PowerOFF.svg\" height=\"30px\"\n                      style=\"min-height: 30px; pointer-events: none;\"></img>\n                  </div>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Shut Down')\n                  }}</v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n              <!-- 强制更新 -->\n              <v-list-item @click.stop=\"ForceUpdate()\" :style=\"{ height: '36px', marginBottom: '10px' }\">\n                <v-list-item-icon style=\"margin-right: 10px;\">\n                  <div style=\"display: flex; justify-content: center; align-items: center;\">\n                    <img src=\"@/assets/images/svg/ui/PowerOFF.svg\" height=\"30px\"\n                      style=\"min-height: 30px; pointer-events: none;\"></img>\n                  </div>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Force Update')\n                  }}</v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n\n            </v-list>\n          </div>\n\n        </div>\n\n      </div>\n\n    </v-navigation-drawer>\n\n    <v-navigation-drawer v-model=\"nav\" app :stateless=\"drawer_2\" temporary width=\"170\"\n      style=\"backdrop-filter: blur(5px); background-color: rgba(0, 0, 0, 0.1);\">\n      <v-layout column fill-height>\n        <v-list dense>\n          <!-- 客户端版本和服务器版本信息 -->\n          <template>\n            <div style=\"display: flex; justify-content: center; align-items: center;\">\n              <span style=\"font-size: 10px; color: rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap;\">\n                Client Version: {{ VueClientVersion }}\n              </span>\n            </div>\n            <div style=\"display: flex; justify-content: center; align-items: center;\">\n              <!-- <span style=\"font-size: 10px; color: getQTClientVersionColor,rgba(255, 255, 255, 0.5); user-select: none; white-space: nowrap;\">\n                Server Version: {{ QTClientVersion }}\n              </span> -->\n              <span :style=\"{\n                fontSize: '10px',\n                color: getQTClientVersionColor,\n                userSelect: 'none',\n                whiteSpace: 'nowrap'\n              }\">\n                Server Version: {{ QTClientVersion }}\n              </span>\n            </div>\n            <v-divider></v-divider>\n          </template>\n\n          <!-- 退出(Quit) -->\n          <v-list-item @click.stop=\"QuitToMainApp()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Quit.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Quit')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 视图设置(View Settings) -->\n          <v-list-item @click.stop=\"toggleStoreValue('showViewSettingsDialog')\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Setting.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('General Settings')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 电源管理(Power Management) -->\n          <v-list-item @click.stop=\"openPowerManagerPage()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Power.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Power Management')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-divider></v-divider>\n\n          <!-- 设备列表(动态生成) -->\n          <v-list-item v-for=\"(device, index) in devices\" :key=\"index\" @click.stop=\"selectDevice(device)\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/${device.driverType}.svg`)\" height=\"30px\"\n                  style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t(device.driverType) }}</div>\n                  <div :style=\"{ fontSize: '7px' }\" :class=\"{ 'connected-device': device.isConnected }\">{{\n                    device.device }}\n                  </div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-divider></v-divider>\n\n          <!-- 连接所有(Connect All) -->\n          <v-list-item :disabled=\"loadingConnectAllDevice\" @touchstart=\"startConnectBtnPress\"\n            @touchend=\"endConnectBtnPress\" @mousedown=\"startConnectBtnPress\" @mouseup=\"endConnectBtnPress\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Connect.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\">\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px', userSelect: 'none' }\">\n                {{ $t('Connect All') }}\n              </v-list-item-title>\n              <v-progress-linear v-if=\"loadingConnectAllDevice\" indeterminate color=\"white\"\n                height=\"5\"></v-progress-linear>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 断开所有连接(Disconnect All) -->\n          <v-list-item @click.stop=\"disconnectAllDevice(false)\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DisConnect.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px', userSelect: 'none' }\">{{\n                $t('Disconnect All') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 设备分配(Device Allocation) -->\n          <v-list-item @click.stop=\"DeviceAllocation()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/Allocation.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{\n                $t('Device Allocation') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 校准极轴(Calibrate Polar Axis) -->\n          <v-list-item @click.stop=\"CalibratePolarAxis()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/PoleAxis.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{\n                $t('Calibrate Polar Axis') }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 图像文件(Image Files) -->\n          <v-list-item @click.stop=\"OpenIamgeFolder()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/FolderSwitch.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Image Files')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 日志(Logs) -->\n          <v-list-item @click.stop=\"OpenDebugLog()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DebugLog.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Logs')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-divider></v-divider>\n\n          <!-- 纬度和经度(Lat & Long) -->\n          <v-list-item @click.stop=\"locationClicked()\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/Location.svg`)\" height=\"30px\" style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Lat & Long') }}</div>\n                  <div :style=\"{ fontSize: '7px' }\">{{ '(' + $store.state.currentLocation.lat + ', ' +\n                    $store.state.currentLocation.lng + ')' }}</div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 刷新页面(Refresh Page) -->\n          <v-list-item @click.stop=\"ShowConfirmDialog('Confirm', $t('Are you sure you need to refresh?'), 'Refresh')\"\n            :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"require(`@/assets/images/svg/ui/Refresh.svg`)\" height=\"30px\" style=\"min-height: 30px\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                <span>\n                  <div :style=\"{ fontSize: '10px' }\">{{ $t('Refresh Page') }}</div>\n                </span>\n              </v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n          <!-- 数据版权(Data Credits) -->\n          <v-list-item @click.stop=\"toggleStoreValue('showDataCreditsDialog')\" :style=\"{ height: '36px' }\">\n            <v-list-item-icon style=\"margin-right: 10px;\">\n              <div style=\"display: flex; justify-content: center; align-items: center;\">\n                <img src=\"@/assets/images/svg/ui/DataCredits.svg\" height=\"30px\"\n                  style=\"min-height: 30px; pointer-events: none;\"></img>\n              </div>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title :style=\"{ height: '15px', padding: '1px', fontSize: '10px' }\">{{ $t('Data Credits')\n                }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n\n        </v-list>\n      </v-layout>\n    </v-navigation-drawer>\n\n\n\n\n    <v-main>\n\n      <canvas v-show=false id=\"TestCanvas\" width=\"1920\" height=\"1080\"></canvas>\n\n      <v-container class=\"fill-height\" fluid style=\"padding: 0\">\n        <div id=\"stel\" v-bind:class=\"{ right_panel: $store.state.showSidePanel }\">\n          <div style=\"position: relative; width: 100%; height: 100%\">\n            <component v-bind:is=\"guiComponent\"></component>\n            <canvas id=\"stel-canvas\" ref='stelCanvas' :style=\"{ zIndex: canvasZIndexStel }\"></canvas>\n            <canvas ref=\"mainCanvas\" id=\"mainCamera-canvas\" :style=\"{ zIndex: canvasZIndexMainCamera }\"\n              @click=\"handleMainCanvasClick\" @touchstart=\"handleTouchStart\" @touchmove=\"handleTouchMove\"\n              @touchend=\"handleTouchEnd\" @mousedown=\"handleMouseDown\" @mouseup=\"handleMouseUp\"\n              @mousemove=\"handleMouseMove\" @wheel=\"handleWheel\">\n            </canvas>\n            <canvas ref=\"guiderCanvas\" id=\"guiderCamera-canvas\" :style=\"{ zIndex: canvasZIndexGuiderCamera }\"\n              @click=\"handleGuiderCanvasClick\"></canvas>\n            <!-- <img id=\"imageSrc\" alt=\"Source\" :src=\"imageSrc\" crossOrigin = \"\" /> -->\n            <ProgressBar :progress=\"progressValue\" :description=\"progressDescription\" :showDescription=\"true\"\n              :isShow=\"currentcanvas === 'MainCamera'\" />\n            <!-- <MeridianFlipNotifier\n              :remaining-seconds=\"flipEtaSeconds\"\n              :menu-offset-px=\"56\"\n              :is-mount-connected=\"isMountConnected\"\n            /> -->\n          </div>\n        </div>\n\n\n      </v-container>\n    </v-main>\n\n    <v-dialog v-model=\"showDisconnectDialog\" persistent max-width=\"290\">\n      <v-card>\n        <v-card-title class=\"text-h5\">Confirm Action</v-card-title>\n        <v-card-text>Are you sure you want to disconnect the driver {{ currentDisconnectDriverName }}?</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"red darken-1\" text @click=\"showDisconnectDialog = false\">Cancel</v-btn>\n          <v-btn color=\"green darken-1\" text @click=\"confirmDisconnect\">Confirm</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- 校准信息显示框 -->\n    <div v-if=\"calibrationInfo.isCalibrating || calibrationInfo.calibrationState === 'complete'\"\n      class=\"calibration-info-box\">\n      <div class=\"calibration-content\">\n        <div class=\"calibration-title\">{{ $t('Focuser Travel Calibration') }}</div>\n        <div class=\"calibration-message\">{{ calibrationInfo.calibrationMessage }}</div>\n        <div class=\"calibration-progress\">{{ $t('Step') }} {{ calibrationInfo.calibrationStep }}/3</div>\n      </div>\n    </div>\n\n    <!-- 自动对焦信息显示框 - [AUTO_FOCUS_UI_ENHANCEMENT] -->\n    <div v-if=\"(autoFocusInfo.isRunning || autoFocusInfo.state === 'complete') && currentcanvas === 'MainCamera'\"\n      class=\"calibration-info-box\">\n      <div class=\"calibration-content\">\n        <div class=\"calibration-title\">{{ $t('Auto Focus') }}</div>\n        <div class=\"calibration-message\">{{ autoFocusInfo.message }}</div>\n        <div class=\"calibration-progress\">{{ $t('Step') }} {{ autoFocusInfo.step }}/3</div>\n      </div>\n    </div>\n\n  </v-app>\n</template>\n<script>\nimport _ from 'lodash'\nimport Gui from '@/components/gui.vue'\nimport GuiLoader from '@/components/gui-loader.vue'\nimport swh from '@/assets/sw_helpers.js'\nimport Moment from 'moment'\nimport BackgroundImage from '@/assets/images/svg/ui/Background.svg';\nimport ErrorImage from '@/assets/images/svg/ui/errorImage.svg';\nimport ProgressBar from '@/components/ProgressBar.vue';\nimport MeridianFlipNotifier from '@/components/MeridianFlipNotifier.vue';\n\nlet glTestCircle;\nlet glLayer;\nlet glStel;\n\nexport default {\n  data(context) {\n    return {\n      menuItems: [\n        { title: this.$t('View Settings'), icon: 'mdi-settings', store_var_name: 'showViewSettingsDialog', store_show_menu_item: 'showViewSettingsMenuItem' },\n        { title: this.$t('Planets Tonight'), icon: 'mdi-panorama-fisheye', store_var_name: 'showPlanetsVisibilityDialog', store_show_menu_item: 'showPlanetsVisibilityMenuItem' },\n        { divider: true }\n      ].concat(this.getPluginsMenuItems()).concat([\n        { title: this.$t('Data Credits'), footer: true, icon: 'mdi-copyright', store_var_name: 'showDataCreditsDialog' }\n      ]),\n      menuComponents: [].concat(this.getPluginsMenuComponents()),\n      guiComponent: 'GuiLoader',\n      startTimeIsSet: false,\n      initDone: false,\n      dataSourceInitDone: false,\n      imageSrc: 'https://i.imgur.com/egA5FIv.jpeg', // 替换为你的图像路径\n      cvReady: false,\n      canvasZIndexStel: -10,\n      canvasZIndexMainCamera: -11,\n      canvasZIndexGuiderCamera: -12,\n      currentcanvas: 'Stel',\n\n      WebSocketUrl: '',\n\n      websocket: null,\n      message: '',\n      receivedMessages: [],// 存储接收到的消息\n      sentMessages: [], // 存储已发送的消息\n      messageCounter: 0, // 用于生成唯一的消息ID\n      websocketState: 'disconnected', // 添加WebSocket连接状态\n      networkDisconnected: false, // 添加网络连接状态\n\n      QTClientVersion: 'Not connected',\n      VueClientVersion: process.env.VUE_APP_VERSION,\n\n      // 校准信息对象\n      calibrationInfo: {\n        isCalibrating: false,\n        calibrationState: 'idle',\n        calibrationStep: 0,\n        calibrationMessage: ''\n      },\n\n      // 自动对焦信息对象 - [AUTO_FOCUS_UI_ENHANCEMENT]\n      autoFocusInfo: {\n        isRunning: false,\n        state: 'idle',\n        step: 0,\n        message: ''\n      },\n\n      // isMessageBoxShow: false,\n\n      CurrentDriverType: '',\n      DeviceIsConnected: null,\n      confirmDriverType: '',\n\n      MainCameraOffsetMin: 0,\n      MainCameraOffsetMax: 0,\n\n      MainCameraGainMin: 0,\n      MainCameraGainMax: 0,\n\n      devices: [\n        { name: '导星镜', driverType: 'Guider', type: 'CCDs', ListNum: \"1\", isget: false, device: '', BaudRate: 9600, driverName: '', usbSerialPath: '', sdkVersion: '',isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Guider' },\n        { name: '主相机', driverType: 'MainCamera', type: 'CCDs', ListNum: \"20\", isget: false, device: '', BaudRate: 9600, driverName: '', usbSerialPath: '', sdkVersion: '',isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_MainCamera' },\n        { name: '赤道仪', driverType: 'Mount', type: 'Telescopes', ListNum: \"0\", isget: false, device: '', BaudRate: 9600, driverName: '', usbSerialPath: '', sdkVersion: '',isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Mount' },\n        { name: '望远镜', driverType: 'Telescopes', device: '', isConnected: true },\n        { name: '电动调焦器', driverType: 'Focuser', type: 'Focusers', ListNum: \"22\", isget: false, device: '', BaudRate: 9600, driverName: '', usbSerialPath: '', sdkVersion: '',isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_Focuser' },\n        { name: '电子极轴镜', driverType: 'PoleCamera', type: 'CCDs', ListNum: \"2\", isget: false, device: '', BaudRate: 9600, driverName: '', usbSerialPath: '', sdkVersion: '',isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_PoleCamera' },\n        { name: '滤镜轮', driverType: 'CFW', type: 'Filter Wheels', ListNum: \"21\", isget: false, device: '', BaudRate: 9600, driverName: '', usbSerialPath: '', sdkVersion: '',isConnected: false, dialogStateVar: 'showDeviceSettingsDialog_CFW' },\n      ],\n\n      // Changing the label name also requires changing the emit signal name\n      GuiderConfigItems: [\n        { driverType: 'Guider', label: 'Guider Focal Length (mm)', value: '', inputType: 'text' },\n        { driverType: 'Guider', label: 'Multi Star Guider', value: false, inputType: 'switch' },\n        // { driverType: 'Guider', label: 'Guider Pixel size', value: '', inputType: 'text'},\n        { driverType: 'Guider', label: 'Guider Gain', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n        { driverType: 'Guider', label: 'Calibration step (ms)', value: '', inputType: 'text' },\n        { driverType: 'Guider', label: 'Ra Aggression', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n        { driverType: 'Guider', label: 'Dec Aggression', value: '', inputType: 'slider', inputMin: 0, inputMax: 100, inputStep: 1 },\n\n      ],\n\n      MainCameraConfigItems: [\n        // vue处理参数\n        { driverType: 'MainCamera', label: 'ImageCFA', value: '', inputType: 'select', selectValue: ['GR', 'GB', 'BG', 'RGGB', 'null'] },\n        // 硬件处理参数\n        { driverType: 'MainCamera', label: 'Binning', value: '', inputType: 'slider', inputMin: 1, inputMax: 16, inputStep: 1 },\n        { driverType: 'MainCamera', label: 'Temperature', value: '', inputType: 'select', selectValue: [5, 0, -5, -10, -15, -20, -25] },\n        { driverType: 'MainCamera', label: 'Gain', value: '', inputType: 'slider', inputMin: 0, inputMax: 0, inputStep: 1 },\n        { driverType: 'MainCamera', label: 'Offset', value: '', inputType: 'slider', inputMin: 0, inputMax: 0, inputStep: 1 },\n      ],\n\n      MountConfigItems: [\n        { driverType: 'Mount', label: 'Flip ETA', value: '00:00:00', displayValue: '00:00:00', inputType: 'tip' },\n        { driverType: 'Mount', label: 'GotoThenSolve', value: false, inputType: 'switch' },\n        // { driverType: 'Mount', label: 'AutoFlip', value: false, inputType: 'switch' },\n\n      ],\n\n\n      TelescopesConfigItems: [\n        { driverType: 'Telescopes', num: 1, label: 'Focal Length (mm)', value: '', inputType: 'number' },\n      ],\n\n      FocuserConfigItems: [\n        { driverType: 'Focuser', num: 2, label: 'Sync Focuser Step', value: '', inputType: 'text' },\n        { driverType: 'Focuser', num: 2, label: 'Min Limit', value: '', inputType: 'number' },\n        { driverType: 'Focuser', num: 2, label: 'Max Limit', value: '', inputType: 'number' },\n        { driverType: 'Focuser', num: 2, label: 'Backlash', value: '', inputType: 'number' },\n      ],\n\n      PoleCameraConfigItems: [\n\n      ],\n\n      CFWConfigItems: [\n\n      ],\n\n      BeforeChangeConfigItems: [],\n\n\n\n      imageData: null,\n\n      histogramImage: null,\n      histogram_min: 0,    // 直方图自动拉伸的最小值\n      histogram_max: 255,  // 直方图自动拉伸的最大值\n\n      currentHistogramMin: 0,\n      currentHistogramMax: 255,\n\n      ImageGainR: 1,\n      ImageGainB: 1,\n\n      ImageOffset: 0,\n\n      ImageCFA: 'BG',\n\n      cameraBin: 1,   // 当前相机binning\n\n      CanvasWidth: 1920,  // 主画布宽度\n      CanvasHeight: 1080, // 主画布高度\n\n      scale: 1, // 缩放比例\n      translateX: 0, // 平移x坐标\n      translateY: 0, // 平移y坐标\n      bufferCanvas: null, // 存储画布\n      bufferCtx: null, // 存储画布上下文\n      tempCanvas: null, // 临时画布\n      tempCtx: null, // 临时画布上下文\n\n      visibleWidth: 0, // 可见区域宽度\n      visibleHeight: 0, // 可见区域高度\n      visibleX: 0, // 可见区域x坐标\n      visibleY: 0, // 可见区域y坐标\n      isDragging: false, // 标记画布是否正在拖动\n      pendingScaleChange: false, // 标记画布是否正在缩放\n\n      touchStartX: 0, // 触摸开始x坐标\n      touchStartY: 0, // 触摸开始y坐标\n      startDistance: 0, // 触摸开始距离\n\n      moveIntervalId: null, // 拖动定时器\n      zoomIntervalId: null, // 缩放定时器\n\n\n      imageWidth: 0, // 图像宽度\n      imageHeight: 0, // 图像高度\n      drawImgData: null,\n      OriginalImage: null,\n      detectStarsImg: null,\n\n      isNotDrawStars: true,\n\n      mainCameraSizeX: 0,\n      mainCameraSizeY: 0,\n\n      ImageProportion: 0,\n\n      DetectedStarsList: [],\n      DetectedStarsFinish: false,\n\n      CartesianList: [],\n\n      PolarPoint_Altitude: 0,\n\n      LastPoint_AzAlt: null,\n\n      MarkCircleNum: 0,\n\n      LastCircle_RaDec: null,\n      LastCircle_AzAlt: null,\n\n      Circles: [],\n\n      // 极轴校准相关数组\n      calibrationCircles: [],  // 校准点圆圈数组\n      adjustmentCircles: [],   // 调整点圆圈数组\n      targetPointCircle: null, // 目标点圆形对象\n      fakePolarAxisCircle: null, // 假极点圆形对象\n      lastPosition: null,      // 上一次位置\n      fieldUpdateTimer: null,  // 视场更新定时器\n      fieldOfViewPolygons: [], // 存储视场多边形对象\n\n      drawer_2: null,    // 设置侧边栏的显示与隐藏\n\n      drivers: [], // 驱动选项数组\n      selectedDriver: null, // 选中的驱动\n\n      devicesList: [], // 设备选项数组\n      selectedDevice: null, // 选中的设备\n      ToBeConnectDevice: [],\n\n      loadingSelectDriver: false,\n      loadingConnectAllDevice: false,\n\n      CurrentLocationLng: 0,\n      CurrentLocationLat: 0,\n\n      histogramData: [],\n\n      ImageArrayBuffer: null,\n\n      isOpenDevicePage: false, // 设置设备页面是否打开\n      isOpenPowerPage: false, // 设置电源页面是否打开\n\n      OutPutPower_1_ON: true,\n      OutPutPower_2_ON: false,\n\n      isPolarAxisMode: false,\n\n      isTouching: false, // 标记是否正在处理触摸事件\n      ConnectBtnPressTimer: null,\n      ConnectBtnlongPressThreshold: 1000,\n      isConnectBtnLongPress: false, // 标记是否为长按\n      ConnectBtnCanClick: true,\n\n\n      haveDeviceConnect: false,\n      isConnecting: false, // 添加连接状态\n\n      disconnectTimeoutTriggered: false,\n      disconnectTimeout: null,\n\n      isDownloadingImage: false,\n      isDownloadingImageName: '',\n      isWaitingLogged: false, // 添加等待日志标志\n\n      showDisconnectDialog: false,\n      currentDisconnectDriverName: '',\n\n      enableMainCanvasClick: false, // 控制画布是否可以点击，用来移动调焦选择框和选星\n\n      lastImageProcessParams: { // 最后处理图像的参数\n        blackLevel: 0,\n        whiteLevel: 65535,\n        CFA: 'null',\n        analysis: null,\n        isColorCamera: false,\n      },\n      focuserPictureFileName: '',  // 焦距图片文件名\n      isProcessingImage: false,   // 控制是否正在处理图像\n      isFocusLoopShooting: false,  // 控制是否进行ROi循环拍摄\n      focuserROIStarsList: [],  // 用来保存ROI区域的星点列表，分别保存x,y,HFR\n      selectStarX: -1,\n      selectStarY: -1,\n      DrawSelectStarX: -1,\n      DrawSelectStarY: -1,\n      DrawSelectStarHFR: -1,\n      ROI_x: -1,    // 用来保存ROI区域的x坐标,在vue中计算\n      ROI_y: -1,    // 用来保存ROI区域的y坐标,在vue中计算\n      ROI_x_qt: -1,    // 用来保存ROI区域的x坐标,在qt中计算\n      ROI_y_qt: -1,    // 用来保存ROI区域的y坐标,在qt中计算\n      ROI_length: 300, // 用来保存ROI区域的长度\n      showSelectStar: false,\n\n      isOneTouch: false,\n      currentTouchX: [0, 0],\n      currentTouchY: [0, 0],\n      startTouchX: [0, 0],\n      startTouchY: [0, 0],\n      startTouchDistance: 0,\n\n      // 定义波特率选项\n      BaudRateItems: [\n        { label: '9600', value: 9600 },\n        { label: '19200', value: 19200 },\n        { label: '38400', value: 38400 },\n        { label: '57600', value: 57600 },\n        { label: '115200', value: 115200 },\n        { label: '230400', value: 230400 },\n      ],\n      BaudRateSelected: 9600, // 波特率选择\n      cpuTemp: null,  // CPU温度\n      cpuUsage: null, // CPU使用率\n\n      progressValue: 0,// 控制图像处理进度条的变量\n      progressDescription: '', // 控制进度条显示内容\n\n      calculateGain: true, // 控制是否计算白平衡增益\n      lutCache: {\n        lastParams: null, // 用于存储上次的参数\n        lutR: null,\n        lutG: null,\n        lutB: null\n      },\n    }\n  },\n  components: {\n    Gui,\n    GuiLoader,\n    ProgressBar,\n    MeridianFlipNotifier,\n    // MessageBox,\n  },\n  created() {\n    this.$bus.$on('AppSendMessage', this.sendMessage);\n    this.$bus.$on('AppUpdateDevices', this.updateDevices);\n    this.$bus.$on('Switch-MainPage', this.handleButtonTestClick);\n    this.$bus.$on('HandleHistogramNum', this.applyHistStretch);\n    this.$bus.$on('ImageGainR', this.ImageGainSet);\n    this.$bus.$on('ImageGainB', this.ImageGainSet);\n    this.$bus.$on('Offset', this.ImageOffsetSet);\n    this.$bus.$on('Binning', this.BinningSet);\n    this.$bus.$on('Gain', this.GainSet);\n    this.$bus.$on('Offset', this.OffsetSet);\n    this.$bus.$on('ImageCFA', this.ImageCFASet);\n    // this.$bus.$on('MainCameraCFA', this.ImageCFASet);\n    this.$bus.$on('Temperature', this.CameraTemperatureSet);\n    this.$bus.$on('Focal Length (mm)', this.FocalLengthSet);\n    this.$bus.$on('Guider Focal Length (mm)', this.GuiderFocalLengthSet);\n    this.$bus.$on('Multi Star Guider', this.MultiStarGuiderSet);\n    this.$bus.$on('Guider Pixel size', this.GuiderPixelSizeSet);\n    this.$bus.$on('Guider Gain', this.GuiderGainSet);\n    this.$bus.$on('Calibration step (ms)', this.CalibrationDurationSet);\n    this.$bus.$on('Ra Aggression', this.RaAggressionSet);\n    this.$bus.$on('Dec Aggression', this.DecAggressionSet);\n    this.$bus.$on('Sync Focuser Step', this.SyncFocuserStep);\n    this.$bus.$on('Min Limit', this.MinLimitSet);\n    this.$bus.$on('Max Limit', this.MaxLimitSet);\n    this.$bus.$on('Backlash', this.BacklashSet);\n    this.$bus.$on('GotoThenSolve', this.GotoThenSolve);\n    this.$bus.$on('AutoFlip', this.AutoFlipSet);\n    this.$bus.$on('WestMinutesPastMeridian', this.WestMinutesPastMeridianSet);\n    this.$bus.$on('EastMinutesPastMeridian', this.EastMinutesPastMeridianSet);\n    this.$bus.$on('ImageProportion', this.setImageProportion);\n    this.$bus.$on('MountGoto', this.lookatcircle);\n    this.$bus.$on('SwitchImageToShow', this.SwitchImageToShow);\n    this.$bus.$on('PolarPointAltitude', this.setPolarPointAltitude);\n    this.$bus.$on('showStelCanvas', this.showStelCanvas);\n    this.$bus.$on('RecalibratePolarAxis', this.RecalibratePolarAxis);\n    this.$bus.$on('CurrentExpTimeList', this.CurrentExpTimeList);\n    this.$bus.$on('disconnectAllDevice', this.disconnectAllDevice);\n    this.$bus.$on('GetConnectedDevices', this.ReturnConnectedDevices);\n    this.$bus.$on('GetCurrentConnectedDevices', this.ReturnCurrentConnectedDevices);\n    this.$bus.$on('CurrentCFWList', this.CurrentCFWList);\n    this.$bus.$on('calcWhiteBalanceGains', this.calcWhiteBalanceGains);\n    this.$bus.$on('SwitchOutPutPower', this.SwitchOutPutPower);\n    this.$bus.$on('PolarAxisMode', this.PolarAxisMode);\n    this.$bus.$on('SendConsoleLogMsg', this.SendConsoleLogMsg);\n    // this.$bus.$on('DisconnectDriverSuccess', this.disconnectDriversuccess);\n    this.$bus.$on('UnBindingDevice', this.UnBindingDevice);\n    this.$bus.$on('CloseWebView', this.QuitToMainApp)\n    this.$bus.$on('RedBoxSizeChange', this.RedBoxSizeChange);\n    this.$bus.$on('setFocuserState', this.setFocuserState);  // 设置调焦状态和进度\n    this.$bus.$on('setShowSelectStar', this.setShowSelectStar);  // 设置是否显示选择星点\n    this.$bus.$on('ScaleChange', this.ScaleChange);\n    this.$bus.$on('showCanvas', this.showCanvas);\n    this.$bus.$on('getMountAutoFlip', this.sendMountAutoFlip);  // 子组件获取赤道仪自动翻转模式\n    // 极轴校准绘制相关监听器\n    this.$bus.$on('DrawCalibrationPointPolygon', this.drawCalibrationPointPolygon);\n    this.$bus.$on('ClearCalibrationPoints', this.clearCalibrationPoints);\n    this.$bus.$on('DrawAdjustmentPointsPolygon', this.drawAdjustmentPointsPolygon);\n    this.$bus.$on('DrawTargetPointCircle', this.drawTargetPointCircle);\n    this.$bus.$on('DrawFakePolarAxisCircle', this.DrawFakePolarAxisCircle)\n\n    // 校准相关事件监听器\n    this.$bus.$on('StartCalibration', this.startCalibrationProcess);\n    this.$bus.$on('UpdateCalibrationInfo', this.updateCalibrationInfo);\n    this.$bus.$on('EndCalibration', this.endCalibration);\n\n    // 自动对焦相关事件监听器 - [AUTO_FOCUS_UI_ENHANCEMENT]\n    this.$bus.$on('StartAutoFocus', this.startAutoFocusProcess);\n    this.$bus.$on('UpdateAutoFocusStep', this.updateAutoFocusStep);\n    this.$bus.$on('EndAutoFocus', this.endAutoFocus);\n\n    this.memoryCheckInterval = setInterval(this.checkMemoryUsage, 30000);\n\n\n  },\n  methods: {\n    // 是否允许小数：step 不是整数，或显式允许\n    allowsDecimal(item) {\n      const step = item.step ?? 1;\n      return item.allowDecimal === true || !Number.isInteger(step) || String(step).includes('.');\n    },\n    // 是否允许负数：根据配置或 min<0 猜测\n    allowsNegative(item) {\n      return item.allowNegative === true || (typeof item.min === 'number' && item.min < 0);\n    },\n    // 移动端键盘类型\n    getInputMode(item) {\n      // 仅移动端生效；桌面忽略\n      if (!this.isMobile) return undefined;\n      // 需要小数或负数，用 decimal（更容易出现小数点/负号）\n      return this.allowsDecimal(item) || this.allowsNegative(item) ? 'decimal' : 'numeric';\n    },\n    // 配合 iOS：pattern 可影响弹出键盘与校验\n    getPattern(item) {\n      const neg = this.allowsNegative(item);\n      if (this.allowsDecimal(item)) {\n        // 允许 . 或 , 作为小数点，便于不同语言键盘\n        return neg ? '^[-]?[0-9]*([.,][0-9]*)?$' : '^[0-9]*([.,][0-9]*)?$';\n      }\n      // 整数\n      return neg ? '^[-]?[0-9]*$' : '^[0-9]*$';\n    },\n\n    numberRules(item) {\n      return [\n        v => v === '' || v === null || !isNaN(this._toNumber(v)) || '请输入数字',\n        v => item.min === undefined || this._toNumber(v) >= item.min || `最小值 ${item.min}`,\n        v => item.max === undefined || this._toNumber(v) <= item.max || `最大值 ${item.max}`,\n      ];\n    },\n\n    // 统一把逗号小数转为点，去掉多余空白\n    _toNumber(v) {\n      if (v === '' || v === null || v === undefined) return NaN;\n      if (typeof v === 'number') return v;\n      const s = String(v).trim().replace(',', '.');\n      return Number(s);\n    },\n\n    onNumberCommit(item) {\n      let v = this._toNumber(item.value);\n      if (!Number.isFinite(v)) return;\n\n      // 1) 夹取到 min/max\n      if (item.min !== undefined && v < item.min) v = item.min;\n      if (item.max !== undefined && v > item.max) v = item.max;\n\n      // 2) 按 step 对齐（以 min 或 0 为基准）\n      const step = item.step ?? 1;\n      if (step > 0) {\n        const base = (item.min !== undefined ? item.min : 0);\n        v = base + Math.round((v - base) / step) * step;\n        if (item.min !== undefined && v < item.min) v = item.min;\n        if (item.max !== undefined && v > item.max) v = item.max;\n        v = Number(v.toFixed(12)); // 去浮点误差\n      }\n\n      // 回写并通知\n      item.value = v;\n      this.handleConfigChange(item.label, v);\n    },\n    checkMemoryUsage() {\n      if (window.performance && window.performance.memory) {\n        const memoryInfo = window.performance.memory;\n        const used = Math.round(memoryInfo.usedJSHeapSize / 1048576);\n        const limit = Math.round(memoryInfo.jsHeapSizeLimit / 1048576);\n\n        // console.log(`内存使用: ${used}MB / ${limit}MB`);\n\n        if (memoryInfo.usedJSHeapSize > memoryInfo.jsHeapSizeLimit * 0.7) {\n          this.$bus.$emit('showWarning', this.$i18n.locale === 'cn' ?\n            '内存使用接近限制，请保存工作后刷新页面' :\n            'Memory usage is approaching limit. Please save your work and refresh the page.');\n\n          // 可选：尝试手动触发垃圾回收\n          if (window.gc) {\n            try { window.gc(); } catch (e) { }\n          }\n        }\n      }\n    },\n\n    formatTipValue(item) {\n      return (item && item.displayValue != null)\n        ? String(item.displayValue)\n        : (item && item.value != null ? String(item.value) : '-');\n    },\n    formatTipTitle(item) {\n      if (item && item.tooltip != null) return String(item.tooltip);\n      if (item && item.value != null) return String(item.value);\n      return '';\n    },\n    copyTip(item) {\n      const text = (item && item.value != null) ? String(item.value) : '';\n      if (!text) return;\n      if (navigator && navigator.clipboard && navigator.clipboard.writeText) {\n        navigator.clipboard.writeText(text);\n      }\n    },\n\n    preventDefault(event) {\n      event.preventDefault();\n    },\n    getLocationHostName() {\n      const hostname = window.location.hostname;\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const port = window.location.protocol === 'https:' ? '8601' : '8600';\n      this.SendConsoleLogMsg('location hostname:' + hostname, 'info');\n      this.WebSocketUrl = `${protocol}//${hostname}:${port}`;\n      console.log('WebSocketUrl:', this.WebSocketUrl);\n    },\n    getQTClientVersion() {\n      this.sendMessage('Vue_Command', 'getQTClientVersion');\n    },\n    connect() {\n      // 替换为你的 WebSocket 服务器地址\n      // this.websocket = new WebSocket('ws://192.168.2.31:8600');  // process.env.VUE_APP_WEBSOCKET\n      // this.websocket = new WebSocket(process.env.VUE_APP_WEBSOCKET);\n      const wsOptions = {\n        rejectUnauthorized: false  // 禁用证书验证\n      };\n      this.websocket = new WebSocket(this.WebSocketUrl, [], wsOptions);\n\n      this.websocket.onopen = () => {\n        this.websocketState = 'connected';\n        this.networkDisconnected = false; // WebSocket连接成功时重置网络连接状态\n        if (this.disconnectTimeoutTriggered) {\n          this.callShowMessageBox('WebSocket connected', 'success');\n        }\n        this.$bus.$emit('ShowNetStatus', 'true');\n        this.StatusRecovery();\n        console.log('process.env.NODE_ENV:', process.env.NODE_ENV);\n      };\n\n      this.websocket.onmessage = (message) => {\n        // console.log('QHYCCD | Received message:', message.data);\n\n        const data = JSON.parse(message.data);\n\n        if (data.type === 'QT_Return') {\n          const parts = data.message.split(':');\n          let messageType;\n          if (parts.length > 0) {\n            messageType = parts[0];\n            // console.log('QHYCCD | 获得信息('+messageType+'):', parts);\n          }\n          else {\n            console.error('消息格式错误，无法分割:', data.message);\n            return;\n          }\n          let acceptMessage = false;\n          if (data.message.startsWith('StagingScheduleData:')) {\n            console.log('------------------------------');\n            acceptMessage = true;\n            const parts = data.message.split('[');\n\n            if (parts.length > 0) {\n              console.log('parts.length: ', parts.length);\n              this.$bus.$emit('StagingScheduleData', data.message);\n            }\n            console.log('------------------------------');\n          }\n\n          if (data.message.startsWith('SendDebugMessage|')) {\n            acceptMessage = true;\n            const parts = data.message.split('|');\n            if (parts.length === 3) {\n              const type = parts[1];\n              const message = parts[2];\n              this.$bus.$emit('SendDebugMessage', type, message);\n            }\n          }\n\n          if (!acceptMessage) {\n            switch (messageType) {\n              case 'AddDriver':\n                if (parts.length === 3) {\n                  const label = parts[1];\n                  const value = parts[2];\n                  const type = this.CurrentDriverType;\n                  // 创建一个驱动对象\n                  const driver = { type, label, value };\n\n                  // if (type === 'MainCamera' && label === \"QHY CCD2\") {\n                  //   break;\n                  // }\n                  // if (type === 'Guider' && label === \"QHY CCD\") {\n                  //   break;\n                  // }\n\n                  // 检查label是否为\"QHY CCD\"或\"QFocuser\"，如果是，则插入到数组首位\n                  if (label === \"QHY CCD\" || label === \"QFocuser\" || label === \"QHY CCD2\") {\n                    this.drivers.unshift(driver); // 将新驱动添加到数组的开始位置\n                  } else {\n                    this.drivers.push(driver); // 将新驱动添加到数组的末尾\n                  }\n                }\n                break;\n\n              case 'AddDevice':\n                if (parts.length === 2) {\n                  const label = parts[1];\n                  console.log('QHYCCD | AddDevice: ', label);\n                  // const value = parts[2];\n                  const type = this.confirmDriverType;\n                  // 创建一个驱动对象\n                  const device = { type, label, label };\n                  console.log('QHYCCD | AddDevice: ', device);\n                  // this.$bus.$emit('add-device', device);\n                  this.devicesList.push(device);\n\n                  this.ToBeConnectDevice = [];\n                  this.devicesList.forEach(devicesList => {\n                    if (devicesList.type === this.CurrentDriverType) {\n                      this.ToBeConnectDevice.push(devicesList);\n                    }\n                  });\n\n                  this.loadingSelectDriver = false;\n                }\n                break;\n\n              case 'updateDevices_':\n                if (parts.length === 3) {\n                  const ListNum = parts[1];\n                  const name = parts[2];\n                  this.updateDevices_(ListNum, name);\n                }\n                break;\n\n              case 'ConnectSuccess':\n                if (parts.length === 4) {\n                  const type = parts[1];\n                  const deviceName = parts[2];\n                  const driverName = parts[3];\n\n                  if (deviceName != '') {\n                    this.updateDevicesConnect(type, deviceName, driverName, true);\n                  } else {\n                    this.updateDevicesConnect(type, deviceName, driverName, false);\n                  }\n                }\n                break;\n\n              case 'ConnectFailed':\n                if (parts.length === 2) {\n                  const reason = parts[1];\n                  this.callShowMessageBox(reason, 'error');\n                  this.loadingConnectAllDevice = false;\n                }\n                break;\n\n              case 'ScanFailed':\n                if (parts.length === 2) {\n                  const reason = parts[1];\n                  this.callShowMessageBox(reason, 'error');\n                  this.loadingSelectDriver = false;\n                }\n                break;\n\n              case 'AddDeviceType':\n                if (parts.length === 2) {\n                  const DeviceType = parts[1];\n                  this.$bus.$emit('AddDeviceType', DeviceType);\n                }\n                break;\n\n              case 'DeviceToBeAllocated':\n                if (parts.length === 4) {\n                  const DeviceType = parts[1];\n                  const DeviceIndex = parts[2];\n                  const DeviceName = parts[3];\n                  this.$bus.$emit('DeviceToBeAllocated', DeviceIndex, DeviceName);\n                }\n                break;\n\n              case 'ShowDeviceAllocationWindow':\n                this.$bus.$emit('toggleDeviceAllocationPanel');\n                this.nav = false;\n                break;\n\n              case 'ExposureCompleted':\n                this.$bus.$emit('ExposureCompleted');\n                break;\n\n              case 'SaveJpgSuccess':\n                if (parts.length === 4) {\n                  const fileName = parts[1];\n                  const roi_x = parseInt(parts[2]);\n                  const roi_y = parseInt(parts[3]);\n                  this.ROI_x = roi_x;\n                  this.ROI_y = roi_y;\n\n                  // this.$bus.$emit('showRoiImage', fileName);\n                  this.showRoiImage(fileName, roi_x, roi_y);\n                }\n                break;\n\n              case 'SaveBinSuccess':\n                if (parts.length === 2) {\n                  const fileName = parts[1];\n                  this.readBinFile('img/' + fileName);\n                  this.DetectedStarsFinish = false;\n                }\n                break;\n\n\n              case 'SaveGuiderImageSuccess':\n                if (parts.length === 2) {\n                  const fileName = parts[1];\n                  this.loadAndDisplayImage('img/' + fileName);\n                }\n                break;\n              case 'GuideSize':\n                if (parts.length === 3) {\n                  const col = parts[1];\n                  const row = parts[2];\n                  this.$bus.$emit(\"GuideSize\", col, row);\n                }\n\n              case 'AddScatterChartData':\n                if (parts.length === 3) {\n                  const Data_x = parts[1];\n                  const Data_y = parts[2];\n                  const newDataPoint = [Data_x, Data_y];\n                  this.$bus.$emit('AddScatterChartData', newDataPoint);\n                }\n                break;\n\n              case 'AddLineChartData':\n                if (parts.length === 4) {\n                  const Data_x = parts[1];\n                  const Data_Ra = parts[2];\n                  const Data_Dec = parts[3];\n                  const newDataPoint_Ra = [Data_x, Data_Ra];\n                  const newDataPoint_Dec = [Data_x, Data_Dec];\n                  this.$bus.$emit('AddLineChartData', newDataPoint_Ra, newDataPoint_Dec);\n                }\n                break;\n\n              case 'SetLineChartRange':\n                if (parts.length === 3) {\n                  const min = parts[1];\n                  const max = parts[2];\n                  this.$bus.$emit('SetLineChartRange', min, max);\n                }\n                break;\n\n              case 'GuiderStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('GuiderStatus', status);\n                }\n                break;\n\n              case 'FocusChangeSpeedSuccess':\n                if (parts.length === 2) {\n                  const Speed = parts[1];\n                  this.$bus.$emit('FocusChangeSpeedSuccess', Speed);\n                }\n                break;\n\n\n              case 'FocusPosition':\n                if (parts.length === 3) {\n                  const CurrentPosition = parts[1];\n                  const TargetPosition = parts[2];\n                  this.$bus.$emit('FocusPosition', CurrentPosition, TargetPosition);\n                }\n                break;\n\n              case 'FocusMoveDone':\n                if (parts.length === 3) {\n                  const CurrentPosition = parts[1];\n                  const FWHM = parts[2];\n                  this.$bus.$emit('UpdateFWHM', CurrentPosition, FWHM);\n                  this.$bus.$emit('addData_Point', CurrentPosition, FWHM);\n                }\n                break;\n              case 'FitResult':\n                if (parts.length === 3) {\n                  this.callShowMessageBox('FitResult:' + parts[2], 'warning');\n                }\n\n              case 'StarDetectionResult':\n                if (parts.length === 3) {\n                  const detected = parts[1] === 'true';\n                  const hfr = parseFloat(parts[2]);\n                  if (detected) {\n                    this.callShowMessageBox(`星点的HFR为：${hfr}`, 'info');\n                  } else {\n                    this.callShowMessageBox('未识别到星点', 'warning');\n                  }\n                }\n                break;\n\n              case 'AutoFocusModeChanged':\n                if (parts.length === 3) {\n                  const mode = parts[1];\n                  const hfr = parseFloat(parts[2]);\n                  if (mode === 'coarse') {\n                    this.callShowMessageBox('进入粗调模式', 'info');\n                  } else if (mode === 'fine') {\n                    this.callShowMessageBox('进入精调模式', 'info');\n                  }\n                }\n                break;\n\n              case 'AutoFocusStepChanged': // [AUTO_FOCUS_UI_ENHANCEMENT]\n                if (parts.length >= 3) {\n                  const step = parts[1];\n                  const description = parts[2];\n                  console.log('AutoFocusStepChanged:', step, description);\n                  this.$bus.$emit('UpdateAutoFocusStep', step, description);\n                }\n                break;\n\n              case 'addMinPointData_Point':\n                if (parts.length === 3) {\n                  const x = parseInt(parts[1]);\n                  const y = parseFloat(parts[2]);\n                  this.$bus.$emit('addMinPointData_Point', x, y);\n                }\n                break;\n              case 'addLineData_Point':\n                if (parts.length === 4) {\n                  const a = parseFloat(parts[1]);\n                  const b = parseFloat(parts[2]);\n                  const c = parseFloat(parts[3]);\n                  console.log('addLineData_Point:', a, b, c);\n                  this.$bus.$emit('addLineData_Point', a, b, c);\n                }\n                break;\n              case 'MainCameraSize':\n                if (parts.length === 3) {\n                  const SizeX = parts[1];\n                  const SizeY = parts[2];\n                  this.$bus.$emit('MainCameraSize', SizeX, SizeY);\n                  this.mainCameraSizeX = SizeX;\n                  this.mainCameraSizeY = SizeY;\n                }\n                break;\n\n              case 'MainCameraBinning':\n                if (parts.length === 2) {\n                  this.cameraBin = parseInt(parts[1]);\n                  this.MainCameraConfigItems.find(item => item.label === 'Binning').value = this.cameraBin;\n                  this.$bus.$emit('MainCameraBinning', this.cameraBin);\n                }\n                break;\n\n              // -------------- 特殊处理,内部解析数据\n              case 'fitQuadraticCurve':\n                // 新的数据格式: \"fitQuadraticCurve:a:b:c:bestPosition:minHFR\"\n                console.log('App.vue | 接收到fitQuadraticCurve消息:', data.message);\n                // 使用setTimeout确保清除操作在添加数据之前完成\n                this.$bus.$emit('ClearfitQuadraticCurve');\n                setTimeout(() => {\n                  this.$bus.$emit('fitQuadraticCurve', data.message);\n                }, 10);\n                break;\n\n              case 'fitQuadraticCurve_minPoint':\n                // 新的数据格式: \"fitQuadraticCurve_minPoint:bestPosition:minHFR\"\n                console.log('App.vue | 接收到fitQuadraticCurve_minPoint消息:', data.message);\n                this.$bus.$emit('fitQuadraticCurve_minPoint', data.message);\n                break;\n\n              // --------------------------------------\n\n              case 'TelescopePark':\n                if (parts.length === 2) {\n                  const Switch = parts[1];\n                  this.$bus.$emit('MountParkSwitch', Switch);\n                }\n                break;\n\n              case 'TelescopeTrack':\n                if (parts.length === 2) {\n                  const Switch = parts[1];\n                  this.$bus.$emit('MountTrackSwitch', Switch);\n                }\n                break;\n\n              case 'MountSetSpeedSuccess':\n                if (parts.length === 2) {\n                  const num = parts[1];\n                  this.$bus.$emit('newMountSlewRate', num);\n                }\n                break;\n\n\n              case 'TelescopePierSide':\n                if (parts.length === 2) {\n                  const Side = parts[1];\n                  this.$bus.$emit('updateMountPierSide', Side);\n                }\n                break;\n\n              case 'TelescopeTotalSlewRate':\n                if (parts.length === 2) {\n                  const num = parts[1];\n                  this.$bus.$emit('MountTotalSlewRate', num);\n                }\n                break;\n\n\n              case 'UpdateScheduleProcess':\n                if (parts.length === 3) {\n                  const RowNum = parts[1];\n                  const Process = parts[2];\n                  this.$bus.$emit('UpdateScheduleProcess', RowNum, Process);\n                }\n                break;\n\n              case 'ExpTimeList':\n                if (parts.length === 2) {\n                  this.$bus.$emit('initExpTimeList', parts[1]);\n                }\n                break;\n\n\n              case 'CameraInExposuring':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('CameraInExposuring', status);\n                }\n                break;\n\n              case 'AutoFocusOver':\n                if (parts.length >= 4) {\n                  // 新格式: AutoFocusOver:success:bestPosition:minHFR\n                  const success = parts[1] === 'true';\n                  const bestPosition = parseFloat(parts[2]);\n                  const minHFR = parseFloat(parts[3]);\n                  this.$bus.$emit('AutoFocusOver', success, bestPosition, minHFR);\n                } else {\n                  // 兼容旧格式: AutoFocusOver\n                  this.$bus.$emit('AutoFocusOver');\n                }\n                break;\n\n              case 'CFWPositionMax':\n                if (parts.length === 2) {\n                  this.$bus.$emit('SetCFWPositionMax', parts[1]);\n\n                  for (let i = 1; i <= parts[1]; i++) {\n                    this.CFWConfigItems.push({ driverType: 'CFW', label: `CFW [${i}]`, value: '', inputType: 'text' });\n                  }\n\n                  this.$bus.$emit('AppSendMessage', 'Vue_Command', 'getCFWList');\n                }\n                break;\n\n\n              case 'SetCFWPositionSuccess':\n                if (parts.length === 2) {\n                  this.$bus.$emit('SetCFWPositionSuccess', parts[1]);\n                }\n                break;\n\n              case 'getCFWList':\n                if (parts.length === 2) {\n                  this.$bus.$emit('initCFWList', parts[1]);\n                }\n                break;\n\n              case 'GuiderSwitchStatus':\n                if (parts.length === 2) {\n                  this.$bus.$emit('GuiderSwitchStatus', parts[1]);\n                }\n                break;\n\n              case 'GuiderLoopExpStatus':\n                if (parts.length === 2) {\n                  this.$bus.$emit('GuiderLoopExpStatus', parts[1]);\n                }\n                break;\n\n              case 'TelescopeRADEC':\n                if (parts.length === 3) {\n                  this.UpdateCirclePos(parts[1], parts[2]);\n                  this.$bus.$emit('updateCurrentLocation', parts[1], parts[2]);\n                }\n                break;\n\n\n              case 'TelescopeStatus':\n                if (parts.length === 2) {\n                  this.UpdateTelescopeStatus(parts[1]);\n                }\n                break;\n\n              case 'MainCameraStatus':\n                if (parts.length === 2) {\n                  this.UpdateMainCameraStatus(parts[1]);\n                }\n                break;\n\n\n              case 'MainCameraTemperature':\n                if (parts.length === 2) {\n                  this.UpdateMainCameraTemperature(parts[1]);\n                }\n                break;\n\n\n              case 'ShowAllImageFolder':\n                if (parts.length === 3) {\n                  this.$bus.$emit('ShowAllImageFolder', parts[1], parts[2]);\n                }\n                break;\n\n\n              case 'ImageFilesName':\n                if (parts.length === 2) {\n                  this.$bus.$emit('ImageFilesName', parts[1]);\n                }\n                break;\n\n\n              case 'USBCheck':\n                if (parts.length === 2) {\n                  const USBdata = parts[1].split(',');\n                  console.log('USB name: ', USBdata[0]);\n                  console.log('USB space: ', USBdata[1]);\n                  this.SendConsoleLogMsg('USB name:' + USBdata[0], 'info');\n                  this.SendConsoleLogMsg('USB space:' + USBdata[1], 'info');\n\n                  this.$bus.$emit('USB_Name_Sapce', USBdata[0], USBdata[1]);\n                }\n                break;\n\n              case 'ImageSaveErroe':\n                if (parts.length === 2) {\n                  const Erroe = parts[1];\n                  if (Erroe === 'USB-Null') {\n                    this.callShowMessageBox('No USB Drive Detected.', 'error');\n                  } else if (Erroe === 'USB-Multiple') {\n                    this.callShowMessageBox('Multiple USB drives detected, please remove excess USB drives.', 'error');\n                  }\n                }\n                break;\n\n              case 'DetectedStars':\n                console.log('Detected', parts.length, 'stars.');\n                this.SendConsoleLogMsg('Detected ' + parts.length + ' stars.', 'info');\n                this.DetectedStarsList = [];\n                for (let i = 0; i < parts.length; i++) {\n                  const a = parts[i];\n                  const b = a.split('|');\n                  if (b.length === 3) {\n                    const x = b[0];\n                    const y = b[1];\n                    const hfr = b[2];\n                    // console.log('Stars at(', x, ',', y, ') with HFR:', hfr);\n                    this.DetectedStarsList.push({ x: x, y: y, hfr: hfr });\n                  }\n                }\n                this.DetectedStarsFinish = true;\n                break;\n\n              case 'SolveImageResult':\n                if (parts.length === 5) {\n                  // this.UpdateCirclePos(parts[1], parts[2]);\n                  console.log('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):', parts[1], ',', parts[2], ',', parts[3], ',', parts[4]);\n                  this.SendConsoleLogMsg('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):' + parts[1] + ',' + parts[2] + ',' + parts[3] + ',' + parts[4], 'info');\n                  this.SolveResultMark(parts[1], parts[2], parts[3], parts[4]);\n                  this.$bus.$emit(\"ImageSolveFinished\", true);\n                  this.$bus.$emit('setParsingProgress', false);\n                }\n                break;\n\n              case 'SolveFovResult':\n                if (parts.length === 9) {\n                  const RaDec = [\n                    { Ra: parts[1], Dec: parts[2] },\n                    { Ra: parts[3], Dec: parts[4] },\n                    { Ra: parts[5], Dec: parts[6] },\n                    { Ra: parts[7], Dec: parts[8] },\n                  ];\n                  this.SolveFovMark(RaDec);\n                }\n                break;\n\n              case 'RealTimeSolveImageResult':\n                if (parts.length === 5) {\n                  console.log('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):', parts[1], ',', parts[2], ',', parts[3], ',', parts[4]);\n                  this.SendConsoleLogMsg('Solve Image Result(RA_Degree, DEC_Degree, Azimuth, Altitude):' + parts[1] + ',' + parts[2] + ',' + parts[3] + ',' + parts[4], 'info');\n                  const result = this.SolveResultMark_RealTime(parts[1], parts[2], parts[3], parts[4])\n                }\n                break;\n\n              case 'SolveImageSucceeded':\n                console.log('解析同步成功');\n                this.$bus.$emit(\"handleOperationComplete\", \"solve\");\n                this.$bus.$emit('showMsgBox', 'Solve image succeed!', 'success');\n                break;\n\n              case 'SolveImagefailed':\n                this.callShowMessageBox('Solve image faild...', 'error');\n                this.$bus.$emit(\"ImageSolveFinished\", false);\n                this.$bus.$emit('setParsingProgress', false);\n                this.$bus.$emit('MountOperationComplete', 'solve');\n                break;\n\n              case 'MainCameraOffsetRange':\n                if (parts.length === 3) {\n                  console.log('MainCameraOffsetRange:', parts[1], ',', parts[2]);\n                  this.SendConsoleLogMsg('MainCameraOffsetRange:' + parts[1] + ',' + parts[2], 'info');\n                  this.MainCameraOffsetMin = parts[1];\n                  this.MainCameraOffsetMax = parts[2];\n\n                  const OffsetItem = this.MainCameraConfigItems.find(item => item.label === 'Offset');\n                  if (OffsetItem) {\n                    console.log('MainCameraOffsetRange:', parseInt(this.MainCameraOffsetMin, 10), ',', parseInt(this.MainCameraOffsetMax, 10));\n                    OffsetItem.inputMin = parseInt(this.MainCameraOffsetMin, 10);\n                    OffsetItem.inputMax = parseInt(this.MainCameraOffsetMax, 10);\n                  }\n                }\n                break;\n\n              case 'MainCameraGainRange':\n                if (parts.length === 3) {\n                  console.log('MainCameraGainRange:', parts[1], ',', parts[2]);\n                  this.SendConsoleLogMsg('MainCameraGainRange:' + parts[1] + ',' + parts[2], 'info');\n                  this.MainCameraGainMin = parts[1];\n                  this.MainCameraGainMax = parts[2];\n\n                  const gainItem = this.MainCameraConfigItems.find(item => item.label === 'Gain');\n                  if (gainItem) {\n                    console.log('MainCameraGainRange:', parseInt(this.MainCameraGainMin, 10), ',', parseInt(this.MainCameraGainMax, 10));\n                    gainItem.inputMin = parseInt(this.MainCameraGainMin, 10);\n                    gainItem.inputMax = parseInt(this.MainCameraGainMax, 10);\n                  }\n                }\n                break;\n\n              case 'OutputPowerStatus':\n                if (parts.length === 3) {\n                  const index = parseInt(parts[1], 10);\n                  const value = parseInt(parts[2], 10);\n\n                  if (index === 1) {\n                    this.OutPutPower_1_ON = value === 1;\n                  } else if (index === 2) {\n                    this.OutPutPower_2_ON = value === 1;\n                  }\n                }\n                break;\n\n              case 'PHD2StarBoxView':\n                if (parts.length === 2) {\n                  const view = parts[1];\n                  this.$bus.$emit('PHD2StarBoxView', view);\n                }\n                break;\n\n              case 'PHD2StarCrossView':\n                if (parts.length === 2) {\n                  const view = parts[1];\n                  this.$bus.$emit('PHD2StarCrossView', view);\n                }\n                break;\n\n              case 'PHD2StarBoxPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Box_X = parseInt(parts[3], 10);\n                  const Box_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2Box(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y);\n                }\n                break;\n\n              case 'PHD2MultiStarsPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Box_X = parseInt(parts[3], 10);\n                  const Box_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2MultiStars(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y);\n                }\n                break;\n\n              case 'ClearPHD2MultiStars':\n                this.$bus.$emit('ClearPHD2MultiStars');\n                break;\n\n              case 'PHD2StarCrossPosition':\n                if (parts.length === 5) {\n                  const PHD2ImageSize_X = parseInt(parts[1], 10);\n                  const PHD2ImageSize_Y = parseInt(parts[2], 10);\n                  const Cross_X = parseInt(parts[3], 10);\n                  const Cross_Y = parseInt(parts[4], 10);\n                  this.DrawPHD2Cross(PHD2ImageSize_X, PHD2ImageSize_Y, Cross_X, Cross_Y);\n                }\n                break;\n\n              case 'QTClientVersion':\n                if (parts.length === 2) {\n                  this.QTClientVersion = parts[1];\n                }\n                break;\n\n\n              case 'CaptureImageSaveStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  if (status === 'Repeat') {\n                    this.callShowMessageBox(this.$t('There is no need to save it again'), 'error');\n                  } else if (status === 'Success') {\n                    this.callShowMessageBox(this.$t('Image saved successfully'), 'success');\n                  } else if (status === 'Null') {\n                    this.callShowMessageBox(this.$t('No images to save'), 'error');\n                  }\n                }\n                break;\n\n              case 'INDIServerDebug':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('INDIServerDebug', message);\n                }\n                break;\n\n              case 'HotspotName':\n                if (parts.length === 2) {\n                  const Name = parts[1];\n                  this.$bus.$emit('HotspotName', Name);\n                }\n                break;\n              case 'EditHotspotNameSuccess':\n                this.$bus.$emit('EditHotspotNameSuccess');\n                break;\n\n              case 'DSLRsSetup':\n                if (parts.length === 2) {\n                  const Name = parts[1];\n                  this.$bus.$emit('ShowDSLRsSetup', Name);\n                }\n                break;\n\n              case 'ConfigureRecovery':\n                if (parts.length === 3) {\n                  const ConfigName = parts[1];\n                  const ConfigValue = parts[2];\n                  console.log('Configure:', ConfigName, ',', ConfigValue);\n                  this.SendConsoleLogMsg('Configure Recovery:' + parts[1] + ',' + parts[2], 'info');\n                  this.$bus.$emit(ConfigName, ConfigValue);\n\n                  if (parts[1] === 'FocalLength') {\n                    this.TelescopesConfigItems[0].value = parts[2];\n                    for (const device of this.devices) {\n                      if (device.driverType === 'Telescopes') {\n                        if (parts[2] === '' || parts[2] === NaN) {\n                          device.device = '';\n                          device.isConnected = false;\n                        } else {\n                          device.device = parts[2] + ' mm';\n                          device.isConnected = true;\n                        }\n                      }\n                    }\n                  }\n\n                  if (parts[1] === 'GuiderFocalLength') {\n                    this.GuiderConfigItems[0].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderFocalLength:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'Coordinates') {\n                    const [latStr, lngStr, isAutoStr] = parts[2].split(',').map(item => item.trim());\n                    const lat = parseFloat(latStr);\n                    const lng = parseFloat(lngStr);\n                    const isAuto = isAutoStr === 'true' || isAutoStr === '1';\n                    this.SetCurrentLocation(lat, lng, isAuto);\n                  }\n\n                  if (parts[1] === 'MultiStarGuider') {\n                    this.GuiderConfigItems[1].value = (parts[2] === 'true');\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'MultiStarGuider:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'GuiderGain') {\n                    this.GuiderConfigItems[2].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderGain:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'CalibrationDuration') {\n                    this.GuiderConfigItems[3].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'CalibrationDuration:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'RaAggression') {\n                    this.GuiderConfigItems[4].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'RaAggression:' + parts[2]);\n                  }\n\n                  if (parts[1] === 'DecAggression') {\n                    this.GuiderConfigItems[5].value = parts[2];\n                    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DecAggression:' + parts[2]);\n                  }\n                }\n                break;\n\n\n              case 'ConnectDriverSuccess':\n                if (parts.length === 2) {\n                  const device = parts[1];\n                  this.connectDriverSuccess(device);\n                }\n                break;\n\n              case 'getDevicePort':\n                if (parts.length === 3) {\n                  const driverType = parts[1];\n                  const usbSerialPath = parts[2];\n                  const target = this.devices.find(dev => dev.driverType === driverType);\n                  if (target) {\n                    target.usbSerialPath = usbSerialPath;\n                    this.$bus.$emit('sendCurrentConnectedDevices', this.devices);\n                  } else {\n                    console.warn('getUSBSerialPath | device not found for type:', driverType);\n                  }\n                }\n                break;\n\n              case 'getSDKVersion':\n                if (parts.length === 3) {\n                  const driverType = parts[1];\n                  const sdkVersion = parts[2];\n                  console.log('getSDKVersion:', driverType, ',', sdkVersion);\n                  const target = this.devices.find(dev => dev.driverType === driverType);\n                  if (target) {\n                    target.sdkVersion = sdkVersion;\n                    this.$bus.$emit('sendCurrentConnectedDevices', this.devices);\n                  } else {\n                    console.warn('getSDKVersion | device not found for type:', driverType);\n                  }\n                  console.log('New devices:', this.devices);\n                }\n                break;\n\n              case 'ConnectDriverFailed':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.connectDriverFailed(message);\n                }\n                break;\n\n              case 'DisconnectDriverSuccess':\n                if (parts.length === 2) {\n                  const device = parts[1];\n                  this.disconnectDriversuccess(device);\n                }\n                break;\n\n              case 'DisconnectDriverFail':\n                if (parts.length === 2) {\n                  const driver = parts[1];\n                  this.disconnectDriverFail(driver)\n                }\n\n              case 'SelectedDriverList':\n                if (parts.length >= 3) {\n                  const deviceObjects = parts.slice(1).reduce((acc, part, index, array) => {\n                    if (index % 2 === 0) {\n                      acc.push({ [array[index]]: array[index + 1] });\n                    }\n                    return acc;\n                  }, []);\n                  this.loadSelectedDriverList(deviceObjects);\n                }\n                break;\n\n\n              case 'BindDeviceList':\n                if (parts.length >= 3) {\n                  const deviceObjects = parts.slice(1).reduce((acc, part, index, array) => {\n                    if (index % 2 === 0) {\n                      acc.push({ [array[index]]: array[index + 1] });\n                    }\n                    return acc;\n                  }, []);\n                  this.loadBindDeviceList(deviceObjects);\n                }\n                break;\n\n              case 'SDKVersionAndUSBSerialPath':\n                // 固定格式：SDKVersionAndUSBSerialPath:Type1:SDK1:USB1:Type2:SDK2:USB2:...\n                if (parts.length > 1 && ((parts.length - 1) % 3 === 0)) {\n                  for (let i = 1; i < parts.length; i += 3) {\n                    const Type = (parts[i] || '').trim();\n                    const SDK = (parts[i + 1] || '').trim();\n                    const USB = (parts[i + 2] || '').trim();\n                    const target = this.devices.find(dev => dev.driverType === Type);\n                    if (target) {\n                      // 非空才赋值；空或 \"null\" 则清空\n                      if (SDK && SDK.toLowerCase() !== 'null') target.sdkVersion = SDK; else target.sdkVersion = '';\n                      if (USB && USB.toLowerCase() !== 'null') target.usbSerialPath = USB; else target.usbSerialPath = '';\n                    } else {\n                      console.warn('SDKVersionAndUSBSerialPath | device not found for type:', Type);\n                    }\n                  }\n                  this.$bus.$emit('sendCurrentConnectedDevices', this.devices);\n                } else {\n                  console.warn('SDKVersionAndUSBSerialPath | invalid payload:', data.message);\n                }\n                break;\n\n\n              case 'BindDeviceTypeList':\n                if (parts.length >= 5) { // 确保至少有五个参数加上前缀\n                  const deviceTypeObjects = [];\n                  for (let i = 1; i < parts.length; i += 4) {\n                    const deviceTypeObject = {\n                      Type: parts[i],\n                      DeviceName: parts[i + 1],\n                      DriverName: parts[i + 2],\n                      isbind: parts[i + 3] == \"true\" ? true : false,\n                    };\n                    deviceTypeObjects.push(deviceTypeObject);\n                  }\n                  this.loadBindDeviceTypeList(deviceTypeObjects);\n                }\n                break;\n\n              case 'deleteDeviceAllocationList':\n                if (parts.length === 2) {\n                  const deviceName = parts[1];\n                  this.deleteDeviceAllocationList(deviceName);\n                }\n                break;\n\n              case 'deleteDeviceTypeAllocationList':\n                if (parts.length === 2) {\n                  const deviceType = parts[1];\n                  if (deviceType != '') {\n                    this.$bus.$emit('deleteDeviceTypeAllocationList', deviceType);\n                  }\n                  if (deviceType == 'CFW') {\n                    for (let i = 0; i < this.devices.length; i++) {\n                      if (this.devices[i].driverType == 'CFW') {\n                        this.devices[i].isConnected = false;\n                        this.devices[i].device = '';\n                        this.devices[i].driverName = '';\n                        this.devices[i].BaudRate = 9600;\n                        this.$bus.$emit('CFWConnected', 0);\n                      }\n                    }\n                  }\n                }\n                break;\n\n              case 'ParseInfoEmitted':\n                if (parts.length === 2) {\n                  const progress = parts[1];\n                  this.$bus.$emit('ParseInfoEmitted', progress);\n                }\n                break;\n\n              case 'GuiderUpdateStatus':\n                if (parts.length === 2) {\n                  const status = parts[1];\n                  this.$bus.$emit('GuiderUpdateStatus', parseInt(status, 10));\n                }\n                break;\n\n              case 'LoopSolveImageFinished':\n                this.$bus.$emit('LoopSolveImageFinished');\n                break;\n\n              case 'disconnectDevicehasortherdevice':\n                if (parts.length === 2) {\n                  const drivername = parts[1];\n                  this.showSelectdisconnectDriver(drivername);\n                }\n                break;\n\n              case 'getFocuserMoveState':\n                this.$bus.$emit('getFocuserMoveState');\n                break;\n\n              case 'FocusMoveToLimit':\n                if (parts.length === 2) {\n                  const errorlog = parts[1];\n                  this.callShowMessageBox(errorlog, 'error');\n                }\n                break;\n\n              case 'startFocusLoopFailed':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('startFocusLoopFailed', message);\n                }\n                break;\n\n              case 'setFocuserLoopingState':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.$bus.$emit('setFocuserLoopingState', message);\n                  if (message == 'true') {\n                    this.isFocusLoopShooting = true;\n                  } else {\n                    this.isFocusLoopShooting = false;\n                  }\n                }\n                break;\n\n              case 'focuserROIStarsList':\n                if (parts.length === 4) {\n                  const x = parts[1];\n                  const y = parts[2];\n                  const HFR = parts[3];\n                  this.focuserROIStarsList.push({ x, y, HFR });\n                }\n                break;\n\n              // case 'clearFocuserROIStarsList':\n              //   this.focuserROIStarsList = [];\n              //   break;\n\n              case 'setSelectStarPosition':\n                if (parts.length === 4) {\n                  this.DrawSelectStarX = parseFloat(parts[1]);\n                  this.DrawSelectStarY = parseFloat(parts[2]);\n                  this.DrawSelectStarHFR = parseFloat(parts[3]);\n                }\n                break;\n\n              case 'SetRedBoxState':\n                if (parts.length === 4) {\n                  const length = parseInt(parts[1]);\n                  this.ROI_x = parseFloat(parts[2]);\n                  this.ROI_y = parseFloat(parts[3]);\n\n                  this.setRedBoxState(length, this.ROI_x, this.ROI_y);\n                  console.log('设置红色ROI框: ', length, this.ROI_x, this.ROI_y);\n                }\n                break;\n\n              case 'SetVisibleArea':\n                if (parts.length === 4) {\n                  this.visibleX = parseFloat(parts[1]);\n                  this.visibleY = parseFloat(parts[2]);\n                  this.scale = parseFloat(parts[3]);\n                  this.$bus.$emit('setScale', this.scale);\n                  console.log('设置可见区域: ', this.visibleX, this.visibleY, this.scale);\n                  this.SendConsoleLogMsg('update VisibleArea x=' + this.visibleX + ', y=' + this.visibleY + ', scale=' + this.scale, 'info');\n                }\n                break;\n\n              case 'SetSelectStars':\n                if (parts.length === 3) {\n                  this.selectStarX = parseFloat(parts[1]);\n                  this.selectStarY = parseFloat(parts[2]);\n                  this.SendConsoleLogMsg('update SelectStars x=' + this.selectStarX + ', y=' + this.selectStarY, 'info');\n                }\n                break;\n\n              case 'updateCPUInfo':\n                if (parts.length === 3) {\n                  let cpuTemp = parseFloat(parts[1]);\n                  let cpuUsage = parseFloat(parts[2]);\n                  this.cpuTemp = isNaN(cpuTemp) ? null : (cpuTemp % 1 === 0 ? cpuTemp : cpuTemp.toFixed(1));  // 如果 cpuTemp 是 NaN，设置为 null，否则如果 cpuTemp 是整数，就不保留小数，否则保留一位小数\n                  this.cpuUsage = isNaN(cpuUsage) ? null : (cpuUsage % 1 === 0 ? cpuUsage : cpuUsage.toFixed(1));  // 如果 cpuUsage 是 NaN，设置为 null，否则如果 cpuUsage 是整数，就不保留小数，否则保留一位小数\n                  this.$bus.$emit('updateCPUInfo', this.cpuTemp, this.cpuUsage);\n                }\n                break;\n\n              case 'TianWen':\n                if (parts.length === 4) {\n                  const notice_type = parts[1];\n                  const ra = parts[2];\n                  const dec = parts[3];\n                  this.$bus.$emit('TianWen', notice_type, ra, dec);\n                }\n                break;\n\n              case 'setMainCameraParameters':\n                if (parts.length >= 3) {\n                  let parameters = {};\n                  for (let i = 1; i < parts.length; i += 2) {\n                    const parameter = parts[i];\n                    const value = parts[i + 1];\n                    parameters[parameter] = value;\n                  }\n                  this.setMainCameraParameters(parameters);\n                }\n                break;\n\n              case 'localMessage':\n                if (parts.length === 4) {\n                  const lat = parts[1];\n                  const lon = parts[2];\n                  const language = parts[3];\n                  this.SendConsoleLogMsg('2------------获得参数设置localMessage: ' + lat + ',' + lon + ',' + language, 'info');\n                  if (language == 'zh') {\n                    this.$bus.$emit('ClientLanguage', 'cn');\n                  } else {\n                    this.$bus.$emit('ClientLanguage', 'en');\n                  }\n                  this.$bus.$emit('setLocationLatAndLon', lat, lon);\n                }\n                break;\n\n              case 'isAutoLocation':\n                if (parts.length === 2) {\n                  const isAutoLocation = parts[1];\n                  this.$bus.$emit('isAutoLocation', isAutoLocation);\n                }\n                break;\n\n              case 'sendGetLocation':\n                if (parts.length === 3) {\n                  const lat = parts[1];\n                  const lon = parts[2];\n                  this.SendConsoleLogMsg('sendGetLocation: ' + lat + ',' + lon, 'info');\n                  this.$bus.$emit('sendGetLocation', lat, lon);\n                }\n                break;\n\n              case 'MainCameraCFA':\n                if (parts.length === 2) {\n                  let value = parts[1];\n                  if (value === '') {\n                    value = 'null';\n                  } else if (value === 'GRBG') {\n                    value = 'GR';\n                  } else if (value === 'GBRG') {\n                    value = 'GB';\n                  } else if (value === 'BGGR') {\n                    value = 'BG';\n                  } else if (value === 'RG') {\n                    value = 'RGGB';\n                  }\n                  this.ImageCFA = value;\n                  console.log(\"获取到的主相机参数  MainCameraCFA: \", this.ImageCFA);\n                  this.MainCameraConfigItems.find(item => item.label === 'ImageCFA').value = this.ImageCFA;\n                }\n                break;\n\n              case 'CameraNotIdle':\n                this.callShowMessageBox('Camera is not idle', 'error');\n                this.$bus.$emit('MountOperationComplete', 'solve');\n                break;\n\n              case 'MainCameraNotConnect':\n                this.callShowMessageBox('Main Camera is not connect', 'error');\n                this.$bus.$emit('MountOperationComplete', 'solve');\n                break;\n              case 'ServerInitSuccess':\n                this.callShowMessageBox('Server init success', 'success');\n                window.location.reload();\n                break;\n              case 'PolarAlignmentState':\n                if (parts.length === 5) {\n                  const isRunning = parts[1];\n                  const state = parts[2];\n                  const message = parts[3];\n                  const percentage = parts[4];\n                  console.log('PolarAlignmentState: ', isRunning, state, message, percentage);\n                  this.$bus.$emit('PolarAlignmentIsRunning', isRunning);\n                  this.$bus.$emit('PolarAlignmentState', state, message, percentage);\n                }\n                break;\n              case 'PolarAlignmentAdjustmentGuideData':\n                if (parts.length === 21) {  // 从17改为21\n                  const ra = parseFloat(parts[1]);\n                  const dec = parseFloat(parts[2]);\n                  // 新增：四个角点\n                  const ra0 = parseFloat(parts[3]);\n                  const dec0 = parseFloat(parts[4]);\n                  const ra1 = parseFloat(parts[5]);\n                  const dec1 = parseFloat(parts[6]);\n                  const ra2 = parseFloat(parts[7]);\n                  const dec2 = parseFloat(parts[8]);\n                  const ra3 = parseFloat(parts[9]);\n                  const dec3 = parseFloat(parts[10]);\n\n                  const targetra = parseFloat(parts[11]);\n                  const targetdec = parseFloat(parts[12]);\n                  const offsetra = parseFloat(parts[13]);\n                  const offsetdec = parseFloat(parts[14]);\n                  const adjustmentra = parts[15];\n                  const adjustmentdec = parts[16];\n                  const fakePolarRA = parseFloat(parts[17]);\n                  const fakePolarDEC = parseFloat(parts[18]);\n                  const realPolarRA = parseFloat(parts[19]);\n                  const realPolarDEC = parseFloat(parts[20]);\n\n\n                  // console.log('自动对焦绘制数据: ', ra, dec, targetra, targetdec, fakePolarRA, fakePolarDEC, realPolarRA, realPolarDEC);\n                  console.log('四角点数据: ', ra0, dec0, ra1, dec1, ra2, dec2, ra3, dec3);\n\n                  // 现有事件保持不变（使用计算的max/min值兼容）\n                  this.$bus.$emit('FieldDataUpdate', [ra, dec, ra0, dec0, ra1, dec1, ra2, dec2, ra3, dec3, targetra, targetdec, fakePolarRA, fakePolarDEC, realPolarRA, realPolarDEC]);\n\n                  // console.log('自动对焦显示更新数据: ', offsetra, offsetdec, adjustmentra, adjustmentdec);\n                  this.$bus.$emit('updateCardInfo', ra, dec, targetra, targetdec, offsetra, offsetdec, adjustmentra, adjustmentdec, \"deg\");\n\n                }\n                break;\n\n              case 'focusMoveFailed':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.callShowMessageBox(message, 'error');\n                  this.$bus.$emit('focusMoveFailed', message);\n                }\n\n              case 'focusMoveFailed':\n                if (parts.length === 2) {\n                  const message = parts[1];\n                  this.callShowMessageBox(message, 'error');\n                  this.$bus.$emit('focusMoveFailed', message);\n                }\n                break;\n\n              case 'MeridianETA_hms': {\n                if (parts.length >= 4) {\n                  const h = parts[1];\n                  const m = parts[2];\n                  const s = parts[3];\n\n                  const hms = `${h}:${m}:${s}`;\n                  const item = this.MountConfigItems.find(i => i.label === 'Flip ETA');\n                  if (item) {\n                    item.value = hms;\n                    item.displayValue = hms;\n                  }\n                }\n                break;\n              }\n\n              case 'AutoFlip':\n                if (parts.length >= 2) {\n                  // TODO::自动翻转功能暂时关闭，需要时再打开\n                  console.log('当前AutoFlip命令未启用: ', parts[1]);\n                  break;\n                  const isAutoFlip = parts[1];\n                  // 查找是否已存在 \"AutoFlip\" 项\n                  let item = this.MountConfigItems.find(i => i.label === 'AutoFlip');\n                  if (item) {\n                    // 已存在 → 更新\n                    item.value = isAutoFlip == 'true';\n                  } else {\n                    // 不存在 → 新增\n                    this.MountConfigItems.push({ driverType: 'Mount', label: 'AutoFlip', value: isAutoFlip == 'true', inputType: 'switch' },);\n                  }\n                  // 同步子组件模式（无需重建组件）\n                  const next = (isAutoFlip == 'true') ? 'auto' : 'manual';\n                  if (this.$bus && this.$bus.$emit) {\n                    this.$bus.$emit('SetFlipMode', next);\n                  }\n                }\n                break;\n              \n              case 'FlipStatus':\n                if (parts.length === 2) {\n                  if (this.$bus && this.$bus.$emit) {\n                    this.$bus.$emit('FlipStatus', parts[1]);\n                  }\n                }\n                break;\n              // case 'MinutesPastMeridian':\n              //   if (parts.length >= 3) {\n              //     const EastMinutesPastMeridian = parts[1];\n              //     const WestMinutesPastMeridian = parts[2];\n              //     let item = this.MountConfigItems.find(i => i.label === 'EastMinutesPastMeridian');\n              //     if (item) {\n              //       item.value = EastMinutesPastMeridian;\n              //     } else {\n              //       this.MountConfigItems.push({ driverType: 'Mount', label: 'EastMinutesPastMeridian', value: EastMinutesPastMeridian,min:-180,max:180, inputType: 'number' },);\n              //     }\n              //     item = this.MountConfigItems.find(i => i.label === 'WestMinutesPastMeridian');\n              //     if (item) {\n              //       item.value = WestMinutesPastMeridian;\n              //     } else {\n              //       this.MountConfigItems.push({ driverType: 'Mount', label: 'WestMinutesPastMeridian', value: WestMinutesPastMeridian,min:-180,max:180, inputType: 'number' },);\n              //     }\n              //   }\n              //   break;\n              case 'EastMinutesPastMeridian':\n                if (parts.length === 2) {\n                  const EastMinutesPastMeridian = parts[1];\n                  let item = this.MountConfigItems.find(i => i.label === 'EastMinutesPastMeridian');\n                  if (item) {\n                    item.value = EastMinutesPastMeridian;\n                  } else {\n                    this.MountConfigItems.push({ driverType: 'Mount', label: 'EastMinutesPastMeridian', value: EastMinutesPastMeridian, min: -180, max: 180, inputType: 'number' },);\n                  }\n                }\n                break;\n              case 'WestMinutesPastMeridian':\n                if (parts.length === 2) {\n                  const WestMinutesPastMeridian = parts[1];\n                  let item = this.MountConfigItems.find(i => i.label === 'WestMinutesPastMeridian');\n                  if (item) {\n                    item.value = WestMinutesPastMeridian;\n                  } else {\n                    this.MountConfigItems.push({ driverType: 'Mount', label: 'WestMinutesPastMeridian', value: WestMinutesPastMeridian, min: -180, max: 180, inputType: 'number' },);\n                  }\n                }\n                break;\n              case 'GotoThenSolve':\n                if (parts.length === 2) {\n                  const GotoThenSolve = parts[1];\n                  let item = this.MountConfigItems.find(i => i.label === 'GotoThenSolve');\n                  if (item) {\n                    item.value = GotoThenSolve;\n                  }\n                }\n                break;\n\n              case 'addFwhmNow':\n                if (parts.length >= 2) {\n                  const fwhm = parseFloat(parts[1]);\n                  console.log('Received addFwhmNow:', fwhm);\n                  this.$bus.$emit('addFwhmNow', fwhm);\n                }\n                break;\n              case 'Box_Space':\n                // 后端返回盒子可用空间（字节），转发给内存设置面板\n                if (parts.length === 2) {\n                  const bytes = parts[1];\n                  this.$bus.$emit('Box_Space', bytes);\n                }\n                break;\n              case 'ClearLogs':\n                // 后端清理日志完成回执\n                if (parts.length >= 2 && parts[1] === 'Success') {\n                  this.SendConsoleLogMsg('Logs cleared successfully', 'info');\n                }\n                break;\n              case 'ClearBoxCache':\n                // 后端清理缓存完成回执\n                if (parts.length >= 2 && parts[1] === 'Success') {\n                  this.SendConsoleLogMsg('Box cache cleared successfully', 'info');\n                }\n                break;\n\n              case 'FocuserLimit':\n                if (parts.length === 3) {\n                  const FocuserMinLimit = parts[1];\n                  const FocuserMaxLimit = parts[2];\n                  let item = this.FocuserConfigItems.find(i => i.label === 'Min Limit');\n                  if (item) {\n                    item.value = FocuserMinLimit;\n                  } else {\n                    this.FocuserConfigItems.push({ driverType: 'Focuser', label: 'Min Limit', value: FocuserMinLimit, inputType: 'number' },);\n                  }\n                  item = this.FocuserConfigItems.find(i => i.label === 'Max Limit');\n                  if (item) {\n                    item.value = FocuserMaxLimit;\n                  } else {\n                    this.FocuserConfigItems.push({ driverType: 'Focuser', label: 'Max Limit', value: FocuserMaxLimit, inputType: 'number' },);\n                  }\n                  this.$bus.$emit('setFocusChartRange', FocuserMinLimit, FocuserMaxLimit);\n                }\n                break;\n              case 'Backlash':\n                if (parts.length === 2) {\n                  const FocuserBacklash = parts[1];\n                  let item = this.FocuserConfigItems.find(i => i.label === 'Backlash');\n                  if (item) {\n                    item.value = FocuserBacklash;\n                  }\n                }\n                break;\n              case 'updateAutoFocuserState':\n                if (parts.length === 2 ) {\n                  const autoFocusState = parts[1];\n                  this.$bus.$emit('updateAutoFocuserState', autoFocusState == 'true'); // 更新自动对焦按钮状态\n                  \n                }\n                break;\n              case 'AutoFocusConfirm': // [AUTO_FOCUS_UI_ENHANCEMENT]\n                if (parts.length >= 2) {\n                  const question = parts[1];\n                  console.log('AutoFocusConfirm:', question);\n                  this.ShowConfirmDialog('自动对焦', question, 'AutoFocusConfirm');\n                }\n                break;\n\n              case 'AutoFocusStepChanged': // [AUTO_FOCUS_UI_ENHANCEMENT]\n                if (parts.length >= 3) {\n                  const step = parts[1];\n                  const description = parts[2];\n                  console.log('AutoFocusStepChanged:', step, description);\n                  this.$bus.$emit('UpdateAutoFocusStep', step, description);\n                }\n                break;\n\n              case 'AutoFocusCancelled': // [AUTO_FOCUS_UI_ENHANCEMENT]\n                if (parts.length >= 2) {\n                  const reason = parts[1];\n                  console.log('AutoFocusCancelled:', reason);\n                  this.callShowMessageBox(reason, 'info');\n                }\n                break;\n\n              case 'AutoFocusStarted': // [AUTO_FOCUS_UI_ENHANCEMENT]\n                if (parts.length >= 2) {\n                  const message = parts[1];\n                  console.log('AutoFocusStarted:', message);\n                  this.$bus.$emit('StartAutoFocus');\n                }\n                break;\n\n              case 'AutoFocusEnded': // [AUTO_FOCUS_UI_ENHANCEMENT]\n                if (parts.length >= 2) {\n                  const message = parts[1];\n                  console.log('AutoFocusEnded:', message);\n                  this.$bus.$emit('EndAutoFocus');\n                }\n                break;\n              default:\n                console.warn('未处理命令: ', data.message);\n                break;\n            }\n          }\n        }\n        else if (data.type === 'QT_Confirm') {\n          // 处理确认消息\n          const messageId = data.msgid;\n          this.handleMessageResponse(messageId);\n        } else if (data.type === 'Process_Command') {\n          console.log('Process_Command: ', data.message);\n          // 处理返回消息\n          const parts = data.message.split(':');\n          if (parts[0] === 'qtServerIsOver') {\n            this.callShowMessageBox('QT Server is over', 'error');\n            this.ShowConfirmDialog('restart', 'QT server encountered a segmentation fault or is frozen, please restart or exit!', 'restartQtServer');\n          }\n          else if (parts[0] === 'checkHasNewUpdatePack') {\n            if (parts.length === 2) {\n              const version = parts[1];\n              this.SendConsoleLogMsg('获取到更新包版本: ' + version, 'info');\n\n              this.ShowConfirmDialog('ForceUpdate', this.$t('checkHasNewUpdatePack') + ': ' + version + '，' + this.$t('updateConfirm'), 'updateCurrentClient:' + version);\n            }\n          }\n          else if (parts[0] === 'No_update_pack_found') {\n            this.callShowMessageBox(this.$t('No_update_pack_found'), 'error');\n          } else if (parts[0] === 'update_progress') {\n            this.$bus.$emit('update_progress', data.message);\n          } else if (parts[0] === 'update_error') {\n            this.$bus.$emit('update_error', data.message);\n          } else if (parts[0] === 'update_success') {\n            this.$bus.$emit('update_success', data.message);\n          } else if (parts[0] === 'testQtServerProcess') {\n\n          }\n          else {\n            console.warn('未处理命令: ', data.message);\n          }\n        }\n\n        this.receivedMessages.push(data.message); // 将接收到的消息添加到数组中\n      };\n\n      this.websocket.onerror = (error) => {\n        const errorDetails = {\n          type: error.type,\n          timestamp: new Date().toISOString(),\n          url: this.WebSocketUrl,\n          readyState: this.websocket.readyState,\n          protocol: this.websocket.protocol,\n          extensions: this.websocket.extensions\n        };\n        console.error('WebSocket Error Details:', errorDetails);\n        this.SendConsoleLogMsg('WebSocket Error: ' + JSON.stringify(errorDetails), 'error');\n        this.websocketState = 'error';\n        this.networkDisconnected = true;\n      };\n\n      this.websocket.onclose = () => {\n        console.log('QHYCCD | WebSocket disconnected');\n        this.websocketState = 'disconnected';\n        this.networkDisconnected = true; // WebSocket连接关闭时设置网络连接状态\n        console.log('QHYCCD | WebSocket disconnected');\n        this.$bus.$emit('ShowNetStatus', 'false');\n\n        // 设置一个定时器，1秒后检查网络状态\n        this.disconnectTimeout = setTimeout(() => {\n          if (this.networkDisconnected) { // 如果1秒后仍然断开\n            this.callShowMessageBox('WebSocket disconnected', 'error');\n            this.disconnectTimeoutTriggered = true;\n          }\n        }, 1000); // 1秒后执行\n\n        // 启动自动重连\n        this.reconnectWebSocket();\n      };\n    },\n\n    // 自动重连\n    reconnectWebSocket() {\n      setTimeout(() => {\n        console.log('QHYCCD | WebSocket reconnected');\n        this.SendConsoleLogMsg('WebSocket reconnected.', 'info');\n        this.connect();\n      }, 2000); // 2秒后尝试重新连接\n    },\n    // 自动重连\n\n    //监听网络连接状态\n    setupNetworkStatusListener() {\n      window.addEventListener('online', () => {\n        // 检查断开连接的定时器是否已经触发\n        if (this.disconnectTimeoutTriggered) {\n          this.callShowMessageBox('WebSocket connected', 'success');\n        }\n        clearTimeout(this.disconnectTimeout); // 清除断开连接的定时器\n        this.networkDisconnected = false; // 网络恢复时重置网络连接状态\n        this.$bus.$emit('ShowNetStatus', 'true');\n        this.StatusRecovery();\n        this.reconnectWebSocket(); // 网络恢复后自动重连WebSocket\n      });\n\n      window.addEventListener('offline', () => {\n        this.networkDisconnected = true; // 网络断开时设置网络连接状态\n        this.$bus.$emit('ShowNetStatus', 'false');\n        this.disconnectTimeoutTriggered = false; // 初始化断开连接定时器触发标志\n        // 设置一个定时器，1秒后检查网络状态\n        this.disconnectTimeout = setTimeout(() => {\n          if (this.networkDisconnected) { // 如果1秒后仍然断开\n            this.disconnectTimeoutTriggered = true; // 标记定时器已触发\n            this.callShowMessageBox('WebSocket disconnected', 'error');\n          }\n        }, 1000); // 1秒后执行\n      });\n    },\n    //监听网络连接状态\n\n    sendMessage(type, message) {\n      console.log(\"QHYCCD | sendMessage: \", message);\n\n      const messageId = this.generateMessageId(); // 生成唯一的消息ID\n      const messageObj = { type: type, msgid: messageId, message: message }; // 创建包含类型和消息的对象\n      const messageJson = JSON.stringify(messageObj); // 将消息对象转换为 JSON 字符串\n      const messageState = { msgid: messageId, text: messageJson, success: false }; // 创建包含消息和状态信息的对象\n\n      if (this.websocket.readyState === WebSocket.OPEN) {\n        this.websocket.send(messageJson);\n        // messageState.success = true; // 设置消息为成功\n      }\n      this.sentMessages.push(messageState); // 添加消息对象到已发送的消息数组\n    },\n\n    generateMessageId() {\n      // 使用时间戳和计数器生成唯一的消息ID\n      return Date.now() + \"-\" + (this.messageCounter++);\n    },\n\n    handleMessageResponse(messageId) {\n      // 根据返回的消息ID更新消息发送状态\n      const lastMessage = this.sentMessages[this.sentMessages.length - 1];\n      if (lastMessage && lastMessage.msgid === messageId) {\n        lastMessage.success = true;\n      }\n    },\n\n    // 消息框\n    callShowMessageBox(msg, type) {\n      console.log('QHYCCD | callShowMessageBox:', msg, type);\n      this.SendConsoleLogMsg(msg, type);\n      this.$bus.$emit('showMsgBox', msg, type);\n    },\n    // 消息框\n\n    locationClicked: function () {\n      this.$bus.$emit('Vue_Command', 'localMessage'); // 获取位置信息\n      this.$store.commit('toggleBool', 'showLocationDialog');\n\n      this.$bus.$emit('ResetTime');\n    },\n\n    SetCurrentLocation(lat, lng, isAuto) {\n      console.log('SetCurrentLocation:', lat, ',', lng);\n      this.$bus.$emit('SendConsoleLogMsg', 'Set Current Location:' + lat + ',' + lng, 'info');\n      this.$bus.$emit('PolarPointAltitude', lat);\n      this.$bus.$emit('resetLocation', lat, lng, isAuto);\n      const loc = {\n        short_name: 'Unknown',\n        country: 'Unknown',\n        lng: lng,\n        lat: lat,\n        alt: 0,\n        accuracy: 0,\n        street_address: ''\n      }\n      this.$store.commit('setCurrentLocation', loc);\n\n      this.$bus.$emit('ShowPositionInfo', lat, lng);\n\n      setTimeout(() => {\n        this.$bus.$emit('ResetTime');\n      }, 1000);\n    },\n    // 状态恢复\n    StatusRecovery() {\n      // this.sendMessage('SendConsoleLogMsg', '网络连接恢复，恢复当前状态!', 'warning');\n      this.getQTClientVersion();                // 获取QTClient版本\n      this.sendMessage('Vue_Command', 'getROIInfo'); // 获取ROI信息\n      this.sendMessage('Vue_Command', 'localMessage'); // 获取位置信息\n      this.sendMessage('Vue_Command', 'getLastSelectDevice'); // 获取上一次选择的设备\n      this.sendMessage('Vue_Command', 'getMainCameraParameters'); // 获取主相机参数\n      this.sendMessage('Vue_Command', 'getMountParameters'); // 获取赤道仪UI信息\n      this.sendMessage('Vue_Command', 'getFocuserParameters'); // 获取焦距器参数\n      this.RecalibratePolarAxis(); // 重新校准极轴\n      this.sendMessage('Vue_Command', 'getStagingSolveResult'); // 获取定标结果\n      this.sendMessage('Vue_Command', 'getFocuserLoopingState'); // 获取焦距器循环状态\n      \n      this.sendMessage('Vue_Command', 'getStagingScheduleData'); // 获取定标计划数据\n      this.sendMessage('Vue_Command', 'getStagingSolveResult'); // 获取定标结果\n      this.sendMessage('Vue_Command', 'getGPIOsStatus'); // 获取GPIO状态\n\n      // this.sendMessage('Vue_Command', 'getStagingImage'); // 获取最后拍摄的图像\n      // this.sendMessage('Vue_Command', 'getPolarAlignmentState'); // 获取极轴对齐状态\n      this.sendMessage('Vue_Command', 'loadSDKVersionAndUSBSerialPath'); // 获取SDK版本和USB序列号路径\n\n\n      this.disconnectTimeoutTriggered = false;\n    },\n\n    openPowerManagerPage() {\n      this.isOpenDevicePage = false;\n      this.isOpenPowerPage = true;\n\n      this.drawer_2 = true;\n    },\n\n    QuitToMainApp() {\n      this.sendMessage('Broadcast_Msg', 'CloseWebView');\n    },\n\n    selectDevice(device) {\n      if (!this.haveDeviceConnect || (this.haveDeviceConnect) || device.driverType === 'Telescopes') {\n        this.isOpenDevicePage = true;\n        this.isOpenPowerPage = false;\n\n        if (device.isget === false) {\n          // device.isget = true;\n          this.sendMessage('Vue_Command', 'SelectIndiDriver:' + device.type + \":\" + device.ListNum);\n          this.drivers = [];\n        }\n\n        this.CurrentDriverType = device.driverType;\n        this.DeviceIsConnected = device.isConnected;\n        this.BaudRateSelected = device.BaudRate;\n        if (device.driverType === 'Telescopes') {\n          this.DeviceIsConnected = true;\n        }\n\n        this.drawer_2 = true;\n\n        this.ToBeConnectDevice = [];\n        this.devicesList.forEach(devicesList => {\n          if (devicesList.type === this.CurrentDriverType) {\n            this.ToBeConnectDevice.push(devicesList);\n          }\n        });\n      } else {\n        this.callShowMessageBox('The device is not connected.', 'error');\n      }\n\n    },\n\n    CurrentConfigItems() {\n      console.log('CurrentConfigItems: ', this.CurrentDriverType + 'ConfigItems');\n      switch (this.CurrentDriverType) {\n        case 'Guider':\n          return this.GuiderConfigItems;\n        case 'MainCamera':\n          return this.MainCameraConfigItems;\n        case 'Mount':\n          return this.MountConfigItems;\n        case 'Telescopes':\n          return this.TelescopesConfigItems;\n        case 'Focuser':\n          return this.FocuserConfigItems;\n        case 'PoleCamera':\n          return this.PoleCameraConfigItems;\n        case 'CFW':\n          return this.CFWConfigItems;\n        default:\n          return [];\n      }\n    },\n\n    confirmDriver() {\n      // 确定驱动的逻辑\n      console.log(\"QHYCCD | confirmDriver: \", this.selectedDriver);\n      this.SendConsoleLogMsg('Confirm Indi Driver:' + this.selectedDriver, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConfirmIndiDriver:' + this.selectedDriver + ':' + this.BaudRateSelected);\n      this.confirmDriverType = this.CurrentDriverType;\n      this.loadingSelectDriver = true;\n\n      this.devices.forEach(device => {\n        if (device.driverType === this.CurrentDriverType) {\n          device.device = this.selectedDriver;\n          device.driverName = this.selectedDriver;\n          device.BaudRate = this.BaudRateSelected;\n        }\n      });\n    },\n    clearDriver() {\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ClearIndiDriver');\n      this.SendConsoleLogMsg('Clear Indi Driver', 'info');\n      this.devices.forEach(device => {\n        if (device.driverType === this.CurrentDriverType) {\n          device.device = '';\n          device.driverName = '';\n          device.BaudRate = 9600;\n        }\n      });\n      this.selectedDriver = '';\n    },\n    confirmDevice() {\n      // 确定设备的逻辑\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConfirmIndiDevice:' + this.selectedDevice + ':' + this.selectedDriver);\n      // this.$bus.$emit('AppUpdateDevices', this.CurrentDriverType, this.selectedDevice);\n      this.updateDevices(this.CurrentDriverType, this.selectedDevice);\n    },\n\n    updateDevices(driverType, newDevice) {    // 手动选择\n      this.devices.forEach(device => {\n        if (device.driverType === driverType) {\n          device.device = newDevice;\n        }\n      });\n    },\n\n    updateDevices_(ListNum, newDevice) {    // 从文件导入\n      this.devices.forEach(device => {\n        if (device.ListNum === ListNum) {\n          device.device = newDevice;\n        }\n      });\n      this.loadingConnectAllDevice = false;\n    },\n\n    updateDevicesConnect(type, DeviceName, DriverName, isBind = true) {    // 连接成功\n      this.SendConsoleLogMsg('updateDevicesConnect' + type + ' ' + DeviceName + ' ' + DriverName + ' ' + isBind, 'info');\n      this.devices.forEach(device => {\n        if (device.driverType === type) {\n          if (isBind == true) {\n            device.device = DeviceName;\n          } else {\n            device.device = \"Not Bind Device\";\n          }\n          device.driverName = DriverName;\n          device.isConnected = true;\n        }\n      });\n      this.callShowMessageBox(DeviceName + ' success connected', 'success');\n      this.haveDeviceConnect = true;\n      this.loadingConnectAllDevice = false;\n\n      if (type === 'MainCamera') {\n        this.$bus.$emit('MainCameraConnected', 1);\n        console.log('MainCamera is Connected.');\n      } else if (type === 'Mount') {\n        this.$bus.$emit('MountConnected', 1);\n        console.log('Mount is Connected.');\n      } else if (type === 'CFW') {\n        this.$bus.$emit('CFWConnected', 1);\n        console.log('Mount is Connected.');\n      } else if (type === 'Focuser') {\n        this.$bus.$emit('FocuserConnected', 1);\n        console.log('Focuser is Connected.');\n      } else if (type === 'Guider') {\n        this.$bus.$emit('GuiderConnected', 1);\n        console.log('Guider is Connected.');\n      }\n      console.log('updateDevicesConnect: ', type, DeviceName, DriverName, isBind);\n\n      this.$bus.$emit('DeviceConnectSuccess', type, DeviceName, DriverName, isBind);\n    },\n    startConnectBtnPress(event) {\n      // 如果是触摸事件，标记并处理\n      if (event.type === 'touchstart') {\n        this.isTouching = true;\n        this.isConnectBtnLongPress = false; // 重置长按标记\n        // this.ConnectBtnPressTimer = setTimeout(() => {\n        //   this.isConnectBtnLongPress = true; // 标记为长按\n        //   this.handleConnectBtnLongPress();\n        // }, this.ConnectBtnlongPressThreshold);\n        this.handleConnectBtnClick();\n      }\n      // 如果是鼠标事件，且没有正在进行的触摸事件，则处理\n      else if (event.type === 'mousedown' && !this.isTouching) {\n        this.isConnectBtnLongPress = false; // 重置长按标记\n        // this.ConnectBtnPressTimer = setTimeout(() => {\n        //   this.isConnectBtnLongPress = true; // 标记为长按\n        //   this.handleConnectBtnLongPress();\n        // }, this.ConnectBtnlongPressThreshold);\n        this.handleConnectBtnClick();\n      }\n    },\n    endConnectBtnPress(event) {\n      // 如果是触摸事件，处理并重置标记\n      if (event.type === 'touchend') {\n        clearTimeout(this.ConnectBtnPressTimer); // 清除定时器\n        // if (!this.isConnectBtnLongPress) {\n        //   this.handleConnectBtnClick(); // 如果不是长按，则触发点击事件\n        // }\n        this.handleConnectBtnClick();\n        this.ConnectBtnPressTimer = null; // 重置定时器\n        this.isTouching = false; // 重置触摸标记\n      }\n      // 如果是鼠标事件，且没有正在进行的触摸事件，则处理\n      else if (event.type === 'mouseup' && !this.isTouching) {\n        clearTimeout(this.ConnectBtnPressTimer); // 清除定时器\n        // if (!this.isConnectBtnLongPress) {\n        //   this.handleConnectBtnClick(); // 如果不是长按，则触发点击事件\n        // }\n        this.handleConnectBtnClick();\n        this.ConnectBtnPressTimer = null; // 重置定时器\n      }\n    },\n    handleConnectBtnClick() {\n      if (this.haveDeviceConnect) {\n        this.callShowMessageBox('Please disconnect all devices first.', 'error');\n        return;\n      }\n      if (!this.ConnectBtnCanClick) return; // 如果不可点击，直接返回\n      this.ConnectBtnCanClick = false; // 设置为不可点击\n      console.log(\"Connect Button clicked\");\n\n      this.connectAllDevice();\n\n      // 恢复点击权限\n      setTimeout(() => {\n        this.ConnectBtnCanClick = true;\n      }, 1000); // 1秒后恢复\n    },\n    handleConnectBtnLongPress() {\n      if (this.haveDeviceConnect) {\n        this.callShowMessageBox('Please disconnect all devices first.', 'error');\n        return;\n      }\n      // 长按事件的处理\n      console.log(\"Connect Button long pressed\");\n\n      this.autoConnectAllDevice();\n    },\n    connectAllDevice() {\n      console.log(\"QHYCCD | connectAllDevice.\");\n      this.SendConsoleLogMsg('Connect All Device', 'info');\n      this.sendMessage('Vue_Command', 'connectAllDevice');\n      this.loadingConnectAllDevice = true;\n    },\n    autoConnectAllDevice() {\n      console.log(\"QHYCCD | autoConnectAllDevice.\");\n      this.SendConsoleLogMsg('Auto Connect All Device', 'info');\n      this.sendMessage('Vue_Command', 'autoConnectAllDevice');\n      this.loadingConnectAllDevice = true;\n    },\n\n    disconnectAllDevice(confirm) {\n      // 检查是否有设备的 isConnected 属性为 true\n      // const hasConnectedDevices = this.devices.some(device => device.isConnected);\n\n      if (this.haveDeviceConnect) {\n        if (confirm === false) {\n          this.ShowConfirmDialog('Confirm', 'Are you sure you want to disconnect all devices?', 'disconnectAllDevice');\n        } else {\n          this.sendMessage('Vue_Command', 'disconnectAllDevice');\n          this.SendConsoleLogMsg('Disconnect All Device', 'info');\n          this.haveDeviceConnect = false;\n          // this.devices.forEach(device => {\n          //   device.isConnected = false;\n          //   // device.device = '';\n          // });\n\n          this.$bus.$emit('MainCameraConnected', 0);\n          this.$bus.$emit('MountConnected', 0);\n          this.$bus.$emit('CFWConnected', 0);\n          this.$bus.$emit('FocuserConnected', 0);\n          this.$bus.$emit('GuiderConnected', 0);\n          this.clearDeviceList();\n        }\n      } else {\n        this.callShowMessageBox('No devices have been connected.', 'error');\n      }\n      this.selectedDriver = '';\n    },\n\n    clearDeviceList() {\n      this.devices.forEach(device => {\n        device.device = device.driverName;\n        device.isConnected = false;\n        device.isget = false;\n        device.BaudRate = 9600;\n      });\n      this.ToBeConnectDevice = [];\n      this.devicesList = [];\n      this.drivers = [];\n      this.$bus.$emit('clearDeviceAllocationList');\n    },\n\n    SwitchOutPutPower(index, isPowerON) {\n      if (isPowerON) {\n        this.drawer_2 = false;\n        this.ShowConfirmDialog('Output Power:' + index, 'Are you sure you want to turn off this output power?', 'SwitchOutPutPower');\n      } else {\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'SwitchOutPutPower:' + index);\n        this.SendConsoleLogMsg('Switch OutPutPower' + index, 'info');\n      }\n    },\n\n    RestartRaspberryPi() {\n      this.drawer_2 = false;\n      this.ShowConfirmDialog('Restart', 'Are you sure you want to restart the Raspberry Pi?', 'RestartRaspberryPi');\n    },\n\n    ShutdownRaspberryPi() {\n      this.drawer_2 = false;\n      this.ShowConfirmDialog('Shut Down', 'Are you sure you want to shut down the Raspberry Pi?', 'ShutdownRaspberryPi');\n    },\n\n    ForceUpdate() {\n      this.drawer_2 = false;\n      this.ShowConfirmDialog('Force Update', 'Are you sure you want to force update the Raspberry Pi?', 'ForceUpdate');\n    },\n\n    ReturnConnectedDevices() {\n      this.devices.forEach(device => {\n        if (device.driverType === 'MainCamera') {\n          if (device.isConnected === true) {\n            this.$bus.$emit('MainCameraConnected', 1);\n            console.log('MainCamera is Connected.');\n            this.SendConsoleLogMsg('MainCamera is Connected.', 'info');\n          }\n        } else if (device.driverType === 'Mount') {\n          if (device.isConnected === true) {\n            this.$bus.$emit('MountConnected', 1);\n            console.log('Mount is Connected.');\n            this.SendConsoleLogMsg('Mount is Connected.', 'info');\n          }\n        }\n      });\n      this.sendMessage('Vue_Command', 'loadSelectedDriverList');\n      this.sendMessage('Vue_Command', 'loadBindDeviceList');\n      this.sendMessage('Vue_Command', 'loadBindDeviceTypeList');\n      \n    },\n    ReturnCurrentConnectedDevices() {\n      this.$bus.$emit('sendCurrentConnectedDevices',this.devices);\n    },\n\n    OpenIamgeFolder() {\n      this.$bus.$emit('ImageManagerPanelOpen');\n      this.nav = false;\n    },\n\n    OpenDebugLog() {\n      this.$bus.$emit('toggleINDIDebugDialog');\n      this.nav = false;\n    },\n\n    SendConsoleLogMsg(message, type) {\n      if (type == 'error') {\n        console.error('Error: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else if (type == 'info') {\n        console.log('Info: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else if (type == 'warning') {\n        console.warn('Warning: ' + message);\n        this.$bus.$emit('SendConsoleLog', type, message);\n      } else {\n        console.log('Debug: ' + message);\n      }\n    },\n\n    DeviceAllocation() {\n      this.$bus.$emit('toggleDeviceAllocationPanel');\n      this.nav = false;\n    },\n\n    // CurrentExpTimeList(index, value) {\n    //   const expTimeIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ExpTime [' + (index + 1) + ']');\n    //   if (expTimeIndex !== -1) { // 确保找到了对应的配置项\n    //     // 更新 ExpTime1 配置项的值\n    //     this.MainCameraConfigItems[expTimeIndex].value = value;\n    //   } else {\n    //     console.error('ExpTime [' + index + '] configuration item not found.');\n    //   }\n    // },\n\n    CurrentCFWList(index, value) {\n      const expTimeIndex = this.CFWConfigItems.findIndex(item => item.label === 'CFW [' + (index + 1) + ']');\n      if (expTimeIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.CFWConfigItems[expTimeIndex].value = value;\n      } else {\n        console.error('CFW [' + index + '] configuration item not found.');\n      }\n    },\n\n    confirmConfiguration(List) {\n      List.forEach(item => {\n        if (item.value !== '') {\n          // console.log(item.label, item.value);\n          this.SendConsoleLogMsg(item.label + ':' + item.value, 'info');\n          this.$bus.$emit(item.label, item.label + ':' + item.value);\n        } else if (item.value == '' && item.label === 'Focal Length (mm)') {\n          this.SendConsoleLogMsg(item.label + 'is NULL', 'info');\n          this.$bus.$emit(item.label, item.label + ':');\n        }\n      });\n      this.callShowMessageBox('Configuration has been modified!', 'success');\n    },\n\n    loadAndDisplayImage(imagePath) {\n      const canvas = document.getElementById('guiderCamera-canvas');\n      // const canvas = document.getElementById('mainCamera-canvas');\n      if (canvas.getContext) {\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n\n        img.onload = () => {\n          canvas.width = img.width;\n          canvas.height = img.height;\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0);\n          // this.$bus.$emit('showSolveImage', img);\n        };\n\n        // 添加错误处理\n        img.onerror = (error) => {\n          console.log(`加载图像失败: ${imagePath}`);\n          this.SendConsoleLogMsg(`加载图像失败: ${imagePath}`, 'error');\n        };\n\n        img.src = imagePath;\n      }\n    },\n\n    ImageGainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value); // 将值转换为 double 类型\n\n      if (signal === 'ImageGainR') {\n        // 处理 ImageGainR 信号\n        this.ImageGainR = doubleValue;\n        this.SendConsoleLogMsg('ImageGainR is set to:' + doubleValue, 'info');\n        this.sendMessage('Vue_Command', 'ImageGainR:' + doubleValue);\n      } else if (signal === 'ImageGainB') {\n        // 处理 ImageGainB 信号\n        this.ImageGainB = doubleValue;\n        this.SendConsoleLogMsg('ImageGainB is set to:' + doubleValue, 'info');\n        this.sendMessage('Vue_Command', 'ImageGainB:' + doubleValue);\n      }\n    },\n\n    ImageOffsetSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value); // 将值转换为 double 类型\n\n      this.ImageOffset = doubleValue;\n      console.log('Image Offset is set to:', doubleValue);\n      this.SendConsoleLogMsg('Image Offset is set to:' + doubleValue, 'info');\n      this.sendMessage('Vue_Command', 'ImageOffset:' + doubleValue);\n    },\n\n    BinningSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n      this.cameraBin = IntValue;\n      console.log('Image Binning is set to:', IntValue);\n      this.SendConsoleLogMsg('Image Binning is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetBinning:' + IntValue);\n      this.$bus.$emit('SetBinningNum', IntValue);\n    },\n\n    GainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Gain is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Gain is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraGain:' + IntValue);\n    },\n\n    OffsetSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Offset is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Offset is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraOffset:' + IntValue);\n    },\n\n    ImageCFASet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n\n      // if (['GR', 'GB', 'BG', 'RGGB','null'].includes(value)) {\n      if (['GR', 'GB', 'BG', 'RG', 'GRBG', 'GBRG', 'BGGR', 'RGGB', 'null', ''].includes(value)) {\n        if (value === '') {\n          value = 'null';\n        } else if (value === 'GRBG') {\n          value = 'GR';\n        } else if (value === 'GBRG') {\n          value = 'GB';\n        } else if (value === 'BGGR') {\n          value = 'BG';\n        } else if (value === 'RG') {\n          value = 'RGGB';\n        }\n        this.ImageCFA = value;\n        // console.log('ImageCFA is set to:', value);\n        this.SendConsoleLogMsg('ImageCFA is set to:' + value, 'info');\n        this.sendMessage('Vue_Command', 'ImageCFA:' + value);\n      } else {\n        // console.log(`Invalid value for ImageCFA: '${value}'. Please set it to one of 'GR', 'GB', 'BG', 'RGGB'.`);\n        this.callShowMessageBox(`Invalid value for ImageCFA: '${value}'. Please set it to one of 'GR', 'GB', 'BG', 'RGGB'.`, 'error');\n      }\n    },\n\n    CameraTemperatureSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n      console.log('Camera Temperature is set to:', IntValue);\n      this.SendConsoleLogMsg('Camera Temperature is set to:' + IntValue, 'info');\n      this.sendMessage('Vue_Command', 'SetCameraTemperature:' + IntValue);\n    },\n\n    FocalLengthSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n\n      for (const device of this.devices) {\n        if (device.driverType === 'Telescopes') {\n\n          if (value === '' || value === NaN) {\n            device.device = '';\n            this.SendConsoleLogMsg('Focal Length is set to:' + 0, 'info');\n            this.$bus.$emit('SetFocalLengthNum', '');\n          } else {\n            const IntValue = parseInt(value); // 将值转换为 Int 类型\n            device.device = value + ' mm';\n            this.SendConsoleLogMsg('Focal Length is set to:' + IntValue, 'info');\n            this.$bus.$emit('SetFocalLengthNum', IntValue);\n          }\n        }\n      }\n\n\n    },\n\n    GuiderFocalLengthSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value); // 将值转换为 Int 类型\n\n\n      this.SendConsoleLogMsg('Guider Focal Length is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderFocalLength:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderFocalLength:' + IntValue);\n    },\n\n    MultiStarGuiderSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      this.SendConsoleLogMsg('Multi Star Guider is set to:' + value, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'MultiStarGuider:' + value);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:MultiStarGuider:' + value);\n    },\n\n    GuiderPixelSizeSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const doubleValue = parseFloat(value);\n      this.SendConsoleLogMsg('Guider Pixel size is set to:' + doubleValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderPixelSize:' + doubleValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderPixelSize:' + doubleValue);\n    },\n\n    GuiderGainSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Guider Gain is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderGain:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:GuiderGain:' + IntValue);\n    },\n\n    CalibrationDurationSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Guider Calibration step is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'CalibrationDuration:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:CalibrationDuration:' + IntValue);\n    },\n\n    RaAggressionSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Ra Aggression is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'RaAggression:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:RaAggression:' + IntValue);\n    },\n\n    DecAggressionSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Dec Aggression is set to:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DecAggression:' + IntValue);\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'saveToConfigFile:DecAggression:' + IntValue);\n    },\n\n    SyncFocuserStep(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Sync Focuser Step:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'SyncFocuserStep:' + IntValue);\n    },\n    MinLimitSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Min Limit:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'MinLimit:' + IntValue);\n    },\n    MaxLimitSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Max Limit:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'MaxLimit:' + IntValue);\n    },\n    BacklashSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const IntValue = parseInt(value);\n      this.SendConsoleLogMsg('Backlash:' + IntValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'Backlash:' + IntValue);\n    },\n\n    GotoThenSolve(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const BooleanValue = Boolean(value);\n      this.SendConsoleLogMsg('Goto Then Solve:' + BooleanValue, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GotoThenSolve:' + BooleanValue);\n    },\n\n    AutoFlipSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const BooleanValue = Boolean(value);\n      this.SendConsoleLogMsg('Auto Flip:' + BooleanValue, 'info');\n      this.$bus.$emit('SetFlipMode', BooleanValue ? 'auto' : 'manual');  // 同步子组件模式\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'AutoFlip:' + BooleanValue); // 同步到后端\n    },\n\n    sendMountAutoFlip() {\n      const isAutoFlip = this.MountConfigItems.find(item => item.label === 'AutoFlip').value;\n      this.$bus.$emit('SetFlipMode', isAutoFlip ? 'auto' : 'manual');\n    },\n\n    WestMinutesPastMeridianSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const WestMinutesPastMeridian = parseFloat(value);\n      this.SendConsoleLogMsg('Minutes Past Meridian:' + WestMinutesPastMeridian, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'WestMinutesPastMeridian:' + WestMinutesPastMeridian);\n    },\n\n    EastMinutesPastMeridianSet(payload) {\n      const [signal, value] = payload.split(':'); // 拆分信号和值\n      const EastMinutesPastMeridian = parseFloat(value);\n      this.SendConsoleLogMsg('Minutes Past Meridian:' + EastMinutesPastMeridian, 'info');\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'EastMinutesPastMeridian:' + EastMinutesPastMeridian);\n    },\n\n    async readBinFile(fileName, retryCount = 1) {\n      while (this.isDownloadingImage) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        if (!this.isWaitingLogged) {\n          this.SendConsoleLogMsg('The image is already being processed. Please wait for the previous process to complete.', 'warning');\n          this.isWaitingLogged = true; // 确保只记录一次等待信息\n        }\n      }\n\n      if (this.isDownloadingImageName === fileName) {\n        this.SendConsoleLogMsg('The image(' + fileName + ') is already processed.', 'info');\n        return;\n      }\n\n      this.isDownloadingImage = true;\n      this.isWaitingLogged = false; // 重置等待日志标志\n      this.SendConsoleLogMsg('CaptureTestTime | Read image(' + fileName + ') data start.', 'info');\n\n      const startTime = new Date();\n      try {\n        // Check if the fileName is valid\n        if (!fileName || typeof fileName !== 'string') {\n          throw new Error('Invalid file name provided');\n        }\n\n        // Fetch with progress tracking\n        const response = await fetch(fileName, { cache: 'no-store' });\n        if (!response.ok) {\n          throw new Error(`Network response was not ok. Status: ${response.status}`);\n        }\n\n        const contentLength = response.headers.get('content-length');\n        if (!contentLength) {\n          throw new Error('Content-Length header is missing');\n        }\n\n        const total = parseInt(contentLength, 10);\n        if (isNaN(total) || total <= 0) {\n          throw new Error('Invalid content-length value');\n        }\n\n        let loaded = 0;\n\n        const reader = response.body.getReader();\n        const stream = new ReadableStream({\n          start: (controller) => {\n            const push = () => {\n              reader.read().then(({ done, value }) => {\n                if (done) {\n                  controller.close();\n                  return;\n                }\n                loaded += value.byteLength;\n                const percent = (loaded / total) * 100;\n                if (Math.round(percent) % 10 === 0) {\n                  // this.SendConsoleLogMsg(`Progress: ${Math.round(percent)}%`, 'info');\n                  this.updateCaptureImageProgress(Math.round(percent));\n                }\n                // this.SendConsoleLogMsg(`当前进度: ${Math.round(percent)}%`, 'info');\n                controller.enqueue(value);\n                push();\n              }).catch(error => {\n                console.error('Stream reading error:', error);\n                this.SendConsoleLogMsg('Stream reading error: ' + error.message, 'error');\n                controller.error(error);\n              });\n            };\n            push();\n          }\n        });\n\n        const newResponse = new Response(stream);\n        const blob = await newResponse.blob();\n\n        // FileReader with progress tracking\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n          this.ImageArrayBuffer = fileReader.result;\n\n          const endTime = new Date();\n          const elapsedTime = endTime.getTime() - startTime.getTime();\n          this.SendConsoleLogMsg('CaptureTestTime | Read image data end: ' + elapsedTime + ' ms', 'info');\n          if (!this.isPolarAxisMode) {\n            this.callShowMessageBox(`Read image data end: '${elapsedTime}' ms.`, 'info');\n          }\n          this.isDownloadingImageName = fileName;\n          this.processImage(this.ImageArrayBuffer);\n        };\n\n        fileReader.onerror = (error) => {\n          console.error('FileReader error:', error);\n          this.SendConsoleLogMsg('FileReader error: ' + error.message, 'error');\n        };\n\n        fileReader.readAsArrayBuffer(blob);\n      } catch (error) {\n        console.error('There was a problem with the fetch operation:', error);\n        this.SendConsoleLogMsg('There was a problem with the fetch operation: ' + error.message, 'error');\n\n        // 下载失败，重试\n        if (retryCount > 0) {\n          console.log('Retrying download...');\n          this.SendConsoleLogMsg('Retrying download...', 'warning');\n          this.isDownloadingImage = false;\n          this.updateCaptureImageProgress(100);\n          await this.readBinFile(fileName, retryCount - 1);\n        } else {\n          this.SendConsoleLogMsg('Max retries reached. Download failed.', 'error');\n        }\n      } finally {\n        this.isDownloadingImage = false; // 确保在任何情况下都重置状态\n      }\n    },\n\n\n    // async readBinFile(fileName, retryCount = 1) {\n    //   while (this.isDownloadingImage) {\n    //     await new Promise(resolve => setTimeout(resolve, 1000));\n    //     if (!this.isWaitingLogged) {\n    //       this.SendConsoleLogMsg('The image is already being processed. Please wait for the previous process to complete.', 'warning');\n    //       this.isWaitingLogged = true; // 确保只记录一次等待信息\n    //     }\n    //   }\n\n    //   if (this.isDownloadingImageName === fileName) {\n    //     this.SendConsoleLogMsg('The image(' + fileName + ') is already processed.', 'info');\n    //     return;\n    //   }\n\n    //   this.isDownloadingImage = true;\n    //   this.isWaitingLogged = false; // 重置等待日志标志\n    //   this.SendConsoleLogMsg('CaptureTestTime | Read image(' + fileName + ') data start.', 'info');\n\n    //   const startTime = new Date();\n    //   try {\n    //     // Fetch with progress tracking\n    //     const response = await fetch(fileName);\n    //     if (!response.ok) {\n    //       throw new Error('Network response was not ok');\n    //     }\n\n    //     const contentLength = response.headers.get('content-length');\n    //     if (!contentLength) {\n    //       throw new Error('Content-Length header is missing');\n    //     }\n\n    //     const total = parseInt(contentLength, 10);\n    //     let loaded = 0;\n\n    //     const reader = response.body.getReader();\n    //     const stream = new ReadableStream({\n    //       start: (controller) => {\n    //         const push = () => {\n    //           reader.read().then(({ done, value }) => {\n    //             if (done) {\n    //               controller.close();\n    //               return;\n    //             }\n    //             loaded += value.byteLength;\n    //             const percent = (loaded / total) * 100;\n    //             if (Math.round(percent) % 10 === 0) {\n    //               this.SendConsoleLogMsg(`Progress: ${Math.round(percent)}%`,'info');\n    //               this.updateCaptureImageProgress(Math.round(percent));\n    //             }\n    //             controller.enqueue(value);\n    //             push();\n    //           }).catch(error => {\n    //             console.error('Stream reading error:', error);\n    //             controller.error(error);\n    //           });\n    //         };\n    //         push();\n    //       }\n    //     });\n\n    //     const newResponse = new Response(stream);\n    //     const blob = await newResponse.blob();\n\n    //     // FileReader with progress tracking\n    //     const fileReader = new FileReader();\n    //     fileReader.onload = () => {\n    //       this.ImageArrayBuffer = fileReader.result;\n\n    //       const endTime = new Date();\n    //       const elapsedTime = endTime.getTime() - startTime.getTime();\n    //       this.SendConsoleLogMsg('CaptureTestTime | Read image data end: ' + elapsedTime + ' ms', 'info');\n    //       if (!this.isPolarAxisMode) {\n    //         this.callShowMessageBox(`Read image data end: '${elapsedTime}' ms.`, 'info');\n    //       }\n    //       this.isDownloadingImageName = fileName;\n    //       this.processImage(this.ImageArrayBuffer);\n    //     };\n\n    //     fileReader.onerror = (error) => {\n    //       console.error('FileReader error:', error);\n    //       this.SendConsoleLogMsg('FileReader error:' + error, 'error');\n    //     };\n\n    //     fileReader.readAsArrayBuffer(blob);\n    //   } catch (error) {\n    //     console.error('There was a problem with the fetch operation:', error);\n    //     this.SendConsoleLogMsg('There was a problem with the fetch operation:' + error, 'error');\n\n    //     // 下载失败，重试\n    //     if (retryCount > 0) {\n    //       console.log('Retrying download...');\n    //       this.SendConsoleLogMsg('Retrying download...', 'warning');\n    //       this.isDownloadingImage = false;\n    //       this.updateCaptureImageProgress(100);\n    //       await this.readBinFile(fileName, retryCount - 1);\n    //     }\n    //   } finally {\n    //     this.isDownloadingImage = false; // 确保在任何情况下都重置状态\n    //   }\n    // },\n\n    updateCaptureImageProgress(num) {\n      this.$bus.$emit('ShowCaptureImageProgress', num);\n    },\n\n    setImageProportion(value) {\n      this.ImageProportion = value;\n    },\n\n    async processImage(imgArray, histogramMin = -1, histogramMax = -1, options = {}) {\n      let { calculateHistogram = true } = options;\n      this.progressValue = 0;\n      this.progressDescription = this.$i18n.locale === 'cn' ? '开始处理图像...' : 'Processing image...';\n      let mat = null;\n      let targetImg8 = null;\n      let resizeImg = null;\n\n      // 使用setTimeout和Promise创建非阻塞处理\n      const processAsync = (fn) => {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            const result = fn();\n            resolve(result);\n          }, 0);\n        });\n      };\n\n      try {\n        if (!(imgArray instanceof ArrayBuffer) && !ArrayBuffer.isView(imgArray)) {\n          throw new Error(\"Input must be ArrayBuffer or TypedArray\");\n        }\n        let uintArray = new Uint16Array(imgArray);\n\n        if (uintArray.length != parseInt(this.mainCameraSizeY) * parseInt(this.mainCameraSizeX)) {\n          throw new Error(\"Image size mismatch\");\n        }\n        // 创建Mat对象\n        await processAsync(() => {\n          mat = new cv.Mat(parseInt(this.mainCameraSizeY), parseInt(this.mainCameraSizeX), cv.CV_16UC1);\n          mat.data16U.set(uintArray);\n          this.progressValue = 10;\n          this.progressDescription = this.$i18n.locale === 'cn' ? '创建Mat对象...' : 'Creating Mat object...';\n          return true;\n        });\n\n        // 用户自定义参数\n        let CFA = this.ImageCFA;\n        let isColorCamera = false;\n        let mode = 1;\n        let blackLevel, whiteLevel;\n\n        if (histogramMin == -1 && histogramMax == -1) {\n          // 获取自动拉伸参数\n          const result = await processAsync(() => {\n            const res = this.GetAutoStretch(mat, mode);\n            this.progressValue = 20;\n            this.progressDescription = this.$i18n.locale === 'cn' ? '获取自动拉伸参数...' : 'Getting auto stretch parameters...';\n            return res;\n          });\n\n          calculateHistogram = true;\n          // 从结果中提取值\n          blackLevel = result.blackLevel;\n          whiteLevel = result.whiteLevel;\n        } else {\n          blackLevel = histogramMin;  // 现在可以正常工作\n          whiteLevel = histogramMax;  // 现在可以正常工作\n        }\n\n        // 根据CFA设置颜色转换模式\n        if (CFA === 'GR') {\n          isColorCamera = true;\n        } else if (CFA === 'GB') {\n          isColorCamera = true;\n        } else if (CFA === 'BG') {\n          isColorCamera = true;\n        } else if (CFA === 'RGGB') {\n          isColorCamera = true;\n        } else {\n          isColorCamera = false;\n        }\n        console.log(\"当前拍摄参数:isColorCamera:\", isColorCamera, \"CFA:\", CFA);\n        // 计算直方图\n        const analysis = await processAsync(() => {\n          const result = isColorCamera\n            ? this.analyzeImageStatistics(mat, 'bayer', CFA, { calculateGain: this.calculateGain, calculateHistogram: calculateHistogram })\n            : this.analyzeImageStatistics(mat, 'gray', { calculateGain: this.calculateGain, calculateHistogram: calculateHistogram });\n\n          if (this.ImageGainR != 1 || this.ImageGainB != 1 || this.ImageOffset != 0) {\n            result.gainR = this.ImageGainR;\n            result.gainB = this.ImageGainB;\n            result.offset = this.ImageOffset;\n          }\n\n          this.progressValue = 40;\n          this.progressDescription = this.$i18n.locale === 'cn' ? '计算直方图...' : 'Calculating histogram...';\n          return result;\n        });\n\n        if (analysis.histogram) {\n          this.$bus.$emit('showHistogram', analysis.histogram);  // 更新 直方图数据\n          this.$bus.$emit('ChangeDialPosition', blackLevel, whiteLevel);  // 更新直方图的显示轴\n          this.$bus.$emit('AutoHistogramNum', blackLevel, whiteLevel);\n        }\n\n        this.lastImageProcessParams = {\n          blackLevel: blackLevel,\n          whiteLevel: whiteLevel,\n          CFA: CFA,\n          analysis: analysis,\n          isColorCamera: isColorCamera,\n        };\n\n        // 使用增益和拉伸，并转化为8位图像\n        targetImg8 = await processAsync(() => {\n          const result = isColorCamera\n            ? this.applyStretchAndGain(mat, analysis, 'bayer', CFA, blackLevel, whiteLevel)\n            : this.applyStretchAndGain(mat, analysis, 'gray', CFA, blackLevel, whiteLevel);\n\n          // 释放mat\n          if (mat) {\n            mat.delete();\n            mat = null;\n          }\n\n          this.progressValue = 60;\n          this.progressDescription = this.$i18n.locale === 'cn' ? '根据参数处理...' : 'Processing with parameters...';\n          return result;\n        });\n\n        // 根据模式处理图像\n        if (this.isPolarAxisMode) {\n          await processAsync(() => {\n            resizeImg = new cv.Mat();\n            cv.resize(targetImg8, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n\n            if (targetImg8) {\n              targetImg8.delete();\n              targetImg8 = null;\n            }\n            this.progressValue = 0;\n            return true;\n          });\n\n          this.$bus.$emit('showSolveImage', resizeImg);\n\n          if (resizeImg) {\n            resizeImg.delete();\n            resizeImg = null;\n          }\n        } else {\n          // 转换为ImageData对象\n          const colorData = await processAsync(() => {\n            const data = new ImageData(\n              new Uint8ClampedArray(targetImg8.data),\n              targetImg8.cols,\n              targetImg8.rows\n            );\n\n            if (targetImg8) {\n              targetImg8.delete();\n              targetImg8 = null;\n            }\n            if (resizeImg) {\n              resizeImg.delete();\n              resizeImg = null;\n            }\n            this.progressValue = 80;\n            this.progressDescription = this.$i18n.locale === 'cn' ? '转换为ImageData对象...' : 'Converting to ImageData object...';\n            return data;\n          });\n\n          this.drawImgData = true;\n\n          // 设置缓冲画布\n          await processAsync(() => {\n            this.bufferCanvas.width = colorData.width;\n            this.bufferCanvas.height = colorData.height;\n            this.bufferCtx.putImageData(colorData, 0, 0);\n            this.progressValue = 90;\n            this.progressDescription = this.$i18n.locale === 'cn' ? '绘制缓冲画布图像...' : 'Drawing buffer canvas image...';\n            return true;\n          });\n\n          // 绘制主画布图像\n          this.progressValue = 100;\n          this.progressDescription = this.$i18n.locale === 'cn' ? '绘制主画布图像...' : 'Drawing main canvas image...';\n          this.drawImageData();\n        }\n      } catch (error) {\n        this.handleError('Process image data error', 'processImage', error);\n        this.progressValue = 0;\n        this.progressDescription = '';\n      } finally {\n        this.progressValue = 0;\n        // 确保所有Mat对象都被释放\n        if (mat) {\n          mat.delete();\n          mat = null;\n        }\n        if (targetImg8) {\n          targetImg8.delete();\n          targetImg8 = null;\n        }\n        if (resizeImg) {\n          resizeImg.delete();\n          resizeImg = null;\n        }\n        // 处理后检查内存\n        this.checkMemoryUsage();\n        // 在处理完大量数据后手动请求垃圾回收\n        if (window.gc) {\n          try { window.gc(); } catch (e) { }\n        }\n      }\n    },\n\n\n    /**\n     * 获取自动拉伸参数，返回黑色和白色阈值\n     * @param {cv.Mat} imgMat 输入的图像Mat对象\n     * @param {int} mode 模式\n     * @returns {int，int} 黑色和白色阈值\n     */\n    GetAutoStretch(imgMat, mode) {\n      // 仅支持 Mat 类型输入，并假定为16位图像\n      // 使用 OpenCV 的 meanStdDev 函数直接计算均值和标准差\n      const means = new cv.Mat();\n      const stdDevs = new cv.Mat();\n\n      // 高效计算均值和标准差\n      cv.meanStdDev(imgMat, means, stdDevs);\n\n      // 获取计算结果\n      const mean = means.doubleAt(0, 0);\n      const stdDev = stdDevs.doubleAt(0, 0);\n\n      // 释放临时 Mat 对象\n      means.delete();\n      stdDevs.delete();\n\n      // 根据模式设置标准差倍数\n      let a, b;\n      switch (mode) {\n        case 0: a = 3; b = 5; break;\n        case 1: a = 2; b = 5; break;\n        case 2: a = 3; b = 8; break;\n        default: a = 2; b = 8;\n      }\n\n      // 固定为16位图像处理\n      const maxValue = 65535;\n\n      // 计算黑白点\n      let blackLevel = Math.round(Math.max(0, mean - stdDev * a));\n      let whiteLevel = Math.round(Math.min(maxValue, mean + stdDev * b));\n\n      // 确保 blackLevel < whiteLevel\n      if (blackLevel >= whiteLevel) {\n        blackLevel = whiteLevel - 1;\n      }\n\n      return { blackLevel, whiteLevel };\n    },\n\n    /**\n     * 分析16位图像并计算直方图和白平衡增益\n     * @param {cv.Mat} img16 - 输入的16位图像Mat对象\n     * @param {string} imageType - 图像类型: 'gray'(灰度图) 或 'bayer'(Bayer格式)\n     * @param {string} bayerPattern - Bayer模式，如果imageType为'bayer'则需提供: 'RGGB', 'GR', 'GB', 'BG'\n     * @param {Object} options - 可选参数\n     * @param {number} options.bins - 直方图箱数，默认256\n     * @param {boolean} options.calculateGain - 是否计算白平衡增益参数，默认true\n     * @param {boolean} options.usePercentile - 是否使用百分位计算增益，默认true\n     * @param {number} options.lowPercentile - 下截断百分位，默认1\n     * @param {number} options.highPercentile - 上截断百分位，默认99\n     * @returns {Object} 直方图数据和增益参数\n     */\n    analyzeImageStatistics(img16, imageType, bayerPattern = 'RGGB', options = {}) {\n      // 首先检查输入Mat是否有效\n      if (!img16 || img16.rows <= 0 || img16.cols <= 0) {\n        console.error('无效的图像数据');\n        return {};\n      }\n\n      const { calculateGain = true, calculateHistogram = true } = options;\n      const result = {};\n\n\n      // 设置直方图参数\n      const step = 4;\n\n      // 安全访问函数\n      const safeUshortAt = (mat, y, x) => {\n        if (y >= 0 && y < mat.rows && x >= 0 && x < mat.cols) {\n          try {\n            return mat.ushortAt(y, x);\n          } catch (e) {\n            console.error(`访问位置错误: (${y},${x})`);\n            return 0;\n          }\n        }\n        return 0;\n      };\n\n      // 安全掩码设置（setter）：OpenCV.js 设置像素需使用 ucharPtr 返回的视图再赋值\n      const safeSetMask = (mask, y, x, value) => {\n        if (y >= 0 && y < mask.rows && x >= 0 && x < mask.cols) {\n          try {\n            const ptr = mask.ucharPtr(y, x);\n            if (ptr && ptr.length > 0) ptr[0] = value;\n          } catch (e) {\n            console.error(`设置掩码错误: (${y},${x})`);\n          }\n        }\n      };\n\n      if (imageType === 'gray') {\n        if (calculateHistogram) {\n          // 计算直方图\n          const histData = Array(65536).fill(0);\n          for (let i = 0; i < img16.rows; i += step) {\n            for (let j = 0; j < img16.cols; j += step) {\n              try {\n                histData[safeUshortAt(img16, i, j)]++;\n              } catch (e) {\n                // 忽略错误继续执行\n              }\n            }\n          }\n          result.histogram = histData;\n        }\n      } else if (imageType === 'bayer') {\n        // 确保图像大小足够进行Bayer处理\n        if (img16.rows < 2 || img16.cols < 2) {\n          console.error('图像尺寸过小，无法进行Bayer处理');\n          return {};\n        }\n\n        const rows = img16.rows;\n        const cols = img16.cols;\n\n        // 创建掩码 - 使用稀疏采样\n        const maskR = new cv.Mat(rows, cols, cv.CV_8UC1, new cv.Scalar(0));\n        const maskG = new cv.Mat(rows, cols, cv.CV_8UC1, new cv.Scalar(0));\n        const maskB = new cv.Mat(rows, cols, cv.CV_8UC1, new cv.Scalar(0));\n\n        // 确定采样步长 - 大图像时采用更大步长\n        const sampleStep = Math.max(2, Math.floor(Math.min(rows, cols) / 200) * 2);\n\n        // 确定Bayer模式位置\n        let rOffsets, gOffsets, bOffsets;\n        switch (bayerPattern) {\n          case 'RGGB':\n            rOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            bOffsets = [{ y: 1, x: 1 }];\n            break;\n          case 'GR':\n            gOffsets = [{ y: 0, x: 0 }, { y: 1, x: 1 }];\n            rOffsets = [{ y: 0, x: 1 }];\n            bOffsets = [{ y: 1, x: 0 }];\n            break;\n          case 'GB':\n            gOffsets = [{ y: 0, x: 0 }, { y: 1, x: 1 }];\n            bOffsets = [{ y: 0, x: 1 }];\n            rOffsets = [{ y: 1, x: 0 }];\n            break;\n          case 'BG':\n            bOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            rOffsets = [{ y: 1, x: 1 }];\n            break;\n          default:\n            rOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            bOffsets = [{ y: 1, x: 1 }];\n        }\n\n        // 采样数据用于增益计算\n        const rValues = [];\n        const gValues = [];\n        const bValues = [];\n\n        // 采样设置掩码和收集采样数据\n        for (let y = 0; y < rows; y += sampleStep) {\n          for (let x = 0; x < cols; x += sampleStep) {\n            // 处理红色通道\n            for (const pos of rOffsets) {\n              const py = y + pos.y;\n              const px = x + pos.x;\n              if (py < rows && px < cols && py >= 0 && px >= 0) {\n                try {\n                  safeSetMask(maskR, py, px, 255);\n                  if (calculateGain && y % (sampleStep * 2) === 0 && x % (sampleStep * 2) === 0) {\n                    rValues.push(safeUshortAt(img16, py, px));\n                  }\n                } catch (e) {\n                  console.error(`R通道错误：(${py},${px})`, e);\n                }\n              }\n            }\n\n            // 处理绿色通道\n            for (const pos of gOffsets) {\n              const py = y + pos.y;\n              const px = x + pos.x;\n              if (py < rows && px < cols && py >= 0 && px >= 0) {\n                try {\n                  safeSetMask(maskG, py, px, 255);\n                  if (calculateGain && y % (sampleStep * 2) === 0 && x % (sampleStep * 2) === 0) {\n                    gValues.push(safeUshortAt(img16, py, px));\n                  }\n                } catch (e) {\n                  console.error(`G通道错误：(${py},${px})`, e);\n                }\n              }\n            }\n\n            // 处理蓝色通道\n            for (const pos of bOffsets) {\n              const py = y + pos.y;\n              const px = x + pos.x;\n              if (py < rows && px < cols && py >= 0 && px >= 0) {\n                try {\n                  safeSetMask(maskB, py, px, 255);\n                  if (calculateGain && y % (sampleStep * 2) === 0 && x % (sampleStep * 2) === 0) {\n                    bValues.push(safeUshortAt(img16, py, px));\n                  }\n                } catch (e) {\n                  console.error(`B通道错误：(${py},${px})`, e);\n                }\n              }\n            }\n          }\n        }\n\n        if (calculateHistogram) {\n          // 计算三个通道的直方图\n          const histDataR = Array(65536).fill(0);\n          const histDataG = Array(65536).fill(0);\n          const histDataB = Array(65536).fill(0);\n\n          // 确保安全访问\n          const maxRows = rows - 1;\n          const maxCols = cols - 1;\n\n          for (let i = 0; i < maxRows; i += 2) {\n            for (let j = 0; j < maxCols; j += 2) {\n              try {\n                if (bayerPattern === 'RGGB') {\n                  histDataR[safeUshortAt(img16, i, j)]++;\n                  const g1 = safeUshortAt(img16, i + 1, j);\n                  const g2 = safeUshortAt(img16, i, j + 1);\n                  histDataG[Math.floor((g1 + g2) / 2)]++;\n                  histDataB[safeUshortAt(img16, i + 1, j + 1)]++;\n                } else if (bayerPattern === 'GR') {\n                  const g1 = safeUshortAt(img16, i, j);\n                  const g2 = safeUshortAt(img16, i + 1, j + 1);\n                  histDataG[Math.floor((g1 + g2) / 2)]++;\n                  histDataR[safeUshortAt(img16, i + 1, j)]++;\n                  histDataB[safeUshortAt(img16, i, j + 1)]++;\n                } else if (bayerPattern === 'GB') {\n                  const g1 = safeUshortAt(img16, i, j);\n                  const g2 = safeUshortAt(img16, i + 1, j + 1);\n                  histDataG[Math.floor((g1 + g2) / 2)]++;\n                  histDataB[safeUshortAt(img16, i + 1, j)]++;\n                  histDataR[safeUshortAt(img16, i, j + 1)]++;\n                } else if (bayerPattern === 'BG') {\n                  histDataB[safeUshortAt(img16, i, j)]++;\n                  const g1 = safeUshortAt(img16, i + 1, j);\n                  const g2 = safeUshortAt(img16, i, j + 1);\n                  histDataG[Math.floor((g1 + g2) / 2)]++;\n                  histDataR[safeUshortAt(img16, i + 1, j + 1)]++;\n                }\n              } catch (e) {\n                console.error(`直方图计算错误：(${i},${j})`, e);\n              }\n            }\n          }\n          result.histogram = [histDataR, histDataG, histDataB];\n        }\n\n        // 计算白平衡增益参数 - 使用快速中位数近似法\n        if (calculateGain && rValues.length > 0 && gValues.length > 0 && bValues.length > 0) {\n          try {\n            // 快速计算中位数而非排序全部数组\n            const rMean = this.truncatedMean(rValues);\n            const gMean = this.truncatedMean(gValues);\n            const bMean = this.truncatedMean(bValues);\n\n            // 计算增益\n            const gainR = Math.min(Math.max(gMean / rMean, 0.1), 2);\n            const gainB = Math.min(Math.max(gMean / bMean, 0.1), 2);\n\n            result.whiteBalance = {\n              gainR: gainR,\n              gainB: gainB\n            };\n          } catch (e) {\n            console.error(\"白平衡增益计算错误\", e);\n            result.whiteBalance = { gainR: 1.0, gainB: 1.0 };\n          }\n        }\n\n        // 释放资源\n        try {\n          maskR.delete();\n          maskG.delete();\n          maskB.delete();\n        } catch (e) {\n          console.error(\"释放资源错误\", e);\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * 使用截断均值计算 - 去除上下一定比例的极值后计算平均值\n     * @param {Array} arr - 输入数据数组\n     * @param {number} lowerPercent - 下截断百分比，默认5%\n     * @param {number} upperPercent - 上截断百分比，默认5%\n     * @returns {number} 截断均值\n     */\n    truncatedMean(arr, lowerPercent = 5, upperPercent = 5) {\n      if (arr.length === 0) return 0;\n\n      // 过滤极端黑点和过饱和点\n      const filtered = arr.filter(v => v > 100 && v < 65000);\n      if (filtered.length === 0) return arr.length > 0 ? arr[0] : 0;\n\n      // 对于特别大的数组，采样处理\n      let workingArray = filtered;\n      if (filtered.length > 10000) {\n        workingArray = [];\n        const step = Math.ceil(filtered.length / 5000);\n        for (let i = 0; i < filtered.length; i += step) {\n          workingArray.push(filtered[i]);\n        }\n      }\n\n      // 排序数组\n      workingArray.sort((a, b) => a - b);\n\n      // 计算截断点\n      const lowerCutoff = Math.floor(workingArray.length * (lowerPercent / 100));\n      const upperCutoff = Math.floor(workingArray.length * (1 - upperPercent / 100));\n\n      // 获取截断后的子数组\n      const truncated = workingArray.slice(lowerCutoff, upperCutoff);\n\n      // 计算平均值\n      if (truncated.length === 0) return workingArray[Math.floor(workingArray.length / 2)];\n\n      const sum = truncated.reduce((acc, val) => acc + val, 0);\n      return sum / truncated.length;\n    },\n    /**\n     * 快速计算中位数 - 使用随机选择算法\n     */\n    quickMedian(arr) {\n      if (arr.length === 0) return 0;\n      if (arr.length < 100) {\n        // 小数组直接排序\n        const sortedArr = [...arr].sort((a, b) => a - b);\n        return sortedArr[Math.floor(sortedArr.length / 2)];\n      }\n\n      // 大数组随机采样\n      const samples = [];\n      for (let i = 0; i < 100; i++) {\n        samples.push(arr[Math.floor(Math.random() * arr.length)]);\n      }\n      samples.sort((a, b) => a - b);\n      return samples[50]; // 返回采样的中位数\n    },\n\n    /**\n     * 应用白平衡和亮度拉伸，将16位图像转换为8位图像\n     * @param {cv.Mat} img16 - 输入的16位图像Mat对象\n     * @param {Object} analysis - 从analyzeImageStatistics获取的分析结果\n     * @param {string} imageType - 图像类型: 'gray'(灰度图) 或 'bayer'(彩色相机)\n     * @param {string} bayerPattern - Bayer模式，仅当imageType为'bayer'时需要\n     * @param {Object} stretchParams - 手动指定拉伸参数，可选\n     * @param {number} stretchParams.blackLevel - 黑点值 \n     * @param {number} stretchParams.whiteLevel - 白点值\n     * @returns {cv.Mat} 处理后的8位RGBA图像\n     */\n    applyStretchAndGain(img16, analysis, imageType, bayerPattern = 'RGGB', blackLevel, whiteLevel) {\n      // 确保黑点小于白点\n      if (blackLevel >= whiteLevel) {\n        blackLevel = whiteLevel - 1;\n      }\n\n      // 计算转换比例和偏移\n      const scale = 255.0 / (whiteLevel - blackLevel);\n      const offset = -blackLevel * scale;\n\n      if (imageType === 'gray') {\n        // 单色相机 - 一步转换到8位RGBA\n        const rgbaImg = new cv.Mat();\n        const gray8 = new cv.Mat();\n\n        img16.convertTo(gray8, cv.CV_8U, scale, offset);\n        cv.cvtColor(gray8, rgbaImg, cv.COLOR_GRAY2RGBA);\n        gray8.delete();\n\n        return rgbaImg;\n      } else {\n        // 彩色相机处理\n        let gainR = 1.0, gainB = 1.0;\n        if (analysis && analysis.whiteBalance) {\n          gainR = analysis.whiteBalance.gainR;\n          gainB = analysis.whiteBalance.gainB;\n        }\n\n        // 使用LUT优化白平衡和拉伸\n        // 1. 创建三个LUT表\n        const { lutR, lutG, lutB } = this.getLUT(blackLevel, whiteLevel, gainR, gainB);\n\n        // 3. 创建8位输出图像\n        const img8 = new cv.Mat(img16.rows, img16.cols, cv.CV_8UC1);\n\n        // 4. 使用LUT应用白平衡和拉伸\n        // 为避免像素遍历，我们使用更高效的方式\n        const rows = img16.rows;\n        const cols = img16.cols;\n        const data8 = img8.data;\n\n        // 确定Bayer模式的位置\n        let rOffsets, gOffsets, bOffsets;\n        switch (bayerPattern) {\n          case 'RGGB':\n            rOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            bOffsets = [{ y: 1, x: 1 }];\n            break;\n          case 'GR':\n            gOffsets = [{ y: 0, x: 0 }, { y: 1, x: 1 }];\n            rOffsets = [{ y: 0, x: 1 }];\n            bOffsets = [{ y: 1, x: 0 }];\n            break;\n          case 'GB':\n            gOffsets = [{ y: 0, x: 0 }, { y: 1, x: 1 }];\n            bOffsets = [{ y: 0, x: 1 }];\n            rOffsets = [{ y: 1, x: 0 }];\n            break;\n          case 'BG':\n            bOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            rOffsets = [{ y: 1, x: 1 }];\n            break;\n          default:\n            rOffsets = [{ y: 0, x: 0 }];\n            gOffsets = [{ y: 0, x: 1 }, { y: 1, x: 0 }];\n            bOffsets = [{ y: 1, x: 1 }];\n        }\n\n        // 使用TypedArray方式处理 - 比逐个像素处理更快\n        const data16U = img16.data16U;\n\n        // 使用Bayer掩码创建转换LUT，批量处理\n        for (let y = 0; y < rows; y += 2) {\n          for (let x = 0; x < cols; x += 2) {\n            // 处理2x2块\n            // R位置\n            for (const pos of rOffsets) {\n              const idx = (y + pos.y) * cols + (x + pos.x);\n              if (idx < data16U.length) {\n                data8[idx] = lutR[data16U[idx]];\n              }\n            }\n\n            // G位置\n            for (const pos of gOffsets) {\n              const idx = (y + pos.y) * cols + (x + pos.x);\n              if (idx < data16U.length) {\n                data8[idx] = lutG[data16U[idx]];\n              }\n            }\n\n            // B位置\n            for (const pos of bOffsets) {\n              const idx = (y + pos.y) * cols + (x + pos.x);\n              if (idx < data16U.length) {\n                data8[idx] = lutB[data16U[idx]];\n              }\n            }\n          }\n        }\n\n        // 5. 将8位单通道转为RGBA\n        const rgbaImg = new cv.Mat();\n        let cvmode;\n        switch (bayerPattern) {\n          case 'RGGB': cvmode = cv.COLOR_BayerRG2RGBA; break;\n          case 'GR': cvmode = cv.COLOR_BayerGR2RGBA; break;\n          case 'GB': cvmode = cv.COLOR_BayerGB2RGBA; break;\n          case 'BG': cvmode = cv.COLOR_BayerBG2RGBA; break;\n          default: cvmode = cv.COLOR_GRAY2RGBA;\n        }\n\n        cv.cvtColor(img8, rgbaImg, cvmode);\n        img8.delete();\n\n        return rgbaImg;\n      }\n    },\n    /**\n     * 获取或计算LUT表\n     * @param {number} blackLevel - 黑点值\n     * @param {number} whiteLevel - 白点值\n     * @param {number} gainR - 红色增益\n     * @param {number} gainB - 蓝色增益\n     * @returns {Object} 包含LUT表的Object\n     */\n    getLUT(blackLevel, whiteLevel, gainR, gainB) {\n      // 创建当前参数的快照\n      const currentParams = `${blackLevel}_${whiteLevel}_${gainR}_${gainB}`;\n\n      // 如果参数未变化，直接返回缓存的LUT表\n      if (this.lutCache.lastParams === currentParams &&\n        this.lutCache.lutR && this.lutCache.lutG && this.lutCache.lutB) {\n        return {\n          lutR: this.lutCache.lutR,\n          lutG: this.lutCache.lutG,\n          lutB: this.lutCache.lutB\n        };\n      }\n\n      // 参数变化，需要重新计算LUT表\n      console.log('重新计算LUT表');\n\n      // 计算转换比例\n      const scale = 255.0 / (whiteLevel - blackLevel);\n\n      // 创建LUT表\n      const lutR = this.lutCache.lutR || new Uint8Array(65536);\n      const lutG = this.lutCache.lutG || new Uint8Array(65536);\n      const lutB = this.lutCache.lutB || new Uint8Array(65536);\n\n      // 计算LUT表\n      for (let i = 0; i < 65536; i++) {\n        lutR[i] = Math.min(255, Math.max(0, Math.round((i * gainR - blackLevel) * scale)));\n        lutG[i] = Math.min(255, Math.max(0, Math.round((i - blackLevel) * scale)));\n        lutB[i] = Math.min(255, Math.max(0, Math.round((i * gainB - blackLevel) * scale)));\n      }\n\n      // 更新缓存\n      this.lutCache.lastParams = currentParams;\n      this.lutCache.lutR = lutR;\n      this.lutCache.lutG = lutG;\n      this.lutCache.lutB = lutB;\n\n      return { lutR, lutG, lutB };\n    },\n    // checkImageData(img) {\n    //   // 检查是否为 cv.Mat 类型\n    //   if (!(img instanceof cv.Mat)) {\n    //     this.SendConsoleLogMsg('The image is not a valid cv.Mat object.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像是否为空\n    //   if (img.empty()) {\n    //     this.SendConsoleLogMsg('The image is empty.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像深度是否为 8 位或 16 位\n    //   const depth = img.type() & cv.CV_MAT_DEPTH_MASK;\n    //   if (depth !== cv.CV_8U && depth !== cv.CV_16U) {\n    //     this.SendConsoleLogMsg('The image depth is not 8-bit or 16-bit.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像尺寸是否合理\n    //   if (img.rows <= 0 || img.cols <= 0) {\n    //     this.SendConsoleLogMsg('The image dimensions are not valid.', 'error');\n    //     return false;\n    //   }\n\n    //   // 检查图像数据是否超出范围或全为0\n    //   const data = img.data;\n    //   let isAllZero = true;\n    //   const maxValue = depth === cv.CV_8U ? 255 : 65535;\n\n    //   for (let i = 0; i < data.length; i++) {\n    //     if (data[i] < 0 || data[i] > maxValue) {\n    //       this.SendConsoleLogMsg('The image data contains out-of-range values.', 'error');\n    //       return false;\n    //     }\n    //     if (data[i] !== 0) {\n    //       isAllZero = false;\n    //     }\n    //   }\n\n    //   if (isAllZero) {\n    //     this.SendConsoleLogMsg('The image data is all zero.', 'error');\n    //     return false;\n    //   }\n    //   return true;\n    // },\n\n\n    // processImage(imgArray) {\n    //   this.progressValue = 0;\n    //   try {\n    //     if (!(imgArray instanceof ArrayBuffer) && !ArrayBuffer.isView(imgArray)) {\n    //       throw new Error(\"Input must be ArrayBuffer or TypedArray\");\n    //     }\n    //     const totalStartTime = new Date(); // 总开始时间\n\n    //     this.SendConsoleLogMsg('CaptureTestTime | Process image data start.', 'info');\n    //     const startTime = new Date();\n    //     let img_bit = -1;\n    //     let uintArray;\n    //     if (imgArray.byteLength === this.mainCameraSizeX * this.mainCameraSizeY * 2 ){\n    //       uintArray = new Uint16Array(imgArray);\n    //       img_bit = 16;\n    //     }else if(imgArray.byteLength === this.mainCameraSizeX * this.mainCameraSizeY){\n    //       uintArray = new Uint8Array(imgArray);\n    //       img_bit = 8;\n    //     }else{\n    //       this.SendConsoleLogMsg(`Image data is underfind bit`, 'error');\n    //       return;\n    //     }\n\n    //     this.SendConsoleLogMsg(`Image data detected as ${img_bit}-bit.`, 'info');\n\n\n\n    //     // 设置画布宽高常量\n    //     const canvasWidth = parseInt(this.mainCameraSizeX);\n    //     const canvasHeight = parseInt(this.mainCameraSizeY);\n\n    //     // 获取原始画布和修改后的画布以及对应上下文\n    //     const modifiedCanvas = document.getElementById('mainCamera-canvas');\n    //     const modifiedCtx = modifiedCanvas.getContext('2d');\n\n\n\n    //     modifiedCanvas.width = canvasWidth;\n    //     modifiedCanvas.height = canvasHeight;\n\n    //     let mat;\n    //     if (img_bit === 16){\n    //       mat = new cv.Mat(canvasHeight, canvasWidth, cv.CV_16UC1);\n    //       mat.data16U.set(uintArray);\n    //     }else{\n    //       mat = new cv.Mat(canvasHeight, canvasWidth, cv.CV_8UC1);\n    //       mat.data.set(uintArray);\n    //     }\n    //     this.progressValue = 10;\n\n    //     const matEndTime = new Date(); // mat 结束时间\n    //     this.SendConsoleLogMsg('CaptureTestTime | Mat creation time: ' + (matEndTime.getTime() - startTime.getTime()) + ' ms', 'info');\n\n    //     // 用户自定义参数\n    //     let gainR = this.ImageGainR;\n    //     let gainB = this.ImageGainB;\n    //     let offset = this.ImageOffset;\n    //     let CFA = this.ImageCFA;\n    //     let mode = 1;\n\n    //     // 参数\n    //     let B = 0;\n    //     let W = 65535;\n    //     let cvmode = 0;\n\n    //     const { blackLevel, whiteLevel } = this.GetAutoStretch(uintArray, mode, img_bit);\n    //     B = blackLevel;\n    //     W = whiteLevel;\n    //     this.progressValue = 30;\n    //     const GetAutoStretchEndTime = new Date(); // GetAutoStretch 结束时间\n    //     this.SendConsoleLogMsg('CaptureTestTime | GetAutoStretch time: ' + (GetAutoStretchEndTime.getTime() - matEndTime.getTime()) + ' ms', 'info');\n\n    //     // 根据CFA设置颜色转换模式\n    //     if (CFA === 'GR') {\n    //       cvmode = cv.COLOR_BayerGR2RGBA;\n    //     } else if (CFA === 'GB') {\n    //       cvmode = cv.COLOR_BayerGB2RGBA;\n    //     } else if (CFA === 'BG') {\n    //       cvmode = cv.COLOR_BayerBG2RGBA;\n    //     } else if (CFA === 'RGGB') {\n    //       cvmode = cv.COLOR_BayerRG2RGBA;\n    //     }else{\n    //       cvmode = cv.COLOR_GRAY2RGBA\n    //     }\n\n    //     // 对目标图像进行颜色转换\n    //     let dst = new cv.Mat();\n\n    //     try {\n    //       cv.cvtColor(mat, dst, cvmode);\n    //     } catch (error) {\n    //       this.handleError('cvtColor 出错', 'cvtColor', error);\n    //       mat.delete();\n    //       return;\n    //     }\n\n    //     this.progressValue = 50;\n\n    //     const cvtColorEndTime = new Date(); // cvtColor 结束时间\n    //     this.SendConsoleLogMsg('CaptureTestTime | cvtColor time: ' + (cvtColorEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n    //     mat.delete();\n\n    //     // 调整图像大小\n    //     // cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n    //     // dst.delete();\n\n    //     // let originalImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n    //     // resizeImg.delete();\n\n    //     let resizeImg = new cv.Mat(); // 用来存储调整后的图像\n    //     if (this.isPolarAxisMode) {\n    //       this.progressValue = 0;\n    //       // 调整图像大小\n    //       cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n    //       dst.delete();\n\n    //       let originalImg8;\n    //       if (img_bit === 16){\n    //         originalImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n    //       }else{\n    //         originalImg8 = resizeImg;\n    //       }\n\n    //       resizeImg.delete();\n\n    //       const Bit16To8_StretchEndTime = new Date(); // Bit16To8_Stretch 结束时间\n    //       this.SendConsoleLogMsg('CaptureTestTime | Bit16To8_Stretch time: ' + (Bit16To8_StretchEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n    //       let targetImg8 = this.ImageSoftAWB(originalImg8, gainR, gainB, offset);\n    //       this.$bus.$emit('showSolveImage', targetImg8);\n\n    //       const ImageSoftAWBEndTime = new Date(); // ImageSoftAWB 结束时间\n    //       this.SendConsoleLogMsg('CaptureTestTime | ImageSoftAWB time: ' + (ImageSoftAWBEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n    //     } else {\n    //       modifiedCtx.clearRect(0, 0, modifiedCanvas.width, modifiedCanvas.height);\n    //       cv.resize(dst, resizeImg, new cv.Size(this.CanvasWidth, this.CanvasHeight), 0, 0, cv.INTER_LINEAR);\n    //       this.progressValue = 70;\n    //       let originalResizeImg8 = this.Bit16To8_Stretch(resizeImg, B, W);\n    //       this.OriginalImage = new ImageData(new Uint8ClampedArray(originalResizeImg8.data), originalResizeImg8.cols, originalResizeImg8.rows);\n    //       resizeImg.delete();\n    //       originalResizeImg8.delete();\n    //       console.log('dst.data.length: ', dst.data.length);\n    //       console.log('dst.cols: ', dst.cols);\n    //       console.log('dst.rows: ', dst.rows);\n    //       let originalImg8 = this.Bit16To8_Stretch(dst, B, W);\n    //       dst.delete();\n    //       this.progressValue = 80;\n\n    //       const Bit16To8_StretchEndTime = new Date(); // Bit16To8_Stretch 结束时间\n    //       this.SendConsoleLogMsg('CaptureTestTime | Bit16To8_Stretch time: ' + (Bit16To8_StretchEndTime.getTime() - GetAutoStretchEndTime.getTime()) + ' ms', 'info');\n\n    //       // let targetImg8 = this.ImageSoftAWB(originalImg8, gainR, gainB, offset);\n\n    //       // const ImageSoftAWBEndTime = new Date(); // ImageSoftAWB 结束时间\n    //       // this.SendConsoleLogMsg('CaptureTestTime | ImageSoftAWB time: ' + (ImageSoftAWBEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n\n    //       // originalImg8.delete();\n\n    //       this.lastImageProcessParams = {\n    //         gainR: gainR,\n    //         gainB: gainB,\n    //         offset: offset,\n    //         CFA: CFA,\n    //         mode: mode,\n    //         B: B,\n    //         W: W,\n    //         cvmode: cvmode,\n    //       };\n\n    //       modifiedCanvas.width = this.CanvasWidth;\n    //       modifiedCanvas.height = this.CanvasHeight;\n    //       let colorData = new ImageData(new Uint8ClampedArray(originalImg8.data), originalImg8.cols, originalImg8.rows);\n    //       originalImg8.delete();\n    //       this.drawImgData = colorData;\n    //       this.progressValue = 90;\n    //       // 设置缓冲画布宽高\n    //       this.bufferCanvas.width = colorData.width;\n    //       this.bufferCanvas.height = colorData.height;\n    //       // 绘制缓存画布图像\n    //       this.bufferCtx.putImageData(colorData, 0, 0);\n    //       // 绘制主画布图像\n    //       this.drawImageData();\n    //       this.progressValue = 100;\n    //       const DrawImageDataEndTime = new Date(); // DrawImageData 结束时间\n    //       this.SendConsoleLogMsg('CaptureTestTime | DrawImageData time: ' + (DrawImageDataEndTime.getTime() - Bit16To8_StretchEndTime.getTime()) + ' ms', 'info');\n\n    //       const endTime = new Date();\n    //       const elapsedTime = endTime.getTime() - startTime.getTime();\n    //       this.SendConsoleLogMsg('CaptureTestTime | Process image data end:' + elapsedTime + ' milliseconds', 'info');\n\n    //       const totalEndTime = new Date(); // 总结束时间\n    //       this.SendConsoleLogMsg('CaptureTestTime | Total process image data time: ' + (totalEndTime.getTime() - totalStartTime.getTime()) + ' ms', 'info');\n\n    //       this.$bus.$emit('showCaptureImage');\n    //       this.MakeHistogram(colorData);\n    //       this.histogramImage = colorData;\n\n    //       const checkDetectedStarsFinish = () => {\n    //         if (this.DetectedStarsFinish) {\n    //           this.detectStarsImg = this.DrawDetectStars(targetImg8, this.DetectedStarsList);\n    //           targetImg8.delete();\n    //           clearInterval(intervalId);\n    //         }\n    //       };\n\n    //       const intervalId = setInterval(checkDetectedStarsFinish, 1000);\n    //     }\n\n    //     // if (this.isNotDrawStars) {\n    //     //   this.drawImageData(this.drawImgData);\n    //     // } else {\n    //     //   if (this.detectStarsImg != null) {\n    //     //     this.drawImageData(this.detectStarsImg);\n    //     //   } else {\n    //     //     this.drawImageData(this.drawImgData);\n    //     //   }\n    //     // }\n\n    //     // const windowWidth = window.innerWidth;\n    //     // const windowHeight = window.innerHeight;\n\n    //     // const minTranslateX = this.imageWidth - this.CanvasWidth;\n    //     // const minTranslateY = this.imageHeight - this.CanvasHeight;\n\n    //     // 计算初始的 ScaleImageSize_X 和 ScaleImageSize_Y\n    //     // this.ScaleImageSize_X = Math.floor(minTranslateX / this.CanvasWidth * windowWidth + windowWidth);\n    //     // this.ScaleImageSize_Y = Math.floor(minTranslateY / this.CanvasHeight * windowHeight + windowHeight);\n\n    //     // this.$bus.$emit('ScaleImageSize', this.ScaleImageSize_X, this.ScaleImageSize_Y);\n\n    //   } catch (error) {\n    //     this.handleError('Process image data error', 'processImage', error);\n    //     if (mat) {\n    //       mat.delete();\n    //     }\n    //     if (resizeImg) {\n    //       resizeImg.delete();\n    //     }\n    //     if (originalImg8) {\n    //       originalImg8.delete();\n    //     }\n    //     if (targetImg8) {\n    //       targetImg8.delete();\n    //     }\n    //   }\n    // },\n\n    // histogramStretch(imageData, min, max) {\n    //   const startTime = new Date();\n    //   // Convert ImageData to cv.Mat\n    //   const image = cv.matFromImageData(imageData);\n    //   let Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 转换图像数据时间: ' + (Time1.getTime() - startTime.getTime()) + ' ms', 'info');\n    //   // Perform the histogram stretch\n    //   const channels = new cv.MatVector();\n    //   cv.split(image, channels); // Split channels (BGR) into separate Mat objects\n    //   let Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 分割通道时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Calculate alpha and beta for each channel\n    //   let alpha = 255.0 / (max - min);\n    //   let beta = -min * alpha;\n\n    //   if (alpha < 0) {\n    //     alpha = 0;\n    //     beta = 0;\n    //   } else if (alpha > 255) {\n    //     alpha = 255;\n    //     beta = 0;\n    //   }\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 计算alpha和beta时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   // Iterate over each channel and apply histogram stretching\n    //   for (let i = 0; i < channels.size(); i++) {\n    //     let channel = channels.get(i);\n\n\n    //     // Apply histogram stretching to the channel\n    //     channel.convertTo(channel, -1, alpha, beta);\n\n    //     // Release the memory of channel\n    //     channel.delete();\n    //   }\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 各通道拉伸时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Merge the channels back into a single image\n    //   const stretchImage = new cv.Mat();\n    //   cv.merge(channels, stretchImage);\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 合并通道时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   // Release the memory of channels and MatVector\n    //   channels.delete();\n\n    //   // Convert cv.Mat back to ImageData\n    //   const stretchedImageData = new ImageData(new Uint8ClampedArray(stretchImage.data), stretchImage.cols, stretchImage.rows);\n    //   Time2 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 转换图像数据时间: ' + (Time2.getTime() - Time1.getTime()) + ' ms', 'info');\n    //   // Clean up\n    //   image.delete();\n    //   stretchImage.delete();\n    //   Time1 = new Date();\n    //   this.SendConsoleLogMsg('histogramStretch | 释放内存时间: ' + (Time1.getTime() - Time2.getTime()) + ' ms', 'info');\n    //   this.SendConsoleLogMsg('histogramStretch | 总时间: ' + (Time1.getTime() - startTime.getTime()) + ' ms', 'info');\n    //   return stretchedImageData;\n    // },\n\n    histogramStretch(imageData, min, max) {\n      if (max < min) {\n        this.SendConsoleLogMsg('histogramStretch | max < min, return original imageData', 'warning');\n        max = min;\n      }\n      const startTime = new Date();\n      // Calculate alpha and beta\n      let alpha = 255.0 / (max - min);\n      let beta = -min * alpha;\n\n      if (alpha < 0) {\n        alpha = 0;\n        beta = 0;\n      } else if (alpha > 255) {\n        alpha = 255;\n        beta = 0;\n      }\n\n      // Apply histogram stretching directly on ImageData\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        for (let j = 0; j < 3; j++) { // For each color channel\n          let value = imageData.data[i + j];\n          value = value * alpha + beta;\n          imageData.data[i + j] = Math.max(0, Math.min(255, value));\n        }\n      }\n\n      const endTime = new Date();\n      this.SendConsoleLogMsg('histogramStretch | 总时间: ' + (endTime.getTime() - startTime.getTime()) + ' ms', 'info');\n      return imageData;\n    },\n    localWhiteBalanceAdjustment(imageData, gainR, gainB, offset) {\n      // 分离通道\n      let value;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        for (let j = 0; j < 3; j++) { // For each color channel\n          if (j == 0) {\n            value = imageData.data[i + j];\n            value = value * gainB + offset;\n          } else if (j == 2) {\n            value = imageData.data[i + j];\n            value = value * gainR + offset;\n          } else {\n            value = imageData.data[i + j];\n            value = value * 1 + offset;\n          }\n          imageData.data[i + j] = Math.max(0, Math.min(255, value));\n        }\n      }\n\n\n      return imageData;\n    },\n\n    initCanvas() {\n      this.bufferCanvas = document.createElement('canvas');\n      this.bufferCtx = this.bufferCanvas.getContext('2d');\n\n      this.tempCanvas = document.createElement('canvas');\n      this.tempCtx = this.tempCanvas.getContext('2d');\n    },\n\n    //*/*/*/*/*/*/*/*/*/*/*/\n    SwitchImageToShow(isOriginal) {\n      // console.log('Show Original Image: ', isOriginal);\n      this.SendConsoleLogMsg('Show Original Image:' + isOriginal, 'info');\n      this.isNotDrawStars = isOriginal;\n      if (isOriginal) {\n        // document.removeEventListener('click', this.handleTouchOrMouseDown);\n        this.enableMainCanvasClick = false;\n        this.drawImageData();\n      } else {\n        // document.addEventListener('click', this.handleTouchOrMouseDown);\n        this.enableMainCanvasClick = true;\n        // this.drawImageData(this.detectStarsImg);\n      }\n    },\n\n\n\n    drawImageData() {\n      if (this.bufferCanvas == null) {\n        this.SendConsoleLogMsg('drawImageData error: bufferCanvas is null or undefined.', 'error');\n        return;\n      }\n      if (!this.drawImgData) return;\n\n      // 可用相关参数\n      // window.innerWidth; // 窗口宽度\n      // window.innerHeight; // 窗口高度\n      // this.scale 缩放比例\n      // this.translateX 平移x坐标\n      // this.translateY 平移y坐标\n      // this.CanvasWidth 主画布宽度 1920\n      // this.CanvasHeight 主画布高度 1080\n      // this.mainCameraSizeX 原始图像宽度\n      // this.mainCameraSizeY 原始图像高度\n      // this.bufferCanvas.width 缓冲画布宽度\n      // this.bufferCanvas.height 缓冲画布高度\n      // this.ImageProportion 图像比例\n      // this.ROI_x ROI的x坐标\n      // this.ROI_y ROI的y坐标\n      // this.ROI_length ROI的长度\n\n      // console.log('当前画布参数:\\n bufferCanvas.width: ', this.bufferCanvas.width, '\\n bufferCanvas.height: ', this.bufferCanvas.height, '\\n ImageProportion: ', this.ImageProportion, '\\n scale: ', this.scale, '\\n visibleX: ', this.visibleX, '\\n visibleY: ', this.visibleY, '\\n visibleWidth: ', this.visibleWidth, '\\n visibleHeight: ', this.visibleHeight, '\\n ROI_x: ', this.ROI_x, '\\n ROI_y: ', this.ROI_y, '\\n ROI_length: ', this.ROI_length);\n\n\n      // 计算可见区域\n      const newVisibleWidth = this.bufferCanvas.width * this.scale;\n      const newVisibleHeight = newVisibleWidth / this.ImageProportion;\n\n      // 计算可见区域x坐标\n      let newVisibleX = this.visibleX;\n      // 计算可见区域y坐标\n      let newVisibleY = this.visibleY;\n\n      // 避免图像越界\n      if (newVisibleX - newVisibleWidth / 2 < 0) {\n        newVisibleX = newVisibleWidth / 2;\n      } else if (newVisibleX + newVisibleWidth / 2 > this.bufferCanvas.width) {\n        newVisibleX = this.bufferCanvas.width - newVisibleWidth / 2;\n      }\n\n      if (newVisibleY - newVisibleHeight / 2 < 0) {\n        newVisibleY = newVisibleHeight / 2;\n      } else if (newVisibleY + newVisibleHeight / 2 > this.bufferCanvas.height) {\n        newVisibleY = this.bufferCanvas.height - newVisibleHeight / 2;\n      }\n\n      // 更新ROI区域\n      // 计算可见区域的边界\n      const visibleLeft = newVisibleX - newVisibleWidth / 2;\n      const visibleRight = newVisibleX + newVisibleWidth / 2;\n      const visibleTop = newVisibleY - newVisibleHeight / 2;\n      const visibleBottom = newVisibleY + newVisibleHeight / 2;\n\n      // 计算 ROI 区域的边界\n      const roiLeft = this.ROI_x;\n      const roiRight = this.ROI_x + this.ROI_length;\n      const roiTop = this.ROI_y;\n      const roiBottom = this.ROI_y + this.ROI_length;\n\n      // 判断 ROI 区域是否在可见区域内\n      const isRoiInVisible = roiRight >= visibleLeft && roiLeft <= visibleRight && roiBottom >= visibleTop && roiTop <= visibleBottom;\n\n      // 计算 ROI 区域在屏幕上的位置，中心点坐标\n      const roiScreenX = (this.ROI_x - visibleLeft) * (window.innerWidth / newVisibleWidth) + this.RedBoxSideLength * window.innerWidth / newVisibleWidth / 2;\n      const roiScreenY = (this.ROI_y - visibleTop) * (window.innerHeight / newVisibleHeight) + this.RedBoxSideLength * window.innerHeight / newVisibleHeight / 2;\n      // this.SendConsoleLogMsg('ROI 区域在屏幕上的位置: ' + roiScreenX + '*' + roiScreenY + '长度 ' + this.RedBoxSideLength * window.innerWidth / newVisibleWidth + '*' + this.RedBoxSideLength * window.innerHeight / newVisibleHeight, 'info');\n      this.$bus.$emit('setRedBoxLength', this.RedBoxSideLength * window.innerWidth / newVisibleWidth, this.RedBoxSideLength * window.innerHeight / newVisibleHeight);\n      this.$bus.$emit('setRedBoxPosition', roiScreenX, roiScreenY);\n\n\n      const canvas = this.$refs.mainCanvas;\n      const ctx = canvas.getContext('2d');\n      canvas.width = this.CanvasWidth;\n      canvas.height = this.CanvasHeight;\n\n      ctx.drawImage(this.bufferCanvas, visibleLeft, visibleTop, newVisibleWidth, newVisibleHeight, 0, 0, canvas.width, canvas.height);\n\n      this.visibleX = newVisibleX;\n      this.visibleY = newVisibleY;\n      this.visibleWidth = newVisibleWidth;\n      this.visibleHeight = newVisibleHeight;\n\n      this.$bus.$emit('setCurrentMainCanvasHasImage', true); // 发送给电调，用于判断是否可以进行循环拍摄\n      // 发送消息给QT客户端，用于信息图标\n      // 统一坐标：发送给 QT 的 ROI 坐标采用传感器像素坐标（不再按 bin 放大），避免在回环中被重复乘以 bin 导致指数级增长\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendVisibleArea:' + this.visibleX + ':' + this.visibleY + ':' + this.scale);\n\n      // 如果选择了星点，则根据选择位置，在ROI区域中绘制一个圆\n      if (this.DrawSelectStarX != -1 && this.DrawSelectStarY != -1 && this.showSelectStar) {\n        let radius, canvasStarX, canvasStarY, color;\n        // 如果有星点\n        if (this.DrawSelectStarHFR != -1) {\n          radius = this.DrawSelectStarHFR / this.scale * 2;\n          if (radius <= 1) radius = 1;\n          canvasStarX = (this.DrawSelectStarX / this.cameraBin + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n          canvasStarY = (this.DrawSelectStarY / this.cameraBin + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n          color = 'green'; // 有星点，绘制绿色的圆\n        } else {\n          // 否则，在选择的位置绘制一个圆\n          radius = 10 / this.scale; // 你可以根据需要调整这个值\n          canvasStarX = (this.DrawSelectStarX / this.cameraBin + this.ROI_x - visibleLeft) * ctx.canvas.width / newVisibleWidth;\n          canvasStarY = (this.DrawSelectStarY / this.cameraBin + this.ROI_y - visibleTop) * ctx.canvas.height / newVisibleHeight;\n          color = 'red'; // 无星点，绘制红色的圆\n        }\n\n        // 获取绘制圆的位置的图像数据\n        const imageData = ctx.getImageData(canvasStarX - radius, canvasStarY - radius, 2 * radius, 2 * radius);\n        // 发送图像数据给显示框\n        this.$bus.$emit('selectStarImage', imageData);\n        console.log('绘制星点的位置和大小: x =', canvasStarX, 'y =', canvasStarY, 'radius =', radius);\n        // 在指定位置开始绘制圆\n        ctx.beginPath();\n        ctx.arc(canvasStarX, canvasStarY, radius, 0, 2 * Math.PI);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 3;\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n    },\n\n    addEventListeners() {\n\n    },\n\n    // 节流函数\n    throttle(func, delay) {\n      let lastExecuted = 0;\n      return function (...args) {\n        const now = Date.now();\n        if (now - lastExecuted >= delay) {\n          func.apply(this, args);\n          lastExecuted = now;\n        }\n      };\n    },\n\n    Bit16To8_Stretch(img16, B, W) {\n      console.log('Bit16To8_Stretch | B = ' + B + ', W = ' + W);\n      let img8 = new cv.Mat(img16.rows, img16.cols, cv.CV_8UC4);\n      img16.convertTo(img8, cv.CV_8U, 255.0 / (W - B), -B * 255.0 / (W - B));\n      return img8;\n    },\n\n    DrawDetectStars(image, Stars) {\n      console.log('Draw circle on the Capture Image(', image.cols, ',', image.rows, ').');\n      if (!(image instanceof cv.Mat)) {\n        throw new Error('Invalid image data');\n      }\n      Stars.forEach(star => {\n        let centerX = Math.round(star.x / (this.mainCameraSizeX / image.cols));\n        let centerY = Math.round(star.y / (this.mainCameraSizeY / image.rows));\n        let radius = Math.round(star.hfr);\n\n        console.log('Draw circle at(', centerX, ',', centerY, ') with radius:', radius);\n\n        let center = new cv.Point(centerX, centerY);\n        let color = new cv.Scalar(255, 0, 0, 255);\n        let thickness = 2; // 圆圈厚度\n\n        cv.circle(image, center, radius, color, thickness);\n\n        // 添加 hfr 值到圆的上方\n        // 确保 star.hfr 是一个数字\n        let hfrValue = parseFloat(star.hfr);\n        if (isNaN(hfrValue)) {\n          hfrValue = 0; // 如果 star.hfr 不能转换为数字，则默认值设为0\n        }\n\n        // 保留到小数点后2位\n        let text = hfrValue.toFixed(2);\n        let fontFace = cv.FONT_HERSHEY_SIMPLEX;\n        let fontScale = 1;\n        let textColor = new cv.Scalar(255, 0, 0, 255);\n        let textThickness = 2;\n\n        // 手动设置文本的位置，假设字体高度大约为10像素\n        let textX = centerX - (text.length * 10); // 估算每个字符宽度为5像素\n        let textY = centerY - radius - 3; // 圆的上方 3 像素\n\n        // 在图像上绘制文本\n        cv.putText(image, text, new cv.Point(textX, textY), fontFace, fontScale, textColor, textThickness);\n      });\n\n      const imageData = new ImageData(new Uint8ClampedArray(image.data), image.cols, image.rows);\n\n      return imageData;\n    },\n\n    DrawPHD2Box(PHD2ImageSize_X, PHD2ImageSize_Y, Box_X, Box_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const BoxWidth = 20 / ratioZoomX;\n      const BoxHeight = 20 / ratioZoomY;\n\n      const BoxStartX = Box_X / ratioZoomX - BoxWidth / 2;\n      const BoxStartY = Box_Y / ratioZoomY - BoxHeight / 2;\n\n      this.$bus.$emit('PHD2BoxPosition', BoxStartX, BoxStartY, BoxWidth, BoxHeight);\n    },\n\n    DrawPHD2Cross(PHD2ImageSize_X, PHD2ImageSize_Y, Cross_X, Cross_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const CrossStartX = Cross_X / ratioZoomX;\n      const CrossStartY = Cross_Y / ratioZoomY;\n\n      this.$bus.$emit('PHD2CrossPosition', CrossStartX, CrossStartY);\n    },\n\n    DrawPHD2MultiStars(PHD2ImageSize_X, PHD2ImageSize_Y, Star_X, Star_Y) {\n      const ratioZoomX = PHD2ImageSize_X / window.innerWidth;\n      const ratioZoomY = PHD2ImageSize_Y / window.innerHeight;\n\n      const StarStartX = Star_X / ratioZoomX - 12 / 2;\n      const StarStartY = Star_Y / ratioZoomY - 12 / 2;\n\n      this.$bus.$emit('PHD2MultiStarsPosition', StarStartX, StarStartY);\n    },\n\n    calculateHistogram(imageData) {\n      console.log('QHYCCD | calculateHistogram');\n      const histogram = [\n        Array(256).fill(0), // 存储蓝色通道直方图\n        Array(256).fill(0), // 存储绿色通道直方图\n        Array(256).fill(0)  // 存储红色通道直方图\n      ];\n\n      // 分别计算三个通道的直方图\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const r = imageData.data[i];\n        const g = imageData.data[i + 1];\n        const b = imageData.data[i + 2];\n\n        // 更新每个通道的直方图\n        histogram[0][b]++;\n        histogram[1][g]++;\n        histogram[2][r]++;\n      }\n\n      return histogram;\n    },\n\n    applyHistStretch(Min, Max) {\n      this.currentHistogramMin = Min;\n      this.currentHistogramMax = Max;\n      if (this.ImageArrayBuffer) {\n        this.processImage(this.ImageArrayBuffer, Min, Max, { calculateHistogram: false });\n      }\n      this.$bus.$emit('ChangeDialPosition', Min, Max);\n    },\n\n\n    calcWhiteBalanceGains() {\n      // const Gains = this.calculateWhiteBalanceGains(this.histogramData, this.ImageOffset);\n      this.calculateGain = true;\n      this.processImage(this.ImageArrayBuffer, this.currentHistogramMin, this.currentHistogramMax, { calculateHistogram: false });\n\n      this.ImageGainR = Gains.GainR;\n      this.ImageGainB = Gains.GainB;\n\n      const GainRIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ImageGainR');\n      if (GainRIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.MainCameraConfigItems[GainRIndex].value = this.ImageGainR;\n      } else {\n        console.error('ImageGainR configuration item not found.');\n      }\n\n      const GainBIndex = this.MainCameraConfigItems.findIndex(item => item.label === 'ImageGainB');\n      if (GainBIndex !== -1) { // 确保找到了对应的配置项\n        // 更新 ExpTime1 配置项的值\n        this.MainCameraConfigItems[GainBIndex].value = this.ImageGainB;\n      } else {\n        console.error('ImageGainB configuration item not found.');\n      }\n\n    },\n\n\n    calculateWhiteBalanceGains() {\n      if (!(this.OriginalImage instanceof ImageData)) {\n        throw new Error('Invalid image data');\n      }\n\n      // 创建 cv.Mat 对象\n      const img8 = cv.matFromImageData(this.OriginalImage);\n\n      // 分割通道\n      const channels = new cv.MatVector();\n      cv.split(img8, channels);\n\n      // 获取各通道\n      const b = channels.get(0);\n      const g = channels.get(1);\n      const r = channels.get(2);\n\n      // 计算中位数\n      const medianB = new cv.Mat();\n      const medianG = new cv.Mat();\n      const medianR = new cv.Mat();\n      cv.medianBlur(b, medianB, 5);\n      cv.medianBlur(g, medianG, 5);\n      cv.medianBlur(r, medianR, 5);\n\n      // 计算平均亮度\n      const avgB = cv.mean(medianB)[0];\n      const avgG = cv.mean(medianG)[0];\n      const avgR = cv.mean(medianR)[0];\n\n      // 计算增益\n      const gainR = Math.min(Math.max(avgG / avgR, 0.1), 3);\n      const gainB = Math.min(Math.max(avgG / avgB, 0.1), 3);\n\n      // 释放内存\n      b.delete();\n      g.delete();\n      r.delete();\n      medianB.delete();\n      medianG.delete();\n      medianR.delete();\n      channels.delete();\n      img8.delete();\n\n      return { GainR: gainR, GainB: gainB };\n    },\n\n    loadOpenCv() {\n      return new Promise((resolve, reject) => {\n        if (typeof cv === 'undefined') {\n          // 如果 cv 未定义，尝试加载 OpenCV.js\n          const script = document.createElement('script');\n          script.src = '/opencv.js'; // 使用 public 文件夹中的路径\n          script.async = true;\n          script.onload = () => {\n            resolve();\n          };\n          script.onerror = (error) => {\n            reject(error);\n          };\n          document.head.appendChild(script);\n        } else {\n          // 如果 cv 已定义，直接解析\n          resolve();\n        }\n      });\n    },\n\n\n    onCvReady() {\n\n      // Test if some of opencv method can work.\n      if (cv) {\n        console.log(\"QHYCCD | OpenCV.js is ready.\");\n        this.SendConsoleLogMsg('OpenCV.js is ready.', 'info');\n      } else {\n        console.log(\"QHYCCD | Failed to load OpenCV.js\");\n        this.SendConsoleLogMsg('Failed to load OpenCV.js.', 'error');\n      }\n\n      this.cvReady = true;\n    },\n\n\n    loadImageToCanvasMainCamera: function () {\n      const canvas = document.getElementById('mainCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n      image.src = BackgroundImage;\n    },\n    loadImageToCanvasGuiderCamera: function () {\n      const canvas = document.getElementById('guiderCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n      image.src = BackgroundImage;\n    },\n\n\n    showGuiderCameraCanvas() {\n      // 动态更新z-index\n      this.canvasZIndexStel = -10;\n      this.canvasZIndexMainCamera = -11;\n      this.canvasZIndexGuiderCamera = 0;\n      this.$bus.$emit('setParsingProgress', false);\n\n      // this.convertToGrayscale();\n    },\n\n    showStelCanvas() {\n      if (this.isPolarAxisMode) {\n        this.$bus.$emit('setParsingProgress', true);\n      } else {\n        this.$bus.$emit('setParsingProgress', false);\n      }\n      this.canvasZIndexStel = 0;\n      this.canvasZIndexMainCamera = -10;\n      this.canvasZIndexGuiderCamera = -11;\n    },\n\n    showMainCameraCanvas() {\n      this.canvasZIndexStel = -10;\n      this.canvasZIndexMainCamera = 0;\n      this.canvasZIndexGuiderCamera = -11;\n\n      this.$bus.$emit('setParsingProgress', false);\n    },\n\n\n    handleButtonTestClick() {\n      // this.changeOrder();\n      if (this.currentcanvas === 'Stel') {\n        this.currentcanvas = 'MainCamera';\n        this.showMainCameraCanvas();\n      }\n      else if (this.currentcanvas === 'MainCamera') {\n        this.currentcanvas = 'GuiderCamera';\n        this.showGuiderCameraCanvas();\n      }\n      else if (this.currentcanvas === 'GuiderCamera') {\n        this.currentcanvas = 'Stel';\n        this.showStelCanvas();\n      }\n    },\n\n    getPluginsMenuItems: function () {\n      let res = []\n      for (const i in this.$stellariumWebPlugins()) {\n        const plugin = this.$stellariumWebPlugins()[i]\n        if (plugin.menuItems) {\n          res = res.concat(plugin.menuItems)\n        }\n      }\n      return res\n    },\n    getPluginsMenuComponents: function () {\n      let res = []\n      for (const i in this.$stellariumWebPlugins()) {\n        const plugin = this.$stellariumWebPlugins()[i]\n        if (plugin.menuComponents) {\n          res = res.concat(plugin.menuComponents)\n        }\n      }\n      return res\n    },\n    toggleStoreValue: function (storeVarName) {\n      this.nav = false;\n      this.$store.commit('toggleBool', storeVarName)\n    },\n    getStoreValue: function (storeVarName) {\n      return _.get(this.$store.state, storeVarName)\n    },\n    setStateFromQueryArgs: function () {\n      // Check whether the observing panel must be displayed\n      this.$store.commit('setValue', { varName: 'showSidePanel', newValue: this.$route.path.startsWith('/p/') })\n\n      // Set the core's state from URL query arguments such\n      // as date, location, view direction & fov\n      let that = this\n\n      if (!this.initDone) {\n        this.$stel.core.time_speed = 1\n        let d = new Date()\n        if (this.$route.query.date) {\n          d = new Moment(this.$route.query.date).toDate()\n          this.$stel.core.observer.utc = d.getMJD()\n          this.startTimeIsSet = true\n        }\n\n        if (this.$route.query.lng && this.$route.query.lat) {\n          const pos = { lat: Number(this.$route.query.lat), lng: Number(this.$route.query.lng), alt: this.$route.query.elev ? Number(this.$route.query.elev) : 0, accuracy: 1 }\n          swh.geoCodePosition(pos, that).then((loc) => {\n            that.$store.commit('setCurrentLocation', loc)\n          }, (error) => { console.log(error) })\n        }\n\n        this.$stel.core.observer.yaw = this.$route.query.az ? Number(this.$route.query.az) * Math.PI / 180 : 0\n        this.$stel.core.observer.pitch = this.$route.query.alt ? Number(this.$route.query.alt) * Math.PI / 180 : 30 * Math.PI / 180\n        this.$stel.core.fov = this.$route.query.fov ? Number(this.$route.query.fov) * Math.PI / 180 : 120 * Math.PI / 180\n\n        this.initDone = true\n      }\n\n      if (this.$route.path.startsWith('/skysource/')) {\n        const name = decodeURIComponent(this.$route.path.substring(11))\n        console.log('Will select object: ' + name)\n        this.SendConsoleLogMsg('Will select object: ' + name, 'info');\n        return swh.lookupSkySourceByName(name).then(ss => {\n          if (!ss) {\n            return\n          }\n          let obj = swh.skySource2SweObj(ss)\n          if (!obj) {\n            obj = this.$stel.createObj(ss.model, ss)\n            this.$selectionLayer.add(obj)\n          }\n          if (!obj) {\n            console.warning(\"Can't find object in SWE: \" + ss.names[0])\n          }\n          swh.setSweObjAsSelection(obj)\n        }, err => {\n          console.log(err)\n          console.log(\"Couldn't find skysource for name: \" + name)\n          this.SendConsoleLogMsg(\"Couldn't find skysource for name: \" + name, 'error');\n        })\n      }\n    },\n\n    lookatcircle() {\n      // glStel.core.selection = glTestCircle;\n      glStel.pointAndLock(glTestCircle);\n    },\n\n    setGloabalStel: function (stel) {\n      return stel;\n    },\n\n    setGlobalLayer: function (stel) {\n      return stel.createLayer({ id: 'testLayerStars', z: 7, visible: true });\n    },\n\n    // 坐标验证方法\n    isValidCoordinate: function (coord) {\n      // 如果是字符串，尝试转换为数字\n      if (typeof coord === 'string') {\n        coord = parseFloat(coord);\n      }\n\n      return typeof coord === 'number' &&\n        !isNaN(coord) &&\n        isFinite(coord) &&\n        coord >= -360 &&\n        coord <= 360;\n    },\n\n    vec3_from_sphe: function (ra_degree, dec_degree, out) {\n      // 确保坐标是数字类型\n      let ra = ra_degree;\n      let dec = dec_degree;\n\n      if (typeof ra === 'string') {\n        ra = parseFloat(ra);\n      }\n      if (typeof dec === 'string') {\n        dec = parseFloat(dec);\n      }\n\n      // 添加坐标验证\n      if (!this.isValidCoordinate(ra) || !this.isValidCoordinate(dec)) {\n        console.error('无效的坐标输入:', { ra_degree, dec_degree, converted: { ra, dec } });\n        return;\n      }\n\n      try {\n        const cp = Math.cos(dec * Math.PI / 180);\n        out[0] = Math.cos(ra * Math.PI / 180) * cp;\n        out[1] = Math.sin(ra * Math.PI / 180) * cp;\n        out[2] = Math.sin(dec * Math.PI / 180);\n      } catch (error) {\n        console.error('坐标转换出错:', error, { ra_degree, dec_degree, converted: { ra, dec } });\n      }\n    },\n\n    testAddCircle: function (stel, layer) {\n      console.log(\"Add a circle star near polaris\");\n\n      // 为临时对象创建带有名称的配置\n      const circleConfig = {\n        id: 'test_circle_' + Date.now(),\n        model_data: {},\n        names: ['Test Circle'],  // 添加名称\n        types: ['Temporary'],\n        model: 'temporary'\n      };\n\n      let circle = stel.createObj('circle', circleConfig);\n\n      circle.update();\n      layer.add(circle);\n\n      // 现在可以安全地选择对象，因为它有名称\n      stel.core.selection = circle;\n      stel.pointAndLock(circle);\n\n      // Circle Property\n      let mm = circle.pos;\n      this.vec3_from_sphe(2.52971, 89.2641, mm);\n      circle.pos = mm;\n      console.log(\"circle pos:\" + mm);\n      circle.label = \"\";\n      circle.frame = 1;\n      circle.size = [0.05, 0.05];\n      circle.color = [0, 1, 0, 0.25];\n      circle.border_color = [0, 1, 0, 1];\n\n      return circle;\n    },\n\n    UpdateCirclePos(Ra_degree, Dec_degree) {\n      // 添加安全检查\n      if (!glTestCircle || !glTestCircle.pos) {\n        console.warn('glTestCircle 未初始化，跳过位置更新');\n        return;\n      }\n      \n      let mm = glTestCircle.pos;\n      this.vec3_from_sphe(Ra_degree, Dec_degree, mm);\n      glTestCircle.pos = mm;\n      // console.log(\"赤道仪位置更新为:\"+Ra_degree+\"+\"+Dec_degree);\n    },\n\n    UpdateTelescopeStatus(status) {\n      this.$bus.$emit('MountStatus', status);\n      \n      // 添加安全检查\n      if (!glTestCircle) {\n        console.warn('glTestCircle 未初始化，跳过状态更新');\n        return;\n      }\n      \n      if (status === 'Moving') {\n        glTestCircle.color = [1, 0, 0, 0.25];\n        glTestCircle.border_color = [1, 0, 0, 1];\n      } else {\n        glTestCircle.color = [0, 1, 0, 0.25];\n        glTestCircle.border_color = [0, 1, 0, 1];\n      }\n    },\n\n    UpdateMainCameraStatus(status) {\n      this.$bus.$emit('MainCameraStatus', status);\n    },\n\n    // 绘制视场多边形（基于五个RA/DEC坐标的闭环）\n    AddFieldOfViewPolygon: function (stel, layer, coordinates, color, name) {\n      console.log(`开始创建视场多边形: ${name}`, { coordinates, color });\n\n      try {\n        // 验证输入参数\n        if (!coordinates || !Array.isArray(coordinates)) {\n          console.error('视场坐标必须是数组');\n          return null;\n        }\n\n        if (coordinates.length !== 5) {\n          console.error(`视场坐标必须是5个点，当前有${coordinates.length}个点`);\n          return null;\n        }\n\n        // 验证每个坐标点\n        for (let i = 0; i < coordinates.length; i++) {\n          const coord = coordinates[i];\n          if (!coord || typeof coord.ra === 'undefined' || typeof coord.dec === 'undefined') {\n            console.error(`坐标点${i}格式错误，需要包含ra和dec属性:`, coord);\n            return null;\n          }\n\n          // 验证坐标值\n          if (!this.isValidCoordinate(coord.ra) || !this.isValidCoordinate(coord.dec)) {\n            console.error(`坐标点${i}的值无效:`, coord);\n            return null;\n          }\n        }\n\n        // 设置默认颜色\n        const defaultColor = {\n          stroke: \"#FFFFFF\",\n          strokeOpacity: 1,\n          fill: \"#1E90FF\",\n          fillOpacity: 0.25\n        };\n\n        const finalColor = { ...defaultColor, ...color };\n        console.log('最终颜色配置:', finalColor);\n\n        // 创建多边形对象\n        const polygonConfig = {\n          id: 'field_of_view_' + Date.now(),\n          model_data: {},\n          names: [name || 'Field of View'],\n          types: ['FieldOfView'],\n          model: 'field_of_view'\n        };\n\n        console.log('创建GeoJSON多边形对象');\n        let polygon = stel.createObj('geojson', {\n          data: {\n            \"type\": \"FeatureCollection\",\n            \"features\": [\n              {\n                \"type\": \"Feature\",\n                \"properties\": {\n                  \"stroke\": finalColor.stroke,\n                  \"stroke-opacity\": finalColor.strokeOpacity,\n                  \"fill\": finalColor.fill,\n                  \"fill-opacity\": finalColor.fillOpacity,\n                  \"name\": name || 'Field of View'\n                },\n                \"geometry\": {\n                  \"type\": \"Polygon\",\n                  \"coordinates\": [\n                    [\n                      // 五个坐标点，形成闭环\n                      [coordinates[0].ra, coordinates[0].dec],\n                      [coordinates[1].ra, coordinates[1].dec],\n                      [coordinates[2].ra, coordinates[2].dec],\n                      [coordinates[3].ra, coordinates[3].dec],\n                      [coordinates[0].ra, coordinates[0].dec]  // 闭合多边形\n                    ]\n                  ]\n                }\n              }\n            ]\n          }\n        });\n\n        if (!polygon) {\n          console.error('GeoJSON多边形对象创建失败');\n          return null;\n        }\n\n        console.log('多边形对象创建成功，开始更新和添加到图层');\n\n        // 设置对象属性\n        polygon.update();\n        layer.add(polygon);\n\n        console.log('多边形已添加到图层');\n\n        // // 添加标签（可选）\n        // if (name) {\n        //   console.log('添加多边形标签');\n        //   // 计算视场中心点\n        //   const centerRa = coordinates.reduce((sum, coord) => sum + coord.ra, 0) / coordinates.length;\n        //   const centerDec = coordinates.reduce((sum, coord) => sum + coord.dec, 0) / coordinates.length;\n\n        //   let labelCircle = this.AddMarkCircle(stel, layer, 4, name);\n        //   if (labelCircle) {\n        //     let labelMm = labelCircle.pos;\n        //     this.vec3_from_sphe(centerRa, centerDec + 0.02, labelMm); // 在视场上方显示名称\n        //     labelCircle.pos = labelMm;\n        //     labelCircle.color = [1, 1, 1, 0.8];  // 白色，半透明\n        //     labelCircle.border_color = [0, 0, 0, 0.5];  // 黑色边框，半透明\n        //     labelCircle.size = [0.01, 0.01];  // 很小的圆圈作为名称标签\n\n        //     // 将标签与多边形关联\n        //     polygon.labelCircle = labelCircle;\n        //     console.log('标签已添加到多边形');\n        //   } else {\n        //     console.warn('标签创建失败');\n        //   }\n        // }\n\n        console.log(`视场多边形创建完成: ${name || 'Field of View'}`, {\n          coordinates: coordinates,\n          color: finalColor,\n          polygon: polygon\n        });\n\n        return polygon;\n\n      } catch (error) {\n        console.error('创建视场多边形时出错:', error);\n        console.error('错误堆栈:', error.stack);\n        return null;\n      }\n    },\n\n    // 删除指定的视场多边形\n    RemoveFieldOfViewPolygon: function (polygon) {\n      try {\n        if (!polygon) {\n          console.warn('要删除的多边形对象为空');\n          return false;\n        }\n\n        // 删除关联的标签\n        if (polygon.labelCircle) {\n          glLayer.remove(polygon.labelCircle);\n        }\n\n        // 删除多边形\n        glLayer.remove(polygon);\n\n        console.log('视场多边形已删除:', polygon);\n        return true;\n\n      } catch (error) {\n        console.error('删除视场多边形时出错:', error);\n        return false;\n      }\n    },\n\n    // 删除所有视场多边形\n    RemoveAllFieldOfViewPolygons: function () {\n      try {\n        // 如果有多边形数组，遍历删除\n        if (this.fieldOfViewPolygons && Array.isArray(this.fieldOfViewPolygons)) {\n          this.fieldOfViewPolygons.forEach(polygon => {\n            this.RemoveFieldOfViewPolygon(polygon);\n          });\n          this.fieldOfViewPolygons = [];\n        }\n\n        console.log('所有视场多边形已删除');\n        return true;\n\n      } catch (error) {\n        console.error('删除所有视场多边形时出错:', error);\n        return false;\n      }\n    },\n\n    // 更新视场多边形的位置\n    UpdateFieldOfViewPolygonPosition: function (polygon, newCoordinates) {\n      try {\n        if (!polygon || !newCoordinates || !Array.isArray(newCoordinates) || newCoordinates.length !== 5) {\n          console.error('更新视场多边形位置时参数无效');\n          return false;\n        }\n\n        // 验证新坐标\n        for (let i = 0; i < newCoordinates.length; i++) {\n          const coord = newCoordinates[i];\n          if (!this.isValidCoordinate(coord.ra) || !this.isValidCoordinate(coord.dec)) {\n            console.error(`新坐标点${i}的值无效:`, coord);\n            return false;\n          }\n        }\n\n        // 更新多边形数据\n        polygon.data.features[0].geometry.coordinates[0] = [\n          [newCoordinates[0].ra, newCoordinates[0].dec],\n          [newCoordinates[1].ra, newCoordinates[1].dec],\n          [newCoordinates[2].ra, newCoordinates[2].dec],\n          [newCoordinates[3].ra, newCoordinates[3].dec],\n          [newCoordinates[4].ra, newCoordinates[4].dec],\n          [newCoordinates[0].ra, newCoordinates[0].dec]  // 闭合\n        ];\n\n        polygon.update();\n\n        // 更新标签位置（如果存在）\n        if (polygon.labelCircle) {\n          const centerRa = newCoordinates.reduce((sum, coord) => sum + coord.ra, 0) / newCoordinates.length;\n          const centerDec = newCoordinates.reduce((sum, coord) => sum + coord.dec, 0) / newCoordinates.length;\n\n          let labelMm = polygon.labelCircle.pos;\n          this.vec3_from_sphe(centerRa, centerDec + 0.02, labelMm);\n          polygon.labelCircle.pos = labelMm;\n        }\n\n        console.log('视场多边形位置已更新:', newCoordinates);\n        return true;\n\n      } catch (error) {\n        console.error('更新视场多边形位置时出错:', error);\n        return false;\n      }\n    },\n\n    UpdateMainCameraTemperature(value) {\n      // console.log('Main Camera Temperature:', value + '°');\n      this.$bus.$emit('MainCameraTemperature', value);\n    },\n\n    setPolarPointAltitude(Altitude) {\n      this.PolarPoint_Altitude = Altitude;\n      console.log('Polar Point Altitude:', this.PolarPoint_Altitude);\n      this.SendConsoleLogMsg('Polar Point Altitude:' + this.PolarPoint_Altitude, 'info');\n    },\n\n    AddMarkCircle: function (stel, layer, frame, label) {\n      console.log(`开始创建标记圆圈: ${label}`);\n\n      try {\n        // 为临时对象创建带有名称的配置\n        const circleConfig = {\n          id: 'temp_circle_' + Date.now(),\n          model_data: {},\n          names: [label || 'Temporary Marker'],  // 添加名称\n          types: ['Temporary'],\n          model: 'temporary'\n        };\n\n        console.log('创建圆形对象');\n        let circle = stel.createObj('circle', circleConfig);\n\n        if (!circle) {\n          console.error('圆形对象创建失败');\n          return null;\n        }\n\n        console.log('圆形对象创建成功，开始设置属性');\n        circle.update();\n        layer.add(circle);\n\n        // 设置默认位置（北极星附近）\n        let mm = circle.pos;\n        this.vec3_from_sphe(2.52971, 89.2641, mm);\n        circle.pos = mm;\n\n        // 设置圆形属性\n        circle.label = label;\n        circle.frame = frame;\n        circle.size = [0.04, 0.04];\n        circle.color = [1, 1, 1, 0.5];\n        circle.border_color = [1, 1, 1, 1];\n\n        console.log(`标记圆圈创建完成: ${label}`, {\n          pos: mm,\n          size: circle.size,\n          color: circle.color,\n          border_color: circle.border_color\n        });\n\n        return circle;\n      } catch (error) {\n        console.error('创建标记圆圈时出错:', error);\n        console.error('错误堆栈:', error.stack);\n        return null;\n      }\n    },\n\n    AddMarkRectangle: function (stel, layer, RaDec) {\n      let line = stel.createObj('geojson', {\n        data: {\n          \"type\": \"FeatureCollection\",\n          \"features\": [\n            {\n              \"type\": \"Feature\",\n              \"properties\": {\n                \"stroke\": \"#FFFFFF\",\n                \"stroke-opacity\": 1,\n                \"fill\": \"#1E90FF\",\n                \"fill-opacity\": 0.25\n              },\n              \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                  [\n                    // [139.76, 35.52], [139.32, 33.41], [140.92, 33.08], [141.35, 35.19], [139.76, 35.52]\n                    [parseFloat(RaDec[0].Ra), parseFloat(RaDec[0].Dec)], [parseFloat(RaDec[1].Ra), parseFloat(RaDec[1].Dec)],\n                    [parseFloat(RaDec[2].Ra), parseFloat(RaDec[2].Dec)], [parseFloat(RaDec[3].Ra), parseFloat(RaDec[3].Dec)],\n                    [parseFloat(RaDec[0].Ra), parseFloat(RaDec[0].Dec)]\n                  ]\n                ]\n              }\n            },\n          ]\n        }\n      });\n\n      line.update();\n      layer.add(line);\n      return line;\n    },\n\n\n\n    // 辅助方法：将十六进制颜色转换为RGB\n    hexToRgb: function (hex) {\n      // 移除#号\n      hex = hex.replace('#', '');\n\n      // 解析RGB值\n      const r = parseInt(hex.substr(0, 2), 16);\n      const g = parseInt(hex.substr(2, 2), 16);\n      const b = parseInt(hex.substr(4, 2), 16);\n\n      return { r, g, b };\n    },\n\n    // 更新视场方法\n    updateFieldOfView: function (field) {\n      if (!field || !field.fieldInfo) return;\n\n      const info = field.fieldInfo;\n\n      // 计算视场的四个角点\n      const corners = [\n        { Ra: info.maxRa, Dec: info.maxDec },\n        { Ra: info.minRa, Dec: info.maxDec },\n        { Ra: info.minRa, Dec: info.minDec },\n        { Ra: info.maxRa, Dec: info.minDec },\n        { Ra: info.maxRa, Dec: info.maxDec }  // 闭合多边形\n      ];\n\n      // 更新GeoJSON数据\n      field.data = {\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"stroke\": info.color,\n              \"strokeOpacity\": 0.8,\n              \"fill\": info.color,\n              \"fillOpacity\": 0.2\n            },\n            \"geometry\": {\n              \"type\": \"Polygon\",\n              \"coordinates\":\n                [\n                  [parseFloat(corners[0].Ra), parseFloat(corners[0].Dec)],\n                  [parseFloat(corners[1].Ra), parseFloat(corners[1].Dec)],\n                  [parseFloat(corners[2].Ra), parseFloat(corners[2].Dec)],\n                  [parseFloat(corners[3].Ra), parseFloat(corners[3].Dec)],\n                  [parseFloat(corners[4].Ra), parseFloat(corners[4].Dec)]\n                ]\n            }\n          }\n        ]\n      };\n\n      field.update();\n    },\n\n    // 启动视场更新定时器\n    startFieldUpdateTimer: function () {\n      if (this.fieldUpdateTimer) {\n        clearInterval(this.fieldUpdateTimer);\n      }\n\n      this.fieldUpdateTimer = setInterval(() => {\n        // 更新校准点视场\n        if (this.calibrationCircles) {\n          this.calibrationCircles.forEach(field => {\n            if (field.fieldInfo) {\n              this.updateFieldOfView(field);\n            }\n          });\n        }\n\n        // 更新调整点视场\n        if (this.adjustmentCircles) {\n          this.adjustmentCircles.forEach(field => {\n            if (field.fieldInfo) {\n              this.updateFieldOfView(field);\n            }\n          });\n        }\n      }, 3000); // 每3秒更新一次\n    },\n\n    // 停止视场更新定时器\n    stopFieldUpdateTimer: function () {\n      if (this.fieldUpdateTimer) {\n        clearInterval(this.fieldUpdateTimer);\n        this.fieldUpdateTimer = null;\n      }\n    },\n\n    getCiecleAzAlt(Circle) {\n      let obs = this.$stel.core.observer;\n      let cirs = this.$stel.convertFrame(obs, 'ICRF', 'CIRS', Circle.getInfo('radec'));\n      let observed = this.$stel.convertFrame(obs, 'CIRS', 'OBSERVED', cirs);\n      // const azalt = this.$stel.c2s(this.$stel.convertFrame(this.$stel.core.observer, 'ICRF', 'OBSERVED', obj.getInfo('radec')))\n      let azalt = this.$stel.c2s(observed);\n      let az = this.$stel.anp(azalt[0]);\n      let alt = this.$stel.anp(azalt[1]);\n\n      const az_raf = this.$stel.a2af(az, 1);\n      const Az_degree = (az_raf.degrees < 0 ? az_raf.degrees + 180 : az_raf.degrees) + az_raf.arcminutes / 60 + az_raf.arcseconds / 3600;\n\n      const alt_raf = this.$stel.a2af(alt, 1);\n      const Alt_degree = alt_raf.degrees + alt_raf.arcminutes / 60 + alt_raf.arcseconds / 3600;\n\n      console.log('AzAlt:', Az_degree, Alt_degree);\n\n      return { Az_degree, Alt_degree };\n    },\n\n    SolveResultMark(RaDegree, DecDegree, Azimuth, Altitude) {\n      let MarkCircle_RaDec = this.AddMarkCircle(this.$stel, glLayer, 1, \"RaDec\");\n      let mm = MarkCircle_RaDec.pos;\n      this.vec3_from_sphe(RaDegree, DecDegree, mm);\n      MarkCircle_RaDec.pos = mm;\n      console.log(\"RaDec circle coordinates:\" + mm);\n\n      const AzAlt = this.getCiecleAzAlt(MarkCircle_RaDec);\n      glLayer.remove(MarkCircle_RaDec);\n\n      this.MarkCircleNum++;\n      let Label = \"AzAlt_Vue_\" + this.MarkCircleNum;\n\n      let MarkCircle_AltAz = this.AddMarkCircle(this.$stel, glLayer, 4, Label);\n      mm = MarkCircle_AltAz.pos;\n      this.vec3_from_sphe(AzAlt.Az_degree, AzAlt.Alt_degree, mm);\n      MarkCircle_AltAz.pos = mm;\n      console.log(\"AzAlt_Vue circle coordinates:\" + mm);\n\n      console.log(\"AzAlt_Vue circle x:\" + mm[0]);\n      console.log(\"AzAlt_Vue circle y:\" + mm[1]);\n      console.log(\"AzAlt_Vue circle z:\" + mm[2]);\n\n      this.LastPoint_AzAlt = this.getCiecleAzAlt(MarkCircle_AltAz);\n\n      this.CalculationPolarPoint(mm);\n\n      // 将创建的圆存储到数组中\n      // this.Circles.push(MarkCircle_RaDec);\n      this.Circles.push(MarkCircle_AltAz);\n\n    },\n\n    RemoveAllCircles() {\n      this.Circles.forEach(circle => {\n        glLayer.remove(circle);\n      });\n      this.Circles = [];\n    },\n\n    SolveResultMark_RealTime(RaDegree, DecDegree, Azimuth, Altitude) {\n      this.LastCircle_RaDec = this.AddMarkCircle(this.$stel, glLayer, 1, \"RaDec\");\n      let mm = this.LastCircle_RaDec.pos;\n      this.vec3_from_sphe(RaDegree, DecDegree, mm);\n      this.LastCircle_RaDec.pos = mm;\n      console.log(\"RaDec circle coordinates:\" + mm);\n\n      const AzAlt = this.getCiecleAzAlt(this.LastCircle_RaDec);\n      glLayer.remove(this.LastCircle_RaDec);\n\n      if (this.LastCircle_AzAlt !== null && this.LastCircle_AzAlt !== undefined) {\n        glLayer.remove(this.LastCircle_AzAlt);\n      }\n      this.LastCircle_AzAlt = this.AddMarkCircle(this.$stel, glLayer, 4, 'Current');\n      mm = this.LastCircle_AzAlt.pos;\n      this.vec3_from_sphe(AzAlt.Az_degree, AzAlt.Alt_degree, mm);\n      this.LastCircle_AzAlt.pos = mm;\n      this.LastCircle_AzAlt.color = [0, 1, 1, 0.25];\n      console.log(\"AzAlt_Vue circle coordinates:\" + mm);\n\n      console.log(\"AzAlt_Vue circle x:\" + mm[0]);\n      console.log(\"AzAlt_Vue circle y:\" + mm[1]);\n      console.log(\"AzAlt_Vue circle z:\" + mm[2]);\n\n      this.Current_AzAlt = this.getCiecleAzAlt(this.LastCircle_AzAlt);\n      console.log(\"Current AzAlt:\", this.Current_AzAlt.Az_degree, this.Current_AzAlt.Alt_degree);\n      this.$bus.$emit('ShowCurrentAzAltText', this.Current_AzAlt.Az_degree, this.Current_AzAlt.Alt_degree);\n    },\n\n\n    CalculationPolarPoint(coordinate) {\n      this.CartesianList.push(coordinate);\n\n      if (this.CartesianList.length < 3) {\n        return;\n      }\n\n      this.$bus.$emit('HideSingleSolveBtn');\n\n      // 获取三个点的坐标\n      const p1 = this.CartesianList[0];\n      const p2 = this.CartesianList[1];\n      const p3 = this.CartesianList[2];\n\n      // 计算两个向量\n      const v1 = [\n        p2[0] - p1[0],\n        p2[1] - p1[1],\n        p2[2] - p1[2]\n      ];\n\n      const v2 = [\n        p3[0] - p1[0],\n        p3[1] - p1[1],\n        p3[2] - p1[2]\n      ];\n\n      // 计算法向量\n      const normal = [\n        v1[1] * v2[2] - v1[2] * v2[1],\n        v1[2] * v2[0] - v1[0] * v2[2],\n        v1[0] * v2[1] - v1[1] * v2[0]\n      ];\n\n      // 计算法向量的长度\n      const normalLength = Math.sqrt(normal[0] ** 2 + normal[1] ** 2 + normal[2] ** 2);\n\n      // 归一化法向量\n      const unitNormal = [\n        normal[0] / normalLength,\n        normal[1] / normalLength,\n        normal[2] / normalLength\n      ];\n\n      // 假设球的半径为r，圆心为(0, 0, 0)\n      const r = 1; // 根据你的实际情况调整\n\n      // 计算与球面的交点\n      const intersection1 = [\n        unitNormal[0] * r,\n        unitNormal[1] * r,\n        unitNormal[2] * r\n      ];\n\n      const intersection2 = [\n        -unitNormal[0] * r,\n        -unitNormal[1] * r,\n        -unitNormal[2] * r\n      ];\n\n      console.log('Intersection Points:', intersection1, intersection2);\n\n      // 选择离(0,0,1)更近的交点\n      const closerIntersection = intersection1[2] > 0 ? intersection1 : intersection2;\n\n      let MarkCircle_FakePolarPoint = this.AddMarkCircle(this.$stel, glLayer, 4, \"FakePolarPoint\");\n      let mm = MarkCircle_FakePolarPoint.pos;\n      mm[0] = closerIntersection[0];\n      mm[1] = closerIntersection[1];\n      mm[2] = closerIntersection[2];\n      MarkCircle_FakePolarPoint.pos = mm;\n      console.log(\"FakePolarPoint circle coordinates:\" + mm);\n\n      const AzAlt_FakePolarPoint = this.getCiecleAzAlt(MarkCircle_FakePolarPoint);\n\n      console.log(\"Fake Polar Point AzAlt:\", AzAlt_FakePolarPoint.Az_degree, ',', AzAlt_FakePolarPoint.Alt_degree);\n\n      this.Circles.push(MarkCircle_FakePolarPoint);\n\n      let AzAlt_PolarPoint = {\n        Az_degree: 0,\n        Alt_degree: this.PolarPoint_Altitude\n      };\n\n      // console.log(\"Real Polar Point AzAlt:\", AzAlt_PolarPoint.Az_degree, ',', AzAlt_PolarPoint.Alt_degree);\n      this.SendConsoleLogMsg('Real Polar Point AzAlt:' + AzAlt_PolarPoint.Az_degree + ',' + AzAlt_PolarPoint.Alt_degree, 'info');\n      // console.log(\"Last Point AzAlt:\", this.LastPoint_AzAlt.Az_degree, this.LastPoint_AzAlt.Alt_degree);\n      this.SendConsoleLogMsg('Last Point AzAlt:' + this.LastPoint_AzAlt.Az_degree + ',' + this.LastPoint_AzAlt.Alt_degree, 'info');\n\n      ////////////////////////////////////////////////\n\n      // // 将球坐标转换为笛卡尔坐标\n      // let fakePolarPoint = this.sphericalToCartesian(AzAlt_FakePolarPoint.Az_degree, AzAlt_FakePolarPoint.Alt_degree);\n      // let polarPoint = this.sphericalToCartesian(AzAlt_PolarPoint.Az_degree, AzAlt_PolarPoint.Alt_degree);\n      // let lastPoint = this.sphericalToCartesian(this.LastPoint_AzAlt.Az_degree, this.LastPoint_AzAlt.Alt_degree);\n\n      // // 计算旋转四元数\n      // let quaternion = this.computeQuaternion(fakePolarPoint, polarPoint);\n\n      // // 应用旋转\n      // let fourthPoint = this.applyQuaternion(lastPoint, quaternion);\n\n      // // 将结果转换回球坐标\n      // let fourthPointAzAlt = this.cartesianToSpherical(fourthPoint);\n      // console.log(\"Fourth Point AzAlt:\", fourthPointAzAlt.Az_degree, ',', fourthPointAzAlt.Alt_degree);\n\n      ////////////////////////////////////////////////\n\n      // 计算角度差值，考虑角度的循环性质\n      function calculateAngleDifference(angle1, angle2) {\n        let difference = angle2 - angle1;\n        while (difference > 180) difference -= 360;\n        while (difference < -180) difference += 360;\n        return difference;\n      }\n\n      let azimuthDifference = calculateAngleDifference(AzAlt_FakePolarPoint.Az_degree, AzAlt_PolarPoint.Az_degree);\n      let altitudeDifference = AzAlt_PolarPoint.Alt_degree - AzAlt_FakePolarPoint.Alt_degree;\n\n      // 应用差值到LastPoint\n      let fourthPointAzAlt = {\n        Az_degree: this.LastPoint_AzAlt.Az_degree + azimuthDifference,\n        Alt_degree: this.LastPoint_AzAlt.Alt_degree + altitudeDifference\n      };\n\n      // 确保方位角在0到360度之间\n      fourthPointAzAlt.Az_degree = (fourthPointAzAlt.Az_degree + 360) % 360;\n\n      // 确保高度角在-90到90度之间\n      fourthPointAzAlt.Alt_degree = Math.max(Math.min(fourthPointAzAlt.Alt_degree, 90), -90);\n\n      console.log(\"Fourth Point AzAlt:\", fourthPointAzAlt.Az_degree, ',', fourthPointAzAlt.Alt_degree);\n\n      this.$bus.$emit('ShowAzAltText', azimuthDifference, altitudeDifference, fourthPointAzAlt.Az_degree, fourthPointAzAlt.Alt_degree);\n\n      ////////////////////////////////////////////////\n\n      // 将角度转换为弧度\n      function degreesToRadians(degrees) {\n        return degrees * Math.PI / 180;\n      }\n\n      // 将球坐标转换为笛卡尔坐标\n      function sphericalToCartesian(azimuth, altitude) {\n        let az = degreesToRadians(azimuth);\n        let alt = degreesToRadians(altitude);\n        let x = Math.cos(alt) * Math.cos(az);\n        let y = Math.cos(alt) * Math.sin(az);\n        let z = Math.sin(alt);\n        return { x: x, y: y, z: z };\n      }\n\n      // 将第四个点转换为笛卡尔坐标\n      let fourthPointCartesian = sphericalToCartesian(fourthPointAzAlt.Az_degree, fourthPointAzAlt.Alt_degree);\n      console.log(\"Fourth Point Cartesian:\", fourthPointCartesian.x, ',', fourthPointCartesian.y, ',', fourthPointCartesian.z);\n\n      let MarkCircle_fourthPoint = this.AddMarkCircle(this.$stel, glLayer, 4, \"Target Point\");\n      mm = MarkCircle_fourthPoint.pos;\n      mm[0] = fourthPointCartesian.x;\n      mm[1] = fourthPointCartesian.y;\n      mm[2] = fourthPointCartesian.z;\n      MarkCircle_fourthPoint.pos = mm;\n      MarkCircle_fourthPoint.color = [1, 0, 0, 0.25];\n\n      this.Circles.push(MarkCircle_fourthPoint);\n\n      // 清空列表，准备下次计算\n      this.CartesianList = [];\n      this.MarkCircleNum = 0;\n    },\n\n    // 将角度转换为弧度\n    degreesToRadians(degrees) {\n      return degrees * Math.PI / 180;\n    },\n\n    // 将球坐标转换为笛卡尔坐标\n    sphericalToCartesian(azimuth, altitude) {\n      let az = this.degreesToRadians(azimuth);\n      let alt = this.degreesToRadians(altitude);\n      let x = Math.cos(alt) * Math.cos(az);\n      let y = Math.cos(alt) * Math.sin(az);\n      let z = Math.sin(alt);\n      return { x: x, y: y, z: z };\n    },\n\n    // 计算旋转四元数\n    computeQuaternion(from, to) {\n      let w = from.x * to.x + from.y * to.y + from.z * to.z + 1;\n      let x = from.y * to.z - from.z * to.y;\n      let y = from.z * to.x - from.x * to.z;\n      let z = from.x * to.y - from.y * to.x;\n\n      let norm = Math.sqrt(w * w + x * x + y * y + z * z);\n      return { w: w / norm, x: x / norm, y: y / norm, z: z / norm };\n    },\n\n    // 应用四元数旋转\n    applyQuaternion(point, quat) {\n      let x = quat.w * quat.w * point.x + 2 * quat.y * quat.w * point.z - 2 * quat.z * quat.w * point.y + quat.x * quat.x * point.x + 2 * quat.y * quat.x * point.y + 2 * quat.z * quat.x * point.z - quat.z * quat.z * point.x - quat.y * quat.y * point.x;\n      let y = 2 * quat.x * quat.y * point.x + quat.y * quat.y * point.y + 2 * quat.z * quat.y * point.z + 2 * quat.w * quat.z * point.x - quat.z * quat.z * point.y + quat.w * quat.w * point.y - 2 * quat.x * quat.w * point.z - quat.x * quat.x * point.y;\n      let z = 2 * quat.x * quat.z * point.x + 2 * quat.y * quat.z * point.y + quat.z * quat.z * point.z - 2 * quat.w * quat.y * point.x - quat.y * quat.y * point.z + 2 * quat.w * quat.x * point.y - quat.x * quat.x * point.z + quat.w * quat.w * point.z;\n      return { x: x, y: y, z: z };\n    },\n\n    // 将笛卡尔坐标转换回球坐标\n    cartesianToSpherical(cartesian) {\n      let r = Math.sqrt(cartesian.x ** 2 + cartesian.y ** 2 + cartesian.z ** 2);\n      let azimuth = Math.atan2(cartesian.y, cartesian.x);\n      let altitude = Math.asin(cartesian.z / r);\n      return {\n        Az_degree: azimuth * 180 / Math.PI,\n        Alt_degree: altitude * 180 / Math.PI\n      };\n    },\n\n    SolveFovMark(RaDec) {\n      console.log('RaDec[4]:', RaDec);\n\n      // let rectangle = this.AddMarkRectangle(this.$stel, glLayer, RaDec);\n\n      this.Circles.push(rectangle);\n\n    },\n\n    CalibratePolarAxis() {\n      this.$bus.$emit('CalibratePolarAxisMode');\n      // this.$bus.$emit('AppSendMessage', 'Vue_Command', 'StartLoopCapture');\n      this.nav = false;\n    },\n\n    RecalibratePolarAxis() {\n      // 清空列表，准备下次计算\n      this.CartesianList = [];\n      this.MarkCircleNum = 0;\n      this.RemoveAllCircles();\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ClearSloveResultList');\n    },\n\n\n\n    // 使用新的多边形方式绘制校准点\n    drawCalibrationPointPolygon(coordinates, color, name) {\n      console.log(`绘制校准点多边形: ${name}`, coordinates);\n\n      try {\n        // 验证输入参数\n        if (!coordinates || !Array.isArray(coordinates)) {\n          console.error('校准点坐标必须是数组');\n          return;\n        }\n\n        if (coordinates.length !== 5) {\n          console.error(`校准点坐标必须是5个点，当前有${coordinates.length}个点`);\n          return;\n        }\n\n        // 验证每个坐标点\n        for (let i = 0; i < coordinates.length; i++) {\n          const coord = coordinates[i];\n          if (!coord || typeof coord.ra === 'undefined' || typeof coord.dec === 'undefined') {\n            console.error(`校准点坐标${i}格式错误：`, coord);\n            return;\n          }\n\n          if (!this.isValidCoordinate(coord.ra) || !this.isValidCoordinate(coord.dec)) {\n            console.error(`校准点坐标${i}值无效：`, coord);\n            return;\n          }\n        }\n\n        // 使用新的多边形绘制方法\n        let calibrationPolygon = this.AddFieldOfViewPolygon(\n          this.$stel,\n          glLayer,\n          coordinates,\n          color,\n          name\n        );\n\n        if (calibrationPolygon) {\n          // 添加到校准点数组\n          if (!this.calibrationCircles) {\n            this.calibrationCircles = [];\n          }\n          this.calibrationCircles.push(calibrationPolygon);\n\n          console.log(`校准点多边形创建成功: ${name}`, calibrationPolygon);\n        } else {\n          console.error(`校准点多边形创建失败: ${name}`);\n        }\n\n      } catch (error) {\n        console.error('绘制校准点多边形时出错:', error);\n      }\n    },\n\n    // 清除所有校准点\n    clearCalibrationPoints() {\n      console.log('清除所有校准点');\n\n      // 确保数组存在\n      if (!this.calibrationCircles) {\n        this.calibrationCircles = [];\n      }\n      if (!this.adjustmentCircles) {\n        this.adjustmentCircles = [];\n      }\n\n      // 清除校准点\n      if (this.calibrationCircles.length > 0) {\n        console.log(`清除 ${this.calibrationCircles.length} 个校准点`);\n        this.calibrationCircles.forEach((circle, index) => {\n          try {\n            if (circle && glLayer) {\n              glLayer.remove(circle);\n              console.log(`成功清除校准点 ${index + 1}`);\n            }\n          } catch (error) {\n            console.warn(`清除校准点 ${index + 1} 时出错:`, error);\n          }\n        });\n        this.calibrationCircles = [];\n      }\n\n      // 清除调整点\n      if (this.adjustmentCircles.length > 0) {\n        console.log(`清除 ${this.adjustmentCircles.length} 个调整点`);\n        this.adjustmentCircles.forEach((circle, index) => {\n          try {\n            if (circle && glLayer) {\n              glLayer.remove(circle);\n              console.log(`成功清除调整点 ${index + 1}`);\n            }\n          } catch (error) {\n            console.warn(`清除调整点 ${index + 1} 时出错:`, error);\n          }\n        });\n        this.adjustmentCircles = [];\n      }\n\n      // 清除上一次位置\n      this.lastPosition = null;\n\n      // 清除目标点\n      if (this.targetPointCircle) {\n        try {\n          if (glLayer) {\n            glLayer.remove(this.targetPointCircle);\n            console.log('成功清除目标点');\n          }\n          this.targetPointCircle = null;\n        } catch (error) {\n          console.warn('清除目标点时出错:', error);\n        }\n      }\n\n      if (this.fakePolarAxisCircle) {\n        try {\n          if (glLayer) {\n            glLayer.remove(this.fakePolarAxisCircle);\n            console.log('成功清除假极轴');\n          }\n        } catch (error) {\n          console.warn('清除假极轴时出错:', error);\n        }\n        this.fakePolarAxisCircle = null;\n      }\n\n      console.log('所有校准相关元素清除完成');\n    },\n\n\n    // 使用新的多边形方式绘制调整点\n    // 使用新的多边形方式绘制调整点（不在此处画圆）\n    drawAdjustmentPointsPolygon(currentCoordinates, targetCoordinates, currentColor, targetColor, isTimerUpdate) {\n      if (isTimerUpdate === undefined) isTimerUpdate = false;\n      console.log('绘制调整点多边形', { currentCoordinates, targetCoordinates });\n\n      try {\n        // 1) 清除之前的调整点\n        if (this.adjustmentCircles) {\n          this.adjustmentCircles.forEach(obj => {\n            try { glLayer.remove(obj); } catch (e) { console.warn('清除调整点时出错:', e); }\n          });\n        }\n        this.adjustmentCircles = [];\n\n        // 2) 绘制当前位置视场多边形\n        if (currentCoordinates && Array.isArray(currentCoordinates) && currentCoordinates.length === 5) {\n          console.log('绘制当前位置多边形');\n          const currentPolygon = this.AddFieldOfViewPolygon(\n            this.$stel,\n            glLayer,\n            currentCoordinates,\n            currentColor,\n            'Current'\n          );\n          if (currentPolygon) {\n            this.adjustmentCircles.push(currentPolygon);\n            console.log('当前位置多边形创建成功');\n          } else {\n            console.error('当前位置多边形创建失败');\n          }\n        } else {\n          console.warn('当前位置坐标无效，跳过绘制');\n        }\n\n        // 3) 视角转向（可选；不创建圆）\n        if (!isTimerUpdate && targetCoordinates && Array.isArray(targetCoordinates) && targetCoordinates.length === 5) {\n          try {\n            const centerRa = targetCoordinates.reduce((s, c) => s + c.ra, 0) / targetCoordinates.length;\n            const centerDec = targetCoordinates.reduce((s, c) => s + c.dec, 0) / targetCoordinates.length;\n            console.log(`视角转向目标: RA=${centerRa}, DEC=${centerDec}`);\n\n            // 用临时对象只做指向，不加入 layer\n            const targetObjConfig = {\n              id: 'temp_target_' + Date.now(),\n              model_data: {},\n              names: ['Target Position'],\n              types: ['Temporary'],\n              model: 'temporary'\n            };\n            const targetObj = this.$stel.createObj('circle', targetObjConfig);\n            let mm = targetObj.pos;\n            this.vec3_from_sphe(centerRa, centerDec, mm);\n            targetObj.pos = mm;\n            if (typeof targetObj.update === 'function') targetObj.update();\n\n            this.$stel.pointAndLock(targetObj, 1.0);\n            console.log('视角转向完成');\n\n            // 清理临时对象（未加入 layer，无需 remove）\n            setTimeout(() => { try { /* no-op */ } catch (_) { } }, 0);\n          } catch (error) {\n            console.error('视角转向出错:', error);\n          }\n        }\n\n      } catch (error) {\n        console.error('绘制调整点多边形时出错:', error);\n      }\n    },\n\n\n    // 绘制目标点圆形（坐标：RA/Dec，单位：度）\n    drawTargetPointCircle(targetRa, targetDec, color, name, text, clearlast) {\n      if (clearlast === undefined) clearlast = true; // 内部设置默认值\n      console.log('绘制目标点圆形', { targetRa, targetDec, color });\n\n      try {\n        // 1) 校验\n        if (!this.isValidCoordinate(targetRa) || !this.isValidCoordinate(targetDec)) {\n          console.error(text + '坐标无效:', { targetRa, targetDec });\n          return;\n        }\n\n        // 2) 清除之前的目标点\n        if (this.targetPointCircle && clearlast) {\n          try {\n            if (glLayer) {\n              glLayer.remove(this.targetPointCircle);\n              console.log('成功清除之前的' + name);\n            }\n          } catch (error) {\n            console.warn('清除之前的' + text + '时出错:', error);\n          }\n        }\n\n        // 3) 创建圆对象\n        const circle = this.AddMarkCircle(this.$stel, glLayer, 4, name); // frame=4：赤道系\n        if (!circle) {\n          console.error(text + '圆形创建失败');\n          return;\n        }\n\n        // 4) 位置（RA/Dec 度 → 3D 单位向量）\n        const mm = circle.pos;\n        this.vec3_from_sphe(targetRa, targetDec, mm);\n        circle.pos = mm;\n\n        // 5) 样式\n        if (color) {\n          const rgb = this.hexToRgb(color.stroke || color.fill || '#FF8C00');\n          const alpha = (color.fillOpacity || 0.3);\n          const borderAlpha = (color.strokeOpacity || 1.0);\n          circle.color = [rgb.r / 255, rgb.g / 255, rgb.b / 255, alpha];\n          circle.border_color = [rgb.r / 255, rgb.g / 255, rgb.b / 255, borderAlpha];\n        } else {\n          circle.color = [1, 0.55, 0, 0.3];\n          circle.border_color = [1, 0.55, 0, 1];\n        }\n        const size = 0.02;\n        circle.size = [size, size];\n\n        // 6) 更新 & 保存引用\n        if (typeof circle.update === 'function') circle.update();\n        this.targetPointCircle = circle;\n\n        console.log(text + '圆形创建成功', circle);\n      } catch (error) {\n        console.error('绘制' + text + '圆形时出错:', error);\n      }\n    },\n\n\n    // 绘制假极轴圆形\n    DrawFakePolarAxisCircle(targetRa, targetDec, color, name, text) {\n      console.log('绘制目标点圆形', { targetRa, targetDec, color });\n\n      try {\n        // 验证输入参数\n        if (!this.isValidCoordinate(targetRa) || !this.isValidCoordinate(targetDec)) {\n          console.error(text + '坐标无效:', { targetRa, targetDec });\n          return;\n        }\n\n        // 清除之前的目标点\n        if (this.fakePolarAxisCircle) {\n          try {\n            if (glLayer) {\n              glLayer.remove(this.fakePolarAxisCircle);\n              console.log('成功清除之前的' + name);\n            }\n          } catch (error) {\n            console.warn('清除之前的' + text + '时出错:', error);\n          }\n        }\n\n        // 创建目标点圆形\n        let targetCircle = this.AddMarkCircle(this.$stel, glLayer, 4, name);\n        if (targetCircle) {\n          // 设置目标点位置\n          let targetMm = targetCircle.pos;\n          this.vec3_from_sphe(targetRa, targetDec, targetMm);\n          targetCircle.pos = targetMm;\n\n          // 设置目标点颜色和样式\n          if (color) {\n            // 将十六进制颜色转换为RGB数组\n            const rgb = this.hexToRgb(color.stroke || color.fill || '#FF8C00');\n            const alpha = (color.fillOpacity || 0.3);\n            const borderAlpha = (color.strokeOpacity || 1.0);\n\n            targetCircle.color = [rgb.r / 255, rgb.g / 255, rgb.b / 255, alpha];\n            targetCircle.border_color = [rgb.r / 255, rgb.g / 255, rgb.b / 255, borderAlpha];\n          } else {\n            // 默认橙色\n            targetCircle.color = [1, 0.55, 0, 0.3];  // 橙色，半透明\n            targetCircle.border_color = [1, 0.55, 0, 1];  // 橙色边框\n          }\n\n          // 设置目标点大小\n          const targetSize = 0.02; // 固定小尺寸\n          targetCircle.size = [targetSize, targetSize];\n\n          // 保存目标点引用，用于后续清除\n          this.fakePolarAxisCircle = targetCircle;\n\n          console.log(text + '圆形创建成功', targetCircle);\n        } else {\n          console.error(text + '圆形创建失败');\n        }\n\n      } catch (error) {\n        console.error('绘制' + text + '圆形时出错:', error);\n      }\n    },\n\n    ShowConfirmDialog(Title, Text, ToDo) {\n      // window.location.reload();\n      this.nav = false;\n      this.$bus.$emit('ShowConfirmDialog', Title, Text, ToDo);\n    },\n\n    decrement(item) {\n      console.log('decrement:', item.value);\n      if (item.value > item.inputMin) {\n        item.value -= item.inputStep;\n      }\n    },\n\n    increment(item) {\n      console.log('increment:', item.value);\n      if (item.value < item.inputMax) {\n        item.value += item.inputStep;\n      }\n    },\n\n    PolarAxisMode(bool) {\n      this.isPolarAxisMode = bool;\n    },\n\n    handleGuiderCanvasClick(event) {\n      const canvas = this.$refs.guiderCanvas;\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left; // 点击坐标X\n      const y = event.clientY - rect.top;  // 点击坐标Y\n      console.log(`Clicked at: (${x}, ${y})`);\n      const CanvasWidth = window.innerWidth;\n      const CanvasHeight = window.innerHeight;\n      this.$bus.$emit('AppSendMessage', 'Vue_Command', 'GuiderCanvasClick:' + CanvasWidth + ':' + CanvasHeight + ':' + x + ':' + y);\n    },\n    connectDriver() {\n      this.isConnecting = true;\n      // this.isOpenDevicePage = false;\n      this.startLoading();\n      const DeviceType = this.CurrentDriverType;\n      for (const device of this.devices) {\n        if (device.driverType === DeviceType && device.isConnected == false) {\n          const DriverName = device.driverName;\n          if (DriverName == '') {\n            this.SendConsoleLogMsg('No driver selected', 'warning');\n            this.isConnecting = false;\n            return;\n          }\n          this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ConnectDriver:' + DriverName + ':' + DeviceType);\n          this.SendConsoleLogMsg('Start Connecting driver:' + DeviceType + ' ' + DriverName, 'info');\n          return;\n        }\n      }\n    },\n    connectDriverSuccess(devicetype) {\n      console.log('connectDriverSuccess:', devicetype);\n      this.SendConsoleLogMsg(\"connectDriverSuccess:\" + devicetype, 'info');\n      this.isConnecting = false;\n      if (this.drawer_2 == true) {\n        this.drawer_2 = false\n      }\n\n      this.stopLoading();\n    },\n    connectDriverFailed(message) {\n      console.log('connectDriverFailed:', message);\n      this.SendConsoleLogMsg(\"connectDriverFailed:\" + message, 'error');\n      this.isConnecting = false;\n      this.stopLoading();\n    },\n    disconnectDriver() {\n      const DeviceType = this.CurrentDriverType;\n      for (const device of this.devices) {\n        if (device.driverType === DeviceType && device.isConnected) {\n          this.$bus.$emit('AppSendMessage', 'Vue_Command', 'DisconnectDevice:' + device.device + \":\" + DeviceType);\n        }\n      }\n    },\n    disconnectDriversuccess(devicetype) {\n      console.log('disconnectDevicesuccess:', devicetype);\n      this.drawer_2 = false\n      if (devicetype == \"all\") {\n        this.sendMessage('Vue_Command', 'disconnectAllDevice');\n        this.SendConsoleLogMsg('Disconnect All Device', 'info');\n        this.haveDeviceConnect = false;\n        this.$bus.$emit('MainCameraConnected', 0);\n        this.$bus.$emit('MountConnected', 0);\n        this.$bus.$emit('CFWConnected', 0);\n        this.$bus.$emit('GuiderConnected', 0);\n        this.clearDeviceList();\n        this.$bus.$emit('deleteDeviceTypeAllocationList', 'all');\n        return;\n      };\n\n      for (const device of this.devices) {\n        if (device.driverType === devicetype && device.isConnected) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n      for (const device of this.ToBeConnectDevice) {\n        if (device.driverType === devicetype) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n\n      this.$bus.$emit('deleteDeviceTypeAllocationList', devicetype);\n      if (devicetype == \"MainCamera\") {\n        this.$bus.$emit('MainCameraConnected', 0);\n      } else if (devicetype == \"Mount\") {\n        this.$bus.$emit('MountConnected', 0);\n      } else if (devicetype == \"CFW\") {\n        this.$bus.$emit('CFWConnected', 0);\n      } else if (devicetype == \"Guider\") {\n        this.$bus.$emit('GuiderConnected', 0);\n      }\n    },\n\n    disconnectDriverFail(devicetype) {\n      console.log('disconnectDeviceFail:', devicetype);\n      this.drawer_2 = false\n      if (devicetype == \"all\") {\n        this.sendMessage('Vue_Command', 'disconnectAllDevice');\n        this.SendConsoleLogMsg('Disconnect All Device', 'info');\n        this.haveDeviceConnect = false;\n        this.$bus.$emit('MainCameraConnected', 0);\n        this.$bus.$emit('MountConnected', 0);\n        this.$bus.$emit('CFWConnected', 0);\n        this.$bus.$emit('GuiderConnected', 0);\n        this.clearDeviceList();\n        this.$bus.$emit('deleteDeviceTypeAllocationList', 'all');\n        return;\n      };\n\n      for (const device of this.devices) {\n        if (device.driverType === devicetype && device.isConnected) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n      for (const device of this.ToBeConnectDevice) {\n        if (device.driverType === devicetype) {\n          device.isConnected = false;\n          device.isget = false;\n          device.device = device.driverName;\n        }\n      }\n\n      this.$bus.$emit('deleteDeviceTypeAllocationList', devicetype);\n      if (devicetype == \"MainCamera\") {\n        this.$bus.$emit('MainCameraConnected', 0);\n      } else if (devicetype == \"Mount\") {\n        this.$bus.$emit('MountConnected', 0);\n      } else if (devicetype == \"CFW\") {\n        this.$bus.$emit('CFWConnected', 0);\n      } else if (devicetype == \"Guider\") {\n        this.$bus.$emit('GuiderConnected', 0);\n      }\n    },\n    loadSelectedDriverList(deviceObject) {\n      console.log('loadSelectedDriverList:', deviceObject);\n      deviceObject.forEach(device => {\n        // 假设你想要打印每个设备对象的键值对\n        for (const [driverType, driverName] of Object.entries(device)) {\n          this.devices.forEach(device => {\n            if (device.driverType === driverType && device.isConnected == false) {\n              device.device = driverName;\n              device.driverName = driverName;\n            }\n          });\n        }\n      });\n    },\n    loadBindDeviceList(deviceObject) {\n      console.log('loadBindDeviceList:', deviceObject);\n      this.$bus.$emit('loadBindDeviceList', deviceObject);\n\n    },\n    loadBindDeviceTypeList(deviceTypeObject) {\n      console.log('loadBindDeviceTypeList:', deviceTypeObject);\n      this.$bus.$emit('loadBindDeviceTypeList', deviceTypeObject);\n      deviceTypeObject.forEach(deviceType => {\n        const { Type, DeviceName, DriverName, isbind } = deviceType;\n        this.updateDevicesConnect(Type, DeviceName, DriverName, isbind);\n      });\n    },\n    updateSelectedDriver(driverType) {\n\n      this.selectedDriver = null;\n      this.devices.forEach(device => {\n        if (device.driverType === driverType) {\n          this.selectedDriver = device.driverName\n        }\n      });\n      console.log('Current drivers:', this.selectedDriver);\n    },\n    startLoading() {\n      this.loadingDeviceSelection = true;\n    },\n    stopLoading() {\n      this.loadingDeviceSelection = false;\n    },\n    deleteDeviceAllocationList(deviceName) {\n      console.log('deleteDeviceAllocationList:', deviceName);\n      this.$bus.$emit('deleteDeviceAllocationList', deviceName);\n    },\n    UnBindingDevice(type, name, driverName) {\n      console.log('UnBindingDevice:', type, name, driverName);\n      this.updateDevicesConnect(type, name, driverName, false);\n    },\n\n    displayErrorImage() {\n      console.error(\"image is error, load errorImage.svg\");\n      const canvas = document.getElementById('mainCamera-canvas');\n      const ctx = canvas.getContext('2d');\n      const image = new Image();\n\n      image.onload = () => {\n        // 获取设备像素比\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        // 调整画布尺寸以适应高清显示\n        canvas.width = image.width * devicePixelRatio;\n        canvas.height = image.height * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio); // 缩放ctx以适应高清画布\n\n        // 绘制图像\n        ctx.drawImage(image, 0, 0);\n      };\n\n      image.onerror = () => {\n        console.error(\"Failed to load image from \" + image.src);\n        // 可以在这里添加备用图像或其他错误处理逻辑\n      };\n\n      // 确保ErrorImage是有效的URL\n      image.src = ErrorImage; // 请替换为实际的图像路径\n    },\n    handleError(message, location, error = null) {\n      const errorMsg = error ? `${message} at ${location}: ${error}` : `${message} at ${location}`;\n      console.error(errorMsg);\n      this.SendConsoleLogMsg(errorMsg, 'error');\n      this.displayErrorImage(); // 显示错误图像\n    },\n    showSelectdisconnectDriver(drivername) {\n      this.showDisconnectDialog = true;\n      this.currentDisconnectDriverName = drivername;\n    },\n    confirmDisconnect() {\n      this.sendMessage('Vue_Command', 'disconnectSelectDriver:' + this.currentDisconnectDriverName);\n      this.showDisconnectDialog = false;\n    },\n\n    // 主画布点击事件\n    handleMainCanvasClick(event) {\n      // this.SendConsoleLogMsg('触发鼠标点击事件:', 'info');\n      if (!this.enableMainCanvasClick || this.isDragging || this.drawImgData == null) return; // 如果画布不可点击，则不处理点击事件\n      // console.log('触发鼠标点击事件:', event);\n      const canvas = this.$refs.mainCanvas;\n      if (!canvas) return; // 确保 canvas 元素存在\n      const rect = canvas.getBoundingClientRect();// 获取 canvas 元素的边界矩形\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      console.log('Mouse clicked at:', x, y);\n      if (!this.isFocusLoopShooting) {\n        // 期望中心（画布坐标 → 传感器像素坐标）\n        const desiredCenterX = (x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2;\n        const desiredCenterY = (y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2;\n\n        // ROI 边长（像素，偶数化），来源于固定 RedBoxSideLength\n        let side = this.RedBoxSideLength / this.cameraBin;\n        side = Math.max(2, Math.floor(side));\n        if (side % 2 !== 0) side += 1; // 强制偶数\n\n        // 将 ROI 左上角按中心反推，并约束在图像范围内\n        const half = side / 2;\n        const imgW = this.mainCameraSizeX;\n        const imgH = this.mainCameraSizeY;\n\n        let roiX = desiredCenterX - half;\n        let roiY = desiredCenterY - half;\n\n        // 边界约束\n        const maxX = Math.max(0, imgW - side);\n        const maxY = Math.max(0, imgH - side);\n        roiX = Math.min(Math.max(0, roiX), maxX);\n        roiY = Math.min(Math.max(0, roiY), maxY);\n\n        // 偶数对齐位置\n        roiX = Math.floor(roiX);\n        roiY = Math.floor(roiY);\n        if (roiX % 2 !== 0) roiX += 1;\n        if (roiY % 2 !== 0) roiY += 1;\n\n        this.ROI_x = roiX;\n        this.ROI_y = roiY;\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendRedBoxState:' + this.RedBoxSideLength + ':' + this.ROI_x + ':' + this.ROI_y);\n      } else {\n        this.selectStarX = ((x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2 - this.ROI_x) * this.cameraBin; // 计算选择位置的x坐标\n        this.selectStarY = ((y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2 - this.ROI_y) * this.cameraBin; // 计算选择位置的y坐标\n\n        if (this.selectStarX >= 0 && this.selectStarX < this.RedBoxSideLength &&\n          this.selectStarY >= 0 && this.selectStarY < this.RedBoxSideLength) {\n          this.SendConsoleLogMsg('Select Star is in ROI', 'info');\n        } else {\n          this.SendConsoleLogMsg('Select Star is not in ROI', 'error');\n          this.selectStarX = -1;\n          this.selectStarY = -1;\n        }\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendSelectStars:' + this.selectStarX + ':' + this.selectStarY);\n      }\n      this.drawImageData();\n    },\n\n    // 主画布拖动\n    handleMouseDown(event) {\n      // this.SendConsoleLogMsg('触发鼠标按下事件:', 'info');\n      if (this.isDragging || this.drawImgData == null) return;\n      this.isDragging = true;\n      this.startX = event.clientX;\n      this.startY = event.clientY;\n      this.currentX = event.clientX;\n      this.currentY = event.clientY;\n\n      // 设置一个定时器，每100ms执行一次鼠标移动的逻辑\n      this.moveIntervalId = setInterval(() => {\n        if (!this.isDragging) return;\n\n        const dx = this.startX - this.currentX;\n        const dy = this.startY - this.currentY;\n        if (isNaN(dx) || isNaN(dy)) {\n          return;\n        }\n        let newVisibleX = this.visibleX + dx / window.innerWidth * this.visibleWidth;\n        let newVisibleY = this.visibleY + dy / window.innerHeight * this.visibleHeight;\n        if (newVisibleX < 0) {\n          newVisibleX = 0;\n        }\n        if (newVisibleY < 0) {\n          newVisibleY = 0;\n        }\n        if (newVisibleX > this.mainCameraSizeX) {\n          newVisibleX = this.mainCameraSizeX;\n        }\n        if (newVisibleY > this.mainCameraSizeY) {\n          newVisibleY = this.mainCameraSizeY;\n        }\n\n        this.visibleX = newVisibleX;\n        this.visibleY = newVisibleY;\n\n        this.startX = this.currentX;\n        this.startY = this.currentY;\n        this.drawImageData();\n        // this.SendConsoleLogMsg('拖动事件,拖动距离:' + dx + ',' + dy, 'info');\n      }, 100);\n    },\n    handleMouseMove(event) {\n      // this.SendConsoleLogMsg('触发鼠标移动事件:', 'info');\n      if (!this.isDragging) return;\n      this.currentX = event.clientX;\n      this.currentY = event.clientY;\n    },\n    handleMouseUp(event) {\n      // this.SendConsoleLogMsg('触发鼠标抬起事件:', 'info');\n      this.isDragging = false;\n\n      // 清除定时器\n      clearInterval(this.moveIntervalId);\n      this.moveIntervalId = null;\n    },\n    handleWheel(event) {\n      // this.SendConsoleLogMsg('触发鼠标滚轮事件:', 'info');\n      if (this.drawImgData == null) return;\n      const scaleChange = event.deltaY > 0 ? 0.1 : -0.1; // 根据滚轮的滚动方向，计算缩放比例的变化量\n      let newScale = this.scale + scaleChange; // 更新缩放比例\n      if (newScale < 0.1) {\n        newScale = 0.1;\n      }\n      if (newScale > 1) {\n        newScale = 1;\n      }\n\n      // 如果已经有一个待执行的缩放操作，则直接返回\n      if (this.pendingScaleChange) {\n        return;\n      }\n\n      // 标记有一个待执行的缩放操作\n      this.pendingScaleChange = true;\n\n      // 使用 requestAnimationFrame 来控制缩放操作的执行频率\n      requestAnimationFrame(() => {\n        if (newScale != this.scale) {\n          this.scale = newScale; // 更新缩放比例\n          this.$bus.$emit('setScale', this.scale);\n          this.drawImageData();\n          this.SendConsoleLogMsg('缩放比例变化,缩放比例:' + newScale, 'info');\n        } else {\n          this.SendConsoleLogMsg('缩放比例没有变化,缩放比例:' + this.scale, 'info');\n        }\n        this.pendingScaleChange = false; // 清除待执行的缩放操作标记\n      });\n    },\n\n    handleMainCanvasTouch(event) {\n      // this.SendConsoleLogMsg('触发触摸事件:', 'info');\n      if (!this.enableMainCanvasClick || this.isDragging || this.drawImgData == null) return; // 如果画布不可点击，则不处理点击事件\n      // console.log('触发触摸事件:', event);\n      if (!this.enableMainCanvasClick || !event.touches || event.touches.length === 0) return;\n      const canvas = this.$refs.mainCanvas;\n      if (!canvas) return; // 确保 canvas 元素存在\n      const touch = event.touches[0];\n      const rect = canvas.getBoundingClientRect();// 获取 canvas 元素的边界矩形\n      const x = touch.clientX - rect.left;\n      const y = touch.clientY - rect.top;\n      console.log('Touch at:', x, y);\n      event.preventDefault();// 阻止默认事件，如页面滚动\n      if (!this.isFocusLoopShooting) {\n        // 期望中心（画布坐标 → 传感器像素坐标）\n        const desiredCenterX = (x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2;\n        const desiredCenterY = (y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2;\n\n        // ROI 边长（像素，偶数化），来源于固定 RedBoxSideLength\n        let side = this.RedBoxSideLength / this.cameraBin;\n        side = Math.max(2, Math.floor(side));\n        if (side % 2 !== 0) side += 1; // 强制偶数\n\n        // 将 ROI 左上角按中心反推，并约束在图像范围内\n        const half = side / 2;\n        const imgW = this.mainCameraSizeX;\n        const imgH = this.mainCameraSizeY;\n\n        let roiX = desiredCenterX - half;\n        let roiY = desiredCenterY - half;\n\n        // 边界约束\n        const maxX = Math.max(0, imgW - side);\n        const maxY = Math.max(0, imgH - side);\n        roiX = Math.min(Math.max(0, roiX), maxX);\n        roiY = Math.min(Math.max(0, roiY), maxY);\n\n        // 偶数对齐位置\n        roiX = Math.floor(roiX);\n        roiY = Math.floor(roiY);\n        if (roiX % 2 !== 0) roiX += 1;\n        if (roiY % 2 !== 0) roiY += 1;\n\n        this.ROI_x = roiX;\n        this.ROI_y = roiY;\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendRedBoxState:' + this.RedBoxSideLength + ':' + this.ROI_x + ':' + this.ROI_y);\n      } else {\n        this.selectStarX = ((x / window.innerWidth * this.visibleWidth) + this.visibleX - this.visibleWidth / 2 - this.ROI_x) * this.cameraBin; // 计算选择位置的x坐标\n        this.selectStarY = ((y / window.innerHeight * this.visibleHeight) + this.visibleY - this.visibleHeight / 2 - this.ROI_y) * this.cameraBin; // 计算选择位置的y坐标\n\n        if (this.selectStarX >= 0 && this.selectStarX < this.RedBoxSideLength &&\n          this.selectStarY >= 0 && this.selectStarY < this.RedBoxSideLength) {\n          this.SendConsoleLogMsg('Select Star is in ROI', 'info');\n        } else {\n          this.SendConsoleLogMsg('Select Star is not in ROI', 'error');\n          this.selectStarX = -1;\n          this.selectStarY = -1;\n        }\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendSelectStars:' + this.selectStarX + ':' + this.selectStarY);\n      }\n      this.drawImageData();\n    },\n    handleTouchStart(event) {\n      if (this.drawImgData == null) return;\n      // this.SendConsoleLogMsg('触发触摸开始事件:', 'info');\n      if (event.touches.length === 1) { // 单指触摸，开始拖动\n        this.isOneTouch = true;\n        // this.SendConsoleLogMsg('触发单指触摸事件', 'info');\n        this.isDragging = true;\n        this.startTouchX[0] = event.touches[0].clientX;\n        this.startTouchY[0] = event.touches[0].clientY;\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        // 清除可能存在的双指触摸的定时器\n        if (this.zoomIntervalId) {\n          clearInterval(this.zoomIntervalId);\n          this.zoomIntervalId = null;\n        }\n\n\n        this.handleMainCanvasTouch(event);\n      } else if (event.touches.length >= 2) { // 双指触摸，开始缩放\n        this.isOneTouch = false;\n        // this.SendConsoleLogMsg('触发双指触摸事件', 'info');\n        this.isDragging = true;\n        // 计算两个触摸点之间的距离\n        const dx = this.currentTouchX[0] - this.currentTouchX[1];\n        const dy = this.currentTouchY[0] - this.currentTouchY[1];\n        this.startTouchDistance = Math.sqrt(dx * dx + dy * dy);\n        // 清除可能存在的单指触摸的定时器\n        if (this.moveIntervalId) {\n          clearInterval(this.moveIntervalId);\n          this.moveIntervalId = null;\n        }\n\n\n      } else {\n        // this.SendConsoleLogMsg('触发多指触摸事件，获取当前触摸点数量:' + event.touches.length, 'info');\n      }\n\n    },\n\n    handleTouchMove(event) {\n      // this.SendConsoleLogMsg('触发触摸移动事件:', 'info');\n      if (!this.isDragging || this.drawImgData == null) return;\n      if (event.touches.length == 1) {\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        if (this.zoomIntervalId) {\n          clearInterval(this.zoomIntervalId);\n          this.zoomIntervalId = null;\n        }\n        if (this.moveIntervalId != null) {\n          return;\n        }\n        // 设置一个定时器，每100ms执行一次触摸移动的逻辑\n        this.moveIntervalId = setInterval(() => {\n          // console.log('执行触摸移动!');\n          if (!this.isDragging || !this.isOneTouch) return;\n\n          const dx = this.startTouchX[0] - this.currentTouchX[0];\n          const dy = this.startTouchY[0] - this.currentTouchY[0];\n          if (isNaN(dx) || isNaN(dy)) {\n            return;\n          }\n          if (dx == 0 && dy == 0) {\n            return;\n          }\n\n          let newVisibleX = this.visibleX + dx / window.innerWidth * this.visibleWidth;\n          let newVisibleY = this.visibleY + dy / window.innerHeight * this.visibleHeight;\n          if (newVisibleX < 0) {\n            newVisibleX = 0;\n          }\n          if (newVisibleY < 0) {\n            newVisibleY = 0;\n          }\n          if (newVisibleX > this.mainCameraSizeX) {\n            newVisibleX = this.mainCameraSizeX;\n          }\n          if (newVisibleY > this.mainCameraSizeY) {\n            newVisibleY = this.mainCameraSizeY;\n          }\n\n          this.visibleX = newVisibleX;\n          this.visibleY = newVisibleY;\n\n          this.startTouchX[0] = this.currentTouchX[0];\n          this.startTouchY[0] = this.currentTouchY[0];\n\n          this.drawImageData();\n        }, 100);\n\n      } else if (event.touches.length >= 2) {\n        this.currentTouchX[0] = event.touches[0].clientX;\n        this.currentTouchY[0] = event.touches[0].clientY;\n        this.currentTouchX[1] = event.touches[1].clientX;\n        this.currentTouchY[1] = event.touches[1].clientY;\n\n        // 清除可能存在的单指触摸的定时器\n        if (this.moveIntervalId) {\n          clearInterval(this.moveIntervalId);\n          this.moveIntervalId = null;\n        }\n        if (this.zoomIntervalId != null) {\n          return;\n        }\n        // 设置一个定时器，每100ms执行一次缩放逻辑\n        this.zoomIntervalId = setInterval(() => {\n          if (!this.isDragging || !this.isOneTouch) return;\n          const dx = this.currentTouchX[0] - this.currentTouchX[1];\n          const dy = this.currentTouchY[0] - this.currentTouchY[1];\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          this.SendConsoleLogMsg('距离变化 distance:' + distance, 'info');\n          if (this.startTouchDistance == 0) {\n            this.startTouchDistance = distance;\n          }\n          // 计算缩放比例的变化量\n          const scaleChange = distance / this.startTouchDistance;\n          this.SendConsoleLogMsg('距离变化比例 scaleChange:' + scaleChange, 'info');\n          let newScale = this.scale * scaleChange; // 更新缩放比例\n          if (newScale < 0.1) {\n            newScale = 0.1;\n          }\n          if (newScale > 1) {\n            newScale = 1;\n          }\n          if (newScale != this.scale) {\n            this.SendConsoleLogMsg('缩放比例变化,缩放比例:' + newScale, 'info');\n            this.scale = newScale; // 更新缩放比例\n            this.$bus.$emit('setScale', this.scale);\n            this.drawImageData();\n          } else {\n            this.SendConsoleLogMsg('缩放比例没有变化,缩放比例:' + this.scale, 'info');\n          }\n          this.startTouchDistance = distance; // 更新两个触摸点之间的距离\n        }, 100);\n      } else {\n        this.SendConsoleLogMsg('触发多指触摸事件，获取当前触摸点数量:' + event.touches.length, 'info');\n      }\n    },\n\n    handleTouchEnd(event) {\n      // this.SendConsoleLogMsg('触发触摸结束事件:', 'info');\n      this.isDragging = false; // 停止拖动\n      // 清除定时器\n      if (this.moveIntervalId) {\n        clearInterval(this.moveIntervalId);\n        this.moveIntervalId = null;\n      }\n      if (this.zoomIntervalId) {\n        clearInterval(this.zoomIntervalId);\n        this.zoomIntervalId = null;\n      }\n    },\n\n    ScaleChange(type) {\n      if (this.drawImgData == null) return;\n      if (type == '+') {\n        this.scale -= 0.1;\n      } else if (type == '-') {\n        this.scale += 0.1;\n      }\n      if (this.scale < 0.1) {\n        this.scale = 0.1;\n      }\n      if (this.scale > 1) {\n        this.scale = 1;\n      }\n      this.$bus.$emit('setScale', this.scale);\n      this.drawImageData();\n    },\n\n    // 显示ROI图像\n    showRoiImage(fileName, destX, destY) {\n      if (this.RedBoxSideLength == 0 || this.RedBoxSideLength == null) {\n        this.SendConsoleLogMsg('RedBoxSideLength is 0 or null', 'error');\n        return;\n      }\n      if (this.isProcessingImage) {\n        this.SendConsoleLogMsg('Image is being transmitted, current processing is slow, skipping one frame.', 'warning');\n        return;\n      }\n      this.isProcessingImage = true;\n      const imagePath = 'img/' + fileName;\n      // 创建一个AbortController实例来取消fetch请求\n      const fetchController = new AbortController();\n      const fetchSignal = fetchController.signal;\n\n      // const startDownloadTime = performance.now();\n\n      // 使用 fetch API 获取二进制数据\n      fetch(imagePath, { cache: 'no-store', signal: fetchSignal })\n        .then(response => response.arrayBuffer())\n        .then(buffer => {\n          // const endDownloadTime = performance.now();\n          // const downloadTime = endDownloadTime - startDownloadTime;\n          if (this.isFocusLoopShooting) this.$bus.$emit('AppSendMessage', 'Vue_Command', 'showRoiImageSuccess:true');\n          else this.$bus.$emit('AppSendMessage', 'Vue_Command', 'showRoiImageSuccess:false');\n          let time1 = performance.now();\n          let src, imgData, targetImg8;\n          try {\n            const uint16Array = new Uint16Array(buffer);\n            let newWidth = parseInt(this.RedBoxSideLength / this.cameraBin);\n            let newHeight = parseInt(this.RedBoxSideLength / this.cameraBin);\n            if (newWidth % 2 != 0) {\n              newWidth = newWidth - 1;\n            }\n            if (newHeight % 2 != 0) {\n              newHeight = newHeight - 1;\n            }\n            if (uint16Array.length !== newWidth * newHeight) {\n              this.SendConsoleLogMsg('uint16Array.length (' + uint16Array.length + ') !== newWidth * newHeight (' + newWidth * newHeight + ')', 'error');\n              return;\n            }\n            // 创建一个空的 Mat 对象\n            src = new cv.Mat(newHeight, newWidth, cv.CV_16UC1);\n            src.data16U.set(uint16Array);\n            let time2 = performance.now();\n            this.SendConsoleLogMsg('创建mat对象时间: ' + (time2 - time1).toFixed(0) + 'ms', 'info');\n            if (this.lastImageProcessParams.isColorCamera == 'true' || this.lastImageProcessParams.isColorCamera == 'True' || this.lastImageProcessParams.isColorCamera) {\n              targetImg8 = this.applyStretchAndGain(src, this.lastImageProcessParams.analysis, 'bayer', this.lastImageProcessParams.CFA, this.lastImageProcessParams.blackLevel, this.lastImageProcessParams.whiteLevel);\n\n            } else {\n              targetImg8 = this.applyStretchAndGain(src, this.lastImageProcessParams.analysis, 'gray', this.lastImageProcessParams.CFA, this.lastImageProcessParams.blackLevel, this.lastImageProcessParams.whiteLevel);\n     \n            }\n            time1 = performance.now();\n            this.SendConsoleLogMsg('applyStretchAndGain时间: ' + (time1 - time2).toFixed(0) + 'ms', 'info');\n            src.delete();\n            src = null;\n\n            // 将 Mat 对象转换回 ImageData 对象\n            imgData = new ImageData(new Uint8ClampedArray(targetImg8.data), targetImg8.cols, targetImg8.rows);\n            targetImg8.delete();\n            targetImg8 = null;\n            // 在指定位置开始绘制图像\n            // this.bufferCtx.clearRect(this.ROI_x, this.ROI_y, targetImg8.cols, targetImg8.rows);\n            this.bufferCtx.putImageData(imgData, this.ROI_x, this.ROI_y);\n            // this.SendConsoleLogMsg('绘制一次ROI数据:' + fileName + ':' + this.ROI_x + ':' + this.ROI_y, 'info');\n            // 标注识别到的星点位置\n            // time2 = performance.now();\n            // this.SendConsoleLogMsg('绘制在缓存画布耗时: ' + (time2 - time1).toFixed(0) + 'ms', 'info');\n            this.drawImageData();\n            // time1 = performance.now();\n            // this.SendConsoleLogMsg('drawImageData时间: ' + (time1 - time2).toFixed(0) + 'ms', 'info');\n            this.focuserPictureFileName = fileName;\n            // const processTime = performance.now() - downloadTime;\n            // this.SendConsoleLogMsg(`ROI的执行时间 下载: ${downloadTime.toFixed(0)}ms, 处理: ${processTime.toFixed(0)}ms`, 'info');\n\n          } catch (error) {\n            console.error(`处理图像失败: ${imagePath}`, error);\n          } finally {\n            // 确保 Mat 对象和 ImageData 对象被删除\n            if (src && !src.isDeleted()) {\n              src.delete();\n              src = null; // 添加这行代码，确保 src 对象被清理\n            }\n            if (targetImg8 && !targetImg8.isDeleted()) {\n              targetImg8.delete();\n              targetImg8 = null; // 添加这行代码，确保 originalImg8 对象被清理\n            }\n            // 确保 buffer 被清理\n            buffer = null;\n            this.isProcessingImage = false;\n          }\n        })\n        .catch(error => {\n          if (error.name === 'AbortError') {\n            console.log('Fetch request cancelled');\n          } else {\n            console.error(`获取图像失败: ${imagePath}`, error);\n          }\n          this.isProcessingImage = false;\n        });\n\n      // 在组件卸载时取消 fetch 请求\n      this.$once('hook:beforeDestroy', () => {\n        fetchController.abort();\n      });\n    },\n    setRedBoxState(length, x, y) {\n      this.SendConsoleLogMsg('setRedBoxState:' + length + ',' + x + ',' + y, 'info');\n      this.$bus.$emit('setRedBoxPosition', x, y);\n      this.$bus.$emit('setRedBoxSideLength', length);\n    },\n    setFocuserState(state) {\n      if (state === 'selectstars') {\n        this.isFocusLoopShooting = true;\n      } else {\n        this.isFocusLoopShooting = false;\n      }\n    },\n    setShowSelectStar(state) {\n      this.showSelectStar = state;\n    },\n    RedBoxSizeChange(length) {\n      this.RedBoxSideLength = parseInt(length);\n      // this.$bus.$emit('AppSendMessage', 'Vue_Command', 'sendRedBoxState:' + this.RedBoxSideLength + ':' + this.ROI_x + ':' + this.ROI_y);\n    },\n    setMainCameraParameters(parameters) {\n      for (const parameter in parameters) {\n        const item = this.MainCameraConfigItems.find(item => item.label === parameter);\n        if (item) {\n          item.value = parameters[parameter];\n        } else {\n          if (parameter == 'RedBoxSize') {\n            this.$bus.$emit('setRedBoxSideLength', parameters[parameter]);\n            this.RedBoxSideLength = parseInt(parameters[parameter]);\n          } else if (parameter == 'ROI_x') {\n            this.ROI_x = parseFloat(parameters[parameter]);\n          } else if (parameter == 'ROI_y') {\n            this.ROI_y = parseFloat(parameters[parameter]);\n          } \n          else {\n            console.error(`未找到参数：${parameter}`);\n          }\n        }\n      }\n      this.confirmConfiguration(this.MainCameraConfigItems);\n    },\n    showCanvas(canvas) {\n      if (canvas === 'Stel') {\n        this.currentcanvas = 'Stel';\n        this.showStelCanvas();\n      }\n      else if (canvas === 'MainCamera') {\n\n        this.currentcanvas = 'MainCamera';\n        this.showMainCameraCanvas();\n        this.drawImageData()\n      }\n      else if (canvas === 'GuiderCamera') {\n        this.currentcanvas = 'GuiderCamera';\n        this.showGuiderCameraCanvas();\n      } else {\n        this.SendConsoleLogMsg(\"unknown canvas: \" + canvas, 'error');\n      }\n    },\n    // 现有的加减函数需要修改\n    decrementAndNotify(item) {\n      if (item.value > item.inputMin) {\n        item.value -= item.inputStep;\n        this.handleConfigChange(item.label, item.value);\n      }\n    },\n\n    incrementAndNotify(item) {\n      if (item.value < item.inputMax) {\n        item.value += item.inputStep;\n        this.handleConfigChange(item.label, item.value);\n      }\n    },\n\n    // 通用的配置更改处理函数\n    handleConfigChange(label, value) {\n      console.log(`配置已更改: ${label} = ${value}`);\n      if (value !== '') {\n        // console.log(item.label, item.value);\n        this.SendConsoleLogMsg(label + ':' + value, 'info');\n        this.$bus.$emit(label, label + ':' + value);\n      } else if (value == '' && label === 'Focal Length (mm)') {\n        this.SendConsoleLogMsg(label + 'is NULL', 'info');\n        this.$bus.$emit(item.label, item.label + ':');\n      }\n    },\n    // 校准相关方法\n    startCalibrationProcess() {\n      this.calibrationInfo.isCalibrating = true;\n      this.calibrationInfo.calibrationState = 'running';\n      this.calibrationInfo.calibrationStep = 0;\n      this.calibrationInfo.calibrationMessage = this.$t('Preparing to start focuser travel calibration...');\n      console.log('App: Calibration started:', this.calibrationInfo);\n    },\n\n    updateCalibrationInfo(step, message, state) {\n      try {\n        this.calibrationInfo.calibrationStep = step;\n        // 如果消息是国际化键，则翻译它\n        if (message && typeof message === 'string') {\n          this.calibrationInfo.calibrationMessage = this.$t(message);\n        } else {\n          this.calibrationInfo.calibrationMessage = message;\n        }\n        if (state) {\n          this.calibrationInfo.calibrationState = state;\n        }\n        if (step === 0) {\n          this.calibrationInfo.isCalibrating = true;\n        }\n        console.log('App: Calibration info updated:', this.calibrationInfo);\n      } catch (error) {\n        console.error('Error in updateCalibrationInfo:', error);\n      }\n    },\n\n    endCalibration() {\n      this.calibrationInfo.isCalibrating = false;\n      this.calibrationInfo.calibrationState = 'idle';\n      this.calibrationInfo.calibrationStep = 0;\n      this.calibrationInfo.calibrationMessage = '';\n      console.log('App: Calibration ended');\n    },// 自动对焦相关方法 - [AUTO_FOCUS_UI_ENHANCEMENT]\n    startAutoFocusProcess() {\n      this.autoFocusInfo.isRunning = true;\n      this.autoFocusInfo.state = 'running';\n      this.autoFocusInfo.step = 0;\n      this.autoFocusInfo.message = this.$t('Preparing to start auto focus...');\n      console.log('App: Auto focus started:', this.autoFocusInfo);\n    },\n\n    updateAutoFocusStep(step, message) {\n      try {\n        \n        this.autoFocusInfo.step = step;\n        this.autoFocusInfo.message = message;\n        if (step === 0) {\n          this.autoFocusInfo.isRunning = true;\n        }\n        console.log('App: Auto focus info updated:', this.autoFocusInfo);\n      } catch (error) {\n        console.error('Error in updateAutoFocusStep:', error);\n      }\n    },\n\n    endAutoFocus() {\n      this.autoFocusInfo.isRunning = false;\n      this.autoFocusInfo.state = 'idle';\n      this.autoFocusInfo.step = 0;\n      this.autoFocusInfo.message = '';\n      console.log('App: Auto focus ended');\n    },\n  },\n  computed: {\n    nav: {\n      get: function () {\n        console.log('nav:', this.$store.state.showNavigationDrawer);\n        return this.$store.state.showNavigationDrawer\n      },\n      set: function (v) {\n        if (this.$store.state.showNavigationDrawer !== v) {\n          console.log('nav:', this.$store.state.showNavigationDrawer);\n          this.$store.commit('toggleBool', 'showNavigationDrawer')\n        }\n      }\n    },\n    storeCurrentLocation: function () {\n      return this.$store.state.currentLocation\n    },\n    getQTClientVersionColor() {\n      if (this.QTClientVersion === 'Not connected') {\n        return 'rgba(255, 0, 0, 0.5)'; // 红色，透明度 0.5\n      } else {\n        return 'rgba(255, 255, 255, 0.5)'; // 默认白色，透明度 0.5\n      }\n    },\n    isMobile() {\n      var ua = navigator.userAgent || '';\n      var touch = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0);\n      var uaDataMobile = null;\n      // 兼容老浏览器：避免可选链\n      if (navigator.userAgentData && typeof navigator.userAgentData.mobile !== 'undefined') {\n        uaDataMobile = navigator.userAgentData.mobile;\n      }\n      var mobileLike = /Android|iPhone|iPad|iPod|Mobile|Tablet/i.test(ua);\n      return (uaDataMobile !== null ? uaDataMobile : mobileLike) && !!touch;\n    },\n    isDesktop() {\n      return !this.isMobile;\n    },\n    isMountConnected() {\n      try {\n        const dev = this.devices && this.devices.find(d => d.driverType === 'Mount');\n        return !!(dev && dev.isConnected);\n      } catch (e) {\n        return false;\n      }\n    },\n    flipEtaSeconds() {\n      try {\n        const item = this.MountConfigItems && this.MountConfigItems.find(i => i.label === 'Flip ETA');\n        const raw = item ? (item.displayValue != null ? String(item.displayValue) : String(item.value || '')) : '';\n        const m = raw.match(/^(-)?(\\d{1,2}):(\\d{1,2}):(\\d{1,2})$/);\n        if (!m) return 999999;\n        const sign = m[1] === '-' ? -1 : 1;\n        const h = parseInt(m[2], 10) || 0;\n        const mi = parseInt(m[3], 10) || 0;\n        const s = parseInt(m[4], 10) || 0;\n        const total = sign * (h * 3600 + mi * 60 + s);\n        return Number.isFinite(total) ? total : 999999;\n      } catch (e) {\n        return 999999;\n      }\n    },\n  },\n  watch: {\n    storeCurrentLocation: function (loc) {\n      const DD2R = Math.PI / 180\n      this.$stel.core.observer.latitude = loc.lat * DD2R\n      this.$stel.core.observer.longitude = loc.lng * DD2R\n      this.$stel.core.observer.elevation = loc.alt\n\n      // At startup, we need to wait for the location to be set before deciding which\n      // startup time to set so that it's night time.\n      if (!this.startTimeIsSet) {\n        this.$stel.core.observer.utc = swh.getTimeAfterSunset(this.$stel)\n        this.startTimeIsSet = true\n      }\n      // Init of time and date is complete\n      this.$store.commit('setValue', { varName: 'initComplete', newValue: true })\n    },\n    $route: function () {\n      // react to route changes...\n      this.setStateFromQueryArgs()\n    },\n    CurrentDriverType(newVal) {\n      // 当 CurrentDriverType 变化时，更新 selectedDriver\n      this.updateSelectedDriver(newVal);\n    }\n  },\n  mounted: function () {\n    // // 阻止默认的触摸行为\n    // document.addEventListener('touchstart', this.preventDefault, { passive: false });\n    // document.addEventListener('touchmove', this.preventDefault, { passive: false });\n    // document.addEventListener('touchend', this.preventDefault, { passive: false });\n\n    // // 阻止默认的鼠标行为\n    // document.addEventListener('mousedown', this.preventDefault, { passive: false });\n    // document.addEventListener('mousemove', this.preventDefault, { passive: false });\n    // document.addEventListener('mouseup', this.preventDefault, { passive: false });\n\n    // // 阻止默认的滚轮行为\n    // document.addEventListener('wheel', this.preventDefault, { passive: false });\n\n    let that = this\n\n    this.getLocationHostName();\n\n    this.loadImageToCanvasMainCamera();\n    this.loadImageToCanvasGuiderCamera();\n\n    this.initCanvas();\n    this.addEventListeners();\n\n    for (const i in this.$stellariumWebPlugins()) {\n      const plugin = this.$stellariumWebPlugins()[i]\n      if (plugin.onAppMounted) {\n        plugin.onAppMounted(that)\n      }\n    }\n\n    this.connect();\n    this.setupNetworkStatusListener();\n\n    // 使用 Promise 检查 OpenCV.js 是否加载完成\n    this.loadOpenCv().then(() => {\n      if (!this._isDestroyed) { // 检查组件是否已销毁\n        console.log('OpenCV.js is ready');\n        this.onCvReady();  // 调用 OpenCV 准备好的回调\n      }\n    }).catch(error => {\n      console.error('Error loading OpenCV.js:', error);\n    });\n\n    // const script = document.createElement('script');\n    // script.src = 'https://docs.opencv.org/4.5.5/opencv.js';\n    // script.async = true;\n    // script.onload = () => this.onCvReady();\n    // document.head.appendChild(script);\n\n    import('@/assets/js/stellarium-web-engine.wasm').then(f => {\n      if (!this._isDestroyed) { // 再次检查组件是否已销毁\n        // Initialize the StelWebEngine viewer singleton\n        // After this call, the StelWebEngine state will always be available in vuex store\n        // in the $store.stel object in a reactive way (useful for vue components).\n        // To modify the state of the StelWebEngine, it's enough to call/set values directly on the $stel object\n        try {\n          swh.initStelWebEngine(that.$store, f.default, that.$refs.stelCanvas, function () {\n            // Start auto location detection (even if we don't use it)\n            swh.getGeolocation().then(p => swh.geoCodePosition(p, that)).then((loc) => {\n              that.$store.commit('setAutoDetectedLocation', loc)\n            }, (error) => { console.log(error) })\n\n            that.$stel.setFont('regular', process.env.BASE_URL + 'fonts/Roboto-Regular.ttf', 1.38)\n            that.$stel.setFont('bold', process.env.BASE_URL + 'fonts/Roboto-Bold.ttf', 1.38)\n            that.$stel.core.constellations.show_only_pointed = false\n\n            that.setStateFromQueryArgs()\n            that.guiComponent = 'Gui'\n            for (const i in that.$stellariumWebPlugins()) {\n              const plugin = that.$stellariumWebPlugins()[i]\n              if (plugin.onEngineReady) {\n                plugin.onEngineReady(that)\n              }\n            }\n\n            if (!that.dataSourceInitDone) {\n              // Set all default data sources\n              const core = that.$stel.core\n              core.stars.addDataSource({ url: process.env.BASE_URL + 'skydata/stars' })\n              core.stars.addDataSource({ url: process.env.BASE_URL + 'skydata/stars_base' })\n              core.stars.addDataSource({ url: process.env.BASE_URL + 'skydata/stars_extend' })\n              core.dss.addDataSource({ url: process.env.BASE_URL + 'skydata/dss/v1' })\n              // core.stars.addDataSource({ url: process.env.BASE_URL + 'skydata/stars' })\n\n              // Allow to specify a custom path for sky culture data\n              if (that.$route.query.sc) {\n                const key = that.$route.query.sc.substring(that.$route.query.sc.lastIndexOf('/') + 1)\n                core.skycultures.addDataSource({ url: that.$route.query.sc, key: key })\n                core.skycultures.current_id = key\n              } else {\n                core.skycultures.addDataSource({ url: process.env.BASE_URL + 'skydata/skycultures/western', key: 'western' })\n              }\n\n              core.dsos.addDataSource({ url: process.env.BASE_URL + 'skydata/dso' })\n              core.landscapes.addDataSource({ url: process.env.BASE_URL + 'skydata/landscapes/guereins', key: 'guereins' })\n              core.milkyway.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/milkyway' })\n              // core.dss.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/dss' })\n              core.minor_planets.addDataSource({ url: process.env.BASE_URL + 'skydata/mpcorb.dat', key: 'mpc_asteroids' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/moon', key: 'moon' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/sun', key: 'sun' })\n              core.planets.addDataSource({ url: process.env.BASE_URL + 'skydata/surveys/sso/moon', key: 'default' })\n              core.comets.addDataSource({ url: process.env.BASE_URL + 'skydata/CometEls.txt', key: 'mpc_comets' })\n              core.satellites.addDataSource({ url: process.env.BASE_URL + 'skydata/tle_satellite.jsonl.gz', key: 'jsonl/sat' })\n\n              // Mount Pointing\n              glStel = that.setGloabalStel(that.$stel);\n              glLayer = that.setGlobalLayer(that.$stel);\n              glTestCircle = that.testAddCircle(that.$stel, glLayer);\n\n            }\n          })\n        } catch (e) {\n          this.$store.commit('setValue', { varName: 'wasmSupport', newValue: false })\n        }\n      }\n    });\n\n    window.addEventListener('load', () => {\n      // 页面完全加载\n      this.SendConsoleLogMsg('页面已完全加载', 'info');\n      this.$bus.$emit('AppSendMessage', 'Process_Command_Return', 'VueClientVersion:' + process.env.VUE_APP_VERSION);\n    })\n\n    document.addEventListener('DOMContentLoaded', () => {\n      // DOM加载完成\n      this.SendConsoleLogMsg('DOM已加载完成', 'info');\n    })\n\n  },\n  // 在组件销毁时移除\n  beforeDestroy() {\n    document.removeEventListener('touchstart', this.preventDefault);\n    document.removeEventListener('touchmove', this.preventDefault);\n    document.removeEventListener('touchend', this.preventDefault);\n\n    document.removeEventListener('mousedown', this.preventDefault);\n    document.removeEventListener('mousemove', this.preventDefault);\n    document.removeEventListener('mouseup', this.preventDefault);\n\n    document.removeEventListener('wheel', this.preventDefault);\n\n    // 清理极轴校准相关的圆圈\n    if (this.calibrationCircles) {\n      this.calibrationCircles.forEach(circle => {\n        if (glLayer && circle) {\n          glLayer.remove(circle);\n        }\n      });\n      this.calibrationCircles = [];\n    }\n\n    if (this.adjustmentCircles) {\n      this.adjustmentCircles.forEach(circle => {\n        if (glLayer && circle) {\n          glLayer.remove(circle);\n        }\n      });\n      this.adjustmentCircles = [];\n    }\n\n    // 停止视场更新定时器\n    this.stopFieldUpdateTimer();\n  },\n\n\n}\n</script>\n\n<style>\nbody {\n  background-color: black;\n  /* 禁用文本选择 */\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n\n  /* 禁用触摸操作 */\n  /* touch-action: none;\n  -ms-touch-action: none; */\n\n  /* 禁用双击缩放 */\n  -webkit-tap-highlight-color: transparent;\n\n  /* 禁用滚动和缩放 */\n  overscroll-behavior: none;\n  -webkit-overflow-scrolling: touch;\n\n  /* 禁用长按菜单 */\n  -webkit-touch-callout: none;\n\n  /* 禁用图片拖拽 */\n  -webkit-user-drag: none;\n  -khtml-user-drag: none;\n  -moz-user-drag: none;\n  -o-user-drag: none;\n}\n\n/* 确保画布元素也继承这些属性 */\ncanvas {\n  /* touch-action: none;\n  -ms-touch-action: none; */\n  -webkit-tap-highlight-color: transparent;\n  -webkit-user-drag: none;\n}\n\n/* 禁用所有元素的默认触摸行为 */\n/* * {\n  touch-action: none;\n  -ms-touch-action: none;\n} */\n\na {\n  color: #82b1ff;\n}\n\na:link {\n  text-decoration-line: none;\n}\n\n.divider_menu {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\nhtml {\n  overflow-y: visible;\n}\n\nhtml,\nbody,\n#app {\n  overflow-y: visible !important;\n  overflow-x: visible;\n  position: fixed !important;\n  width: 100%;\n  height: 100%;\n  padding: 0 !important;\n  font-size: 10px;\n}\n\n.fullscreen {\n  overflow-y: hidden;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  padding: 0 !important;\n}\n\n.click-through {\n  pointer-events: none;\n}\n\n.get-click {\n  pointer-events: all;\n}\n\n.dialog {\n  background: transparent;\n}\n\n.menu__content {\n  background-color: transparent !important;\n}\n\n#stel {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n}\n\n#stel-canvas {\n  width: 100%;\n  height: 100%;\n}\n\n#mainCamera-canvas {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n#guiderCamera-canvas {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.right_panel {\n  padding-right: 400px;\n}\n\n.v-btn {\n  margin-left: 8px;\n  margin-right: 8px;\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n\n.v-application--wrap {\n  min-height: 100% !important;\n}\n\n\n.my-custom-button {\n  background-color: #4CAF50;\n  /* 绿色背景 */\n  color: white;\n  /* 白色文字 */\n  padding: 15px 32px;\n  /* 内边距 */\n  text-align: center;\n  /* 文字居中 */\n  text-decoration: none;\n  /* 无文本装饰 */\n  display: inline-block;\n  /* 行内块显示 */\n  font-size: 16px;\n  /* 字体大小 */\n  margin: 4px 2px;\n  /* 外边距 */\n  cursor: pointer;\n  /* 鼠标样式 */\n  border: none;\n  /* 无边框 */\n}\n\n.connected-device {\n  color: #4dc251;\n}\n\n.btn-confirm {\n  width: 60px;\n  height: 30px;\n  background-color: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n}\n\n.btn-slider {\n  width: 20px;\n  height: 20px;\n  background-color: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n}\n\n.btn-confirm:active,\n.btn-slider:active {\n  transform: scale(0.95);\n  background-color: rgba(255, 255, 255, 0.5);\n}\n\n\n/* 配置项样式 */\n.config-item {\n  text-align: center;\n  width: 100%;\n  margin-bottom: 5px;\n}\n\n/* 配置项标题 */\n.config-title {\n  display: inline-block;\n  font-size: 15px;\n  color: rgba(255, 255, 255, 0.5);\n  user-select: none;\n  margin-top: 10px;\n  margin-bottom: 5px;\n}\n\n/* 配置输入框 */\n.config-input {\n  width: 150px;\n  display: inline-block;\n  margin: 5px 0;\n}\n\n/* 滑块容器 */\n.slider-container {\n  text-align: left;\n  height: 30px;\n  width: 150px;\n  display: inline-block;\n  margin-bottom: 20px;\n  position: relative;\n}\n\n/* 滑块标签 */\n.slider-label {\n  display: inline-block;\n  font-size: 15px;\n  color: rgba(255, 255, 255, 0.5);\n  user-select: none;\n  margin-bottom: 5px;\n}\n\n/* 滑块控制样式 */\n.slider-control {\n  position: absolute;\n  left: 30px;\n  width: calc(100% - 60px);\n}\n\n/* 提示控制样式 */\n.tip-field {\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n  /* 左标签 | 中值 | 右复制 */\n  align-items: center;\n  gap: 8px;\n  padding: 8px 4px 4px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n  /* 与其他输入项的下划线保持一致 */\n}\n\n.tip-label {\n  color: var(--v-theme-primary, #42a5f5);\n  font-size: 0.9rem;\n  line-height: 1.2;\n  white-space: nowrap;\n}\n\n.tip-value {\n  font-size: 1.25rem;\n  font-weight: 600;\n  letter-spacing: 0.02em;\n  user-select: text;\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", monospace;\n}\n\n.tip-copy {\n  margin-left: 4px;\n  opacity: 0.9;\n}\n\n/* 减少按钮样式 */\n.btn-minus {\n  position: absolute;\n  left: 5px;\n  transform: translateY(5px);\n}\n\n/* 增加按钮样式 */\n.btn-plus {\n  position: absolute;\n  right: 5px;\n  transform: translateY(5px);\n}\n\n/* 按钮内容居中 */\n.btn-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n}\n\n/* 按钮图标样式 */\n.btn-icon {\n  min-height: 10px;\n  pointer-events: none;\n}\n\n/* 开关样式 */\n.config-switch {\n  width: 150px;\n  display: inline-block;\n  margin-bottom: 0;\n  margin-top: 0;\n}\n\n/* 自定义滚动条样式 */\n.config-items-container::-webkit-scrollbar {\n  width: 6px;\n}\n\n.config-items-container::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n}\n\n.config-items-container::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.3);\n  border-radius: 3px;\n}\n\n.config-items-container::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.5);\n}\n\n/* Firefox滚动条样式 */\n.config-items-container {\n  scrollbar-width: thin;\n  scrollbar-color: rgba(255, 255, 255, 0.3) rgba(0, 0, 0, 0.1);\n}\n\n/* 参数容器滚动条样式 */\n.params-container {\n  overflow-y: auto;\n  height: 100%;\n}\n\n.params-container::-webkit-scrollbar {\n  width: 6px;\n}\n\n.params-container::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n}\n\n.params-container::-webkit-scrollbar-thumb {\n  background: white;\n  border-radius: 3px;\n}\n\n.params-container::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.8);\n}\n\n/* Firefox滚动条样式 */\n.params-container {\n  scrollbar-width: thin;\n  scrollbar-color: white rgba(0, 0, 0, 0.1);\n}\n\n/* 校准信息显示框样式 */\n.calibration-info-box {\n  position: fixed;\n  top: 50vh;\n  left: 50vw;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.9);\n  backdrop-filter: blur(15px);\n  border: 2px solid rgba(255, 165, 0, 0.8);\n  border-radius: 15px;\n  padding: 25px;\n  z-index: 10001;\n  min-width: 350px;\n  max-width: 450px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);\n}\n\n.calibration-content {\n  text-align: center;\n  color: white;\n}\n\n.calibration-title {\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 20px;\n  color: #FFA500;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\n}\n\n.calibration-message {\n  font-size: 16px;\n  line-height: 1.6;\n  margin-bottom: 20px;\n  color: #FFFFFF;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);\n}\n\n.calibration-progress {\n  font-size: 14px;\n  color: #FFA500;\n  font-weight: bold;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);\n}\n</style>"],"sourceRoot":"src"}]}