{"remainingRequest":"/app/node_modules/thread-loader/dist/cjs.js!/app/node_modules/babel-loader/lib/index.js!/app/node_modules/cache-loader/dist/cjs.js??ref--1-0!/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/ScheduleTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/app/src/components/ScheduleTable.vue","mtime":1747376444000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/app/node_modules/thread-loader/dist/cjs.js","mtime":1707125360000},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ScheduleTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"table-container\">\n    <table>\n      <thead>\n        <tr>\n          <!-- <th>序号</th> -->\n          <th>{{ $t('Target') }}</th>\n          <th>{{ $t('Ra/Dec') }}</th>\n          <th>{{ $t('Shoot Time') }}</th>\n          <th>{{ $t('Exp Time') }}</th>\n          <th>{{ $t('Filter No.') }}</th>\n          <th>{{ $t('Reps') }}</th>\n          <th>{{ $t('Type') }}</th>\n          <th>{{ $t('Refocus') }}</th>\n          <!-- <th>进度</th> -->\n        </tr>\n      </thead>\n    </table>\n    <div :style=\"{ 'max-height': containerMaxHeight + 'px' }\" class=\"scrollable-container\" @scroll=\"handleScrollB\" ref=\"listB\">\n      <table>\n        <tbody class=\"scrollable-body\">\n          <tr v-for=\"row in numberOfRows\" :key=\"row\" :class=\"{ selected: isSelectedRow(row) }\">\n            <td v-for=\"column in numberOfColumns\" :key=\"column\" :class=\"{ 'selected-cell': isSelected(row, column) }\"\n              @click=\"selectCell(row, column)\">\n              {{ cellValues[`${row}-${column}`] || '' }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n  \n<script>\nexport default {\n  data() {\n    return {\n      containerMaxHeight: 0,\n      selectedRow_: null,\n      selectedRow: null,\n      selectedColumn: null,\n      selectedCellValue: '', // 新增选中单元格内容的变量\n      numberOfRows: 8,\n      numberOfColumns: 8,\n      cellValues: {},\n      tableData: [],\n      \n      initialColumnValues: {\n        1: 'null ',\n        2: '',\n        3: 'Now',\n        4: '1 s',\n        5: 'L',\n        6: '1',\n        7: 'Light',\n        8: 'OFF',\n      },\n    };\n  },\n  created() {\n    this.$bus.$on('toggleSchedulePanel', this.setMaxHeight);\n\n    // 监听来自事件总线的滚动事件\n    this.$bus.$on('scrollEventA', (scrollTop) => {\n      // 使用 scrollTo 方法控制组件的滚动\n      this.$refs.listB.scrollTo(0, scrollTop);\n    });\n\n    this.$bus.$on('AddScheduleRow',this.AddScheduleRow);\n\n    this.$bus.$on('SelectedScheduleRow', this.SelectedScheduleRow);\n\n    this.$bus.$on('NoSelectedScheduleRow', this.NoSelectedScheduleRow);\n\n    this.$bus.$on('MoveScheduleRow',this.MoveScheduleRow);\n\n    this.$bus.$on('DeleteSelectedScheduleRow',this.DeleteSelectedScheduleRow);\n\n    this.$bus.$on('EditContent',this.EditContent);\n\n    this.$bus.$on('insertObjName',this.insertObjName);\n\n    this.$bus.$on('getTableData',this.getTableData);\n\n    this.$bus.$on('TargetRaDec',this.insertObjRaDec);\n\n    this.$bus.$on('StagingScheduleData',this.RecoveryScheduleData);\n\n    this.$bus.$on('TianWen',this.AddTianWenRow);\n\n  },\n  mounted() {\n    console.log('initialize ScheduleTable------------------------------');\n    // this.sendMessage('Vue_Command', 'getStagingScheduleData');\n    // 初始化表格数据\n    this.initializeTable();\n    this.$bus.$emit('AppSendMessage', 'Vue_Command', 'getStagingScheduleData');\n  },\n  methods: {\n    selectCell(row, column) {\n      this.selectedRow = row;\n      this.selectedColumn = column;\n\n      this.selectedCellValue = this.cellValues[`${row}-${column}`] || ''; // 获取选中单元格的内容\n      console.log(`selectCell: `, this.selectedCellValue);\n\n      if(column === 1)\n      {\n        this.$bus.$emit('KeyBoardMode','Target');\n      }\n      else if(column === 2)\n      {\n\n      }\n      else if(column === 3)\n      {\n        this.$bus.$emit('KeyBoardMode','Time');\n      }\n      else if(column === 4)\n      {\n        this.$bus.$emit('KeyBoardMode','ExpTime');\n      }\n      else if(column === 5)\n      {\n        this.$bus.$emit('KeyBoardMode','CFW');\n      }\n      else if(column === 6)\n      {\n        this.$bus.$emit('KeyBoardMode','Repeat');\n      }\n      else if(column === 7)\n      {\n        this.$bus.$emit('KeyBoardMode','Type');\n      }\n      else if(column === 8)\n      {\n        this.$bus.$emit('KeyBoardMode','Focus');\n      }\n\n      this.getTableData(false);\n    },\n\n    SelectedScheduleRow(index) {\n      this.selectedRow_ = index;\n    },\n\n    NoSelectedScheduleRow() {\n      this.selectedRow_ = null;\n    },\n\n    isSelected(row, column) {\n      return this.selectedRow === row && this.selectedColumn === column;\n    },\n\n    isSelectedRow(row) {\n      return this.selectedRow_ === row;\n    },\n\n    MoveScheduleRow(index) {\n      // 检查选中的行是否有效\n      if (this.selectedRow_ === null || index < 1 || index > this.numberOfRows || index === this.selectedRow_) {\n        return;\n      }\n\n      // 获取选中行的数据\n      const selectedRowData = {};\n      for (let column = 1; column <= this.numberOfColumns; column++) {\n        const key = `${this.selectedRow_}-${column}`;\n        selectedRowData[key] = this.cellValues[key] || '';\n      }\n\n      // 删除选中的行\n      if (this.selectedRow_ < index) {\n        // 如果选中的行在目标位置的下方，需要先删除再插入\n        for (let row = this.selectedRow_; row < index; row++) {\n          for (let column = 1; column <= this.numberOfColumns; column++) {\n            const currentKey = `${row}-${column}`;\n            const nextKey = `${row + 1}-${column}`;\n            this.cellValues[currentKey] = this.cellValues[nextKey] || '';\n          }\n        }\n      } else {\n        // 如果选中的行在目标位置的上方，直接插入\n        for (let row = this.selectedRow_; row > index; row--) {\n          for (let column = 1; column <= this.numberOfColumns; column++) {\n            const currentKey = `${row}-${column}`;\n            const prevKey = `${row - 1}-${column}`;\n            this.cellValues[currentKey] = this.cellValues[prevKey] || '';\n          }\n        }\n      }\n\n      // 在目标位置插入选中的行数据\n      for (let column = 1; column <= this.numberOfColumns; column++) {\n        const key = `${index}-${column}`;\n        this.$set(this.cellValues, key, selectedRowData[`${this.selectedRow_}-${column}`]);\n      }\n\n      // 更新选中的行索引\n      this.selectedRow_ = index;\n    },\n\n    DeleteSelectedScheduleRow(index) {\n      if (index >= 1 && index <= this.numberOfRows) {\n        // 更新 numberOfRows\n        this.numberOfRows -= 1;\n\n        // 删除 cellValues 中对应行的数据\n        for (let row = index; row <= this.numberOfRows; row++) {\n          for (let column = 1; column <= this.numberOfColumns; column++) {\n            const currentKey = `${row}-${column}`;\n            const nextKey = `${row + 1}-${column}`;\n            this.cellValues[currentKey] = this.cellValues[nextKey] || '';\n          }\n        }\n\n        // 删除最后一行的数据\n        for (let column = 1; column <= this.numberOfColumns; column++) {\n          const lastRowKey = `${this.numberOfRows + 1}-${column}`;\n          delete this.cellValues[lastRowKey];\n        }\n\n        // 如果删除的行是选中的行，取消选中状态\n        if (this.selectedRow_ === index) {\n          this.selectedRow_ = null;\n        } else if (this.selectedRow_ > index) {\n          // 如果删除的行在选中行的上方，需要更新选中行的索引\n          this.selectedRow_ -= 1;\n        }\n      }\n    },\n\n    getTableData(isStart) {\n      // this.$bus.$emit('getScheduleItemList');\n      // 清空原始表格数据\n      this.tableData = [];\n      // 遍历每一行\n      for (let row = 1; row <= this.numberOfRows; row++) {\n        // 检查第一列的单元格内容是否为 'null '\n        const firstColumnKey = `${row}-1`;\n        const firstColumnValue = this.cellValues[firstColumnKey];\n        \n        // const RepeatNumKey = `${row}-6`;\n        // const RepeatNum = this.cellValues[RepeatNumKey];\n\n        // 如果第一列的内容不是 'null '，则获取该行数据\n        if (firstColumnValue !== 'null ') {\n          let rowData = ['[']; // 在每一行的开头添加 [\n          // 遍历每一列\n          for (let column = 1; column <= this.numberOfColumns; column++) {\n            const key = `${row}-${column}`;\n            // 将单元格数据添加到当前行的数组中\n            rowData.push(this.cellValues[key] || '');\n          }\n          // rowData.push(']'); // 在每一行的结尾添加 ]\n          // 将当前行的数组添加到表格数据中\n          this.tableData.push(rowData);\n        }\n      }\n      // 输出表格数据\n      console.log('Table Data:', this.tableData);\n      if(isStart) {\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'ScheduleTabelData:'+ this.tableData);\n      } else {\n        this.$bus.$emit('AppSendMessage', 'Vue_Command', 'StagingScheduleData:'+ this.tableData);\n      }\n      \n    },\n\n    RecoveryScheduleData(text) {\n      console.log('RecoveryScheduleData: ', text);\n      const rowData = text.split('[');\n\n      // 循环遍历分割后的数组\n      for (let i = 1; i < rowData.length; i++) {\n        console.log('rowData: ', rowData[i]);\n\n        const colData = rowData[i].split(',');\n        for (let j = 1; j < colData.length; j++){\n          console.log('colData: ', colData[j]);\n          let key;\n          if(j === 1) {\n            key = `${i}-${1}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 2) {\n            key = `${i}-${2}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 3) {\n            key = `${i}-${2}`;\n            const currentValue = this.cellValues[key] || '';\n            this.cellValues[key] = currentValue + ',' + colData[j];\n          } else if (j === 4) {\n            key = `${i}-${3}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 5) {\n            key = `${i}-${4}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 6) {\n            key = `${i}-${5}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 7) {\n            key = `${i}-${6}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 8) {\n            key = `${i}-${7}`;\n            this.cellValues[key] = colData[j];\n          } else if (j === 9) {\n            key = `${i}-${8}`;\n            this.cellValues[key] = colData[j];\n          }\n        }\n      }\n    },\n\n    EditContent(text) {\n      if (this.selectedRow !== null && this.selectedColumn !== null) {\n        const key = `${this.selectedRow}-${this.selectedColumn}`;\n        if (this.selectedColumn === 5 || this.selectedColumn === 7 || this.selectedColumn === 8) {\n          // 如果 selectedColumn 为 5、7 或 8，则直接赋值给单元格内容\n          this.cellValues[key] = text;\n        } else if (this.selectedColumn === 1) {\n          const currentValue = this.cellValues[key] || '';\n          // console.log('currentValue', currentValue);\n          if (!isNaN(text)) {\n            // 如果 text 是数字，则将数字插入到现有文本的后面\n            this.cellValues[key] = currentValue + text;\n          } else if (text === 'Prefix' && currentValue.includes('null')) {\n            this.cellValues[key] = currentValue.replace('null', 'M');\n          } else if (text === 'Prefix' && currentValue === ' ') {\n            this.cellValues[key] = currentValue.replace(' ', 'M ');\n          } else if (text === 'Prefix' && currentValue.includes('M')) {\n            this.cellValues[key] = currentValue.replace('M', 'IC');\n          } else if (text === 'Prefix' && currentValue.includes('IC')) {\n            this.cellValues[key] = currentValue.replace('IC', 'NGC');\n          } else if (text === 'Prefix' && currentValue.includes('NGC')) {\n            this.cellValues[key] = currentValue.replace('NGC', 'M');\n          } else if (text === 'Delete') {\n            // 如果 text 是 \"Delete\"，则删除现有文本中数字部分的最后一位，但不能删除空格以及空格前的字母部分\n            const spaceIndex = currentValue.indexOf(' ');\n            if (spaceIndex !== -1) {\n              const numberPart = currentValue.slice(spaceIndex + 1);\n              if (numberPart.length > 0) {\n                this.cellValues[key] = currentValue.slice(0, spaceIndex + 1) + numberPart.slice(0, -1);\n              }\n            }\n          }\n          console.log('currentValue', this.cellValues[key]);\n          this.$bus.$emit('SearchName',this.cellValues[key]);\n        } else if (this.selectedColumn === 2) {\n          \n        } else if (this.selectedColumn === 3) {\n          const currentValue = this.cellValues[key] || '';\n          const textIsNumber = !isNaN(text);\n\n          if (textIsNumber) {\n            const currentLength = currentValue.length;\n            if (currentValue === 'Now') {\n              if (text < 3) {\n                const updatedValue = text + ':';\n                this.cellValues[key] = updatedValue;\n              }\n            } else if (currentLength === 2) {\n              const firstChar = currentValue.charAt(0);\n              if (firstChar > 1) {\n                if (text < 4) {\n                  const insertIndex = currentValue.indexOf(':');\n                  const updatedValue = currentValue.slice(0, insertIndex) + text + currentValue.slice(insertIndex);\n                  this.cellValues[key] = updatedValue;\n                }\n              } else {\n                const insertIndex = currentValue.indexOf(':');\n                const updatedValue = currentValue.slice(0, insertIndex) + text + currentValue.slice(insertIndex);\n                this.cellValues[key] = updatedValue;\n              }\n            } else if (currentLength === 3) {\n              if (text < 6) {\n                const updatedValue = currentValue + text;\n                this.cellValues[key] = updatedValue;\n              }\n            } else if (currentLength === 4) {\n              const updatedValue = currentValue + text;\n              this.cellValues[key] = updatedValue;\n            }\n          } else if (text === 'Delete') {\n            const currentLength = currentValue.length;\n            if (currentLength === 4 || currentLength === 5) {\n              const updatedValue = currentValue.slice(0, -1);\n              this.cellValues[key] = updatedValue;\n            } else if (currentLength === 3) {\n              const indexToDelete = currentValue.indexOf(':') - 1;\n              if (indexToDelete >= 0) {\n                const updatedValue = currentValue.slice(0, indexToDelete) + currentValue.slice(indexToDelete + 1);\n                this.cellValues[key] = updatedValue;\n              }\n            } else if (currentLength === 2) {\n              this.cellValues[key] = 'Now';\n            }\n          }\n        } else if (this.selectedColumn === 4) {\n          const currentValue = this.cellValues[key] || '';\n          if (!isNaN(text)) {\n            // 如果 text 是数字，则将数字插入到现有文本中空格前的数字后面\n            const spaceIndex = currentValue.indexOf(' ');\n            if (spaceIndex !== -1) {\n              this.cellValues[key] = currentValue.slice(0, spaceIndex) + text + currentValue.slice(spaceIndex);\n            } else {\n              this.cellValues[key] += text;\n            }\n          } else if (text === 'Delete') {\n            // 如果 text 为 \"Delete\"，则删除空格前的数字部分的最后一位\n            const spaceIndex = currentValue.indexOf(' ');\n            if (spaceIndex !== -1) {\n              const numberPart = currentValue.slice(0, spaceIndex);\n              if (numberPart.length > 0) {\n                this.cellValues[key] = numberPart.slice(0, -1) + currentValue.slice(spaceIndex);\n              }\n            }\n          } else if (text === 's/ms' && currentValue.includes('ms')) {\n            // 如果 text 是 \"ms\"，且现有文本包含 \"ms\"，则将 \"ms\" 修改为 \"s\"\n            this.cellValues[key] = currentValue.replace('ms', 's');\n          } else if (text === 's/ms' && currentValue.includes('s')) {\n            // 如果 text 是 \"s\"，且现有文本包含 \"s\"，则将 \"s\" 修改为 \"ms\"\n            this.cellValues[key] = currentValue.replace('s', 'ms');\n          } \n        } else if (text === 'Delete') {\n          // 如果 text 为 \"Delete\"，则删除单元格现有内容的最后一位\n          this.cellValues[key] = (this.cellValues[key] || '').slice(0, -1);\n        } else {\n          // 否则，在单元格现有内容的后面插入 text\n          this.cellValues[key] = (this.cellValues[key] || '') + text;\n        }\n      }\n    },\n\n    insertObjName(name) {\n      if (this.selectedRow !== null && this.selectedColumn !== null) {\n        const key = `${this.selectedRow}-${this.selectedColumn}`;\n        if (this.selectedColumn === 1) {\n          // 如果 selectedColumn 为 1，则直接赋值给单元格内容\n          this.cellValues[key] = ' ' + name;\n        }\n      }\n    },\n\n    insertObjRaDec(RaDec) {\n      if (this.selectedRow !== null && this.selectedColumn !== null) {\n        const key = `${this.selectedRow}-${this.selectedColumn + 1}`;\n        if (this.selectedColumn === 1) {\n          this.cellValues[key] = ' ' + RaDec;\n        }\n      }\n    },\n\n    setMaxHeight() {\n      const Height = window.innerHeight;\n      this.containerMaxHeight = Height - 130;\n    },\n    handleScrollB() {\n      this.$bus.$emit('scrollEventB', this.$refs.listB.scrollTop);\n      // console.log(`handleScrollB: `, this.$refs.listB.scrollTop);\n    },\n    AddScheduleRow() {\n      this.numberOfRows += 1;\n\n      for (let column = 1; column <= this.numberOfColumns; column++) {\n        const key = `${this.numberOfRows}-${column}`;\n        this.$set(this.cellValues, key, this.initialColumnValues[column] || '');\n      }\n\n    },\n    AddTianWenRow(notice_type, ra, dec) {\n      this.numberOfRows += 1;\n      const newinitialColumnValues = {\n        1: notice_type,\n        2: 'ra:'+ ra + ',dec:' + dec,\n        3: 'Now',\n        4: '1 s',\n        5: 'L',\n        6: '1',\n        7: 'Light',\n        8: 'OFF',\n      };\n      for (let column = 1; column <= this.numberOfColumns; column++) {\n        const key = `${this.numberOfRows}-${column}`;\n        this.$set(this.cellValues, key, newinitialColumnValues[column] || '');\n      }\n    },\n\n    initializeTable() {\n      // 为初始行添加默认值\n      for (let row = 1; row <= this.numberOfRows; row++) {\n        for (let column = 1; column <= this.numberOfColumns; column++) {\n          const key = `${row}-${column}`;\n          // 如果当前单元格没有值，则设置默认值\n          if (!this.cellValues[key]) {\n            const initialValue = this.initialColumnValues[column] || '';\n            this.$set(this.cellValues, key, initialValue);\n          }\n        }\n      }\n    },\n\n  },\n};\n</script>\n  \n<style>\n.table-container {\n  overflow-x: auto;\n  display: block;\n  scrollbar-width: thin; /* Firefox */\n  scrollbar-color: transparent transparent; /* Firefox */\n  width: calc(100% - 50px);\n  margin-left: auto;\n}\n\n.scrollable-container { \n  /*TODO: 设置最大高度，使内容超过该高度时出现滚动条 */\n  max-height: 260px;\n  /* height: calc(100% - 0px);  */\n  overflow-y: auto; /* 垂直方向上出现滚动条 */\n  position: relative; /* 使该容器相对定位，不会影响到表头的布局 */\n  \n  &::-webkit-scrollbar {\n    width: 0px; /* 设置滚动条宽度 */\n  }\n}\n\ntable {\n  width: calc(100% - 0px);\n  border-collapse: collapse;\n  /* This ensures that table borders are collapsed into a single border */\n  table-layout: fixed;\n}\n\ntd {\n  border: 1px solid #ddd;\n  text-align: center;\n  height: 40px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\nth {\n  border: 1px solid #ddd;\n  text-align: center;\n  height: 40px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(5px);\n  color: white;\n}\n\n.selected {\n  background-color: rgba(75, 155, 250, 0.7);\n  backdrop-filter: blur(5px);\n}\n\n.selected-cell {\n  background-color: rgba(51, 218, 121, 0.7);\n  backdrop-filter: blur(5px);\n}\n\n\n</style>\n"],"sourceRoot":"src/components"}]}