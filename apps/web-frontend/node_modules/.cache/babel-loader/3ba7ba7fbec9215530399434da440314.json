{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Focus.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Focus.vue","mtime":1761187254630},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1707125360000},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1707125450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Chart-Focus.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div\n      ref=\"linechart\"\n      :style=\"{ width: containerMaxWidth + 'px', height: 80 + 'px' }\"\n      class=\"linechart-panel\"\n      @mousedown=\"startDrag\"\n      @mousemove=\"dragging\"\n      @mouseup=\"endDrag\"\n      @touchstart=\"startDrag\"\n      @touchmove=\"dragging\"\n      @touchend=\"endDrag\"\n    ></div>\n    \n    <!-- 对焦结果状态框（使用全局弹层，附加到 body，避免被图表容器裁剪） -->\n    <v-dialog v-model=\"quadraticResult.show\" attach=\"body\" max-width=\"460\" overlay-color=\"black\" overlay-opacity=\"0.25\" persistent>\n      <v-scale-transition>\n        <v-card class=\"focus-status-card\">\n          <v-card-title class=\"focus-header\">\n            <div class=\"header-left\">\n              <v-icon small color=\"#33DA79\">mdi-check-circle</v-icon>\n              <span class=\"header-title\">{{ $t('Focus.status') }}</span>\n            </div>\n            <v-btn icon small class=\"close-btn\" @click=\"closePanel\">\n              <v-icon>mdi-close</v-icon>\n            </v-btn>\n          </v-card-title>\n          <v-divider class=\"divider\"></v-divider>\n          <v-card-text class=\"focus-content\">\n            <div class=\"focus-row\">\n              <span class=\"label\">{{ $t('Focus.bestPosition') }}</span>\n              <span class=\"value\">{{ getBestPositionDisplay() }}</span>\n            </div>\n            <div class=\"focus-row\">\n              <span class=\"label\">{{ $t('Focus.minHFR') }}</span>\n              <span class=\"value\">{{ quadraticResult.minHFR }}</span>\n            </div>\n            <div class=\"focus-row\">\n              <span class=\"label\">{{ $t('Focus.dataPoints') }}</span>\n              <span class=\"value\">{{ validDataPointCount }}</span>\n            </div>\n          </v-card-text>\n        </v-card>\n      </v-scale-transition>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'LineChart',\n  props: {\n    // 是否使用时间轴模式（也可通过总线 setFocusChartTimeMode 切换）\n    useTimeAxis: {\n      type: Boolean,\n      default: false\n    },\n    // 时间窗口长度（秒），仅在时间轴模式下生效\n    timeWindowSec: {\n      type: Number,\n      default: 60\n    }\n  },\n  data() {\n    return {\n      containerMaxWidth: 150,\n      // 非时间轴：散点数据（x 为电调位置）\n      chartData1_pos: [],\n      // 时间轴：散点数据（x 为时间戳）\n      chartData1_time: [],\n      chartData2: [],\n      chartData3: [],\n      xAxis_min: 0,\n      xAxis_max: 6000,\n      yAxis_min: 0,\n      yAxis_max: 30,\n      range: 4,\n      currentX: 0,\n      FWHMMax: 0,\n      isDragging: false,\n      startX: 0,\n      deltaX: 0,\n      x_min: -60000,\n      x_max: 60000,\n      // 时间轴模式\n      isTimeMode: false,\n      timeTicker: null,\n      // 可见性控制\n      isVisible: false,\n      ioObserver: null,\n      // 渲染调度\n      renderRafId: null,\n      renderScheduled: false,\n      pendingLowerBound: null,\n      pendingUpperBound: null,\n      // 线条数据来源：若为 null 则使用 quadraticParams 动态采样\n      lineDataFromPoints: null,\n      quadraticParams: null, // { a,b,c,x0? }\n      // 二次拟合结果显示（合并新增功能）\n      quadraticResult: {\n        show: true,\n        a: '0.000000',\n        b: '0.000000',\n        c: '0.000000',\n        bestPosition: '0.00',\n        minHFR: '0.000'\n      }\n    };\n  },\n  computed: {\n    // 合并新增：有效数据点数\n    validDataPointCount() {\n      const currentData = this.isTimeMode ? this.chartData1_time : this.chartData1_pos;\n      return currentData.length;\n    }\n  },\n  mounted() {\n    // 根据可见性启动/停止时间推进\n    const el = this.$refs.linechart;\n    if (window && 'IntersectionObserver' in window && el) {\n      this.ioObserver = new IntersectionObserver((entries) => {\n        const e = entries[0];\n        this.isVisible = !!(e && e.isIntersecting);\n        this.updateTickerByVisibility();\n      }, { threshold: 0.01 });\n      this.ioObserver.observe(el);\n    } else {\n      // 回退：不可见性未知时视为可见\n      this.isVisible = true;\n    }\n    document.addEventListener('visibilitychange', this.updateTickerByVisibility);\n\n    // 初始化时间轴模式（由 prop 控制）\n    this.isTimeMode = !!this.useTimeAxis;\n    this.updateTickerByVisibility();\n  },\n  created() {\n    this.$bus.$on('FocusPosition', this.changeRange_x);\n    // 合并：启用后端拟合显示\n    this.$bus.$on('fitQuadraticCurve', this.fitQuadraticCurve);\n    this.$bus.$on('fitQuadraticCurve_minPoint', this.fitQuadraticCurve_minPoint);\n\n    this.$bus.$on('ClearfitQuadraticCurve', this.clearChartData2);\n    this.$bus.$on('ClearAllData', this.ClearAllData);\n    this.$bus.$on('updateFocusChartWidth', this.initChart);\n    this.$bus.$on('addData_Point', this.addData_Point);\n    this.$bus.$on('addMinPointData_Point', this.addMinPointData_Point);\n    this.$bus.$on('addLineData_Point', this.addLineData_Point);\n    this.$bus.$on('setFocusChartRange', this.setFocusChartRange);\n    // 新增：时间轴模式控制与点追加\n    this.$bus.$on('setFocusChartTimeMode', this.setTimeMode);\n    this.$bus.$on('addFwhmNow', this.addFwhmPointNow);\n\n  },\n  beforeDestroy() {\n    this.teardownBusAndTimers();\n  },\n  destroyed() {\n    this.teardownBusAndTimers();\n  },\n  methods: {\n    getBestPositionDisplay() {\n      return this.quadraticResult.bestPosition;\n    },\n    closePanel() {\n      this.quadraticResult.show = false;\n    },\n    formatCoefficient(value) {\n      if (Math.abs(value) < 1e-6) return value.toExponential(6);\n      return value.toFixed(6);\n    },\n    \n    teardownBusAndTimers() {\n      this.$bus.$off('FocusPosition', this.changeRange_x);\n      this.$bus.$off('ClearfitQuadraticCurve', this.clearChartData2);\n      this.$bus.$off('ClearAllData', this.ClearAllData);\n      this.$bus.$off('updateFocusChartWidth', this.initChart);\n      this.$bus.$off('addData_Point', this.addData_Point);\n      this.$bus.$off('addMinPointData_Point', this.addMinPointData_Point);\n      this.$bus.$off('addLineData_Point', this.addLineData_Point);\n      this.$bus.$off('addQuadraticCurve', this.addLineData_Point);\n      this.$bus.$off('setFocusChartRange', this.setFocusChartRange);\n      this.$bus.$off('setFocusChartTimeMode', this.setTimeMode);\n      this.$bus.$off('addFwhmNow', this.addFwhmPointNow);\n      if (this.timeTicker) {\n        clearInterval(this.timeTicker);\n        this.timeTicker = null;\n      }\n      if (this.ioObserver) {\n        try { this.ioObserver.disconnect(); } catch (e) {}\n        this.ioObserver = null;\n      }\n      document.removeEventListener('visibilitychange', this.updateTickerByVisibility);\n    },\n    initChart(Width) {\n      this.containerMaxWidth = Width - 95;\n      const chartDom = this.$refs.linechart;\n      chartDom.style.width = this.containerMaxWidth + 'px';\n      this.myChart = echarts.init(chartDom);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    startDrag(event) {\n      if (this.isTimeMode) return; // 时间轴模式下禁用拖拽\n      this.isDragging = true;\n      const x = this.getClientX(event);\n      if (typeof x === 'number') this.startX = x;\n    },\n    dragging(event) {\n      if (this.isDragging && !this.isTimeMode) {\n        const x = this.getClientX(event);\n        if (typeof x !== 'number') return;\n        this.deltaX = (x - this.startX) * 10;\n        this.startX = x;\n        const windowWidth = this.xAxis_max - this.xAxis_min;\n        // 计算新的范围并做边界裁剪\n        let newMin = this.xAxis_min - this.deltaX;\n        const minAllowed = this.x_min;\n        const maxAllowed = this.x_max - windowWidth;\n        if (maxAllowed < minAllowed) {\n          // 安全处理：若设置不合理，回退到不移动\n          newMin = this.x_min;\n        } else {\n          newMin = Math.max(minAllowed, Math.min(maxAllowed, newMin));\n        }\n        this.xAxis_min = newMin;\n        this.xAxis_max = newMin + windowWidth;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n      }\n    },\n    getClientX(e) {\n      if (e && e.touches && e.touches.length) return e.touches[0].clientX;\n      if (e && e.changedTouches && e.changedTouches.length) return e.changedTouches[0].clientX;\n      if (typeof e.clientX === 'number') return e.clientX;\n      return undefined;\n    },\n    endDrag() {\n      this.isDragging = false;\n      this.deltaX = 0;\n      // this.$bus.$emit('setTargetPosition', (this.xAxis_min + this.xAxis_max) / 2);\n    },\n    scheduleRender(lowerBound, upperBound) {\n      this.pendingLowerBound = lowerBound;\n      this.pendingUpperBound = upperBound;\n      if (this.renderScheduled) return;\n      this.renderScheduled = true;\n      const cb = () => {\n        this.renderRafId = null;\n        this.renderScheduled = false;\n        this.renderChart(this.pendingLowerBound, this.pendingUpperBound);\n      };\n      if (typeof window !== 'undefined' && window.requestAnimationFrame) {\n        this.renderRafId = window.requestAnimationFrame(cb);\n      } else {\n        // 回退：无 rAF 时，使用微任务降低阻塞\n        Promise.resolve().then(cb);\n      }\n    },\n    renderChart(lowerBound, upperBound) {\n      const data1 = this.isTimeMode ? this.chartData1_time : this.chartData1_pos;\n      const y_max = data1.length > 0 ? Math.max(...data1.map(item => item[1])) * 2 : this.yAxis_max;\n      // 线数据：若传入系数，则根据当前视图范围动态采样，避免拖动后断裂或消失\n      let decData = [];\n      if (!this.isTimeMode) {\n        if (this.lineDataFromPoints && Array.isArray(this.lineDataFromPoints)) {\n          decData = this.lineDataFromPoints;\n        } else if (this.quadraticParams) {\n          const { a, b, c, x0 } = this.quadraticParams;\n          if (isFinite(a) && isFinite(b) && isFinite(c)) {\n            decData = this.generateQuadraticData(a, b, c, lowerBound, upperBound, isFinite(x0) ? x0 : 0);\n          }\n        } else {\n          decData = this.chartData2; // 兼容旧逻辑\n        }\n      }\n      \n      \n      const optionXAxis = this.isTimeMode\n        ? {\n            type: 'time',\n            min: Date.now() - this.timeWindowSec * 1000,\n            max: Date.now(),\n            axisLabel: {\n              color: 'white',\n              fontSize: 5,\n              formatter: function (value) {\n                const d = new Date(value);\n                const pad = (n) => (n < 10 ? '0' + n : '' + n);\n                return pad(d.getHours()) + ':' + pad(d.getMinutes()) + ':' + pad(d.getSeconds());\n              }\n            },\n            axisLine: { lineStyle: { color: 'rgba(200, 200, 200, 0.5)' } },\n            splitLine: {\n              show: true,\n              lineStyle: { color: 'rgba(128, 128, 128, 0.5)', width: 1, type: 'solid' }\n            }\n          }\n        : {\n            type: 'value',\n            min: lowerBound,\n            max: upperBound,\n            axisLine: { lineStyle: { color: 'rgba(200, 200, 200, 0.5)' } },\n            axisLabel: { color: 'white', fontSize: 5 },\n            splitLine: { show: true, lineStyle: { color: 'rgba(128, 128, 128, 0.5)', width: 1, type: 'solid' } }\n          };\n      const option = {\n        grid: {\n          left: '0%',\n          right: '2%',\n          bottom: '0%',\n          top: '10%',\n          containLabel: true\n        },\n        xAxis: optionXAxis,\n        yAxis: {\n          min: this.yAxis_min,\n          max: y_max,\n          axisLine: {\n            lineStyle: {\n              color: 'rgba(200, 200, 200, 0.5)'  // y轴线颜色\n            }\n          },\n          axisLabel: {\n            color: 'white',\n            fontSize: 5\n          },\n          splitNumber: 3,\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: 'rgba(128, 128, 128, 0.5)',\n              width: 1,\n              type: 'solid'\n            }\n          }\n        },\n        series: [\n          {\n            name: 'FWHM',\n            type: 'scatter',\n            data: data1,\n            itemStyle: {\n              color: 'red'\n            },\n            symbolSize: 4\n          },\n          !this.isTimeMode ? {\n            name: 'Dec',\n            type: 'line',\n            data: decData,\n            itemStyle: {\n              color: 'green'\n            },\n            lineStyle: {\n              width: 1\n            },\n            symbolSize: 0\n          } : null,\n          !this.isTimeMode ? {\n            name: 'minPoint',\n            type: 'scatter',\n            data: this.chartData3,\n            itemStyle: {\n              color: 'rgba(75, 155, 250, 0.7)'\n            },\n            symbolSize: 4\n          } : null,\n          !this.isTimeMode ? {\n            name: 'xMinLine',\n            type: 'line',\n            data: [\n              [this.x_min, this.yAxis_min],\n              [this.x_min, y_max]\n            ],\n            lineStyle: {\n              color: 'red',\n              width: 1\n            },\n            symbol: 'none'\n          } : null,\n          !this.isTimeMode ? {\n            name: 'xMaxLine',\n            type: 'line',\n            data: [\n              [this.x_max, this.yAxis_min],\n              [this.x_max, y_max]\n            ],\n            lineStyle: {\n              color: 'red',\n              width: 1\n            },\n            symbol: 'none'\n          } : null,\n          !this.isTimeMode ? {\n            name: 'currentPosition',\n            type: 'line',\n            data: [\n              [this.currentX, this.yAxis_min],\n              [this.currentX, y_max]\n            ],\n            lineStyle: {\n              color: 'green',\n              width: 1\n            },\n            symbol: 'none'\n          } : null\n        ]\n      };\n      // 过滤掉为 null 的 series 项\n      option.series = option.series.filter(Boolean);\n      // 使用 lazyUpdate 降低同步开销\n      this.myChart.setOption(option, false, true);\n    },\n    // 追加一个以\"当前时间\"为 x 的 FWHM 点（时间轴模式）\n    addFwhmPointNow(fwhm) {\n      // 确保 fwhm 是数字\n      const fwhmNum = typeof fwhm === 'number' ? fwhm : parseFloat(fwhm);\n      if (isNaN(fwhmNum) || fwhmNum <= 0) { return; }\n      \n      const now = Date.now();\n      const point = [now, fwhmNum];\n      this.chartData1_time.push(point);\n      \n      \n      // 仅保留窗口期内的数据\n      const minTs = now - this.timeWindowSec * 1000;\n      this.chartData1_time = this.chartData1_time.filter(p => p[0] >= minTs);\n      \n      // 强制重新渲染\n      if (this.myChart) { this.scheduleRender(this.xAxis_min, this.xAxis_max); }\n    },\n    // 开启/关闭时间轴模式\n    setTimeMode(flag) {\n      const enable = !!flag;\n      if (enable === this.isTimeMode) return;\n      this.isTimeMode = enable;\n      this.updateTickerByVisibility();\n      if (this.myChart) { this.myChart.clear(); }\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    stopTimeTicker() {\n      if (this.timeTicker) {\n        clearInterval(this.timeTicker);\n        this.timeTicker = null;\n      }\n    },\n    startTimeTicker() {\n      if (this.timeTicker) return;\n      this.timeTicker = setInterval(() => {\n        // 没有新点时也推动时间轴前进\n        if (this.myChart) {\n          this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        }\n      }, 1000);\n    },\n    updateTickerByVisibility() {\n      const docVisible = typeof document !== 'undefined' ? !document.hidden : true;\n      const shouldRun = this.isTimeMode && this.isVisible && docVisible;\n      if (shouldRun) this.startTimeTicker(); else this.stopTimeTicker();\n    },\n    addData_Point(x,y) {\n      const newDataPoint = [x, y];\n      try {\n        console.log('[Focus] add point:', JSON.stringify({ x, y }));\n      } catch (e) {}\n      const existingPointIndex = this.chartData1_pos.findIndex(point => point[0] === newDataPoint[0]);\n      if (existingPointIndex !== -1) {\n        // If the x value already exists, update the y value\n        if (newDataPoint[1] == 0 || newDataPoint[1] == this.chartData1_pos[existingPointIndex][1]) return;\n        this.chartData1_pos[existingPointIndex] = newDataPoint;\n      } else {\n        // If the x value does not exist, add the new data point\n        this.chartData1_pos.push(newDataPoint);\n      }\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    // 绘制折线/二次曲线\n    addLineData_Point(dataOrA, b, c) {\n      // 兼容：如果传入的是点数组，直接使用\n      if (Array.isArray(dataOrA)) {\n        this.lineDataFromPoints = dataOrA;\n        this.quadraticParams = null;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        return;\n      }\n\n      // 若传入的是系数对象 { a, b, c }\n      if (dataOrA && typeof dataOrA === 'object' &&\n          (typeof dataOrA.a === 'number' || typeof dataOrA.a === 'string') &&\n          (typeof dataOrA.b === 'number' || typeof dataOrA.b === 'string') &&\n          (typeof dataOrA.c === 'number' || typeof dataOrA.c === 'string')) {\n        const aNum = typeof dataOrA.a === 'number' ? dataOrA.a : parseFloat(dataOrA.a);\n        const bNum = typeof dataOrA.b === 'number' ? dataOrA.b : parseFloat(dataOrA.b);\n        const cNum = typeof dataOrA.c === 'number' ? dataOrA.c : parseFloat(dataOrA.c);\n        if (!isFinite(aNum) || !isFinite(bNum) || !isFinite(cNum)) {\n          this.scheduleRender(this.xAxis_min, this.xAxis_max);\n          return;\n        }\n        const centerX = typeof dataOrA.x0 === 'number' ? dataOrA.x0 : (typeof dataOrA.x0 === 'string' ? parseFloat(dataOrA.x0) : 0);\n        this.quadraticParams = { a: aNum, b: bNum, c: cNum, x0: isFinite(centerX) ? centerX : 0 };\n        this.lineDataFromPoints = null;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        return;\n      }\n\n      // 或者以三个独立参数形式传入 a, b, c\n      if ((typeof dataOrA === 'number' || typeof dataOrA === 'string') &&\n          (typeof b === 'number' || typeof b === 'string') &&\n          (typeof c === 'number' || typeof c === 'string')) {\n        const aNum = typeof dataOrA === 'number' ? dataOrA : parseFloat(dataOrA);\n        const bNum = typeof b === 'number' ? b : parseFloat(b);\n        const cNum = typeof c === 'number' ? c : parseFloat(c);\n        if (!isFinite(aNum) || !isFinite(bNum) || !isFinite(cNum)) {\n          this.scheduleRender(this.xAxis_min, this.xAxis_max);\n          return;\n        }\n        this.quadraticParams = { a: aNum, b: bNum, c: cNum };\n        this.lineDataFromPoints = null;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        return;\n      }\n\n      // 其他非法输入：不处理，仅刷新现状\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    // 合并：后端拟合结果处理（始终按二次曲线绘制）\n    fitQuadraticCurve(dataString) {\n      const parts = dataString.split(':');\n      if (parts.length >= 6) {\n        const a = parseFloat(parts[1]);\n        const b = parseFloat(parts[2]);\n        const c = parseFloat(parts[3]);\n        const bestPosition = parseFloat(parts[4]);\n        const minHFR = parseFloat(parts[5]);\n        try {\n          console.log('[Focus] fit params from backend:', JSON.stringify({ a, b, c, bestPosition, minHFR }));\n        } catch (e) {}\n        this.quadraticResult.a = this.formatCoefficient(a);\n        this.quadraticResult.b = this.formatCoefficient(b);\n        this.quadraticResult.c = this.formatCoefficient(c);\n        this.quadraticResult.bestPosition = bestPosition.toFixed(2);\n        this.quadraticResult.minHFR = minHFR.toFixed(3);\n        this.quadraticResult.show = true;\n\n        this.generateQuadraticCurve(a, b, c, bestPosition);\n      }\n    },\n    generateQuadraticCurve(a, b, c, bestPosition) {\n      try {\n        console.log('[Focus] draw quadratic curve with params:', JSON.stringify({ a, b, c, bestPosition }));\n      } catch (e) {}\n      // 复用已有 generateQuadraticData 与 chartData1_pos\n      let minPos = 0;\n      if (this.chartData1_pos.length > 0) {\n        minPos = Math.min(...this.chartData1_pos.map(p => p[0]));\n      }\n      // 通过顶点位置 bestPosition 反推拟合时的原点偏移 originX：\n      // 若拟合形式为 y = a*(x-originX)^2 + b*(x-originX) + c，则顶点在 x = originX - b/(2a)\n      // 故 originX = bestPosition + b/(2a)\n      let originX = minPos;\n      if (isFinite(a) && Math.abs(a) > 1e-12 && isFinite(b) && isFinite(bestPosition)) {\n        originX = bestPosition + b / (2 * a);\n      }\n      let startX, endX, stepSize;\n      if (this.chartData1_pos.length > 0) {\n        const dataMinX = Math.min(...this.chartData1_pos.map(p => p[0]));\n        const dataMaxX = Math.max(...this.chartData1_pos.map(p => p[0]));\n        const dataRange = dataMaxX - dataMinX;\n        const extension = Math.max(dataRange * 0.2, 1000);\n        startX = dataMinX - extension;\n        endX = dataMaxX + extension;\n        stepSize = Math.max(Math.floor(dataRange / 100), 20);\n      } else {\n        const range = 5000;\n        startX = bestPosition - range;\n        endX = bestPosition + range;\n        stepSize = 50;\n      }\n      // 针对 |a| 很小时扩展范围以可见曲率\n      const minA = 1e-16;\n      const targetDelta = 1.0; // 期望在可视范围内至少 ~1 的 HFR 变化\n      const curvatureRange = Math.sqrt(targetDelta / Math.max(Math.abs(a), minA));\n      startX = Math.min(startX, bestPosition - curvatureRange, this.xAxis_min);\n      endX = Math.max(endX, bestPosition + curvatureRange, this.xAxis_max);\n\n      const curve = [];\n      for (let x = startX; x <= endX; x += stepSize) {\n        const rx = x - originX;\n        const y = a * rx * rx + b * rx + c;\n        if (isFinite(y) && y >= 0) curve.push([x, y]);\n      }\n      // 加密顶点附近\n      const fineRange = Math.max(stepSize * 2, 200, curvatureRange / 4);\n      const fineStep = Math.max(stepSize / 10, 5);\n      for (let off = -fineRange; off <= fineRange; off += fineStep) {\n        const x = bestPosition + off;\n        if (x >= startX && x <= endX) {\n          const rx = x - originX;\n          const y = a * rx * rx + b * rx + c;\n          if (isFinite(y) && y >= 0) curve.push([x, y]);\n        }\n      }\n      curve.sort((p, q) => p[0] - q[0]);\n      this.chartData2 = curve;\n      if (curve.length > 0) {\n        this.xAxis_min = Math.min(this.xAxis_min, curve[0][0]);\n        this.xAxis_max = Math.max(this.xAxis_max, curve[curve.length - 1][0]);\n      }\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    // 删除线性分支，统一用二次曲线\n    // 生成一元二次曲线采样点\n    generateQuadraticData(a, b, c, xMin, xMax, centerX = 0) {\n      const start = Number.isFinite(xMin) ? xMin : 0;\n      const end = Number.isFinite(xMax) ? xMax : 100;\n      const span = end - start;\n      const samples = Math.max(2, Math.min(400, Math.ceil(span / 50))); // 根据范围自适应采样密度\n      const step = span / samples || 1;\n      const data = [];\n      // 通过 x0(centerX) 作为拟合原点：y = a*(x-x0)^2 + b*(x-x0) + c\n      for (let x = start; x <= end; x += step) {\n        const t = x - centerX;\n        const y = a * t * t + b * t + c;\n        data.push([x, y]);\n      }\n      // 确保包含尾点\n      if (data.length === 0 || data[data.length - 1][0] < end) {\n        const tEnd = end - centerX;\n        const yEnd = a * tEnd * tEnd + b * tEnd + c;\n        data.push([end, yEnd]);\n      }\n      return data;\n    },\n    addMinPointData_Point(x,y) {\n      const newDataPoint = [x, y];\n      this.chartData3.push(newDataPoint);\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    // 更改显示的x轴范围\n    changeRange_x(current, target) {\n      this.xAxis_min = Number(current) - 3000;\n      this.xAxis_max = Number(current) + 3000;\n      this.currentX = current;\n      \n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n\n    // 清除数据\n    clearChartData1() {\n      this.chartData1_pos = [];\n      this.chartData1_time = [];\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    clearChartData2() {\n      this.chartData2 = [];\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    ClearAllData() {\n      this.chartData1_pos = [];\n      this.chartData1_time = [];\n      this.chartData2 = [];\n      this.chartData3 = [];\n      this.yAxis_max = 30;\n      this.FWHMMax = 15;\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    // 切换显示范围\n    RangeSwitch() {\n      if (this.range === 4) {\n        this.range = 2;\n        this.yAxis_min = -2;\n        this.yAxis_max = 2;\n      } else if (this.range === 2) {\n        this.range = 1;\n        this.yAxis_min = -1;\n        this.yAxis_max = 1;\n      } else if (this.range === 1) {\n        this.range = 4;\n        this.yAxis_min = -4;\n        this.yAxis_max = 4;\n      }\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    // 更新FWHM\n    // UpdateFWHM(FWHM) {\n    //   const newDataPoint = [this.currentX, FWHM];\n    //   this.addData_Point(newDataPoint);\n    //   // console.log(\"QHYCCD | UpdateFWHM:\", newDataPoint);\n    //   // this.$bus.$emit('SendConsoleLogMsg', 'UpdateFWHM:' + newDataPoint, 'info');\n    //   this.renderChart(this.xAxis_min, this.xAxis_max);\n    // },\n    // 拟合二次曲线\n    // fitQuadraticCurve(x, y) {\n    //   const newDataPoint = [x, y];\n    //   this.addData_Line(newDataPoint);\n    // },\n    // 拟合二次曲线最小点\n    // fitQuadraticCurve_minPoint(x, y) {\n    //   console.log(\"QHYCCD | minPoint:\", x, ',', y);\n    //   this.$bus.$emit('SendConsoleLogMsg', 'minPoint:' + x + ',' + y, 'info');\n    //   this.chartData3 = [];\n    //   const newDataPoint = [x, y];\n    //   this.chartData3.push(newDataPoint);\n    // },\n    setFocusChartRange(lowerBound, upperBound) {\n      if (typeof lowerBound === 'string') {\n        lowerBound = parseInt(lowerBound);\n      }\n      if (typeof upperBound === 'string') {\n        upperBound = parseInt(upperBound);\n      }\n      if (isNaN(lowerBound) || isNaN(upperBound)) {\n        return;\n      }\n      if (lowerBound === upperBound) {\n        return;\n      }\n      if (lowerBound < upperBound) {\n        this.x_min = lowerBound;\n        this.x_max = upperBound;\n      } else {\n        this.x_min = upperBound;\n        this.x_max = lowerBound;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.linechart-panel {\n  background-color: rgba(0, 0, 0, 0.0);\n  /* backdrop-filter: blur(5px); */\n  border-radius: 5px;\n  box-sizing: border-box;\n}\n\n/* 使对焦结果面板固定在全屏中央，而不是相对图表容器定位 */\n.focus-result-panel {\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 10000;\n  background-color: rgba(64, 64, 64, 0.9);\n  backdrop-filter: blur(5px);\n  border-radius: 10px;\n  border: 4px solid rgba(128, 128, 128, 0.5);\n  padding: 12px 16px;\n  width: min(420px, calc(100vw - 40px));\n  color: #ffffff;\n}\n\n.panel-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 8px;\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.panel-title {\n  font-size: 16px;\n}\n\n.close-button {\n  cursor: pointer;\n  font-size: 18px;\n  line-height: 1;\n}\n\n/* 美化后的焦点状态卡片样式 */\n.focus-status-card {\n  background: linear-gradient(145deg, rgba(55, 55, 55, 0.95), rgba(65, 65, 65, 0.95));\n  backdrop-filter: blur(6px);\n  border-radius: 12px !important;\n  border: 1px solid rgba(255, 255, 255, 0.08);\n  box-shadow: 0 10px 30px rgba(0,0,0,0.35), inset 0 1px 0 rgba(255,255,255,0.05);\n  color: #EDEFF2;\n}\n\n.focus-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 14px !important;\n}\n.focus-header .header-left {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n.focus-header .header-title {\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0.2px;\n}\n.close-btn {\n  opacity: 0.85;\n}\n.close-btn:hover { opacity: 1; }\n\n.divider {\n  opacity: 0.15;\n}\n\n.focus-content {\n  padding: 12px 14px 16px 14px !important;\n}\n.focus-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0;\n}\n.focus-row + .focus-row {\n  border-top: 1px dashed rgba(255, 255, 255, 0.08);\n}\n.label {\n  color: #C9D1D9;\n  opacity: 0.9;\n  font-size: 13px;\n}\n.value {\n  color: #FFFFFF;\n  font-weight: 600;\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n}\n</style>\n"],"sourceRoot":"src/components"}]}