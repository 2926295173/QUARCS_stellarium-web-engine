{"remainingRequest":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Focus.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/src/components/Chart-Focus.vue","mtime":1760160652007},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1756885033541},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1756885034172},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/babel-loader/lib/index.js","mtime":1756885033526},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1756885033541},{"path":"/home/quarcs/workspace/QUARCS/QUARCS_stellarium-web-engine/apps/web-frontend/node_modules/vue-loader/lib/index.js","mtime":1756885034208}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Chart-Focus.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div\n      ref=\"linechart\"\n      :style=\"{ width: containerMaxWidth + 'px', height: 80 + 'px' }\"\n      class=\"linechart-panel\"\n      @mousedown=\"startDrag\"\n      @mousemove=\"dragging\"\n      @mouseup=\"endDrag\"\n      @touchstart=\"startDrag\"\n      @touchmove=\"dragging\"\n      @touchend=\"endDrag\"\n    ></div>\n    \n    <!-- 对焦结果状态框 -->\n    <div class=\"focus-result-panel\" v-if=\"quadraticResult.show\">\n      <div class=\"panel-header\">\n        <div class=\"header-left\">\n          <div class=\"status-icon\" :class=\"{ 'success': !isHorizontalFit(), 'warning': isHorizontalFit() }\">\n            <i v-if=\"!isHorizontalFit()\" class=\"icon-check\">✓</i>\n            <i v-else class=\"icon-warning\">⚠</i>\n          </div>\n          <div class=\"panel-title\">对焦状态</div>\n        </div>\n        <div class=\"close-button\" @click=\"closePanel\">\n          <i class=\"icon-close\">×</i>\n        </div>\n      </div>\n      <div class=\"panel-content\">\n        <div class=\"status-row\">\n          <span class=\"label\">最佳位置</span>\n          <span class=\"value\" :class=\"{ 'error': isHorizontalFit() }\">{{ getBestPositionDisplay() }}</span>\n        </div>\n        <div class=\"status-row\">\n          <span class=\"label\">最小HFR</span>\n          <span class=\"value\">{{ quadraticResult.minHFR }}</span>\n        </div>\n        <div class=\"status-row\">\n          <span class=\"label\">数据点数</span>\n          <span class=\"value\">{{ validDataPointCount }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'LineChart',\n  props: {\n    // 是否使用时间轴模式（也可通过总线 setFocusChartTimeMode 切换）\n    useTimeAxis: {\n      type: Boolean,\n      default: false\n    },\n    // 时间窗口长度（秒），仅在时间轴模式下生效\n    timeWindowSec: {\n      type: Number,\n      default: 60\n    }\n  },\n  data() {\n    return {\n      containerMaxWidth: 150,\n      // 非时间轴：散点数据（x 为电调位置）\n      chartData1_pos: [],\n      // 时间轴：散点数据（x 为时间戳）\n      chartData1_time: [],\n      chartData2: [],\n      chartData3: [],\n      chartData4: [], // 异常点数据\n      xAxis_min: 0,\n      xAxis_max: 6000,\n      yAxis_min: 0,\n      yAxis_max: 30,\n      range: 4,\n      currentX: 0,\n      HFRMax: 0,\n      isDragging: false,\n      startX: 0,\n      deltaX: 0,\n      x_min: -60000,\n      x_max: 60000,\n      // 时间轴模式\n      isTimeMode: false,\n      timeTicker: null,\n      // 可见性控制\n      isVisible: false,\n      ioObserver: null,\n      // 渲染调度\n      renderRafId: null,\n      renderScheduled: false,\n      pendingLowerBound: null,\n      pendingUpperBound: null,\n      // 调试日志开关\n      debugRenderLogs: false,\n      // 线条数据来源：若为 null 则使用 quadraticParams 动态采样\n      lineDataFromPoints: null,\n      quadraticParams: null, // { a,b,c,x0? }\n      // 二次拟合结果显示\n      quadraticResult: {\n        show: false,\n        a: '0.000000',\n        b: '0.000000',\n        c: '0.000000',\n        bestPosition: '0.00',\n        minHFR: '0.000'\n      },\n      // 日志记录器\n      logger: {\n        info: (msg, data) => console.log(msg, data || ''),\n        warn: (msg, data) => console.warn(msg, data || ''),\n        error: (msg, data) => console.error(msg, data || ''),\n        debug: (msg, data) => console.debug(msg, data || '')\n      }\n    };\n  },\n  computed: {\n    // 计算有效数据点数量\n    validDataPointCount() {\n      const currentData = this.isTimeMode ? this.chartData1_time : this.chartData1_pos;\n      return currentData.length;\n    },\n    // 计算异常点数据\n    outlierDataPoints() {\n      const currentData = this.isTimeMode ? this.chartData1_time : this.chartData1_pos;\n      if (currentData.length < 4) return [];\n      // 这里可以添加异常点检测逻辑，暂时返回空数组\n      return [];\n    }\n  },\n  mounted() {\n    // 根据可见性启动/停止时间推进\n    const el = this.$refs.linechart;\n    if (window && 'IntersectionObserver' in window && el) {\n      this.ioObserver = new IntersectionObserver((entries) => {\n        const e = entries[0];\n        this.isVisible = !!(e && e.isIntersecting);\n        this.updateTickerByVisibility();\n      }, { threshold: 0.01 });\n      this.ioObserver.observe(el);\n    } else {\n      // 回退：不可见性未知时视为可见\n      this.isVisible = true;\n    }\n    document.addEventListener('visibilitychange', this.updateTickerByVisibility);\n\n    // 初始化时间轴模式（由 prop 控制）\n    this.isTimeMode = !!this.useTimeAxis;\n    this.updateTickerByVisibility();\n  },\n  created() {\n    this.$bus.$on('FocusPosition', this.changeRange_x);\n    // this.$bus.$on('UpdateHFR', this.UpdateHFR);\n    this.$bus.$on('fitQuadraticCurve', this.fitQuadraticCurve);\n    this.$bus.$on('fitQuadraticCurve_minPoint', this.fitQuadraticCurve_minPoint);\n\n    this.$bus.$on('ClearfitQuadraticCurve', this.clearChartData2);\n    this.$bus.$on('ClearAllData', this.ClearAllData);\n    this.$bus.$on('ClearFineData', this.ClearFineData);\n    this.$bus.$on('updateFocusChartWidth', this.initChart);\n    this.$bus.$on('addData_Point', this.addData_Point);\n    this.$bus.$on('addMinPointData_Point', this.addMinPointData_Point);\n    this.$bus.$on('addLineData_Point', this.addLineData_Point);\n    this.$bus.$on('setFocusChartRange', this.setFocusChartRange);\n    // 新增：时间轴模式控制与点追加\n    this.$bus.$on('setFocusChartTimeMode', this.setTimeMode);\n    this.$bus.$on('addFwhmNow', this.addFwhmPointNow);\n\n  },\n  beforeDestroy() {\n    this.teardownBusAndTimers();\n  },\n  destroyed() {\n    this.teardownBusAndTimers();\n  },\n  methods: {\n    // 检查是否为水平拟合（线性拟合）\n    isHorizontalFit() {\n      return this.quadraticResult.a === \"0.000000\" || Math.abs(parseFloat(this.quadraticResult.a)) < 1e-10;\n    },\n    // 获取最佳位置显示文本\n    getBestPositionDisplay() {\n      if (this.isHorizontalFit()) {\n        return \"线性拟合\";\n      }\n      return this.quadraticResult.bestPosition;\n    },\n    // 关闭面板\n    closePanel() {\n      this.quadraticResult.show = false;\n    },\n    // 验证拟合系数的有效性\n    validateFitCoefficients(a, b, c) {\n      // 检查系数是否为有效数字\n      if (!isFinite(a) || !isFinite(b) || !isFinite(c)) {\n        return false;\n      }\n      // 检查是否为水平线拟合（a接近0）\n      if (Math.abs(a) < 1e-10) {\n        return false; // 水平线拟合\n      }\n      return true;\n    },\n    teardownBusAndTimers() {\n      this.$bus.$off('FocusPosition', this.changeRange_x);\n      this.$bus.$off('ClearfitQuadraticCurve', this.clearChartData2);\n      this.$bus.$off('ClearAllData', this.ClearAllData);\n      this.$bus.$off('updateFocusChartWidth', this.initChart);\n      this.$bus.$off('addData_Point', this.addData_Point);\n      this.$bus.$off('addMinPointData_Point', this.addMinPointData_Point);\n      this.$bus.$off('addLineData_Point', this.addLineData_Point);\n      this.$bus.$off('addQuadraticCurve', this.addLineData_Point);\n      this.$bus.$off('setFocusChartRange', this.setFocusChartRange);\n      this.$bus.$off('setFocusChartTimeMode', this.setTimeMode);\n      this.$bus.$off('addFwhmNow', this.addFwhmPointNow);\n      if (this.timeTicker) {\n        clearInterval(this.timeTicker);\n        this.timeTicker = null;\n      }\n      if (this.ioObserver) {\n        try { this.ioObserver.disconnect(); } catch (e) {}\n        this.ioObserver = null;\n      }\n      document.removeEventListener('visibilitychange', this.updateTickerByVisibility);\n    },\n    initChart(Width) {\n      this.containerMaxWidth = Width - 95;\n      const chartDom = this.$refs.linechart;\n      chartDom.style.width = this.containerMaxWidth + 'px';\n      this.myChart = echarts.init(chartDom);\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    startDrag(event) {\n      if (this.isTimeMode) return; // 时间轴模式下禁用拖拽\n      this.isDragging = true;\n      const x = this.getClientX(event);\n      if (typeof x === 'number') this.startX = x;\n    },\n    dragging(event) {\n      if (this.isDragging && !this.isTimeMode) {\n        const x = this.getClientX(event);\n        if (typeof x !== 'number') return;\n        this.deltaX = (x - this.startX) * 10;\n        this.startX = x;\n        const windowWidth = this.xAxis_max - this.xAxis_min;\n        // 计算新的范围并做边界裁剪\n        let newMin = this.xAxis_min - this.deltaX;\n        const minAllowed = this.x_min;\n        const maxAllowed = this.x_max - windowWidth;\n        if (maxAllowed < minAllowed) {\n          // 安全处理：若设置不合理，回退到不移动\n          newMin = this.x_min;\n        } else {\n          newMin = Math.max(minAllowed, Math.min(maxAllowed, newMin));\n        }\n        this.xAxis_min = newMin;\n        this.xAxis_max = newMin + windowWidth;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n      }\n    },\n    getClientX(e) {\n      if (e && e.touches && e.touches.length) return e.touches[0].clientX;\n      if (e && e.changedTouches && e.changedTouches.length) return e.changedTouches[0].clientX;\n      if (typeof e.clientX === 'number') return e.clientX;\n      return undefined;\n    },\n    endDrag() {\n      this.isDragging = false;\n      this.deltaX = 0;\n      // this.$bus.$emit('setTargetPosition', (this.xAxis_min + this.xAxis_max) / 2);\n    },\n    scheduleRender(lowerBound, upperBound) {\n      this.pendingLowerBound = lowerBound;\n      this.pendingUpperBound = upperBound;\n      if (this.renderScheduled) return;\n      this.renderScheduled = true;\n      const cb = () => {\n        this.renderRafId = null;\n        this.renderScheduled = false;\n        this.renderChart(this.pendingLowerBound, this.pendingUpperBound);\n      };\n      if (typeof window !== 'undefined' && window.requestAnimationFrame) {\n        this.renderRafId = window.requestAnimationFrame(cb);\n      } else {\n        // 回退：无 rAF 时，使用微任务降低阻塞\n        Promise.resolve().then(cb);\n      }\n    },\n    renderChart(lowerBound, upperBound) {\n      const data1 = this.isTimeMode ? this.chartData1_time : this.chartData1_pos;\n      const y_max = data1.length > 0 ? Math.max(...data1.map(item => item[1])) * 2 : this.yAxis_max;\n      // 线数据：若传入系数，则根据当前视图范围动态采样，避免拖动后断裂或消失\n      let decData = [];\n      if (!this.isTimeMode) {\n        if (this.lineDataFromPoints && Array.isArray(this.lineDataFromPoints)) {\n          decData = this.lineDataFromPoints;\n        } else if (this.quadraticParams) {\n          const { a, b, c, x0 } = this.quadraticParams;\n          if (isFinite(a) && isFinite(b) && isFinite(c)) {\n            decData = this.generateQuadraticData(a, b, c, lowerBound, upperBound, isFinite(x0) ? x0 : 0);\n          }\n        } else {\n          decData = this.chartData2; // 兼容旧逻辑\n        }\n      }\n      \n      // 调试日志\n      if (this.debugRenderLogs && this.isTimeMode && data1.length > 0) {\n        console.log('Chart-Focus: renderChart (time mode)', {\n          dataPoints: data1.length,\n          latestPoint: data1[data1.length - 1],\n          y_max: y_max\n        });\n      }\n      const optionXAxis = this.isTimeMode\n        ? {\n            type: 'time',\n            min: Date.now() - this.timeWindowSec * 1000,\n            max: Date.now(),\n            axisLabel: {\n              color: 'white',\n              fontSize: 5,\n              formatter: function (value) {\n                const d = new Date(value);\n                const pad = (n) => (n < 10 ? '0' + n : '' + n);\n                return pad(d.getHours()) + ':' + pad(d.getMinutes()) + ':' + pad(d.getSeconds());\n              }\n            },\n            axisLine: { lineStyle: { color: 'rgba(200, 200, 200, 0.5)' } },\n            splitLine: {\n              show: true,\n              lineStyle: { color: 'rgba(128, 128, 128, 0.5)', width: 1, type: 'solid' }\n            }\n          }\n        : {\n            type: 'value',\n            min: lowerBound,\n            max: upperBound,\n            axisLine: { lineStyle: { color: 'rgba(200, 200, 200, 0.5)' } },\n            axisLabel: { color: 'white', fontSize: 5 },\n            splitLine: { show: true, lineStyle: { color: 'rgba(128, 128, 128, 0.5)', width: 1, type: 'solid' } }\n          };\n      const option = {\n        grid: {\n          left: '0%',\n          right: '2%',\n          bottom: '0%',\n          top: '10%',\n          containLabel: true\n        },\n        xAxis: optionXAxis,\n        yAxis: {\n          min: this.yAxis_min,\n          max: y_max,\n          axisLine: {\n            lineStyle: {\n              color: 'rgba(200, 200, 200, 0.5)'  // y轴线颜色\n            }\n          },\n          axisLabel: {\n            color: 'white',\n            fontSize: 5\n          },\n          splitNumber: 3,\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: 'rgba(128, 128, 128, 0.5)',\n              width: 1,\n              type: 'solid'\n            }\n          }\n        },\n        series: [\n          {\n            name: 'HFR',\n            type: 'scatter',\n            data: data1,\n            itemStyle: {\n              color: 'red',\n              borderColor: 'white',\n              borderWidth: 1\n            },\n            symbolSize: 8\n          },\n          !this.isTimeMode ? {\n            name: 'Dec',\n            type: 'line',\n            data: decData,\n            itemStyle: {\n              color: 'yellow'\n            },\n            lineStyle: {\n              width: 3,\n              type: 'solid'\n            },\n            symbolSize: 0\n          } : null,\n          !this.isTimeMode ? {\n            name: 'minPoint',\n            type: 'scatter',\n            data: this.chartData3,\n            itemStyle: {\n              color: 'rgba(75, 155, 250, 0.7)'\n            },\n            symbolSize: 4\n          } : null,\n          !this.isTimeMode ? {\n            name: 'xMinLine',\n            type: 'line',\n            data: [\n              [this.x_min, this.yAxis_min],\n              [this.x_min, y_max]\n            ],\n            lineStyle: {\n              color: 'red',\n              width: 1\n            },\n            symbol: 'none'\n          } : null,\n          !this.isTimeMode ? {\n            name: 'xMaxLine',\n            type: 'line',\n            data: [\n              [this.x_max, this.yAxis_min],\n              [this.x_max, y_max]\n            ],\n            lineStyle: {\n              color: 'red',\n              width: 1\n            },\n            symbol: 'none'\n          } : null,\n          !this.isTimeMode ? {\n            name: 'currentPosition',\n            type: 'line',\n            data: [\n              [this.currentX, this.yAxis_min],\n              [this.currentX, y_max]\n            ],\n            lineStyle: {\n              color: 'green',\n              width: 1\n            },\n            symbol: 'none'\n          } : null\n        ]\n      };\n      // 过滤掉为 null 的 series 项\n      option.series = option.series.filter(Boolean);\n      // 使用 lazyUpdate 降低同步开销\n      this.myChart.setOption(option, false, true);\n    },\n    // 追加一个以\"当前时间\"为 x 的 FWHM 点（时间轴模式）\n    addFwhmPointNow(fwhm) {\n      // 确保 fwhm 是数字\n      const fwhmNum = typeof fwhm === 'number' ? fwhm : parseFloat(fwhm);\n      if (isNaN(fwhmNum) || fwhmNum <= 0) {\n        console.warn('Chart-Focus: Invalid FWHM value:', fwhm);\n        return;\n      }\n      \n      const now = Date.now();\n      const point = [now, fwhmNum];\n      this.chartData1_time.push(point);\n      \n      console.log('Chart-Focus: addFwhmPointNow', {\n        fwhm: fwhmNum,\n        time: new Date(now).toLocaleTimeString(),\n        isTimeMode: this.isTimeMode,\n        dataLength: this.chartData1_time.length,\n        chartInitialized: !!this.myChart\n      });\n      \n      // 仅保留窗口期内的数据\n      const minTs = now - this.timeWindowSec * 1000;\n      this.chartData1_time = this.chartData1_time.filter(p => p[0] >= minTs);\n      \n      // 强制重新渲染\n      if (this.myChart) {\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n      } else {\n        console.warn('Chart-Focus: myChart not initialized yet');\n      }\n    },\n    // 开启/关闭时间轴模式\n    setTimeMode(flag) {\n      const enable = !!flag;\n      if (enable === this.isTimeMode) return;\n      this.isTimeMode = enable;\n      this.updateTickerByVisibility();\n      if (this.myChart) { this.myChart.clear(); }\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    stopTimeTicker() {\n      if (this.timeTicker) {\n        clearInterval(this.timeTicker);\n        this.timeTicker = null;\n      }\n    },\n    startTimeTicker() {\n      if (this.timeTicker) return;\n      this.timeTicker = setInterval(() => {\n        // 没有新点时也推动时间轴前进\n        if (this.myChart) {\n          this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        }\n      }, 1000);\n    },\n    updateTickerByVisibility() {\n      const docVisible = typeof document !== 'undefined' ? !document.hidden : true;\n      const shouldRun = this.isTimeMode && this.isVisible && docVisible;\n      if (shouldRun) this.startTimeTicker(); else this.stopTimeTicker();\n    },\n    addData_Point(x,y) {\n      this.logger.info('Chart-Focus.vue | 添加数据点:', { x, y });\n      \n      // 过滤HFR大于等于100的数据点\n      if (y >= 100) {\n        this.logger.warn('Chart-Focus.vue | HFR值过大(>=100)，忽略此数据点:', { x, y });\n        return;\n      }\n      \n      const newDataPoint = [x, y];\n      const existingPointIndex = this.chartData1_pos.findIndex(point => point[0] === newDataPoint[0]);\n      if (existingPointIndex !== -1) {\n        // If the x value already exists, update the y value\n        if (newDataPoint[1] == 0 || newDataPoint[1] == this.chartData1_pos[existingPointIndex][1]) return;\n        this.chartData1_pos[existingPointIndex] = newDataPoint;\n      } else {\n        // If the x value does not exist, add the new data point\n        this.chartData1_pos.push(newDataPoint);\n      }\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    // 绘制折线/二次曲线\n    addLineData_Point(dataOrA, b, c) {\n      // 兼容：如果传入的是点数组，直接使用\n      if (Array.isArray(dataOrA)) {\n        this.lineDataFromPoints = dataOrA;\n        this.quadraticParams = null;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        return;\n      }\n\n      // 若传入的是系数对象 { a, b, c }\n      if (dataOrA && typeof dataOrA === 'object' &&\n          (typeof dataOrA.a === 'number' || typeof dataOrA.a === 'string') &&\n          (typeof dataOrA.b === 'number' || typeof dataOrA.b === 'string') &&\n          (typeof dataOrA.c === 'number' || typeof dataOrA.c === 'string')) {\n        const aNum = typeof dataOrA.a === 'number' ? dataOrA.a : parseFloat(dataOrA.a);\n        const bNum = typeof dataOrA.b === 'number' ? dataOrA.b : parseFloat(dataOrA.b);\n        const cNum = typeof dataOrA.c === 'number' ? dataOrA.c : parseFloat(dataOrA.c);\n        if (!isFinite(aNum) || !isFinite(bNum) || !isFinite(cNum)) {\n          this.scheduleRender(this.xAxis_min, this.xAxis_max);\n          return;\n        }\n        const centerX = typeof dataOrA.x0 === 'number' ? dataOrA.x0 : (typeof dataOrA.x0 === 'string' ? parseFloat(dataOrA.x0) : 0);\n        this.quadraticParams = { a: aNum, b: bNum, c: cNum, x0: isFinite(centerX) ? centerX : 0 };\n        this.lineDataFromPoints = null;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        return;\n      }\n\n      // 或者以三个独立参数形式传入 a, b, c\n      if ((typeof dataOrA === 'number' || typeof dataOrA === 'string') &&\n          (typeof b === 'number' || typeof b === 'string') &&\n          (typeof c === 'number' || typeof c === 'string')) {\n        const aNum = typeof dataOrA === 'number' ? dataOrA : parseFloat(dataOrA);\n        const bNum = typeof b === 'number' ? b : parseFloat(b);\n        const cNum = typeof c === 'number' ? c : parseFloat(c);\n        if (!isFinite(aNum) || !isFinite(bNum) || !isFinite(cNum)) {\n          this.scheduleRender(this.xAxis_min, this.xAxis_max);\n          return;\n        }\n        this.quadraticParams = { a: aNum, b: bNum, c: cNum };\n        this.lineDataFromPoints = null;\n        this.scheduleRender(this.xAxis_min, this.xAxis_max);\n        return;\n      }\n\n      // 其他非法输入：不处理，仅刷新现状\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    // 生成一元二次曲线采样点\n    generateQuadraticData(a, b, c, xMin, xMax, centerX = 0) {\n      const start = Number.isFinite(xMin) ? xMin : 0;\n      const end = Number.isFinite(xMax) ? xMax : 100;\n      const span = end - start;\n      const samples = Math.max(2, Math.min(400, Math.ceil(span / 50))); // 根据范围自适应采样密度\n      const step = span / samples || 1;\n      const data = [];\n      for (let x = start; x <= end; x += step) {\n        const t = x - centerX;\n        const y = a * t * t + b * t + c;\n        data.push([x, y]);\n      }\n      // 确保包含尾点\n      if (data.length === 0 || data[data.length - 1][0] < end) {\n        const tEnd = end - centerX;\n        const yEnd = a * tEnd * tEnd + b * tEnd + c;\n        data.push([end, yEnd]);\n      }\n      return data;\n    },\n    addMinPointData_Point(x,y) {\n      const newDataPoint = [x, y];\n      this.chartData3.push(newDataPoint);\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    // 更改显示的x轴范围\n    changeRange_x(current, target) {\n      this.xAxis_min = Number(current) - 3000;\n      this.xAxis_max = Number(current) + 3000;\n      this.currentX = current;\n      console.log(\"QHYCCD | changeRange_x:\", current, this.xAxis_min, this.xAxis_max);\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n\n    // 清除数据\n    clearChartData1() {\n      this.chartData1_pos = [];\n      this.chartData1_time = [];\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    clearChartData2() {\n      this.chartData2 = [];\n      this.scheduleRender(this.xAxis_min, this.xAxis_max);\n    },\n    ClearAllData() {\n      this.chartData1_pos = [];\n      this.chartData1_time = [];\n      this.chartData2 = [];\n      this.chartData3 = [];\n      this.chartData4 = [];\n      this.quadraticResult.show = false;\n      this.yAxis_max = 30;\n      this.HFRMax = 15;\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    \n    // 清空精调数据（在精调开始时调用）\n    ClearFineData() {\n      this.logger.info('Chart-Focus.vue | 清空精调数据');\n      this.chartData1_pos = [];\n      this.chartData1_time = [];\n      this.chartData2 = [];\n      this.chartData3 = [];\n      this.chartData4 = [];\n      this.quadraticResult.show = false;\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    \n    // 更新异常点数据\n    updateOutlierData() {\n      const currentData = this.isTimeMode ? this.chartData1_time : this.chartData1_pos;\n      if (currentData.length >= 4) {\n        this.chartData4 = this.outlierDataPoints;\n        this.logger.debug('Chart-Focus.vue | 更新异常点数据，异常点数量:', this.chartData4.length);\n      } else {\n        this.chartData4 = [];\n      }\n    },\n    // 切换显示范围\n    RangeSwitch() {\n      if (this.range === 4) {\n        this.range = 2;\n        this.yAxis_min = -2;\n        this.yAxis_max = 2;\n      } else if (this.range === 2) {\n        this.range = 1;\n        this.yAxis_min = -1;\n        this.yAxis_max = 1;\n      } else if (this.range === 1) {\n        this.range = 4;\n        this.yAxis_min = -4;\n        this.yAxis_max = 4;\n      }\n      this.renderChart(this.xAxis_min, this.xAxis_max);\n    },\n    // 更新HFR\n    // UpdateHFR(HFR) {\n    //   const newDataPoint = [this.currentX, HFR];\n    //   this.addData_Point(newDataPoint);\n    //   // console.log(\"QHYCCD | UpdateHFR:\", newDataPoint);\n    //   // this.$bus.$emit('SendConsoleLogMsg', 'UpdateHFR:' + newDataPoint, 'info');\n    //   this.renderChart(this.xAxis_min, this.xAxis_max);\n    // },\n    // 拟合二次曲线\n    fitQuadraticCurve(dataString) {\n      this.logger.info('Chart-Focus.vue | 接收二次曲线数据:', dataString);\n      console.log('Chart-Focus.vue | 接收二次曲线数据:', dataString);\n      \n      const parts = dataString.split(':');\n      this.logger.info('Chart-Focus.vue | 解析后的数据部分:', parts);\n      console.log('Chart-Focus.vue | 解析后的数据部分:', parts);\n      \n      if (parts.length >= 6) {\n        const a = parseFloat(parts[1]);\n        const b = parseFloat(parts[2]);\n        const c = parseFloat(parts[3]);\n        const bestPosition = parseFloat(parts[4]);\n        const minHFR = parseFloat(parts[5]);\n        \n        this.logger.info('Chart-Focus.vue | 解析的数值:', { a, b, c, bestPosition, minHFR });\n        console.log('Chart-Focus.vue | 解析的数值:', { a, b, c, bestPosition, minHFR });\n        console.log('Chart-Focus.vue | 原始字符串部分:', parts);\n        \n        // 验证拟合系数的有效性\n        if (!this.validateFitCoefficients(a, b, c)) {\n          this.logger.warn('Chart-Focus.vue | 拟合系数无效，可能是水平线拟合');\n        }\n        \n        // 不再进行前端拟合计算，完全依赖后端提供的参数\n        this.logger.info('Chart-Focus.vue | 使用后端提供的拟合参数，不再进行前端拟合计算');\n        console.log('Chart-Focus.vue | 使用后端提供的拟合参数，不再进行前端拟合计算');\n        \n        // 验证参数是否合理\n        if (Math.abs(a) < 1e-10) {\n          this.logger.warn('Chart-Focus.vue | 警告：a系数接近0，这是线性拟合而不是二次拟合');\n          console.warn('Chart-Focus.vue | 警告：a系数接近0，这是线性拟合而不是二次拟合');\n          \n          // 对于线性拟合，我们需要特殊处理\n          this.generateLinearCurve(b, c, bestPosition);\n          \n          // 更新文本框显示（线性拟合）\n          this.quadraticResult.a = \"0.000000\"; // 显示为0\n          this.quadraticResult.b = b.toFixed(6);\n          this.quadraticResult.c = c.toFixed(6);\n          this.quadraticResult.bestPosition = \"线性拟合\";\n          this.quadraticResult.minHFR = minHFR.toFixed(3);\n          this.quadraticResult.show = true;\n          \n          return; // 直接返回，不执行二次曲线生成\n        }\n        \n        // 更新文本框显示\n        this.quadraticResult.a = a.toFixed(6);\n        this.quadraticResult.b = b.toFixed(6);\n        this.quadraticResult.c = c.toFixed(6);\n        this.quadraticResult.bestPosition = bestPosition.toFixed(2);\n        this.quadraticResult.minHFR = minHFR.toFixed(3);\n        this.quadraticResult.show = true;\n        \n        this.logger.info('Chart-Focus.vue | 文本框数据已更新:', this.quadraticResult);\n        \n        // 生成二次曲线数据点\n        this.generateQuadraticCurve(a, b, c, bestPosition);\n        \n        // 更新异常点数据\n        this.updateOutlierData();\n        \n        this.logger.info('Chart-Focus.vue | 二次拟合信息已更新:', this.quadraticResult);\n      } else {\n        this.logger.error('Chart-Focus.vue | 数据格式错误，部分数量不足:', parts.length);\n      }\n    },\n    \n    // 生成二次曲线数据点\n    generateQuadraticCurve(a, b, c, bestPosition) {\n      this.logger.info('Chart-Focus.vue | 开始生成二次曲线数据点:', { a, b, c, bestPosition });\n      \n      // 修正：后端发送的a、b、c系数是基于相对坐标的\n      // 需要找到数据点的最小位置作为偏移量，确保与后端算法一致\n      \n      // 从数据点中找到最小位置作为偏移量（修正：不使用bestPosition作为minPos）\n      let minPos = 0;\n      if (this.chartData1_pos.length > 0) {\n        minPos = Math.min(...this.chartData1_pos.map(point => point[0]));\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 坐标系统信息:');\n      this.logger.debug('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      this.logger.debug('Chart-Focus.vue | - 后端发送的最佳位置 (bestPosition):', bestPosition);\n      this.logger.debug('Chart-Focus.vue | - 拟合系数 a:', a, 'b:', b, 'c:', c);\n      \n      console.log('Chart-Focus.vue | 坐标系统信息:');\n      console.log('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      console.log('Chart-Focus.vue | - 后端发送的最佳位置 (bestPosition):', bestPosition);\n      console.log('Chart-Focus.vue | - 拟合系数 a:', a, 'b:', b, 'c:', c);\n      console.log('Chart-Focus.vue | - 当前数据点:', this.chartData1_pos);\n      \n      // 验证最佳位置的计算是否正确\n      const expectedBestRelativePos = -b / (2 * a);\n      const expectedBestAbsolutePos = expectedBestRelativePos + minPos;\n      this.logger.debug('Chart-Focus.vue | - 计算的最佳相对位置:', expectedBestRelativePos);\n      this.logger.debug('Chart-Focus.vue | - 计算的最佳绝对位置:', expectedBestAbsolutePos);\n      this.logger.debug('Chart-Focus.vue | - 位置差异:', Math.abs(expectedBestAbsolutePos - bestPosition));\n      \n      const curveData = [];\n      \n      // 智能确定曲线生成范围\n      let startX, endX, stepSize;\n      \n      if (this.chartData1_pos.length > 0) {\n        // 基于数据点范围生成曲线\n        const dataMinX = Math.min(...this.chartData1_pos.map(point => point[0]));\n        const dataMaxX = Math.max(...this.chartData1_pos.map(point => point[0]));\n        const dataRange = dataMaxX - dataMinX;\n        \n        // 扩展范围以确保曲线覆盖完整\n        const extension = Math.max(dataRange * 0.2, 1000); // 扩展20%或至少1000\n        startX = dataMinX - extension;\n        endX = dataMaxX + extension;\n        \n        // 根据数据范围调整步长\n        stepSize = Math.max(Math.floor(dataRange / 100), 20); // 至少100个点，步长至少20\n      } else {\n        // 如果没有数据点，使用默认范围\n        const range = 5000;\n        startX = bestPosition - range;\n        endX = bestPosition + range;\n        stepSize = 50;\n      }\n      \n      // 确保曲线覆盖当前X轴范围\n      startX = Math.min(startX, this.xAxis_min);\n      endX = Math.max(endX, this.xAxis_max);\n      \n      this.logger.debug('Chart-Focus.vue | 曲线生成范围:', startX, '到', endX, '步长:', stepSize);\n      \n      // 生成曲线数据点\n      for (let x = startX; x <= endX; x += stepSize) {\n        // 将绝对坐标转换为相对坐标进行计算（与后端算法一致）\n        const relativeX = x - minPos;\n        const y = a * relativeX * relativeX + b * relativeX + c;\n        \n        // 验证计算结果\n        if (isFinite(y) && y >= 0) {\n          curveData.push([x, y]);\n        } else {\n          this.logger.warn('Chart-Focus.vue | 警告：计算得到无效的Y值:', y, '在位置:', x, '相对位置:', relativeX);\n        }\n      }\n      \n      // 添加关键点：确保数据点位置在曲线上有精确的点\n      if (this.chartData1_pos.length > 0) {\n        for (const point of this.chartData1_pos) {\n          const x = point[0];\n          const relativeX = x - minPos;\n          const y = a * relativeX * relativeX + b * relativeX + c;\n          \n          if (isFinite(y) && y >= 0) {\n            // 检查是否已经存在这个点（避免重复）\n            const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - x) < stepSize / 2);\n            if (!exists) {\n              curveData.push([x, y]);\n            }\n          }\n        }\n        \n        // 添加最佳位置点及其附近的高精度点\n        const bestRelativeX = bestPosition - minPos;\n        const bestY = a * bestRelativeX * bestRelativeX + b * bestRelativeX + c;\n        if (isFinite(bestY) && bestY >= 0) {\n          const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - bestPosition) < stepSize / 2);\n          if (!exists) {\n            curveData.push([bestPosition, bestY]);\n          }\n          \n          // 在最佳位置附近添加更多高精度点\n          const fineRange = Math.max(stepSize * 2, 200); // 在最佳位置附近200范围内使用高精度\n          const fineStep = Math.max(stepSize / 10, 5);\n          for (let offset = -fineRange; offset <= fineRange; offset += fineStep) {\n            const x = bestPosition + offset;\n            if (x >= startX && x <= endX) {\n              const relativeX = x - minPos;\n              const y = a * relativeX * relativeX + b * relativeX + c;\n              if (isFinite(y) && y >= 0) {\n                const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - x) < fineStep / 2);\n                if (!exists) {\n                  curveData.push([x, y]);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      // 按X坐标排序\n      curveData.sort((a, b) => a[0] - b[0]);\n      \n      // 在数据点密集区域增加曲线密度\n      if (this.chartData1_pos.length > 0) {\n        const enhancedCurveData = [];\n        const fineStepSize = Math.max(stepSize / 5, 5); // 在密集区域使用更小的步长\n        \n        for (let i = 0; i < curveData.length - 1; i++) {\n          const currentPoint = curveData[i];\n          const nextPoint = curveData[i + 1];\n          \n          enhancedCurveData.push(currentPoint);\n          \n          // 检查当前段是否包含数据点\n          const hasDataPoint = this.chartData1_pos.some(point => \n            point[0] >= currentPoint[0] && point[0] <= nextPoint[0]\n          );\n          \n          // 如果包含数据点，在中间添加更多点\n          if (hasDataPoint && (nextPoint[0] - currentPoint[0]) > fineStepSize) {\n            const midPoints = Math.floor((nextPoint[0] - currentPoint[0]) / fineStepSize);\n            for (let j = 1; j < midPoints; j++) {\n              const x = currentPoint[0] + (j * fineStepSize);\n              const relativeX = x - minPos;\n              const y = a * relativeX * relativeX + b * relativeX + c;\n              if (isFinite(y) && y >= 0) {\n                enhancedCurveData.push([x, y]);\n              }\n            }\n          }\n        }\n        \n        // 添加最后一个点\n        if (curveData.length > 0) {\n          enhancedCurveData.push(curveData[curveData.length - 1]);\n        }\n        \n        // 更新曲线数据\n        curveData.length = 0;\n        curveData.push(...enhancedCurveData);\n      }\n      \n      // 添加关键点的验证\n      if (curveData.length > 0) {\n        // 验证最佳位置点的Y值\n        const bestPointY = a * (bestPosition - minPos) * (bestPosition - minPos) + b * (bestPosition - minPos) + c;\n        this.logger.debug('Chart-Focus.vue | 最佳位置点验证:');\n        this.logger.debug('Chart-Focus.vue | - 最佳位置:', bestPosition);\n        this.logger.debug('Chart-Focus.vue | - 最佳位置相对坐标:', bestPosition - minPos);\n        this.logger.debug('Chart-Focus.vue | - 最佳位置Y值:', bestPointY);\n        \n        // 验证数据点是否在曲线上\n        this.logger.debug('Chart-Focus.vue | 数据点与曲线对比:');\n        for (let i = 0; i < Math.min(this.chartData1_pos.length, 5); i++) {\n          const point = this.chartData1_pos[i];\n          const pointRelativeX = point[0] - minPos;\n          const pointY = a * pointRelativeX * pointRelativeX + b * pointRelativeX + c;\n          const actualY = point[1];\n          const diff = Math.abs(pointY - actualY);\n          this.logger.debug(`Chart-Focus.vue | - 点${i}: 位置=${point[0]}, 实际HFR=${actualY}, 曲线HFR=${pointY}, 差异=${diff}`);\n        }\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 生成的曲线数据点数量:', curveData.length);\n      this.logger.debug('Chart-Focus.vue | X轴范围:', startX, '到', endX);\n      this.logger.debug('Chart-Focus.vue | 前5个数据点:', curveData.slice(0, 5));\n      this.logger.debug('Chart-Focus.vue | 后5个数据点:', curveData.slice(-5));\n      \n      // 验证曲线形状\n      if (curveData.length > 0) {\n        const firstY = curveData[0][1];\n        const lastY = curveData[curveData.length - 1][1];\n        const middleIndex = Math.floor(curveData.length / 2);\n        const middleY = curveData[middleIndex][1];\n        \n        this.logger.debug('Chart-Focus.vue | 曲线形状验证 - 起始Y:', firstY, '中间Y:', middleY, '结束Y:', lastY);\n        \n        // 检查是否为有效的二次曲线（应该有最小值或最大值）\n        if (Math.abs(a) > 1e-10) {\n          const vertexX = -b / (2 * a) + minPos; // 顶点X坐标（转换回绝对坐标）\n          const vertexY = c - (b * b) / (4 * a); // 顶点Y坐标\n          this.logger.debug('Chart-Focus.vue | 二次曲线顶点位置:', vertexX, 'Y值:', vertexY);\n        }\n      }\n      \n      // 最终验证和清理曲线数据\n      const finalCurveData = curveData.filter(point => {\n        const [x, y] = point;\n        return isFinite(x) && isFinite(y) && y >= 0 && x >= startX && x <= endX;\n      });\n      \n      // 确保曲线数据按X坐标排序\n      finalCurveData.sort((a, b) => a[0] - b[0]);\n      \n      this.logger.debug('Chart-Focus.vue | 最终曲线数据验证:');\n      this.logger.debug('Chart-Focus.vue | - 原始数据点数量:', curveData.length);\n      this.logger.debug('Chart-Focus.vue | - 清理后数据点数量:', finalCurveData.length);\n      this.logger.debug('Chart-Focus.vue | - X轴范围:', finalCurveData.length > 0 ? `${finalCurveData[0][0]} 到 ${finalCurveData[finalCurveData.length - 1][0]}` : '无数据');\n      \n      this.chartData2 = finalCurveData;\n      this.logger.debug('Chart-Focus.vue | chartData2已更新，长度:', this.chartData2.length);\n      \n      // 调整X轴范围以显示完整曲线\n      if (finalCurveData.length > 0) {\n        this.xAxis_min = Math.min(this.xAxis_min, finalCurveData[0][0]);\n        this.xAxis_max = Math.max(this.xAxis_max, finalCurveData[finalCurveData.length - 1][0]);\n      }\n      \n      this.renderChart(this.xAxis_min, this.xAxis_max);\n      \n      this.logger.info('Chart-Focus.vue | 二次曲线数据点已生成并渲染完成');\n    },\n    \n    // 生成线性曲线数据点（当a=0时）\n    generateLinearCurve(b, c, bestPosition) {\n      this.logger.info('Chart-Focus.vue | 开始生成线性曲线数据点:', { b, c, bestPosition });\n      console.log('Chart-Focus.vue | 开始生成线性曲线数据点:', { b, c, bestPosition });\n      \n      // 对于线性拟合，我们需要找到数据点的最小位置作为偏移量\n      let minPos = 0;\n      if (this.chartData1_pos.length > 0) {\n        minPos = Math.min(...this.chartData1_pos.map(point => point[0]));\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 线性拟合坐标系统信息:');\n      this.logger.debug('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      this.logger.debug('Chart-Focus.vue | - 线性系数 b:', b, 'c:', c);\n      \n      console.log('Chart-Focus.vue | 线性拟合坐标系统信息:');\n      console.log('Chart-Focus.vue | - 数据点最小位置 (minPos):', minPos);\n      console.log('Chart-Focus.vue | - 线性系数 b:', b, 'c:', c);\n      \n      const curveData = [];\n      \n      // 智能确定曲线生成范围\n      let startX, endX, stepSize;\n      \n      if (this.chartData1_pos.length > 0) {\n        // 基于数据点范围生成曲线\n        const dataMinX = Math.min(...this.chartData1_pos.map(point => point[0]));\n        const dataMaxX = Math.max(...this.chartData1_pos.map(point => point[0]));\n        const dataRange = dataMaxX - dataMinX;\n        \n        // 扩展范围以确保曲线覆盖完整\n        const extension = Math.max(dataRange * 0.2, 1000);\n        startX = dataMinX - extension;\n        endX = dataMaxX + extension;\n        \n        // 根据数据范围调整步长\n        stepSize = Math.max(Math.floor(dataRange / 100), 20);\n      } else {\n        // 如果没有数据点，使用默认范围\n        const range = 5000;\n        startX = bestPosition - range;\n        endX = bestPosition + range;\n        stepSize = 50;\n      }\n      \n      // 确保曲线覆盖当前X轴范围\n      startX = Math.min(startX, this.xAxis_min);\n      endX = Math.max(endX, this.xAxis_max);\n      \n      this.logger.debug('Chart-Focus.vue | 线性曲线生成范围:', startX, '到', endX, '步长:', stepSize);\n      \n      // 生成线性曲线数据点\n      for (let x = startX; x <= endX; x += stepSize) {\n        // 将绝对坐标转换为相对坐标进行计算\n        const relativeX = x - minPos;\n        const y = b * relativeX + c; // 线性方程：y = bx + c\n        \n        // 验证计算结果\n        if (isFinite(y) && y >= 0) {\n          curveData.push([x, y]);\n        } else {\n          this.logger.warn('Chart-Focus.vue | 警告：计算得到无效的Y值:', y, '在位置:', x, '相对位置:', relativeX);\n        }\n      }\n      \n      // 添加关键点：确保数据点位置在曲线上有精确的点\n      if (this.chartData1_pos.length > 0) {\n        for (const point of this.chartData1_pos) {\n          const x = point[0];\n          const relativeX = x - minPos;\n          const y = b * relativeX + c;\n          \n          if (isFinite(y) && y >= 0) {\n            // 检查是否已经存在这个点（避免重复）\n            const exists = curveData.some(curvePoint => Math.abs(curvePoint[0] - x) < stepSize / 2);\n            if (!exists) {\n              curveData.push([x, y]);\n            }\n          }\n        }\n      }\n      \n      // 按X坐标排序\n      curveData.sort((a, b) => a[0] - b[0]);\n      \n      // 最终验证和清理曲线数据\n      const finalCurveData = curveData.filter(point => {\n        const [x, y] = point;\n        return isFinite(x) && isFinite(y) && y >= 0 && x >= startX && x <= endX;\n      });\n      \n      this.logger.debug('Chart-Focus.vue | 线性曲线最终数据验证:');\n      this.logger.debug('Chart-Focus.vue | - 原始数据点数量:', curveData.length);\n      this.logger.debug('Chart-Focus.vue | - 清理后数据点数量:', finalCurveData.length);\n      \n      this.chartData2 = finalCurveData;\n      this.logger.debug('Chart-Focus.vue | chartData2已更新（线性拟合），长度:', this.chartData2.length);\n      \n      // 调整X轴范围以显示完整曲线\n      if (finalCurveData.length > 0) {\n        this.xAxis_min = Math.min(this.xAxis_min, finalCurveData[0][0]);\n        this.xAxis_max = Math.max(this.xAxis_max, finalCurveData[finalCurveData.length - 1][0]);\n      }\n      \n      this.renderChart(this.xAxis_min, this.xAxis_max);\n      \n      this.logger.info('Chart-Focus.vue | 线性曲线数据点已生成并渲染完成');\n    },\n    \n    // 拟合二次曲线最小点\n    fitQuadraticCurve_minPoint(dataString) {\n      this.logger.info('Chart-Focus.vue | 接收最小点数据:', dataString);\n      \n      const parts = dataString.split(':');\n      if (parts.length >= 3) {\n        const bestPosition = parseFloat(parts[1]);\n        const minHFR = parseFloat(parts[2]);\n        \n        // 更新文本框显示\n        this.quadraticResult.bestPosition = bestPosition.toFixed(2);\n        this.quadraticResult.minHFR = minHFR.toFixed(3);\n        this.quadraticResult.show = true;\n        \n        // 添加最小点到图表\n        this.chartData3 = [];\n        this.chartData3.push([bestPosition, minHFR]);\n        this.renderChart(this.xAxis_min, this.xAxis_max);\n        \n        this.logger.info('Chart-Focus.vue | 最小点信息已更新:', { bestPosition, minHFR });\n      }\n    },\n    setFocusChartRange(lowerBound, upperBound) {\n      this.x_min = lowerBound;\n      this.x_max = upperBound;\n    },\n    \n    // ==================== 异常点检测方法 ====================\n    \n    /**\n     * 智能异常点检测\n     * 使用多种方法检测并去除异常点\n     */\n    removeOutliers(dataPoints) {\n      if (dataPoints.length < 4) {\n        return dataPoints; // 数据点太少，不进行异常值检测\n      }\n      \n      this.logger.info('Chart-Focus.vue | 开始智能异常值检测，原始数据点数量:', dataPoints.length);\n      \n      // 方法1：基于二次曲线拟合的残差分析\n      const cleanData1 = this.removeOutliersByResidual(dataPoints);\n      \n      // 方法2：基于HFR统计分布的IQR方法\n      const cleanData2 = this.removeOutliersByIQR(dataPoints);\n      \n      // 方法3：基于位置分布的异常检测\n      const cleanData3 = this.removeOutliersByPosition(dataPoints);\n      \n      // 选择保留最多数据点的方法，但确保至少有3个数据点\n      let bestCleanData = cleanData1;\n      if (cleanData2.length > bestCleanData.length && cleanData2.length >= 3) {\n        bestCleanData = cleanData2;\n      }\n      if (cleanData3.length > bestCleanData.length && cleanData3.length >= 3) {\n        bestCleanData = cleanData3;\n      }\n      \n      // 如果所有方法都过滤得太严格，使用最宽松的方法\n      if (bestCleanData.length < 3) {\n        this.logger.warn('Chart-Focus.vue | 所有异常值检测方法都过于严格，使用最宽松的方法');\n        bestCleanData = cleanData2; // IQR方法相对宽松\n        if (bestCleanData.length < 3) {\n          bestCleanData = dataPoints; // 如果还是不够，返回原始数据\n        }\n      }\n      \n      this.logger.info('Chart-Focus.vue | 智能异常值检测完成: 原始数据', dataPoints.length, '个点，清理后', bestCleanData.length, '个点');\n      \n      return bestCleanData;\n    },\n    \n    /**\n     * 基于二次曲线拟合残差的异常值检测\n     * 注意：现在主要依赖后端拟合结果，此方法仅作为备用\n     */\n    removeOutliersByResidual(dataPoints) {\n      if (dataPoints.length < 4) {\n        return dataPoints; // 需要至少4个点才能进行二次拟合\n      }\n      \n      // 简化异常值检测：直接使用IQR方法，不再进行二次拟合\n      const preliminaryClean = this.removeOutliersByIQR(dataPoints);\n      if (preliminaryClean.length < 3) {\n        return dataPoints;\n      }\n      \n      // 不再进行前端拟合，直接返回IQR清理后的数据\n      this.logger.info('Chart-Focus.vue | 异常值检测：使用IQR方法，不再进行前端拟合');\n      return preliminaryClean;\n    },\n    \n    /**\n     * 基于HFR统计分布的IQR异常值检测\n     */\n    removeOutliersByIQR(dataPoints) {\n      // 计算HFR的统计信息\n      const hfrValues = dataPoints.map(point => point[1]);\n      \n      // 排序\n      const sortedHfrValues = [...hfrValues].sort((a, b) => a - b);\n      \n      // 计算四分位数\n      const n = sortedHfrValues.length;\n      const q1 = sortedHfrValues[Math.floor(n / 4)];\n      const q3 = sortedHfrValues[Math.floor(3 * n / 4)];\n      const iqr = q3 - q1;\n      \n      // 定义异常值边界（使用2倍IQR，比1.5倍更宽松）\n      const lowerBound = q1 - 2.0 * iqr;\n      const upperBound = q3 + 2.0 * iqr;\n      \n      // 过滤异常值\n      const cleanData = dataPoints.filter(point => \n        point[1] >= lowerBound && point[1] <= upperBound\n      );\n      \n      this.logger.info('Chart-Focus.vue | 基于IQR的异常值检测: 原始数据', dataPoints.length, '个点，清理后', cleanData.length, '个点');\n      \n      return cleanData;\n    },\n    \n    /**\n     * 基于位置分布的异常值检测\n     */\n    removeOutliersByPosition(dataPoints) {\n      if (dataPoints.length < 4) {\n        return dataPoints;\n      }\n      \n      // 按位置排序\n      const sortedData = [...dataPoints].sort((a, b) => a[0] - b[0]);\n      \n      // 计算相邻点之间的距离\n      const distances = [];\n      for (let i = 1; i < sortedData.length; i++) {\n        const dist = sortedData[i][0] - sortedData[i-1][0];\n        distances.push(dist);\n      }\n      \n      // 计算距离的统计信息\n      const sortedDistances = [...distances].sort((a, b) => a - b);\n      const n = sortedDistances.length;\n      const medianDistance = sortedDistances[Math.floor(n / 2)];\n      const q3 = sortedDistances[Math.floor(3 * n / 4)];\n      const threshold = q3 + 1.5 * (q3 - medianDistance);\n      \n      // 识别位置异常的点\n      const cleanData = [];\n      cleanData.push(sortedData[0]); // 第一个点总是保留\n      \n      for (let i = 1; i < sortedData.length; i++) {\n        const dist = sortedData[i][0] - sortedData[i-1][0];\n        if (dist <= threshold) {\n          cleanData.push(sortedData[i]);\n        } else {\n          // 检查是否是孤立点（前后距离都很大）\n          let isIsolated = true;\n          if (i > 1) {\n            const prevDist = sortedData[i-1][0] - sortedData[i-2][0];\n            if (prevDist <= threshold) isIsolated = false;\n          }\n          if (i < sortedData.length - 1) {\n            const nextDist = sortedData[i+1][0] - sortedData[i][0];\n            if (nextDist <= threshold) isIsolated = false;\n          }\n          \n          if (!isIsolated) {\n            cleanData.push(sortedData[i]);\n          }\n        }\n      }\n      \n      this.logger.info('Chart-Focus.vue | 基于位置的异常值检测: 原始数据', dataPoints.length, '个点，清理后', cleanData.length, '个点');\n      \n      return cleanData;\n    },\n    \n    /**\n     * 执行二次曲线拟合\n     * 注意：现在主要依赖后端拟合结果，此方法仅用于测试和调试\n     * 返回拟合系数 {a, b, c}\n     */\n    performQuadraticFit(dataPoints) {\n      if (dataPoints.length < 3) {\n        return null;\n      }\n      \n      this.logger.info('Chart-Focus.vue | 开始二次曲线拟合，数据点数量:', dataPoints.length);\n      \n      // 标准化坐标：将位置转换为相对坐标\n      const minPos = Math.min(...dataPoints.map(point => point[0]));\n      this.logger.debug('Chart-Focus.vue | 最小位置 (偏移量):', minPos);\n      \n      // 构建最小二乘法正规方程组\n      let sum_x4 = 0, sum_x3 = 0, sum_x2 = 0, sum_x = 0, sum_1 = 0;\n      let sum_x2y = 0, sum_xy = 0, sum_y = 0;\n      \n      for (const point of dataPoints) {\n        const x = point[0] - minPos; // 相对坐标\n        const y = point[1];\n        \n        const x2 = x * x;\n        const x3 = x2 * x;\n        const x4 = x3 * x;\n        \n        sum_x4 += x4;\n        sum_x3 += x3;\n        sum_x2 += x2;\n        sum_x += x;\n        sum_1 += 1;\n        \n        sum_x2y += x2 * y;\n        sum_xy += x * y;\n        sum_y += y;\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 拟合统计量:', {\n        sum_x4, sum_x3, sum_x2, sum_x, sum_1,\n        sum_x2y, sum_xy, sum_y\n      });\n      \n      // 构建系数矩阵和常数向量\n      const matrix = [\n        [sum_x4, sum_x3, sum_x2],\n        [sum_x3, sum_x2, sum_x],\n        [sum_x2, sum_x, sum_1]\n      ];\n      \n      const constants = [sum_x2y, sum_xy, sum_y];\n      \n      this.logger.debug('Chart-Focus.vue | 系数矩阵:', matrix);\n      this.logger.debug('Chart-Focus.vue | 常数向量:', constants);\n      \n      // 求解线性方程组（使用高斯消元法）\n      const coefficients = this.solveLinearSystem(matrix, constants);\n      if (!coefficients) {\n        this.logger.error('Chart-Focus.vue | 线性方程组求解失败');\n        return null;\n      }\n      \n      const result = {\n        a: coefficients[0],\n        b: coefficients[1],\n        c: coefficients[2]\n      };\n      \n      this.logger.info('Chart-Focus.vue | 拟合系数:', result);\n      \n      // 验证拟合结果\n      if (!isFinite(result.a) || !isFinite(result.b) || !isFinite(result.c)) {\n        this.logger.error('Chart-Focus.vue | 拟合系数包含无效值');\n        return null;\n      }\n      \n      // 检查是否为有效的二次曲线（a不为0）\n      if (Math.abs(result.a) < 1e-10) {\n        this.logger.warn('Chart-Focus.vue | 警告：二次项系数接近0，可能是直线拟合');\n      }\n      \n      return result;\n    },\n    \n    /**\n     * 求解3x3线性方程组\n     */\n    solveLinearSystem(matrix, constants) {\n      // 高斯消元法求解线性方程组\n      const augmented = [];\n      \n      // 构建增广矩阵\n      for (let i = 0; i < 3; i++) {\n        augmented[i] = [...matrix[i], constants[i]];\n      }\n      \n      // 前向消元\n      for (let i = 0; i < 3; i++) {\n        // 寻找主元\n        let maxRow = i;\n        for (let k = i + 1; k < 3; k++) {\n          if (Math.abs(augmented[k][i]) > Math.abs(augmented[maxRow][i])) {\n            maxRow = k;\n          }\n        }\n        \n        // 交换行\n        if (maxRow !== i) {\n          [augmented[i], augmented[maxRow]] = [augmented[maxRow], augmented[i]];\n        }\n        \n        // 检查主元是否为零\n        if (Math.abs(augmented[i][i]) < 1e-10) {\n          this.logger.error('Chart-Focus.vue | 线性方程组奇异，无法求解');\n          return null;\n        }\n        \n        // 消元\n        for (let k = i + 1; k < 3; k++) {\n          const factor = augmented[k][i] / augmented[i][i];\n          for (let j = i; j < 4; j++) {\n            augmented[k][j] -= factor * augmented[i][j];\n          }\n        }\n      }\n      \n      // 回代求解\n      const solution = [0, 0, 0];\n      for (let i = 2; i >= 0; i--) {\n        solution[i] = augmented[i][3];\n        for (let j = i + 1; j < 3; j++) {\n          solution[i] -= augmented[i][j] * solution[j];\n        }\n        solution[i] /= augmented[i][i];\n      }\n      \n      return solution;\n    },\n    \n    // ==================== 测试和调试方法 ====================\n    \n    /**\n     * 测试后端数据接收功能\n     * 模拟后端发送的拟合数据来测试前端处理\n     */\n    testBackendDataReception() {\n      this.logger.info('Chart-Focus.vue | 开始测试后端数据接收功能');\n      console.log('Chart-Focus.vue | 开始测试后端数据接收功能');\n      \n      // 模拟后端发送的数据格式\n      const testData = \"fitQuadraticCurve:0.000001:-0.02:5.0:15731.13:1.930\";\n      this.logger.info('Chart-Focus.vue | 模拟后端数据:', testData);\n      console.log('Chart-Focus.vue | 模拟后端数据:', testData);\n      \n      // 调用拟合方法\n      this.fitQuadraticCurve(testData);\n    },\n    \n    /**\n     * 测试二次曲线拟合功能\n     * 注意：现在主要依赖后端拟合结果，此方法仅用于测试前端拟合算法\n     * 使用模拟数据验证拟合算法是否正确\n     */\n    testQuadraticFitting() {\n      this.logger.info('Chart-Focus.vue | 开始测试二次曲线拟合功能');\n      \n      // 生成测试数据：y = 0.0001 * (x - 3000)^2 + 2.0\n      const testData = [];\n      for (let i = 0; i < 10; i++) {\n        const x = 2000 + i * 200; // 位置从2000到3800\n        const y = 0.0001 * Math.pow(x - 3000, 2) + 2.0 + (Math.random() - 0.5) * 0.2; // 添加噪声\n        testData.push([x, y]);\n      }\n      \n      this.logger.debug('Chart-Focus.vue | 测试数据:', testData);\n      \n      // 执行拟合\n      const fitResult = this.performQuadraticFit(testData);\n      if (fitResult) {\n        this.logger.info('Chart-Focus.vue | 拟合结果:', fitResult);\n        \n        // 计算理论最佳位置（应该是3000）\n        const minPos = Math.min(...testData.map(point => point[0]));\n        const theoreticalBestPos = -fitResult.b / (2 * fitResult.a) + minPos;\n        this.logger.info('Chart-Focus.vue | 理论最佳位置:', theoreticalBestPos, '期望值: 3000');\n        \n        // 生成拟合曲线\n        this.generateQuadraticCurve(fitResult.a, fitResult.b, fitResult.c, theoreticalBestPos);\n        \n        this.logger.info('Chart-Focus.vue | 二次曲线拟合测试完成');\n      } else {\n        this.logger.error('Chart-Focus.vue | 二次曲线拟合测试失败');\n      }\n    },\n    \n  }\n}\n</script>\n\n<style scoped>\n.linechart-panel {\n  background-color: rgba(0, 0, 0, 0.0);\n  /* backdrop-filter: blur(5px); */\n  border-radius: 5px;\n  box-sizing: border-box;\n}\n\n.focus-result-panel {\n  position: fixed;\n  top: -200%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 300px;\n  background: linear-gradient(135deg, rgba(30, 30, 30, 0.95), rgba(45, 45, 45, 0.95));\n  border: 1px solid rgba(100, 100, 100, 0.3);\n  border-radius: 8px;\n  padding: 12px;\n  font-size: 12px;\n  color: #e0e0e0;\n  z-index: 1000;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(10px);\n  min-height: 60px;\n}\n\n.panel-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  padding-bottom: 6px;\n  border-bottom: 1px solid rgba(100, 100, 100, 0.2);\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n}\n\n.close-button {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  background-color: rgba(255, 255, 255, 0.1);\n  color: #b0b0b0;\n  font-size: 14px;\n  font-weight: bold;\n  transition: all 0.2s ease;\n}\n\n.close-button:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n  color: #ffffff;\n}\n\n.status-icon {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n  font-size: 12px;\n  font-weight: bold;\n}\n\n.status-icon.success {\n  background-color: rgba(76, 175, 80, 0.2);\n  color: #4caf50;\n  border: 1px solid rgba(76, 175, 80, 0.4);\n}\n\n.status-icon.warning {\n  background-color: rgba(255, 152, 0, 0.2);\n  color: #ff9800;\n  border: 1px solid rgba(255, 152, 0, 0.4);\n}\n\n.panel-title {\n  font-weight: 600;\n  color: #ffffff;\n  font-size: 13px;\n}\n\n.panel-content {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.status-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 2px 0;\n}\n\n.label {\n  color: #b0b0b0;\n  font-size: 11px;\n  font-weight: 500;\n}\n\n.value {\n  color: #ffffff;\n  font-size: 11px;\n  font-weight: 600;\n  font-family: 'Courier New', monospace;\n}\n\n.value.error {\n  color: #ff9800;\n  background: none;\n}\n\n.best-position {\n  margin-bottom: 2px;\n  color: #00ffff;\n  font-size: 9px;\n}\n\n.min-hfr {\n  color: #ff00ff;\n  font-size: 9px;\n}\n\n.fit-info {\n  color: #00ff00;\n  font-size: 8px;\n  margin-top: 2px;\n  font-style: italic;\n}\n</style>\n"],"sourceRoot":"src/components"}]}